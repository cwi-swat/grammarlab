--------------------ada::kellogg.bgf--------------------
GT_GT ::= ">>" ;
SELECT ::= "select" ;
REM ::= "rem" ;
LIMITED ::= "limited" ;
LE ::= "<=" ;
BASED_INTEGER ::= EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)* ;
DIV ::= "/" ;
ASSIGN ::= ":=" ;
TIC ::= "'" ;
SEMI ::= ";" ;
GT ::= ">" ;
TAGGED ::= "tagged" ;
USE ::= "use" ;
DIGITS ::= "digits" ;
ACCESS ::= "access" ;
PRIVATE ::= "private" ;
OTHERS ::= "others" ;
OR ::= "or" ;
GOTO ::= "goto" ;
DELAY ::= "delay" ;
MOD ::= "mod" ;
GE ::= ">=" ;
SUBTYPE ::= "subtype" ;
CHARACTER_LITERAL ::= "'" α "'" ;
RPAREN ::= ")" ;
FUNCTION ::= "function" ;
LT_ ::= "<" ;
RIGHT_SHAFT ::= "=>" ;
OF ::= "of" ;
RENAMES ::= "renames" ;
STAR ::= "*" ;
ENTRY ::= "entry" ;
ABS ::= "abs" ;
RECORD ::= "record" ;
MINUS ::= "-" ;
ALIASED ::= "aliased" ;
COMMENT_INTRO ::= "--" ;
RAISE ::= "raise" ;
DECLARE ::= "declare" ;
WITH ::= "with" ;
REVERSE ::= "reverse" ;
TERMINATE ::= "terminate" ;
COMMENT ::= COMMENT_INTRO α* "\n" | ("\r" "\n"?) ;
COLON ::= ":" ;
UNTIL ::= "until" ;
PRAGMA ::= "pragma" ;
XOR ::= "xor" ;
END ::= "end" ;
WHEN ::= "when" ;
TYPE ::= "type" ;
ELSE ::= "else" ;
ARRAY ::= "array" ;
NE ::= "/=" ;
GENERIC ::= "generic" ;
AND ::= "and" ;
COMMA ::= "," ;
PROCEDURE ::= "procedure" ;
NOT ::= "not" ;
AT ::= "at" ;
RETURN ::= "return" ;
CASE ::= "case" ;
EXPONENT ::= "e" ("+" | "-")? DIGIT+ ;
EXCEPTION ::= "exception" ;
PIPE ::= "|" ;
OUT ::= "out" ;
EQ ::= "=" ;
BOX ::= "<>" ;
IS ::= "is" ;
IDENTIFIER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("_"? "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
DOT ::= "." ;
ELSIF ::= "elsif" ;
FOR ::= "for" ;
NuLL ::= "null" ;
PACKAGE ::= "package" ;
NUMERIC_LIT ::= DIGIT+ (("#" BASED_INTEGER ("." BASED_INTEGER)? "#") | (("_" DIGIT+)+))? (("." DIGIT+ ("_" DIGIT+)* EXPONENT?) | EXPONENT)? ;
IN ::= "in" ;
CONSTANT ::= "constant" ;
LOOP ::= "loop" ;
SEPARATE ::= "separate" ;
ABSTRACT ::= "abstract" ;
BODY ::= "body" ;
LT_LT ::= "<<" ;
LPAREN ::= "(" ;
REQUEUE ::= "requeue" ;
EXIT ::= "exit" ;
THEN ::= "then" ;
RANGE ::= "range" ;
IF ::= "if" ;
EXPON ::= "**" ;
CHAR_STRING ::= """ α* """ ;
PLUS ::= "+" ;
DELTA ::= "delta" ;
CONCAT ::= "&" ;
DOT_DOT ::= ".." ;
WHILE ::= "while" ;
ABORT ::= "abort" ;
PROTECTED ::= "protected" ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
DO ::= "do" ;
BEGIN ::= "begin" ;
ACCEPT ::= "accept" ;
EXTENDED_DIGIT ::= DIGIT | "a" | "b" | "c" | "d" | "e" | "f" ;
TASK ::= "task" ;
WS_ ::= " " | "\t" | "\f" | "\r\n" | "\r" | "\n" ;
ALL ::= "all" ;
NEW ::= "new" ;
--------------------ada::kempe.bgf--------------------
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
general_access_modifier ::= "all" | "constant" ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
label ::= "<<" label_statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" body defining_identifier "is" "separate" ";" ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(<>)" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" body defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
discrete_choice ::= expression | discrete_range | "others" ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
guard ::= "when" condition "=>" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
character_literal ::= "'" graphic_character "'" ;
expression ::= (relation ("and" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" relation)*) | (relation ("or" "else" relation)*) | (relation ("xor" relation)*) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
exception_choice ::= exception_name | "others" ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
package_body_stub ::= "package" body defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
variant_part ::= "case" discriminant_direct_name "is" variant variant* "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
comment ::= "-" "-" non_end_of_line_character* ;
explicit_dereference ::= name "." "all" ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
selected_component ::= prefix "." selector_name ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
discrete_subtype_definition ::= discrete_subtype_indication | "range" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= "(<>)" | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
return_statement ::= "return" expression? ";" ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
package_renaming_declaration ::= "package" defining_program_unit_name renamespackage_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::laemmel-verhoef.bgf--------------------
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range_definition) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
general_access_modifier ::= "all" | "constant" ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
label ::= "<<" label_statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" body defining_identifier "is" "separate" ";" ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(" "<>" ")" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" body defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
terminate_alternative ::= "terminate" ";" ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
discrete_choice ::= expression | discrete_range | "others" ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
guard ::= "when" condition "=>" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
expression ::= (relation ("and" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" relation)*) | (relation ("or" "else" relation)*) | (relation ("xor" relation)*) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
range_definition ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
exception_choice ::= exception_name | "others" ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
formal_discrete_type_definition ::= "(" "<>" ")" ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
package_body_stub ::= "package" body defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
variant_part ::= "case" discriminant_direct_name "is" variant variant* "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
selected_component ::= prefix "." selector_name ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
discrete_subtype_definition ::= discrete_subtype_indication | "range" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= ("(" "<>" ")") | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
return_statement ::= "return" expression? ";" ;
range_constraint ::= "range" range_definition ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'" "(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
package_renaming_declaration ::= "package" defining_program_unit_name renamespackage_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::lncs-2219.bgf--------------------
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
general_access_modifier ::= "all" | "constant" ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
label ::= "<<" label_statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" ";" ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(<>)" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
discrete_choice ::= expression | discrete_range | "others" ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
guard ::= "when" condition "=>" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
character_literal ::= "'" graphic_character "'" ;
expression ::= (relation ("and" relation)*) | (relation ("or" relation)*) | (relation ("xor" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" "else" relation)*) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
exception_choice ::= exception_name | "others" ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
package_body_stub ::= "package" "body" defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
variant_part ::= "case" discriminant_direct_name "is" variant+ "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
comment ::= "-" "-" non_end_of_line_character* ;
explicit_dereference ::= name "." "all" ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
selected_component ::= prefix "." selector_name ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= "(<>)" | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
return_statement ::= "return" expression? ";" ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
package_renaming_declaration ::= "package" defining_program_unit_name "renames" package_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::lncs-4348.bgf--------------------
subprogram_declaration ::= overriding_indicator? subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
general_access_modifier ::= "all" | "constant" ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
nonlimited_with_clause ::= "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
label ::= "<<" label_statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" ";" ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" ";" ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
parameter_specification ::= (defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | (overriding_indicator? "procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | (overriding_indicator? "function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
interface_list ::= interface_subtype_mark ("and" interface_subtype_mark)* ;
limited_with_clause ::= "limited" "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
raise_statement ::= ("raise" ";") | ("raise" exception_name ("with" string_expression)? ";") ;
function_specification ::= "function" defining_designator parameter_and_result_profile ;
unknown_discriminant_part ::= "(<>)" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" ";" ;
array_component_association ::= (discrete_choice_list "=>" expression) | (discrete_choice_list "=><>") ;
overriding_indicator ::= "not"? "overriding" ;
single_task_declaration ::= "task" defining_identifier ("is" ("new" interface_list "with")? task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
record_component_association ::= ((component_choice_list "=>")? expression) | (component_choice_list "=><>") ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" callable_entity_name ";" ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" restriction_parameter_argument) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)? ";" defining_identifier_list ":" mode access_definition (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? ("limited" | "synchronized")? "new" ancestor_subtype_indication ("and" interface_list)? "with" "private" ";" ;
subprogram_body ::= overriding_indicator? subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
formal_package_association ::= generic_association | (generic_formal_parameter_selector_name "=><>") ;
null_statement ::= "null" ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ("is" "tagged")? ";" ;
object_renaming_declaration ::= (defining_identifier ":" null_exclusion? subtype_mark "renames" object_name ";") | (defining_identifier ":" access_definition "renames" object_name ";") ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" ("new" interface_list "with")? protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
non_end_of_line_character ::= "character" ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
discrete_choice ::= expression | discrete_range | "others" ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
guard ::= "when" condition "=>" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
character_literal ::= "'" graphic_character "'" ;
expression ::= (relation ("and" relation)*) | (relation ("or" relation)*) | (relation ("xor" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" "else" relation)*) ;
procedure_specification ::= "procedure" defining_program_unit_name parameter_profile ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
exception_choice ::= exception_name | "others" ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? access_definition (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
package_body_stub ::= "package" "body" defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
interface_type_definition ::= ("limited" | "task" | "protected" | "synchronized")? "interface" ("and" interface_list)? ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" ("new" interface_list "with")? task_definition)? ";" ;
variant_part ::= "case" discriminant_direct_name "is" variant+ "end" "case" ";" ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" ("new" interface_list "with")? protected_definition ";" ;
extended_return_statement ::= "return" defining_identifier ":" "aliased"? return_subtype_indication (":=" expression)? ("do" handled_sequence_of_statements "end" "return")? ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
comment ::= "-" "-" non_end_of_line_character* ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
selected_component ::= prefix "." selector_name ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" ";" ;
derived_type_definition ::= "abstract"? "limited"? "new" parent_subtype_indication (("and" interface_list)? record_extension_part)? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" | "null" ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
parameter_and_result_profile ::= (formal_part? "return" null_exclusion? subtype_mark) | (formal_part? "return" access_definition) ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= ("(" ("others" "=>")? "<>)") | (generic_actual_part?) | ("(" formal_package_association ("," formal_package_association)* ("," "others" "=><>")? ")") ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") | ("(" expression ("," expression)* "," "others" "=><>)") ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
discriminant_specification ::= (defining_identifier_list ":" null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
null_exclusion ::= "not" "null" ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
package_renaming_declaration ::= "package" defining_program_unit_name "renames" package_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
simple_return_statement ::= "return" expression? ";" ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
formal_derived_type_definition ::= "abstract"? ("limited" | "synchronized")? "new" subtype_mark (("and" interface_list)? "with" "private")? ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::cordy-hyaric.bgf--------------------
accept_statement_entry_index ::= "(" entry_index ")" ;
declare_declarative_part ::= "declare" IN eol declarative_part EX ;
relation ::= (simple_expression relational_operator_simple_expression?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression semi ;
discriminant_constraint ::= "(" {discriminant_association ","}* ")" ;
general_access_modifier ::= "all" | "constant" ;
package_body ::= NL "package" "body" defining_program_unit_name "is" IN blockeol declarative_part EX package_body_statements? "end" package_body_identifier? unitsemi ;
if_expression ::= "if" expression "then" expression elsif_expression* else_expression? ;
attribute_definition_clause ::= "for" local_name SPOFF "'" attribute_designator SPON "use" expression blocksemi ;
delay_relative_statement ::= "delay" expression semi ;
accept_statement ::= "accept" direct_name accept_statement_entry_index? parameter_profile accept_statement_statements? unitsemi ;
nonlimited_with_clause ::= "private"? "with" {with_name ","}+ semi ;
label ::= "<<" statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
unitsemi ::= ";" NL NL ;
component_clause ::= local_name "at" position "range" first_bit SP ".." SP last_bit semi ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" blocksemi ;
formal_derived_type_definition_modifier ::= "limited" | "synchronized" ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" blocksemi ;
indexed_component_component ::= "(" {index_expression ","}+ ")" ;
defining_identifier_list ::= {defining_identifier ","}+ ;
entry_barrier ::= "when" condition ;
single_task_declaration_definition_interface_list ::= "new" interface_list "with" ;
attribute_reference_component ::= SPOFF "'" attribute_designator SPON ;
generic_instantiation ::= ("package" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "procedure" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "function" defining_designator "is" generic_instantiation_clause) ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
interface_list ::= subtype_mark | (subtype_mark "and" interface_list) ;
limited_with_clause ::= "limited" "private"? "with" {with_name ","}+ semi ;
local_name ::= direct_name | (direct_name SPOFF "'" attribute_designator SPON) ;
protected_type_declaration_interface_list ::= "new" interface_list "with" ;
raise_statement ::= ("raise" semi) | ("raise" name raise_statement_expression? semi) ;
designator_parent_unit_name ::= parent_unit_name "." ;
function_specification ::= "function" defining_designator parameter_and_result_profile ;
unknown_discriminant_part ::= "(" "<>" ")" ;
generic_formal_part ::= "generic" generic_formal_parameter_declaration_or_use_clause* ;
raise_statement_expression ::= "with" expression ;
unconstrained_array_definition ::= "array" "(" {index_subtype_definition ","}+ ")" "of" component_definition ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" blocksemi ;
overriding_indicator ::= "not"? "overriding" ;
single_task_declaration ::= "task" defining_identifier single_task_declaration_definition? unitsemi ;
if_statement_elsif ::= EX "elsif" condition "then" IN eol sequence_of_statements ;
digits_constraint ::= "digits" expression range_constraint? ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
asynchronous_select ::= "select" IN eol triggering_alternative EX EX "then" "abort" IN eol abortable_part EX "end" "select" unitsemi ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" name blocksemi ;
terminate_alternative ::= "terminate" semi ;
elsif_expression ::= "elsif" expression "then" expression ;
if_statement ::= "if" condition "then" IN eol sequence_of_statements if_statement_elsif* if_statement_else? EX "end" "if" semi ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
package_specification ::= NL "package" defining_program_unit_name "is" IN blockeol basic_declarative_item* EX package_specification_private? "end" package_specification_identifier? ;
ordinary_fixed_point_definition ::= "delta" expression real_range_specification ;
protected_definition_private ::= EX "private" IN eol protected_element_declaration* ;
indexed_slice_type_conv_or_function_call_component ::= "(" {index_or_parameter_value ","}+ ")" ;
selective_accept_or_alternative ::= EX "or" IN eol guard? select_alternative ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" {discrete_subtype_definition ","}+ ")" "of" component_definition ;
record_type_definition_tagged ::= "abstract"? "tagged" ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol "abstract"? private_extension_declaration_modifier? "new" subtype_indication private_extension_declaration_interface_list? "with" "private" blocksemi ;
subprogram_body ::= NL overriding_indicator? subprogram_specification "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" designator? unitsemi ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" blocksemi ;
expression_or_null ::= expression | "<>" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
single_task_declaration_definition ::= "is" IN blockeol single_task_declaration_definition_interface_list? EX task_definition ;
formal_package_association ::= generic_association | (selector_name arrow "<>") ;
null_statement ::= "null" semi ;
object_renaming_declaration ::= (defining_identifier colon null_exclusion? subtype_mark "renames" name semi) | (defining_identifier colon access_definition "renames" name semi) ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? incomplete_type_declaration_modifier? blocksemi ;
record_representation_clause ::= "for" local_name "use" IN eol "record" mod_clause? IN eol component_clause* EX "end" "record" blocksemi EX ;
single_protected_declaration ::= "protected" defining_identifier "is" blockeol single_protected_declaration_interface_list? protected_definition unitsemi ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" name formal_package_actual_part semi ;
formal_concrete_subprogram_declaration_default ::= "is" subprogram_default ;
expression_or_aggregate ::= ("(" SPON expression ")") | (SPON aggregate) ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification formal_concrete_subprogram_declaration_default? semi ;
package_body_statements ::= "begin" IN eol handled_sequence_of_statements EX ;
discrete_choice ::= expression | discrete_range | "others" ;
exception_renaming_declaration ::= defining_identifier colon "exception" "renames" name semi ;
guard ::= "when" condition arrow ;
defining_program_unit_name_parent ::= parent_unit_name "." ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition blocksemi) | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item+) | (component_item* variant_part) | ("null" semi) ;
formal_private_type_definition_tagged ::= "abstract"? "tagged" ;
colon_equals ::= ":=" ;
generic_actual_part ::= "(" {generic_association ","}+ ")" ;
actual_parameter_part ::= "(" {parameter_association ","}+ ")" ;
procedure_specification ::= "procedure" defining_program_unit_name parameter_profile ;
attribute_designator ::= (identifier attribute_designator_expression?) | "access" | "delta" | "digits" ;
selected_component_component ::= "." selector_name ;
semi_discriminant_specification ::= ";" discriminant_specification ;
known_discriminant_part ::= "(" discriminant_specification_list ")" ;
wide_identifier ::= "[" stringlit "]" ;
loop_statement ::= loop_statement_identifier? iteration_scheme? "loop" IN eol sequence_of_statements EX "end" "loop" identifier? blocksemi ;
protected_body ::= "protected" "body" defining_identifier "is" IN blockeol protected_operation_item* EX "end" identifier? unitsemi ;
goto_statement ::= "goto" name semi ;
exception_choice ::= name | "others" ;
task_definition_private ::= "private" IN eol task_item* EX ;
slice_component ::= "(" discrete_range ")" ;
exit_statement ::= "exit" name? exit_statement_when_condition? semi ;
accept_statement_statements ::= "do" IN eol handled_sequence_of_statements EX "end" identifier? ;
exception_declaration ::= defining_identifier_list colon "exception" semi ;
parent_name_dot ::= parent_unit_name "." ;
record_type_definition ::= record_type_definition_tagged? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
private_extension_declaration_interface_list ::= "and" interface_list ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list arrow component_list ;
protected_definition ::= IN protected_operation_declaration* protected_definition_private? EX "end" identifier? ;
number_declaration ::= defining_identifier_list colon "constant" colon_equals expression semi ;
formal_discrete_type_definition ::= "(" "<>" ")" ;
task_type_declaration_definition_interface_list ::= "new" interface_list "with" ;
enumeration_type_definition ::= "(" {enumeration_literal_specification ","}+ ")" ;
decimal_fixed_point_definition ::= "delta" expression "digits" expression real_range_specification? ;
floating_point_definition ::= "digits" expression real_range_specification? ;
blocksemi ::= ";" NL ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list colon "aliased"? "constant"? subtype_access_or_array_type_definition object_declaration_expression? semi) | single_task_declaration | single_protected_declaration ;
package_body_stub ::= NL "package" "body" defining_identifier "is" "separate" blocksemi ;
interface_type_definition ::= interface_type_definition_modifier? "interface" interface_type_definition_list? ;
unary_adding_operator ::= "+" | "-" ;
comma_others_arrow_null ::= "," "others" arrow "<>" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? task_type_declaration_definition? blocksemi ;
semi ::= ";" NL ;
variant_part ::= "case" direct_name "is" IN blockeol variant+ EX "end" "case" blocksemi ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? semi ;
formal_private_type_definition ::= formal_private_type_definition_tagged? "limited"? "private" ;
if_statement_else ::= EX "else" IN eol sequence_of_statements ;
index_constraint ::= "(" {discrete_range ","}+ ")" ;
entry_declaration_subtype ::= "(" discrete_subtype_definition ")" ;
starstar_primary ::= "**" primary ;
and_or_xor ::= ("and" "then"?) | ("or" "else"?) | "xor" ;
protected_type_declaration ::= NL "protected" "type" defining_identifier known_discriminant_part? "is" protected_type_declaration_interface_list? eol protected_definition unitsemi ;
range_attribute_reference ::= prefix SPOFF "'" range_attribute_designator ;
extended_return_statement ::= "return" defining_identifier colon "aliased"? return_subtype_indication extended_return_statement_expression? extended_return_statement_do? unitsemi ;
conditional_entry_call ::= "select" IN eol entry_call_alternative EX "else" IN eol sequence_of_statements EX "end" "select" unitsemi ;
real_range_specification ::= "range" simple_expression SP ".." SP simple_expression ;
colon ::= ":" ;
else_expression ::= "else" expression ;
use_type_clause ::= "use" "type" {used_subtype_mark ","}+ semi ;
exception_handler ::= "when" exception_handler_specification? exception_choice or_exception_choice* arrow sequence_of_statements ;
range_attribute_designator ::= "range" SPON range_attribute_designator_expression? ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" blocksemi ;
derived_type_definition ::= "abstract"? "limited"? "new" subtype_indication interface_and_record_extension_specification? ;
signed_integer_type_definition ::= "range" simple_expression SP ".." SP simple_expression ;
named_array_aggregate ::= "(" {array_component_association ","}+ ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
orbar ::= "|" | "!" ;
entry_body ::= NL "entry" defining_identifier entry_body_formal_part entry_barrier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
factor ::= (primary starstar_primary?) | ("abs" primary) | ("not" primary) ;
task_definition ::= IN task_item* task_definition_private? EX "end" identifier? ;
mod_clause ::= "at" "mod" expression semi ;
and_interface_list ::= "and" interface_list ;
record_component_association_list ::= ({record_component_association ","}+) | ("null" "record") ;
selective_accept ::= "select" IN eol guard? select_alternative selective_accept_or_alternative* selective_accept_else_alternative? EX "end" "select" unitsemi ;
interface_type_definition_list ::= "and" interface_list ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" | "null" ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition blocksemi ;
parameter_and_result_profile ::= formal_part? "return" subtype_or_access_definition ;
binary_adding_operator ::= "+" | "-" | (IN NL "&" EX) ;
formal_part ::= "(" parameter_specification semi_parameter_specification* ")" ;
modular_type_definition ::= "mod" expression ;
interface_and_record_extension_specification ::= ("and" interface_list record_extension_part?) | record_extension_part ;
handled_sequence_of_statements_exception ::= "exception" IN eol exception_handler+ EX ;
use_package_clause ::= "use" {used_name ","}+ semi ;
incomplete_type_declaration_modifier ::= "is" "tagged" ;
attribute_designator_expression ::= "(" expression ")" ;
range_attribute_designator_expression ::= "(" expression ")" ;
formal_derived_type_definition_interface_list ::= and_interface_list? "with" "private" ;
block_statement ::= block_statement_identifier_colon? declare_declarative_part? "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
range ::= range_attribute_reference | (simple_expression SP ".." SP simple_expression) ;
pragma ::= ("pragma" id blocksemi) | ("pragma" id pragma_arguments blocksemi) ;
formal_package_actual_part ::= ("(" others_arrow? "<>" ")") | (generic_actual_part?) | ("(" {formal_package_association ","}+ comma_others_arrow_null? ")") ;
type_conversion ::= subtype_mark "(" expression ")" ;
private_type_declaration_tagged ::= "abstract"? "tagged" ;
component_choice_list ::= (selector_name or_selector_name*) | "others" ;
private_extension_declaration_modifier ::= "limited" | "synchronized" ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication semi ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol private_type_declaration_tagged? "limited"? "private" blocksemi ;
requeue_statement ::= "requeue" name requeue_statement_with_abort? semi ;
positional_array_aggregate ::= "(" {index_expression ","}+ comma_others* ")" ;
others_arrow ::= "others" arrow ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier entry_declaration_subtype? parameter_profile blocksemi ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" local_name "use" enumeration_aggregate blocksemi ;
requeue_statement_with_abort ::= "with" "abort" ;
exit_statement_when_condition ::= "when" condition ;
task_type_declaration_definition ::= "is" IN blockeol task_type_declaration_definition_interface_list? task_definition EX ;
abort_statement ::= "abort" {abort_name ","}+ semi ;
case_statement ::= "case" expression "is" IN blockeol case_statement_alternative+ EX "end" "case" blocksemi ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" name blocksemi) | ("generic" "procedure" defining_program_unit_name "renames" name blocksemi) | ("generic" "function" defining_program_unit_name "renames" name blocksemi) ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
explicit_dereference_component ::= "." "all" ;
task_body ::= NL "task" "body" defining_identifier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
semi_parameter_specification ::= ";" parameter_specification ;
selective_accept_else_alternative ::= "else" sequence_of_statements ;
qualified_expression ::= subtype_mark SPOFF "'" expression_or_aggregate ;
logical_operator ::= "and" | "or" | "xor" ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
entry_body_formal_part_specification ::= "(" entry_index_specification ")" ;
null_exclusion ::= "not" "null" ;
timed_entry_call ::= "select" IN eol entry_call_alternative EX "or" IN eol delay_alternative EX "end" "select" unitsemi ;
pragma_arguments ::= "(" {pragma_argument_association ","}+ ")" ;
delay_until_statement ::= "delay" "until" expression semi ;
single_protected_declaration_interface_list ::= "new" interface_list "with" ;
package_renaming_declaration ::= NL "package" defining_program_unit_name "renames" name blocksemi ;
package_specification_private ::= "private" IN eol basic_declarative_item* EX ;
case_statement_alternative ::= "when" discrete_choice_list arrow sequence_of_statements ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
simple_return_statement ::= "return" expression? semi ;
comma_others ::= "," "others" arrow expression_or_null ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
generic_instantiation_clause ::= "new" name generic_actual_part? blocksemi ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
arrow ::= "=>" ;
formal_derived_type_definition ::= "abstract"? formal_derived_type_definition_modifier? "new" subtype_mark formal_derived_type_definition_interface_list? ;
interface_type_definition_modifier ::= "limited" | "task" | "protected" | "synchronized" ;
extended_return_statement_do ::= "do" IN eol handled_sequence_of_statements EX "end" "return" ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") | if_expression ;
record_definition ::= (IN eol "record" IN eol component_list EX "end" "record" EX) | ("null" "record") ;
--------------------c::iso-9899-1999.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | "_Imaginary" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
struct-or-union ::= "struct" | "union" ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::iso-9899-tc2.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
struct-or-union ::= "struct" | "union" ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::iso-9899-tc3.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
struct-or-union ::= "struct" | "union" ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" type-qualifier-list? assignment-expression? "]") | (direct-abstract-declarator? "[" "static" type-qualifier-list? assignment-expression "]") | (direct-abstract-declarator? "[" type-qualifier-list "static" assignment-expression "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::antoniol.bgf--------------------
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
ifdef ::= "//"? ifdef_line newline line* elsif_part* else_part? "//"? endifdef_line newline ;
line ::= ifdef | ("//"? other_preprocessor_line newline) | ("//"? any_other_line newline) ;
--------------------c::malton-dahn.bgf--------------------
asm_spec ::= asm_or_cv+ "(" asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? ")" ;
attribute_spec ::= "__attribute__" "('(" {attribute_extension ","}* ")')" ;
slash ::= "/" | "\" | "." | ":" ;
compound_statement_expression ::= "(" compound_statement ")" ;
attribute_destructor ::= "destructor" | "__destructor__" | "__destructor" | "destructor__" ;
compound_literal_array_declarator ::= (ptr_operator* array_declarator_extension*) | ("(" compound_literal_array_declarator ")" array_declarator_extension*) ;
attribute_packed ::= "__packed__" | "__packed" | "packed__" | "packed" ;
attribute_format ::= "__format__" | "__format" | "format__" | "format" ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
 for_statement ::= "for" "(" declaration_body ";" expression? ";" expression? ")" statement ;
bit_qualifier ::= "long" | "short" | "signed" | "unsigned" | "__signed__" | "__signed" ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
 argument_declaration ::= comment_NL* "..." ;
 argument_declaration ::= "..." comment_NL* ;
struct_or_union_designator ::= "."? id postfix_extension* ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
 postfix_extension ::= ("[" expression "]") | ("(" {argument_expression ","}* ")") | ("." id) | ("->" id) | "++" | "--" ;
attribute_noreturn ::= "__noreturn__" | "__noreturn" | "noreturn__" | "noreturn" ;
label ::= (label_id ":") | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
 label ::= (label_id ":" attribute_spec*) | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "case" constant_expression SP "..." SP constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
attribute_far ::= "__far__" | "__far" | "far__" | "far" ;
designated_initializer ::= assignment_expression | (designator* designator_assignment? assignment_expression) | (designator* designator_assignment? NL "{" IN {designated_initializer ","}* ","? EX "}") ;
attribute_sp_switch ::= "sp_switch" | "__sp_switch__" | "__sp_switch" | "sp_switch__" ;
complex_specifier ::= "_Complex" simple_type_or_qualifier* ;
semi ::= ";" NL ;
abstract_declarator ::= (ptr_operator+ declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
 abstract_declarator ::= (ptr_operator+ declarator_extension*) | (array_declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
conditional_operation ::= "?" expression ":" conditional_expression ;
 conditional_operation ::= "?" expression? ":" binary_expression ;
attribute_alias ::= "alias" | "__alias__" | "__alias" | "alias__" ;
attribute_exception ::= "exception" | "__exception__" | "__exception" | "exception__" ;
attribute_malloc ::= "malloc" | "__malloc__" | "__malloc" | "malloc__" ;
attribute_near ::= "__near__" | "__near" | "near__" | "near" ;
else_statement ::= "else" statement ;
attribute_shared ::= "shared" | "__shared__" | "__shared" | "shared__" ;
restrict_qualifier ::= "__restrict" | "restrict__" | "restrict" | "__restrict__" ;
attribute_mode ::= "__mode__" | "__mode" | "mode__" | "mode" ;
attribute_always_inline ::= "__always_inline__" | "__always_inline" | "always_inline__" | "always_inline" ;
type_qualifier ::= "long" | "short" | "signed" | "unsigned" ;
 type_qualifier ::= bit_qualifier | inline_qualifier | cv_qualifier | restrict_qualifier ;
attribute_model_name ::= "small" | "__small__" | "__small" | "small__" | "medium" | "__medium__" | "__medium" | "medium__" | "large" | "__large__" | "__large" | "large__" ;
asm_input_operands ::= ":" {asm_operand ","}* ;
attribute_no_check_mem ::= "no_check_memory_usage" | "__no_check_memory_usage__" | "__no_check_memory_usage" | "no_check_memory_usage__" ;
initializer ::= expression | (NL "{" IN {initializer ","}* ","? EX "}") ;
 initializer ::= comment_NL* "..." ;
 initializer ::= assignment_expression | (NL "{" IN {designated_initializer ","}* ","? EX "}") ;
attribute_eightbit ::= "eightbit_data" | "__eightbit_data__" | "__eightbit_data" | "eightbit_data__" ;
while_statement ::= "while" "(" expression ")" statement ;
asm_clobbered_registers ::= ":" {string ","}* ;
nonreferential_primary ::= constant | string | ("(" expression ")") ;
 nonreferential_primary ::= constant | string | ("(" expression ")") | compound_statement_expression | compound_literal | (extension_specifier compound_statement_expression) | (extension_specifier "(" expression ")") ;
base_declarator ::= reference_id | ("(" declarator ")") ;
 base_declarator ::= (attribute_spec* reference_id) | (attribute_spec* "(" declarator ")") ;
attribute_long_call ::= "long_call" | "__long_call__" | "__long_call" | "long_call__" ;
attribute_stdcall ::= "stdcall" | "__stdcall__" | "__stdcall" | "stdcall__" ;
cv_qualifier ::= "const" | "volatile" ;
 cv_qualifier ::= "const" | "volatile" | "__const" | "__const__" | "const__" | "__volatile__" | "__volatile" | "volatile__" ;
attribute_regparm ::= "regparm" | "__regparm__" | "__regparm" | "regparm__" ;
attribute_noinline ::= "__noinline__" | "__noinline" | "noinline__" | "noinline" ;
attribute_extension ::= (attribute_alias "(" string ")") | attribute_aligned | (attribute_aligned "(" tagged_attribute_number ")") | (attribute_aligned "(" alignof_expression ")") | attribute_always_inline | attribute_cdecl | (attribute_cleanup "(" tagged_attribute_id ")") | attribute_const | attribute_constructor | attribute_deprecated | attribute_destructor | attribute_dllexport | attribute_dllimport | attribute_eightbit | (attribute_exception "(" exception_function {exception_arg ","}* ")") | attribute_far | attribute_funvector | (attribute_format "(" format_archetype "," tagged_attribute_number "," tagged_attribute_number ")") | (attribute_format_arg "(" tagged_attribute_number ")") | attribute_interrupt | (attribute_interrupt "(" string ")") | attribute_interrupt_handler | (attribute_interrupt_handler "(" string ")") | attribute_longcall | attribute_long_call | attribute_malloc | attribute_may_alias | (attribute_mode "(" tagged_attribute_id ")") | (attribute_model "(" attribute_model_name ")") | attribute_naked | attribute_near | attribute_no_check_mem | attribute_no_instrument | attribute_nocommon | attribute_noinline | attribute_nonnull | (attribute_nonnull "(" tagged_attribute_number+ ")") | attribute_noreturn | attribute_nothrow | attribute_packed | attribute_pure | (attribute_regparm "(" tagged_attribute_number ")") | (attribute_section "(" string ")") | attribute_shared | attribute_short_call | (attribute_signal "(" string ")") | (attribute_sp_switch "(" string ")") | attribute_stdcall | attribute_tiny | (attribute_tls_model "(" tls_model_type ")") | attribute_trans_union | (attribute_trap_exit "(" tagged_attribute_number ")") | attribute_used | attribute_unused | (attribute_vector_size "(" tagged_attribute_number ")") | (attribute_visibility "(" visibility_type ")") | attribute_weak ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
 compound_statement ::= comment_NL* "..." ;
 compound_statement ::= "{" NL compound_statement_body* "}" ";"? NL ;
attribute_vector_size ::= "__vector_size__" | "__vector_size" | "vector_size__" | "vector_size" ;
attribute_unused ::= "__unused__" | "__unused" | "unused__" | "unused" ;
designator_assignment ::= ":" | "=" ;
attribute_constructor ::= "constructor" | "__constructor__" | "__constructor" | "constructor__" ;
array_declarator_extension ::= "[" constant_expression? "]" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
attribute_trans_union ::= "__transparent_union__" | "__transparent_union" | "transparent_union__" | "transparent_union" ;
ptr_operator ::= "*" cv_qualifier* SPOFF ;
 ptr_operator ::= "*" ptr_qualifier* ;
attribute_naked ::= "naked" | "__naked__" | "__naked" | "naked__" ;
tls_model_type ::= "global-dynamic" | "local-dynamic" | "initial-exec" | "local-exec" ;
preprocessor ::= ("#define" id "(" id+ ")" expression NL) | ("#define" id expression NL) | (EX "#else" IN NL) | (EX "#endif" NL NL) | (NL "#if" expression IN NL) | (NL "#ifdef" id IN NL) | (NL "#ifndef" id IN NL) | ("#ident" stringlit NL) | ("#include" stringlit NL) | ("#include" "<" SPOFF filepath ">" SPON NL) | ("#line" integernumber stringlit? NL) | ("#undef" id NL) | ("#LINK" stringlit NL) ;
 preprocessor ::= (EX "#endif" comment_NL? NL) | "..." ;
 preprocessor ::= "..." comment_NL? ;
 preprocessor ::= ("#" integernumber string integernumber* NL) | ("#pragma" SPON id* "(" {id ","}* ")" NL) ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
 if_statement ::= "if" "(" expression ")" comment_NL* statement else_statement? ;
visibility_type ::= "default" | "hidden" | "protected" | "internal" ;
attribute_model ::= "model" | "__model__" | "__model" | "model__" ;
attribute_short_call ::= "short_call" | "__short_call__" | "__short_call" | "short_call__" ;
attribute_tiny ::= "tiny_data" | "__tiny_data__" | "__tiny_data" | "tiny_data__" ;
attribute_section ::= "section" | "__section__" | "__section" | "section__" ;
attribute_no_instrument ::= "no_instrument_function" | "__no_instrument_function__" | "__no_instrument_function" | "no_instrument_function__" ;
format_archetype ::= "printf" | "__printf__" | "__printf" | "printf__" | "scanf" | "__scanf__" | "__scanf" | "scanf__" | "strftime" | "__strftime__" | "__strftime" | "strftime__" | "strfmon" | "__strfmon__" | "__strfmon" | "strfmon__" ;
attribute_aligned ::= "__aligned__" | "__aligned" | "aligned__" | "aligned" ;
extension_specifier ::= "__extension__" ;
attribute_pure ::= "__pure__" | "__pure" | "pure__" | "pure" ;
attribute_weak ::= "weak" | "__weak__" | "__weak" | "weak__" ;
do_statement ::= "do" statement "while" "(" expression ")" semi ;
array_designator ::= ("[" constant_expression "]" postfix_extension*) | ("[" constant_expression SP "..." SP constant_expression "]" postfix_extension*) ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
attribute_deprecated ::= "__deprecated__" | "__deprecated" | "deprecated__" | "deprecated" ;
enumerator_value ::= "=" constant_expression ;
attribute_dllexport ::= "__dllexport__" | "__dllexport" | "dllexport__" | "dllexport" ;
unary_operator ::= "*" | "&" | "+" | "-" | "!" | "~" | "++" | "--" ;
 unary_operator ::= "&&" ;
gnu_long_int_string ::= "L" SPOFF string SPON ;
attribute_nonnull ::= "__nonnull__" | "__nonnull" | "nonnull__" | "nonnull" ;
attribute_nocommon ::= "nocommon" | "__nocommon__" | "nocommon__" | "__nocommon" ;
attribute_signal ::= "signal" | "__signal__" | "__signal" | "signal__" ;
attribute_cdecl ::= "cdecl" | "__cdecl__" | "__cdecl" | "cdecl__" ;
unary_expression ::= postfix_expression | (unary_operator SPOFF unary_expression SPON) | ("(" type_name ")" unary_expression) | sizeof_expression ;
 unary_expression ::= alignof_expression ;
attribute_dllimport ::= "dllimport" | "__dllimport__" | "__dllimport" | "dllimport__" ;
switch_statement ::= "switch" "(" expression ")" statement ;
 switch_statement ::= "switch" "(" expression ")" comment_NL* statement ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
attribute_nothrow ::= "__nothrow__" | "__nothrow" | "nothrow__" | "nothrow" ;
binary_operator ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "||" | "&&" | "|" | "^" | "&" | "<<" | ">>" ;
local_label ::= "__label__" ;
initialization ::= ("=" initializer) | ("(" constant_expression ")") ;
 initialization ::= comment_NL* "..." ;
gnu_long_int_charlit ::= "L" SPOFF charlit SPON ;
attribute_funvector ::= "function_vector" | "__function_vector__" | "__function_vector" | "function_vector__" ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
 sizeof_expression ::= ("sizeof" unary_expression) | ("sizeof" "(" type_name ")") ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
 jump_statement ::= "goto" ptr_operator expression semi ;
attribute_longcall ::= "longcall" | "__longcall__" | "__longcall" | "longcall__" ;
struct_or_union ::= "struct" | "union" ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
 struct_or_union_specifier ::= (struct_or_union attribute_spec* tagged_reference_id? "{" IN NL member_declaration* EX "}" attribute_spec*) | (struct_or_union attribute_spec* tagged_reference_id) ;
alignof_expression ::= ("__alignof__" "(" unary_expression ")") | ("__alignof" "(" unary_expression ")") | ("__alignof__" "(" type_name ")") | ("__alignof" "(" type_name ")") ;
compound_literal ::= ("(" struct_or_union_specifier ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal_array_type ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal ")") ;
expression ::= assignment_expression+ ;
 expression ::= comment_NL* "..." ;
attribute_visibility ::= "__visibility__" | "__visibility" | "visibility__" | "visibility" ;
attribute_may_alias ::= "__may_alias__" | "__may_alias" | "may_alias__" | "may_alias" ;
attribute_format_arg ::= "__format_arg__" | "__format_arg" | "format_arg__" | "format_arg" ;
typeof_specifier ::= "__typeof" | "typeof" | "__typeof__" | "typeof__" ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "typedef" ;
bitfieldsize ::= ":" constant_expression ;
attribute_trap_exit ::= "trap_exit" | "__trap_exit__" | "__trap_exit" | "trap_exit__" ;
asm_or_cv ::= "__asm__" | "asm" | "asm__" | "__asm" | cv_qualifier ;
attribute_interrupt_handler ::= "interrupt_handler" | "__interrupt_handler__" | "__interrupt_handler" | "interrupt_handler__" ;
typeof_expression ::= (typeof_specifier "(" simple_type_name ")") | (typeof_specifier "(" expression ")") ;
asm_operand ::= string "(" expression ")" ;
argument_declaration_list ::= {argument_declaration ","}* ;
 argument_declaration_list ::= "..." comment_NL* ;
asm_output_operands ::= ":" {asm_operand ","}* ;
inline_qualifier ::= "__inline" | "__inline__" | "inline__" | "inline" ;
attribute_tls_model ::= "__tls_model__" | "__tls_model" | "tls_model__" | "tls_model" ;
attribute_cleanup ::= "__cleanup__" | "__cleanup" | "cleanup__" | "cleanup" ;
attribute_const ::= "__const__" | "__const" | "const__" | "const" ;
attribute_interrupt ::= "interrupt" | "__interrupt__" | "__interrupt" | "interrupt__" ;
attribute_used ::= "__used__" | "__used" | "used__" | "used" ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
 enum_specifier ::= ("enum" tagged_reference_id) | ("enum" tagged_reference_id? "{" {enumerator ","}* ","? "}") ;
--------------------c::bruneliere.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------c::cordy-malton-dahn.bgf--------------------
asm_spec ::= (asm cv_qualifier* "(" IN asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? EX ")") | (asm cv_qualifier* "{" IN asm_instruction_semi* asm_instruction semi? EX "}") ;
comma_dotdotdot ::= "," SP "..." SP ;
attribute_spec ::= (attribute_specifier "('(" {attribute_extension ","}* ")')") | (IN NL acquires_releases "(" expression ")" EX) | upper_macro_name ;
constructor_expression ::= ("(" constructor_type ")" "{" {initializer ","}* ","? "}") | ("(" constructor_expression ")") ;
compound_statement_expression ::= "(" compound_statement ")" ;
asm ::= "__asm__" | "asm" | "asm__" | "__asm" ;
colon_equals_or_equals ::= ":" | "=" | "|=" ;
extern_langauge_declaration ::= "extern" stringlit "{" IN NL declaration* EX "}" ";"? NL ;
declaration ::= (decl_specifiers {init_declarator ","}* semi) | (decl_specifiers declarator "=" compound_initializer NL) | extern_langauge_declaration | null_declaration | (local_label declarator+) | asm_spec | machinestart_declaration | preprocessor ;
for_statement ::= ("for" "(" expression_list? ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" decl_specifiers init_declarator+ ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" expression_list? ";" expression_list? ")" sub_statement) | (foreachid "(" expression_list ")" sub_statement) ;
argument_declaration ::= (decl_specifiers argument_declarator?) | ("(" argument_declaration ")") ;
error_statement ::= "error" ":"? id+ "+"? id* semi? ;
bit_qualifier ::= "long" | "short" | "signed" | "unsigned" | "__signed__" | "__signed" ;
postfix_extension ::= ("[" SPON assignment_expression SPOFF "]") | (SP "(" SPON {argument_expression ","}* dotdot? SPOFF ")") | ("." id) | ("->" id macro_call?) | "++" | "--" ;
label ::= (EX label_id ":" IN NL) | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) | (EX SP SP "case" constant_expression SP "..." SP constant_expression ":" IN NL) ;
attribute_arguments ::= "(" attribute_argument+ ")" ;
macro_call ::= macro_name "(" macro_arguments ")" ;
element_label ::= "."? element_name element_name_extension* ;
reference_id_equals ::= reference_id "=" ;
conditional_operation ::= "?" expression? ":" conditional_expression ;
abstract_declarator ::= (ptr_operator+ declarator_extension* SPON) | array_declarator_extension | ("(" abstract_declarator+ ")" declarator_extension*) | ("(" type_name+ ")") | "static" ;
acquires_releases ::= "__acquires" | "__releases" ;
semi ::= ";" NL ;
multiplicative_operator ::= "*" | "/" | "%" | "DIV" | "MOD" ;
else_statement ::= preprocessor* "else" else_sub_statement ;
dotdotdot ::= SP "..." SP ;
unknown_item ::= ("{" unknown_item* "}") | token | key ;
restrict_qualifier ::= "__restrict" | "restrict__" | "restrict" | "__restrict__" ;
declspec_specifier ::= "__declspec" "(" decl_specifiers ")" ;
macro_type_arguments ::= "(" {macro_type_argument ","}* ")" ;
asm_input_operands ::= ":" {asm_operand ","}* NL ;
nf_qualifier ::= "near" | "far" | "NEAR" | "FAR" ;
equals_initializer ::= ("=" initializer) | initializer ;
while_statement ::= ("while" "(" expression_list ")" sub_statement else_statement?) | (whileeachid "(" expression_list ")" sub_statement else_statement?) ;
dotdot ::= SP ".." SP ;
asm_clobbered_registers ::= ":" {asm_register ","}* NL ;
base_declarator ::= reference_id | (SPON "(" decl_specifiers? declarator ")") ;
cv_qualifier ::= "const" | "volatile" | "CONST" | "__const" | "__const__" | "const__" | "__volatile__" | "__volatile" | "volatile__" | "__iomem" | initdata | "internal_function" | "yyconst" | "pascal" | upper_macro_name ;
alignof_specifier ::= "__alignof__" | "__alignof" ;
compound_statement ::= "{" IN NL compound_statement_body EX "}" ";"? NL preprocessor* ;
attribute_specifier ::= "__attribute__" | "__attribute" ;
argument_expression ::= (preprocessor* id? assignment_expression id? colon_number? preprocessor*) | type_name | structured_statement | equality_operator | relational_operator | (assignment_operator assignment_expression) | "do" | "extern" | "continue" | ε ;
zexport_qualifier ::= "ZEXPORT" ;
register_spec ::= ("%" SPOFF "%"? id SPON) | ("%" SPOFF "%"? integernumber id? SPON) ;
array_declarator_extension ::= "[" constant_expression? "]" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
force_qualifier ::= "__force" | "force__" | "force" | "__force__" ;
ptr_operator ::= (nf_qualifier? "*" SPOFF ptr_qualifier*) | (nf_qualifier? "(" "*" ")" SPOFF ptr_qualifier*) ;
member_declaration ::= (decl_specifiers {member_declarator ","}* semi) | null_declaration | preprocessor ;
function_header ::= (decl_specifiers? declarator function_declarator_extension attribute_spec*) | ("YY_DECL" NL) ;
macro_argument ::= ("(" macro_arguments ")") | token | key ;
bit_OR_operator ::= "|" | "BIT_OR" | "bit_or" ;
compound_initializer ::= ("{" "}") | ("{" IN {initializer ","}* ","? ";"? preprocessor_list_initializer* EX NL "}") ;
if_statement ::= ("if" "(" expression_list preprocessor* ")" sub_statement else_statement?) | ("if" postfix_expression sub_statement else_statement?) ;
macro_declaration_or_statement ::= (reference_id_equals? macro_call equals_initializer? ";"? NL) | (upper_macro_name ";"? NL) ;
logical_OR_operator ::= "||" | "OR" | "or" ;
equality_operator ::= "==" | "!=" ;
exit_qualifier ::= "__exit" | "exit__" | "exit" | "__exit__" ;
asm_instruction_semi ::= asm_unit+ ";" NL ;
shift_operator ::= "<<" | ">>" ;
initializer_unit ::= assignment_expression | compound_initializer | (NL element_label colon_equals_or_equals? initializer ";"?) | (NL "[" constant_expression dotdotdot? constant_expression? "]" "="? initializer ";"?) | macro_call ;
extension_specifier ::= "__extension__" | "__extension" ;
relational_operator ::= "<" | ">" | "<=" | ">=" ;
do_statement ::= ("do" sub_statement "while" "(" expression_list ")" semi) | ("do" sub_statement "while" macro_call semi) | ("do" sub_statement whileeachid "(" expression_list ")" semi) ;
init_qualifier ::= "__init" | "init__" | "init" | "__init__" ;
device_attr ::= "DEVICE_ATTR" | "SYSDEV_ATTR" | "DEFINE_TIMER" | "DECLARE_TASKLET" ;
initdata ::= "__initdata" | "__devinitdata" | "__cpuinitdata" | "__read_mostly" | "__initmv" | "__initdata_or_module" | "__pminitdata" | "__cpuinit" | "__devinit" | "BDATA" | "compat_init_data" | "in2000__INITDATA" ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
additive_operator ::= "+" | "-" ;
weak_specifier ::= "__weak__" | "__weak" ;
machinestart_declaration ::= "MACHINE_START" "(" expression_list ")" IN {initializer ","}* ","? EX NL "MACHINE_END" ";"? NL ;
enumerator_value ::= "=" constant_expression ;
user_qualifier ::= "__user" | "user__" | "user" | "__user__" ;
statement_declaration_or_end ::= declaration_or_statement | "}" ;
unary_operator ::= "&" | "*" | "+" | "-" | "~" | "!" | "&&" | "NOT" | "not" ;
gnu_long_int_string ::= "L" SPOFF string SPON ;
comma_expression_statement ::= "," expression_statement ;
preprocessor_list_initializer ::= preprocessor {initializer ","}* ","? ;
complex ::= "__complex" | "__complex__" | "__Complex" ;
element_name_extension ::= ("." element_name) | ("[" constant_expression "]") ;
colon_number ::= ":" number ;
ps_argument_list ::= {ps_argument ","}* ;
cast_operator ::= "(" type_name ")" ;
switch_statement ::= ("switch" "(" expression_list ")" sub_statement) | ("switch" macro_call sub_statement) ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
logical_AND_operator ::= "&&" | "AND" | "and" | "ANDP" ;
initialization ::= (initdata? "=" initializer) | ("(" constant_expression ")") | macro_call ;
local_label ::= "__label__" ;
gnu_long_int_charlit ::= "L" SPOFF charlit SPON ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
bit_AND_operator ::= "&" | "BIT_AND" | "bit_and" ;
jump_statement ::= ("goto" label_id) | "continue" | "break" | ("return" expression?) | ("goto" ptr_operator expression) | ("return" expression attribute_spec?) ;
struct_or_union ::= "struct" | "union" ;
sub_member_declarators ::= "(" {member_declarator ","}* ")" ;
alignof_expression ::= alignof_specifier "(" expression_or_type_name ")" ;
ps_arguments ::= "(" ps_argument_list ")" ;
bit_XOR_operator ::= "^" | "BIT_XOR" | "bit_xor" ;
asmlinkage_qualifier ::= "asmlinkage" ;
bracketed_id ::= "[" id "]" ;
pre_increment_operator ::= ("++" SPOFF) | ("--" SPOFF) ;
typeof_specifier ::= "__typeof" | "typeof" | "__typeof__" | "typeof__" ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "far" | "near" | "typedef" | "local" | "vector" | "const_debug" | "INIT" | "STATIC" | "NEAR" | "FAR" ;
bitfieldsize ::= ":" constant_expression ;
unknown_declaration_or_statement ::= (unknown_item+ ";" NL) | (unknown_item+ NL) ;
typeof_expression ::= typeof_specifier "(" expression_or_type_name ")" ;
asm_operand ::= (bracketed_id? string "(" expression ")") | (pseudo_string "(" expression ")") ;
argument_declaration_list ::= {argument_declaration ","}* comma_dotdotdot? ;
asm_output_operands ::= ":" {asm_operand ","}* NL ;
inline_qualifier ::= "__inline" | "__inline__" | "inline__" | "inline" | "SBA_INLINE" ;
struct_or_union_body ::= "{" IN NL member_declaration* EX "}" ;
primary ::= reference_id | constant | string | ("(" SPON expression_list ","? ")") | ("{" SPON expression_list ","? "}") | (SPON extension_specifier "(" expression_list ")") | (SPON constructor_expression) | (SPON asm_spec) ;
attribute_argument ::= ("(" attribute_argument* ")") | token_or_key ;
enum_specifier ::= ("enum" reference_id) | ("enum" reference_id? "{" {enumerator ","}* ","? preprocessor* "}") ;
--------------------c::cordy-malton.bgf--------------------
slash ::= "/" | "\" | "." | ":" ;
do_statement ::= "do" statement "while" "(" expression ")" semi ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
enumerator_value ::= "=" constant_expression ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
label ::= (label_id ":") | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
unary_operator ::= "*" | "&" | "+" | "-" | "!" | "~" | "++" | "--" ;
semi ::= ";" NL ;
abstract_declarator ::= (ptr_operator+ declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
conditional_operation ::= "?" expression ":" conditional_expression ;
else_statement ::= "else" statement ;
unary_expression ::= postfix_expression | (unary_operator SPOFF unary_expression SPON) | ("(" type_name ")" unary_expression) | sizeof_expression ;
type_qualifier ::= "long" | "short" | "signed" | "unsigned" ;
switch_statement ::= "switch" "(" expression ")" statement ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
initializer ::= expression | (NL "{" IN {initializer ","}* ","? EX "}") ;
binary_operator ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "||" | "&&" | "|" | "^" | "&" | "<<" | ">>" ;
while_statement ::= "while" "(" expression ")" statement ;
initialization ::= ("=" initializer) | ("(" constant_expression ")") ;
base_declarator ::= reference_id | ("(" declarator ")") ;
nonreferential_primary ::= constant | string | ("(" expression ")") ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
cv_qualifier ::= "const" | "volatile" ;
struct_or_union ::= "struct" | "union" ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
array_declarator_extension ::= "[" constant_expression? "]" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr_operator ::= "*" cv_qualifier* SPOFF ;
preprocessor ::= ("#define" id "(" id+ ")" expression NL) | ("#define" id expression NL) | (EX "#else" IN NL) | (EX "#endif" NL NL) | (NL "#if" expression IN NL) | (NL "#ifdef" id IN NL) | (NL "#ifndef" id IN NL) | ("#ident" stringlit NL) | ("#include" stringlit NL) | ("#include" "<" SPOFF filepath ">" SPON NL) | ("#line" integernumber stringlit? NL) | ("#undef" id NL) | ("#LINK" stringlit NL) ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "typedef" ;
bitfieldsize ::= ":" constant_expression ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
argument_declaration_list ::= {argument_declaration ","}* ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
--------------------c::lankamp.bgf--------------------
MoreParameters ::= "," "..." ;
StorageClass ::= "register" ;
 StorageClass ::= "static" ;
 StorageClass ::= "extern" ;
 StorageClass ::= "auto" ;
 StorageClass ::= [TypeDef] "typedef" ;
Declaration ::= [DeclarationWithoutInitDecls] specs::(Specifier+) ";" ;
 Declaration ::= [DeclarationWithInitDecls] specs::(Specifier+) initDeclarators::({InitDeclarator ","}+) ";" ;
Expression ::= CharacterConstant ;
 Expression ::= Expression "--" ;
 Expression ::= [Variable] Identifier ;
 Expression ::= Expression "[" Expression "]" ;
 Expression ::= [Bracket] "(" Expression ")" ;
 Expression ::= "sizeof" "(" TypeName ")" ;
 Expression ::= Expression "++" ;
 Expression ::= FloatingPointConstant ;
 Expression ::= Expression "." Identifier ;
 Expression ::= StringConstant ;
 Expression ::= IntegerConstant ;
 Expression ::= HexadecimalConstant ;
 Expression ::= Expression "->" Identifier ;
 Expression ::= Expression "(" {NonCommaExpression ","}* ")" ;
 Expression ::= Expression ;
 Expression ::= [SizeOfExpression] "sizeof" exp::Expression ;
 Expression ::= "&" Expression ;
 Expression ::= "!" Expression ;
 Expression ::= "(" TypeName ")" Expression ;
 Expression ::= "*" Expression ;
 Expression ::= "+" Expression ;
 Expression ::= "-" Expression ;
 Expression ::= "~" Expression ;
 Expression ::= [MultiplicationExpression] lexp::Expression "*" rexp::Expression ;
 Expression ::= Expression "/" Expression ;
 Expression ::= Expression "%" Expression ;
 Expression ::= Expression "+" Expression ;
 Expression ::= Expression "-" Expression ;
 Expression ::= Expression ">>" Expression ;
 Expression ::= Expression "<<" Expression ;
 Expression ::= Expression "<=" Expression ;
 Expression ::= Expression ">=" Expression ;
 Expression ::= Expression ">" Expression ;
 Expression ::= Expression "<" Expression ;
 Expression ::= Expression "==" Expression ;
 Expression ::= Expression "!=" Expression ;
 Expression ::= Expression "&" Expression ;
 Expression ::= Expression "^" Expression ;
 Expression ::= Expression "|" Expression ;
 Expression ::= Expression "&&" Expression ;
 Expression ::= Expression "||" Expression ;
 Expression ::= Expression "?" Expression ":" Expression ;
 Expression ::= Expression "|=" Expression ;
 Expression ::= Expression "&=" Expression ;
 Expression ::= Expression "*=" Expression ;
 Expression ::= Expression "/=" Expression ;
 Expression ::= Expression "+=" Expression ;
 Expression ::= Expression ">>=" Expression ;
 Expression ::= Expression "^=" Expression ;
 Expression ::= Expression "-=" Expression ;
 Expression ::= Expression "<<=" Expression ;
 Expression ::= Expression "%=" Expression ;
 Expression ::= Expression "=" Expression ;
 Expression ::= [CommaExpression] Expression "," Expression ;
GlobalDeclaration ::= [GlobalDeclarationWithoutInitDecls] specs::(Specifier+) ";" ;
 GlobalDeclaration ::= [GlobalDeclarationWithInitDecls] specs::(Specifier*) initDeclarators::({InitDeclarator ","}+) ";" ;
AbstractDeclarator ::= [Identifier] AnonymousIdentifier ;
 AbstractDeclarator ::= [ArrayDeclarator] decl::AbstractDeclarator "[" exp::(Expression?) "]" ;
 AbstractDeclarator ::= [Bracket] "(" decl::AbstractDeclarator ")" ;
 AbstractDeclarator ::= [FunctionDeclarator] decl::AbstractDeclarator "(" params::(Parameters?) ")" ;
 AbstractDeclarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::AbstractDeclarator ;
PrototypeDeclarator ::= [FunctionDeclarator] decl::PrototypeDeclarator "(" params::(PrototypeParameters?) ")" ;
 PrototypeDeclarator ::= [Identifier] Identifier ;
 PrototypeDeclarator ::= [Bracket] "(" decl::AbstractDeclarator ")" ;
 PrototypeDeclarator ::= [ArrayDeclarator] decl::PrototypeDeclarator "[" exp::(Expression?) "]" ;
 PrototypeDeclarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::PrototypeDeclarator ;
Declarator ::= [ArrayDeclarator] decl::Declarator "[" exp::(Expression?) "]" ;
 Declarator ::= [Identifier] Identifier ;
 Declarator ::= [FunctionDeclarator] decl::Declarator "(" params::(Parameters?) ")" ;
 Declarator ::= [Bracket] "(" decl::Declarator ")" ;
 Declarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::Declarator ;
TypeQualifier ::= "const" ;
 TypeQualifier ::= "volatile" ;
Statement ::= "default" ":" Statement ;
 Statement ::= "switch" "(" Expression ")" Statement ;
 Statement ::= "return" ";" ;
 Statement ::= "for" "(" Expression? ";" Expression? ";" Expression? ")" Statement ;
 Statement ::= "case" Expression ":" Statement ;
 Statement ::= "continue" ";" ;
 Statement ::= ";" ;
 Statement ::= "goto" Identifier ";" ;
 Statement ::= "do" Statement "while" "(" Expression ")" ";" ;
 Statement ::= "{" Declaration* Statement* "}" ;
 Statement ::= "while" "(" Expression ")" Statement ;
 Statement ::= "break" ";" ;
 Statement ::= "if" "(" Expression ")" Statement ;
 Statement ::= Identifier ":" Statement ;
 Statement ::= Expression ";" ;
 Statement ::= "if" "(" Expression ")" Statement "else" Statement ;
 Statement ::= "return" Expression ";" ;
PrototypeParameters ::= "void" ;
 PrototypeParameters ::= {PrototypeParameter ","}+ MoreParameters? ;
FunctionDefinition ::= [DefaultFunctionDefinition] specs::(Specifier*) Declarator Declaration* "{" Declaration* Statement* "}" ;
FunctionPrototype ::= [DefaultFunctionPrototype] specs::(Specifier*) decl::PrototypeDeclarator ";" ;
Parameters ::= {Parameter ","}+ MoreParameters? ;
 Parameters ::= "void" ;
StructDeclarator ::= Declarator ;
 StructDeclarator ::= Declarator? ":" Expression ;
StructDeclaration ::= [StructDeclWithoutDecl] specs::(Specifier+) ";" ;
 StructDeclaration ::= [StructDeclWithDecl] specs::(Specifier+) {StructDeclarator ","}+ ";" ;
Enumerator ::= Identifier ;
 Enumerator ::= Identifier "=" NonCommaExpression ;
TypeSpecifier ::= [StructDecl] "struct" Identifier "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Union] "union" Identifier ;
 TypeSpecifier ::= [Int] "int" ;
 TypeSpecifier ::= [Void] "void" ;
 TypeSpecifier ::= [StructAnonDecl] "struct" "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Short] "short" ;
 TypeSpecifier ::= [Identifier] Identifier ;
 TypeSpecifier ::= [EnumDecl] "enum" Identifier "{" {Enumerator ","}+ "}" ;
 TypeSpecifier ::= "signed" ;
 TypeSpecifier ::= [UnionDecl] "union" Identifier "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [UnionAnonDecl] "union" "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Enum] "enum" Identifier ;
 TypeSpecifier ::= [Struct] "struct" Identifier ;
 TypeSpecifier ::= "unsigned" ;
 TypeSpecifier ::= [Long] "long" ;
 TypeSpecifier ::= [Double] "double" ;
 TypeSpecifier ::= [Float] "float" ;
 TypeSpecifier ::= [EnumAnonDecl] "enum" "{" {Enumerator ","}+ "}" ;
 TypeSpecifier ::= [Char] "char" ;
Initializer ::= "{" {Initializer ","}+ ","? "}" ;
 Initializer ::= NonCommaExpression ;
InitDeclarator ::= decl::Declarator "=" Initializer ;
 InitDeclarator ::= [decl] Declarator ;
--------------------cpp::iso-n2723.bgf--------------------
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
braced-init-list ::= ("{" initializer-list ","? "}") | ("{" "}") ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-or-expression ::= logical-and-expression | (logical-or-expression "||" logical-and-expression) ;
alias-declaration ::= "using" identifier "=" type-id ";" ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
type-id-list ::= (type-id "..."?) | (type-id-list "," type-id "..."?) ;
enumerator-definition ::= enumerator | (enumerator "=" constant-expression) ;
exception-declaration ::= (type-specifier-seq declarator) | (type-specifier-seq abstract-declarator) | type-specifier-seq | "..." ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
try-block ::= "try" compound-statement handler-seq ;
lambda-parameter-declaration-list ::= lambda-parameter | (lambda-parameter "," lambda-parameter-declaration-list) ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
expression-statement ::= expression? ";" ;
conversion-function-id ::= "operator" conversion-type-id ;
lambda-introducer ::= "[" lambda-capture? "]" ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression | ("++" cast-expression) | ("--" cast-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-id ")") | ("sizeof" "..." "(" identifier ")") | ("alignof" "(" type-id ")") | new-expression | delete-expression ;
template-parameter-list ::= template-parameter | (template-parameter-list "," template-parameter) ;
explicit-instantiation ::= "extern"? "template" declaration ;
unnamed-namespace-definition ::= "inline"? "namespace" "{" namespace-body "}" ;
enum-specifier ::= (enum-key identifier? enum-base? "{" enumerator-list? "}") | (enum-key identifier? enum-base? "{" enumerator-list "," "}") ;
ref-qualifier ::= "&" | "&&" ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "[" braced-init-list "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | (typename-specifier "(" expression-list? ")") | (simple-type-specifier braced-init-list) | (typename-specifier braced-init-list) | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
multiplicative-expression ::= pm-expression | (multiplicative-expression "*" pm-expression) | (multiplicative-expression "/" pm-expression) | (multiplicative-expression "%" pm-expression) ;
selection-statement ::= ("if" "(" condition ")" statement) | ("if" "(" condition ")" statement "else" statement) | ("switch" "(" condition ")" statement) ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
base-clause ::= ":" base-specifier-list ;
mem-initializer ::= (mem-initializer-id "(" expression-list? ")") | (mem-initializer-id braced-init-list) ;
function-definition ::= (decl-specifier-seq? declarator function-body) | (decl-specifier-seq? declarator "=" "default" ";") | (decl-specifier-seq? declarator "=" "delete" ";") ;
pm-expression ::= cast-expression | (pm-expression ".*" cast-expression) | (pm-expression "->*" cast-expression) ;
cast-expression ::= unary-expression | ("(" type-id ")" cast-expression) ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" simple-template-id) | "char" | "char16_t" | "char32_t" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | "auto" | ("decltype" "(" expression ")") ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
static_assert-declaration ::= "static_assert" "(" constant-expression "," string-literal ")" ";" ;
initializer ::= ("=" initializer-clause) | ("(" expression-list ")") | braced-init-list ;
direct-new-declarator ::= ("[" expression "]") | (direct-new-declarator "[" constant-expression "]") ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
decl-specifier ::= storage-class-specifier | type-specifier | function-specifier | "friend" | "typedef" | "constexpr" | alignment-specifier ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
storage-class-specifier ::= "register" | "static" | "thread_local" | "extern" | "mutable" ;
type-parameter ::= ("class" "..."? identifier?) | ("class" identifier? "=" type-id) | ("typename" "..."? identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" "..."? identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
alignment-specifier ::= ("alignas" "(" constant-expression ")") | ("alignas" "(" type-id ")") ;
extension-namespace-definition ::= "inline"? "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" simple-template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
lambda-parameter-declaration ::= "(" lambda-parameter-declaration-list? ")" "mutable"? exception-specification? lambda-return-type-clause? ;
cv-qualifier ::= "const" | "volatile" ;
template-id ::= simple-template-id | (operator-function-id "<" template-argument-list? ">") ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compound-statement ::= "{" statement-seq? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
base-specifier-list ::= (base-specifier "..."?) | (base-specifier-list "," base-specifier "..."?) ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | static_assert-declaration | template-declaration ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? compound-statement handler-seq ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
capture ::= identifier | ("&" identifier) | "this" ;
capture-list ::= capture | (capture-list "," capture) ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
primary-expression ::= literal | "this" | ("(" expression ")") | id-expression | lambda-expression ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
lambda-capture ::= capture-default | capture-list | (capture-default "," capture-list) ;
conditional-expression ::= logical-or-expression | (logical-or-expression "?" expression ":" assignment-expression) ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator | "..." ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | (class-key "::"? nested-name-specifier? "template"? simple-template-id) | (enum-key "::"? nested-name-specifier? identifier) ;
capture-default ::= "&" | "=" ;
constant-initializer ::= "=" constant-expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
declarator-id ::= ("..."? id-expression) | ("::"? nested-name-specifier? class-name) ;
typename-specifier ::= ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? simple-template-id) ;
new-initializer ::= ("(" expression-list? ")") | braced-init-list ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
parameter-declaration-list ::= parameter-declaration | (parameter-declaration-list "," parameter-declaration) ;
simple-template-id ::= template-name "<" template-argument-list? ">" ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
ctor-initializer ::= ":" mem-initializer-list ;
pure-specifier ::= "=" "0" ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= (initializer-clause "..."?) | (initializer-list "," initializer-clause "..."?) ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
operator ::= "new" | "delete" | ("new" "[" "]") | ("delete" "[" "]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | "(" | ")" | "[" | "]" ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | "&&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
mem-initializer-list ::= (mem-initializer "..."?) | (mem-initializer "," mem-initializer-list "..."?) ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
enum-base ::= ":" type-specifier-seq ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
template-argument-list ::= (template-argument "..."?) | (template-argument-list "," template-argument "..."?) ;
condition ::= expression | (type-specifier-seq declarator "=" initializer-clause) | (type-specifier-seq declarator braced-init-list) ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
access-specifier ::= "private" | "protected" | "public" ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
enum-key ::= "enum" | ("enum" "class") | ("enum" "struct") ;
logical-and-expression ::= inclusive-or-expression | (logical-and-expression "&&" inclusive-or-expression) ;
nested-name-specifier ::= (type-name "::") | (namespace-name "::") | (nested-name-specifier identifier "::") | (nested-name-specifier "template"? simple-template-id "::") ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("return" braced-init-list ";") | ("goto" identifier ";") ;
lambda-return-type-clause ::= "->" type-id ;
class-key ::= "class" | "struct" | "union" ;
function-specifier ::= "inline" | "virtual" | "explicit" ;
enumerator-list ::= enumerator-definition | (enumerator-list "," enumerator-definition) ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
operator-function-id ::= "operator" operator ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier | operator-function-id | conversion-function-id | ("~" class-name) | template-id ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "inline"? "namespace" identifier "{" namespace-body "}" ;
--------------------cpp::bruneliere.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------cpp::elges-cordy.bgf--------------------
comma_dotdotdot ::= ","? "..." ;
selection_statement ::= ("if" "(" expression ")" statement else_statement?) | ("switch" "(" expression ")" statement) ;
parenthesized_parameter_declaration_list ::= ("(" parameter_declaration_list ")") | ("(" parenthesized_parameter_declaration_list ")") ;
elaborated_type_specifier ::= (class_key "::"? nested_name_spec? class_name) | ("enum" "::"? nested_name_spec? id) ;
class_definition ::= NL storage_class_specifier* class_specifier declarator_list? ";" NL NL ;
declaration ::= asm_declaration | class_definition | function_definition | namespace_definition | template_declaration | linkage_specification | exception_specification | using_declaration | (decl_specifiers? declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
mem_initializer ::= "::"? nested_name_spec? class_name "(" expression_list? ")" ;
declared_item ::= declared_name | ("(" declarator ")") ;
class_component ::= class_name | ("~" SPOFF class_name SPON) | operator_function_name | conversion_function_name | qualified_name ;
deallocation_expression ::= ("::"? "delete" cast_expression) | ("::"? "delete" "[" expression? "]" cast_expression) ;
member_declarator ::= (declarator initializer?) | (id? SPOFF ":" SPON constant_expression) ;
primary_expression ::= literal | "this" | ("::" id) | ("::" operator_function_name) | ("(" expression ")") | name ;
postfix_extension ::= ("[" expression? "]") | ("(" expression_list? ")") | ("." name) | ("->" name) | "++" | "--" ;
label ::= (id SPOFF ":" SPON) | (EX "case" constant_expression SPOFF ":" SPON NL IN) | (EX "default" SPOFF ":" SPON NL IN) ;
storage_class_specifier ::= "auto" | "register" | "static" | "extern" ;
allocation_declarator ::= allocation_array_declarator | ("*" const_volatile_qualifier_list? allocation_declarator?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list? allocation_declarator?) | (qualified_name "::" "*" const_volatile_qualifier_list? allocation_declarator?) ;
declared_name ::= (nested_name_spec? name) | ("~" SPOFF id SPON) ;
conditional_operation ::= "?" expression ":" conditional_expression ;
abstract_declarator ::= (abstract_extension+) | ("(" abstract_declarator ")" abstract_extension*) ;
decl_specifier ::= storage_class_specifier | type_specifier | function_specifier | "friend" | "typedef" ;
else_statement ::= "else" statement ;
base_spec ::= ":" base_list ;
pointer_operator ::= (stars const_volatile_qualifier_list?) | ("&" const_volatile_qualifier_list?) | (id "::" stars const_volatile_qualifier_list?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list) ;
placement ::= "(" expression_list ")" ;
type_parameter ::= "class" id ;
abstract_extension ::= ("(" parameter_declaration_list ")" const_volatile_qualifier_list?) | ("[" constant_expression? "]") | pointer_operator | ("(" abstract_declarator ")") ;
initializer ::= ("=" initial_value) | ("(" expression_list? ")") ;
dot_slash_identifier ::= "."? "/"? file_identifier ;
stars ::= "*" | "**" ;
compound_statement ::= "{" NL IN statement_list? EX "}" NL ;
template_argument_list ::= template_argument | (template_argument_list "," template_argument) ;
number_constant ::= ("-"? number) | hexnumber ;
template_parameter_list ::= template_parameter | (template_parameter_list "," template_parameter) ;
allocation_expression ::= "::"? "new" placement? allocation_type_name initializer? ;
allocation_array_declarator ::= ("[" expression? "]") | (allocation_array_declarator "[" expression? "]") ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
member_declaration ::= (function_definition ";"?) | (qualified_name ";" NL) | using_declaration | (decl_specifiers? member_declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
allocation_type_name ::= (type_specifiers allocation_declarator?) | ("(" type_name ")" allocation_declarator?) ;
template_arguments ::= "<" template_argument_list ">" ;
base_specifier ::= ("::"? nested_name_spec? class_name) | ("virtual" access_specifier? "::"? nested_name_spec? class_name) | (access_specifier "virtual"? "::"? nested_name_spec? class_name) ;
preprocessor ::= ("#define" id "(" id+ ")" expression) | ("#define" id expression) | (EX "#else" IN) | (EX "#endif" NL) | (NL "#if" expression IN) | (NL "#ifdef" id IN) | (NL "#ifndef" id IN) | ("#ident" stringlit) | ("#include" stringlit) | ("#include" "<" SPOFF filename ">" SPON) | ("#line" integernumber stringlit?) | ("#undef" id) | ("#LINK" stringlit) ;
qualified_name ::= class_name "::" class_component ;
base_list ::= base_specifier ","? {base_specifier ","}* ;
handler ::= "catch" "(" exception_declaration ")" compound_statement ;
access_specifier_colon ::= EX_2 NL access_specifier SPOFF ":" SPON IN_2 NL ;
using_declaration ::= ("using" "::"? nested_name_spec? name ";") | ("using" "namespace" "::"? nested_name_spec? id ";") ;
null_statement ::= ";" NL ;
operator_function_name ::= "operator" operator ;
namespace_definition ::= ("namespace" id? "{" NL IN declaration_list? EX "}" NL NL) | ("namespace" id "=" qualified_namespace_spec) ;
ctor_initializer ::= SPOFF ":" SPON mem_initializer_list ;
class_specifier ::= class_head "{" NL IN member* EX "}" ;
initial_value ::= assignment_expression | ("{" IN initializer_list ","? EX "}") ;
for_init_statement ::= (expression ";") | (decl_specifiers? declarator_list ";") | (decl_specifiers ";") | ";" ;
asm_declaration ::= "asm" "(" string_constant ")" ";" NL ;
template_declaration ::= "template" "<" template_parameter_list ">" declaration ;
unary_operator ::= "**" | "*" | "&" | "+" | "-" | "!" | "~" ;
declarator_extension ::= (parenthesized_parameter_declaration_list const_volatile_qualifier_list?) | ("[" constant_expression? "]") ;
function_body ::= (NL compound_statement ";"? NL) | ("try" ctor_initializer? NL compound_statement ";"? NL handler_list) ;
conversion_function_name ::= "operator" conversion_type_name ;
unary_expression ::= postfix_expression | ("++" unary_expression) | ("--" unary_expression) | (unary_operator cast_expression) | ("sizeof" unary_expression) | ("sizeof" "(" type_name ")") | allocation_expression | deallocation_expression | throw_expression ;
nested_name_spec ::= class_or_namespace_name "::" nested_name_spec? ;
operator ::= "new" | "delete" | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "-+" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | ("(" type_specifier? ")") | ("[" "]") ;
simple_type_name ::= "char" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | ("::"? nested_name_spec? id) | ("::"? nested_name_spec? template_class_name) ;
access_specifier ::= "private" | "protected" | "public" ;
const_volatile_qualifier ::= "const" | "volatile" ;
postfix_expression ::= (primary_expression postfix_extension*) | (simple_type_name "(" expression_list? ")" postfix_extension*) ;
binary_operator ::= "||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "<<" | ">>" | "+" | "-" | "*" | "/" | "%" | ".*" | "->*" ;
qualified_namespace_spec ::= "::"? nested_name_spec? class_or_namespace_name ;
initializer_element ::= assignment_expression | (NL "{" IN initializer_list ","? EX "}") ;
jump_statement ::= ("break" ";" NL) | ("continue" ";" NL) | ("return" expression? ";" NL) | ("goto" id ";" NL) ;
enum_list ::= enumerator+ ","? ;
parameter_declaration_list ::= {parameter_declaration ","}* comma_dotdotdot? ;
cast_expression ::= unary_expression | ("(" type_name ")" cast_expression) ;
expression ::= assignment_expression | (expression "," assignment_expression) ;
class_key ::= "class" | "struct" | "union" ;
function_specifier ::= "inline" | "virtual" ;
exception_specification ::= "throw" "(" type_list? ")" ;
throw_expression ::= "throw" assignment_expression? ;
iteration_statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";" NL) | ("for" "(" for_init_statement expression? ";" expression? ")" for_body) ;
exception_declaration ::= (type_specifiers exception_declarator?) | "..." ;
try_block ::= "try" compound_statement handler_list ;
linkage_specification ::= (NL "extern" stringlit "{" NL IN declaration_list EX "}" ";"? NL NL) | ("extern" stringlit declaration) ;
expression_statement ::= expression ";" NL ;
equal_constant_expression ::= "=" constant_expression ;
type_list ::= type_name | (type_list "," type_name) ;
equal_expression ::= "=" expression ;
non_gt_binary_operator ::= "||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | "<=" | ">=" | "<<" | ">>" | "+" | "-" | "*" | "/" | "%" | ".*" | "->*" ;
enum_specifier ::= "enum" id? "{" enum_list? "}" ;
--------------------cpp::iso-14882-1998.bgf--------------------
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
logical-or-expression ::= logical-and-expression | (logical-or-expression "||" logical-and-expression) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
type-id-list ::= type-id | (type-id-list "," type-id) ;
enumerator-definition ::= enumerator | (enumerator "=" constant-expression) ;
exception-declaration ::= (type-specifier-seq declarator) | (type-specifier-seq abstract-declarator) | type-specifier-seq | "..." ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
try-block ::= "try" compound-statement handler-seq ;
expression-statement ::= expression? ";" ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
conversion-function-id ::= "operator" conversion-type-id ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression | ("++" cast-expression) | ("--" cast-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-id ")") | new-expression | delete-expression ;
template-parameter-list ::= template-parameter | (template-parameter-list "," template-parameter) ;
explicit-instantiation ::= "template" declaration ;
unnamed-namespace-definition ::= "namespace" "{" namespace-body "}" ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier identifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")") | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
multiplicative-expression ::= pm-expression | (multiplicative-expression "*" pm-expression) | (multiplicative-expression "/" pm-expression) | (multiplicative-expression "%" pm-expression) ;
selection-statement ::= ("if" "(" condition ")" statement) | ("if" "(" condition ")" statement "else" statement) | ("switch" "(" condition ")" statement) ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
base-clause ::= ":" base-specifier-list ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
pm-expression ::= cast-expression | (pm-expression ".*" cast-expression) | (pm-expression "->*" cast-expression) ;
cast-expression ::= unary-expression | ("(" type-id ")" cast-expression) ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" template-id) | "char" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
initializer ::= ("=" initializer-clause) | ("(" expression-list ")") ;
direct-new-declarator ::= ("[" expression "]") | (direct-new-declarator "[" constant-expression "]") ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
decl-specifier ::= storage-class-specifier | type-specifier | function-specifier | "friend" | "typedef" ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
storage-class-specifier ::= "auto" | "register" | "static" | "extern" | "mutable" ;
type-parameter ::= ("class" identifier?) | ("class" identifier? "=" type-id) | ("typename" identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
extension-namespace-definition ::= "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
cv-qualifier ::= "const" | "volatile" ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
template-id ::= template-name "<" template-argument-list? ">" ;
compound-statement ::= "{" statement-seq? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
base-specifier-list ::= base-specifier | (base-specifier-list "," base-specifier) ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | template-declaration ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
primary-expression ::= literal | "this" | ("(" expression ")") | id-expression ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
conditional-expression ::= logical-or-expression | (logical-or-expression "?" expression ":" assignment-expression) ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | ("enum" "::"? nested-name-specifier? identifier) | ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? template-id) ;
initializer-clause ::= assignment-expression | ("{" initializer-list ","? "}") | ("{" "}") ;
constant-initializer ::= "=" constant-expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
declarator-id ::= id-expression | ("::"? nested-name-specifier? type-name) ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
new-initializer ::= "(" expression-list? ")" ;
parameter-declaration-list ::= parameter-declaration | (parameter-declaration-list "," parameter-declaration) ;
expression-list ::= assignment-expression | (expression-list "," assignment-expression) ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
initializer-list ::= initializer-clause | (initializer-list "," initializer-clause) ;
ctor-initializer ::= ":" mem-initializer-list ;
pure-specifier ::= "=" "0" ;
class-specifier ::= class-head "{" member-specification? "}" ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
operator ::= "new" | "delete" | ("new" "[" "]") | ("delete" "[" "]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | ("(" ")") | ("[" "]") ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
mem-initializer-list ::= mem-initializer | (mem-initializer "," mem-initializer-list) ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
condition ::= expression | (type-specifier-seq declarator "=" assignment-expression) ;
template-argument-list ::= template-argument | (template-argument-list "," template-argument) ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
access-specifier ::= "private" | "protected" | "public" ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
logical-and-expression ::= inclusive-or-expression | (logical-and-expression "&&" inclusive-or-expression) ;
nested-name-specifier ::= (class-or-namespace-name "::" nested-name-specifier?) | (class-or-namespace-name "::" "template" nested-name-specifier) ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("goto" identifier ";") ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
class-key ::= "class" | "struct" | "union" ;
function-specifier ::= "inline" | "virtual" | "explicit" ;
enumerator-list ::= enumerator-definition | (enumerator-list "," enumerator-definition) ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
operator-function-id ::= "operator" operator ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier | operator-function-id | conversion-function-id | ("~" class-name) | template-id ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "namespace" identifier "{" namespace-body "}" ;
--------------------cs::csharp-ecma-334-2.bgf--------------------
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "while" | "assembly" | "remove" | "get" | "set" | "field" | "method" | "module" | "param" | "property" | "add" | "volatile" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-ecma-334-3.bgf--------------------
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while" | "get" | "set" | "yield" | "add" | "remove" | "alias" | "partial" | "where" ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
finalizer-body ::= block | ";" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
primary-constraint ::= class-type | "class" | "struct" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
type-argument-list ::= "<" type-arguments ">" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
throw-statement ::= "throw" expression? ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
type-parameter-list ::= "<" type-parameters ">" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
generic-dimension-specifier ::= "<" commas? ">" ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
--------------------cs::csharp-ecma-334-4.bgf--------------------
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while" | "get" | "set" | "yield" | "add" | "remove" | "alias" | "partial" | "where" ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
finalizer-body ::= block | ";" ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
right-shift ::= ">>" ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
generic-dimension-specifier ::= "<" commas? ">" ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
--------------------cs::csharp-iso-23270-2003.bgf--------------------
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | ("*" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | "type" ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-iso-23270-2006.bgf--------------------
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while" | "yield" | "partial" | "add" | "remove" | "get" | "set" | "where" | "alias" ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
finalizer-body ::= block | ";" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
primary-constraint ::= class-type | "class" | "struct" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
type-argument-list ::= "<" type-arguments ">" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
throw-statement ::= "throw" expression? ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
type-parameter-list ::= "<" type-parameters ">" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
generic-dimension-specifier ::= "<" commas? ">" ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
--------------------cs::csharp-msft-ls-1.0.bgf--------------------
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
finally-clause ::= "finally" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" | "module" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
switch-block ::= "{" switch-sections? "}" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
dim-separators ::= "," | (dim-separators ",") ;
attribute-target-specifier ::= attribute-target ":" ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
simple-type ::= numeric-type | "bool" ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-msft-ls-1.2.bgf--------------------
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
finally-clause ::= "finally" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" | "module" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
switch-block ::= "{" switch-sections? "}" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
dim-separators ::= "," | (dim-separators ",") ;
attribute-target-specifier ::= attribute-target ":" ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
simple-type ::= numeric-type | "bool" ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-msft-ls-3.0.bgf--------------------
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
finally-clause ::= "finally" block ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
destructor-body ::= block | ";" ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
from-clause ::= "from" type? identifier "in" expression ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list?) | (interface-base? type-parameter-constraints-clauses? interface-body ";"?) ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" | "module" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
ordering-direction ::= "ascending" | "descending" ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
right-shift ::= ">>" ;
element-initializer ::= non-assignment-expression | ("{" expression-list "}") ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | (implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter) ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
group-clause ::= "group" expression "by" expression ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
member-initializer-list ::= member-initializer | (member-initializer-list "," member-initializer) ;
parameter-modifier ::= "ref" | "out" | "this" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
let-clause ::= "let" identifier "=" expression ;
select-clause ::= "select" expression ;
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
element-initializer-list ::= element-initializer | (element-initializer-list "," element-initializer) ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
member-declarator ::= simple-name | member-access | (identifier "=" expression) ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
collection-initializer ::= ("{" element-initializer-list "}") | ("{" element-initializer-list "," "}") ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
anonymous-function-parameter-modifier ::= "ref" | "out" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
member-initializer ::= identifier "=" initializer-value ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
generic-dimension-specifier ::= "<" commas? ">" ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
orderings ::= ordering | (orderings "," ordering) ;
post-decrement-expression ::= primary-expression "--" ;
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | (explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter) ;
enum-base ::= ":" integral-type ;
query-continuation ::= "into" identifier query-body ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
anonymous-object-creation-expression ::= "new" anonymous-object-initializer ;
orderby-clause ::= "orderby" orderings ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
where-clause ::= "where" boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
local-variable-type ::= type | "var" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
--------------------cs::csharp-msft-ls-4.0.bgf--------------------
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
finally-clause ::= "finally" block ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
destructor-body ::= block | ";" ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
from-clause ::= "from" type? identifier "in" expression ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
variant-type-parameter-list ::= "<" variant-type-parameters ">" ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface") | (identifier variant-type-parameter-list? interface-base?) | (type-parameter-constraints-clauses? interface-body ";"?) ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" argument-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" | "module" ;
default-argument ::= "=" expression ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
ordering-direction ::= "ascending" | "descending" ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
argument-name ::= identifier ":" ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
right-shift ::= ">>" ;
element-initializer ::= non-assignment-expression | ("{" expression-list "}") ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | (implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter) ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
group-clause ::= "group" expression "by" expression ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
member-initializer-list ::= member-initializer | (member-initializer-list "," member-initializer) ;
parameter-modifier ::= "ref" | "out" | "this" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "dynamic" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
let-clause ::= "let" identifier "=" expression ;
argument-value ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
select-clause ::= "select" expression ;
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
element-initializer-list ::= element-initializer | (element-initializer-list "," element-initializer) ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" argument-list "]" ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
member-declarator ::= simple-name | member-access | (identifier "=" expression) ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
collection-initializer ::= ("{" element-initializer-list "}") | ("{" element-initializer-list "," "}") ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type) | (identifier variant-type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
anonymous-function-parameter-modifier ::= "ref" | "out" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
member-initializer ::= identifier "=" initializer-value ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
generic-dimension-specifier ::= "<" commas? ">" ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
orderings ::= ordering | (orderings "," ordering) ;
post-decrement-expression ::= primary-expression "--" ;
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | (explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter) ;
enum-base ::= ":" integral-type ;
query-continuation ::= "into" identifier query-body ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
anonymous-object-creation-expression ::= "new" anonymous-object-initializer ;
orderby-clause ::= "orderby" orderings ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
variant-type-parameters ::= (attributes? variance-annotation? type-parameter) | (variant-type-parameters "," attributes? variance-annotation? type-parameter) ;
where-clause ::= "where" boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
variance-annotation ::= "in" | "out" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
local-variable-type ::= type | "var" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
--------------------cs::csharp-zaytsev.bgf--------------------
set-accessor-declaration ::= attributes "set" maybe-empty-block ;
specific-catch-clause ::= ("catch" "(" built-in-class-type lex-csharp/identifier? ")" block) | ("catch" "(" qualified-identifier lex-csharp/identifier? ")" block) ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= {lex-csharp/identifier "."}+ ;
constant-declarator ::= lex-csharp/identifier "=" expression ;
method-header ::= attributes method-modifier* type-or-void qualified-identifier "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-accessors ::= (attributes "get" ";" (attributes "set" ";")?) | (attributes "set" ";" (attributes "get" ";")?) ;
unary-expression ::= (expression-unary-operator unary-expression) | ("(" type ")" unary-expression) | primary-expression ;
local-constant-declaration ::= "const" type {constant-declarator ","}+ ;
enum-body ::= ("{" "}") | ("{" {enum-member-declaration ","}+ ","? "}") ;
array-initializer ::= ("{" "}") | ("{" {variable-initializer ","}+ ","? "}") ;
embedded-statement ::= maybe-empty-block | (statement-expression ";") | selection-statement | iteration-statement | jump-statement | try-statement | ("checked" block) | ("unchecked" block) | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
for-statement ::= "for" "(" for-initializer? ";" expression? ";" statement-expression-list? ")" embedded-statement ;
conversion-kind ::= "implicit" | "explicit" ;
interface-declaration ::= attributes interface-modifier* "interface" lex-csharp/identifier (":" qualified-identifier-list)? interface-body ";"? ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= "(" expression-list? ")" ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= lex-csharp/identifier "(" formal-parameter-list? ")" constructor-initializer? ;
expression-shift-operator ::= "<<" | ">>" ;
fixed-parameters ::= {fixed-parameter ","}+ ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | "type" ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
ref-or-out ::= "ref" | "out" ;
rank-specifier ::= "[" ","* "]" ;
try-statement ::= ("try" block catch-clauses finally-clause?) | ("try" block finally-clause) ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type lex-csharp/identifier ")" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
overloadable-unary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | increment-decrement | "!" | "~" | "true" | "false" ;
class-body ::= "{" class-member-declaration* "}" ;
expression-unary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | increment-decrement | "!" | "~" | "*" ;
statement-expression-list ::= {statement-expression ","}+ ;
expression-relational-operator ::= lex-csharp-extra/less-than | lex-csharp-extra/greater-than | "<=" | ">=" | "is" | "as" ;
namespace-body ::= "{" using-directive* namespace-member-declaration* "}" ;
while-statement ::= "while" "(" expression ")" embedded-statement ;
constant-declaration ::= attributes constant-modifier* "const" type {constant-declarator ","}+ ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
local-variable-declaration ::= type {variable-declarator ","}+ ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern") ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
continue-statement ::= "continue" ";" ;
static-constructor-declaration ::= attributes static-constructor-modifiers lex-csharp/identifier "(" ")" maybe-empty-block ;
throw-statement ::= "throw" expression? ";" ;
event-declaration ::= (attributes event-modifier* "event" type {variable-declarator ","}+ ";") | (attributes event-modifier* "event" type qualified-identifier "{" event-accessor-declarations "}") ;
using-directive ::= "using" (lex-csharp/identifier "=")? qualified-identifier ";" ;
conversion-operator-declarator ::= conversion-kind "operator" type "(" type lex-csharp/identifier ")" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifier* array-initializer?) | ("new" array-type array-initializer) | lex-csharp/literal | lex-csharp/identifier | ("(" expression ")") | (primary-expression "." lex-csharp/identifier) | (predefined-type "." lex-csharp/identifier) | (primary-expression "(" argument-list ")") | (primary-expression "[" expression-list "]") | "this" | ("base" "." lex-csharp/identifier) | ("base" "[" expression-list "]") | (primary-expression increment-decrement) | ("new" type "(" argument-list ")") | ("typeof" "(" type-or-void ")") | ("checked" "(" expression ")") | ("unchecked" "(" expression ")") ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type qualified-identifier "." "this" "[" formal-parameter-list "]") ;
if-statement ::= "if" "(" expression ")" embedded-statement else-part? ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
overloadable-binary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | "*" | "/" | "%" | lex-csharp-extra/ampersand | lex-csharp-extra/bar | "^" | "<<" | ">>" | "==" | "!=" | lex-csharp-extra/greater-than | lex-csharp-extra/less-than | ">=" | "<=" ;
interface-body ::= "{" interface-member-declaration* "}" ;
statement-expression ::= (primary-expression "(" argument-list ")") | ("new" type "(" argument-list ")") | (unary-expression assignment-operator expression) | (primary-expression increment-decrement) | (increment-decrement primary-expression) ;
parameter-array ::= attributes "params" array-type lex-csharp/identifier ;
labeled-statement ::= lex-csharp/identifier ":" statement ;
increment-decrement ::= "++" | "--" ;
attribute-section ::= "[" (attribute-target ":")? attribute-list ","? "]" ;
interface-event-declaration ::= attributes "new"? "event" type lex-csharp/identifier ";" ;
expression-list ::= {expression ","}+ ;
delegate-declaration ::= attributes delegate-modifier* "delegate" type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= {attribute ","}+ ;
enum-declaration ::= attributes enum-modifier* "enum" lex-csharp/identifier (":" integral-type)? enum-body ";"? ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type lex-csharp/identifier "," type lex-csharp/identifier ")" ;
argument-list ::= {argument ","}* ;
do-statement ::= "do" embedded-statement "while" "(" expression ")" ";" ;
indexer-declaration ::= attributes indexer-modifier* indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type lex-csharp/identifier "in" expression ")" embedded-statement ;
type-or-void ::= type | "void" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
maybe-empty-block ::= ("{" statement* "}") | ";" ;
field-declaration ::= attributes field-modifier* type {variable-declarator ","}+ ";" ;
destructor-declaration ::= attributes "extern"? "~" lex-csharp/identifier "(" ")" maybe-empty-block ;
class-declaration ::= attributes class-modifier* "class" lex-csharp/identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-method-declaration ::= attributes "new"? type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
variable-declarator ::= lex-csharp/identifier | (lex-csharp/identifier "=" variable-initializer) ;
expression-equality-operator ::= "==" | "!=" ;
break-statement ::= "break" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes "add" block ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
remove-accessor-declaration ::= attributes "remove" block ;
switch-label ::= ("case" expression ":") | ("default" ":") ;
struct-body ::= "{" struct-member-declaration* "}" ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
expression ::= (expression "?" expression ":" expression) | (expression "||" expression) | (expression "&&" expression) | (expression lex-csharp-extra/bar expression) | (expression "^" expression) | (expression lex-csharp-extra/ampersand expression) | (expression expression-equality-operator expression) | (expression expression-relational-operator expression) | (expression "is" built-in-type) | (expression expression-shift-operator expression) | (expression lex-csharp-extra/plus expression) | (expression lex-csharp-extra/minus expression) | (expression "*" expression) | (expression "/" expression) | (expression "%" expression) | unary-expression | (unary-expression assignment-operator expression) ;
interface-property-declaration ::= attributes "new"? type lex-csharp/identifier "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" "{" switch-section* "}" ;
enum-member-declaration ::= attributes lex-csharp/identifier ("=" expression)? ;
built-in-type ::= integral-type | built-in-class-type | "bool" | "decimal" | "float" | "double" ;
return-statement ::= "return" expression? ";" ;
qualified-identifier-list ::= {qualified-identifier ","}+ ;
constructor-initializer ::= (":" "base" "(" argument-list ")") | (":" "this" "(" argument-list ")") ;
block ::= "{" statement* "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
get-accessor-declaration ::= attributes "get" maybe-empty-block ;
global-attribute-section ::= "[" "assembly" ":" attribute-list ","? "]" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
built-in-class-type ::= "object" | "string" ;
else-part ::= "else" embedded-statement ;
class-base ::= (":" qualified-identifier-list) | (":" built-in-class-type ("," qualified-identifier-list)?) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" lex-csharp/identifier ";") | ("goto" "case" expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes struct-modifier* "struct" lex-csharp/identifier (":" qualified-identifier-list)? struct-body ";"? ;
property-declaration ::= attributes property-modifier* type qualified-identifier "{" accessor-declarations "}" ;
--------------------cs::csharp-antoniol.bgf--------------------
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
ifdef ::= "//"? ifdef_line newline line* elsif_part* else_part? "//"? endifdef_line newline ;
line ::= ifdef | ("//"? other_preprocessor_line newline) | ("//"? any_other_line newline) ;
--------------------cs::csharp-bruneliere.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------cs::csharp-cordy.bgf--------------------
empty_statement ::= ";" ;
equality_expression ::= relational_expression | (equality_expression "==" relational_expression) | (equality_expression "!=" relational_expression) ;
pointer_type ::= (unmanaged_type "*"*) | ("void" "*" "*"*) ;
array_initializer ::= "{" variable_initializer_list? ","? "}" ;
parenthesized_expression ::= "(" expression ")" ;
object_creation_expression ::= "new" type "(" argument_list? ")" ;
overloadable_binary_operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
null_literal ::= "null" ;
conditional_expression ::= null_coalescing_expression | (null_coalescing_expression "?" expression ":" expression) ;
global_attribute_target_specifier ::= global_attribute_target ":" ;
finalizer_body ::= (block NL) | (";" NL) ;
integral_type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
additive_expression ::= multiplicative_expression | (additive_expression "+" multiplicative_expression) | (additive_expression "-" multiplicative_expression) ;
try_statement ::= "try" block NL catch_clauses? finally_clause? ;
declaration_statement ::= (local_variable_declaration ";" NL) | (local_constant_declaration ";" NL) ;
return_type ::= type | "void" ;
interface_body ::= "{" NL IN interface_member_declarations? EX "}" ";"? NL ;
static_constructor_declaration ::= attributes? static_constructor_modifiers id "(" ")" NL static_constructor_body NL ;
interface_method_declaration ::= attributes? "new"? return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
object_initializer ::= "{" member_initializer_list? ","? "}" ;
while_statement ::= "while" "(" boolean_expression ")" nested_statement NL ;
pre_decrement_expression ::= "--" unary_expression ;
argument_list ::= {argument ","}* ;
event_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 event_modifier ::= "unsafe" ;
element_access_operator ::= "[" expression+ "]" ;
colon_colon_id ::= "::" id ;
pointer_element_access_operator ::= "[" expression "]" ;
comma_parameter_array ::= "," parameter_array ;
conditional_and_expression ::= inclusive_or_expression | (conditional_and_expression "&&" inclusive_or_expression) ;
checked_statement ::= "checked" block NL ;
continue_statement ::= "continue" ";" NL ;
assignment_operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
type_parameter_constraints_clause ::= "where" type_parameter ":" type_parameter_constraints ;
attribute_target_specifier ::= attribute_target ":" ;
predefined_type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
dot_id ::= "." id ;
interface_event_declaration ::= attributes? "new"? "event" type id ";" NL ;
finalizer_declaration ::= attributes? "extern"? "~" id "(" ")" finalizer_body ;
 finalizer_declaration ::= (attributes? "extern"? "unsafe"? "~" id "(" ")" NL finalizer_body NL) | (attributes? "unsafe"? "extern"? "~" id "(" ")" NL finalizer_body NL) ;
accessor_modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
post_decrement_operator ::= "--" ;
member_name_equals ::= simple_name "=" ;
if_statement ::= "if" "(" boolean_expression ")" nested_statement else_if_clause* else_clause? NL ;
struct_body ::= "{" NL IN struct_member_declarations? EX "}" ";"? NL ;
get_accessor_declaration ::= attributes? accessor_modifier? "get" accessor_body ;
orderby_clause ::= "orderby" {key_expr_ascending_descending ","}* ;
constructor_body ::= (block NL) | (";" NL) ;
where_clause ::= "where" pred_expr ;
labeled_statement ::= id ":" statement ;
switch_block ::= "{" NL IN switch_sections EX "}" NL ;
delegate_declaration ::= attributes? delegate_modifiers? "delegate" return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
ascending_descending ::= "ascending" | "descending" ;
class_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
 class_modifier ::= "unsafe" ;
generic_dimension_specifier ::= "<" ","* ">" ;
argument ::= expression | ("ref" variable_reference) | ("out" variable_reference) ;
pointer_member_access_operator ::= "->" id type_argument_list? ;
do_statement ::= "do" NL IN embedded_statement EX "while" "(" boolean_expression ")" ";" NL ;
foreach_statement ::= "foreach" "(" type id "in" expression ")" nested_statement NL ;
groupby_clause ::= "group" sel_expr "by" key_expr ;
field_declaration ::= attributes? field_modifiers? type variable_declarators ";" NL ;
local_constant_declaration ::= "const" type constant_declarators ;
relational_expression ::= shift_expression | (relational_expression "<" shift_expression) | (relational_expression ">" shift_expression) | (relational_expression "<=" shift_expression) | (relational_expression ">=" shift_expression) | (relational_expression "is" type) | (relational_expression "as" type) ;
parameter_modifier ::= "ref" | "out" ;
constant_declarator ::= id "=" constant_expression ;
method_header ::= attributes? method_modifiers? return_type member_name type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ;
finally_clause ::= "finally" block NL ;
unary_expression ::= primary_expression | ("+" unary_expression) | ("-" unary_expression) | ("!" unary_expression) | ("~" unary_expression) | pre_increment_expression | pre_decrement_expression | cast_expression ;
 unary_expression ::= pointer_indirection_expression | addressof_expression ;
simple_type ::= numeric_type | "bool" ;
global_attribute_section ::= "[" global_attribute_target_specifier attribute_list ","? "]" ;
from_clause ::= "from" item_name "in" src_expr ;
class_type ::= type_name | "object" | "string" ;
sizeof_expression ::= "sizeof" "(" unmanaged_type ")" ;
unary_operator_declarator ::= type "operator" overloadable_unary_operator "(" type id ")" ;
type_argument_list ::= "<" type_argument+ ">" ;
accessor_body ::= (block NL) | (";" NL) ;
cast_expression ::= "(" type ")" unary_expression ;
boolean_literal ::= "true" | "false" ;
constructor_declarator ::= id "(" formal_parameter_list? ")" constructor_initializer? ;
namespace_declaration ::= "namespace" qualified_identifier NL namespace_body ;
fixed_pointer_initializer ::= ("&" variable_reference) | expression ;
equals_constant_expression ::= "=" constant_expression ;
exclusive_or_expression ::= and_expression | (exclusive_or_expression "^" and_expression) ;
goto_statement ::= ("goto" id ";" NL) | ("goto" "case" constant_expression ";" NL) | ("goto" "default" ";" NL) ;
base_access ::= ("base" "." id type_argument_list?) | ("base" "[" expression+ "]") ;
block ::= "{" NL IN statement_list? EX "}" ";"? ;
addressof_expression ::= "&" unary_expression ;
unchecked_expression ::= "unchecked" "(" expression ")" ;
expression_statement ::= statement_expression ";" NL ;
interface_accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
pre_increment_expression ::= "++" unary_expression ;
extern_alias_directive ::= "extern" id id ";" NL ;
input_parameters ::= input_parameter | ("(" {input_parameter ","}* ")") ;
attribute_argument_list ::= {attribute_argument ","}* ;
constructor_modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
 constructor_modifier ::= "unsafe" ;
field_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
 field_modifier ::= "unsafe" ;
conditional_or_expression ::= conditional_and_expression | (conditional_or_expression "||" conditional_and_expression) ;
member_access_operator ::= "." id type_argument_list? ;
for_statement ::= "for" "(" for_initializer? ";" for_condition? ";" for_iterator? ")" nested_statement NL ;
static_constructor_body ::= (block NL) | (";" NL) ;
namespace_or_type_name ::= "this"? id colon_colon_id? dot_id* type_argument_list? ;
method_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" | "partial" ;
 method_modifier ::= "unsafe" ;
shift_expression ::= additive_expression | (shift_expression "<<" additive_expression) | (shift_expression ">>" additive_expression) ;
interface_declaration ::= attributes? interface_modifiers? "partial"? "interface" id type_parameter_list? interface_base? type_parameter_constraints_clauses? NL interface_body NL ;
using_statement ::= "using" "(" resource_acquisition ")" NL embedded_statement ;
attribute_arguments ::= "(" attribute_argument_list ")" ;
equals_local_variable_initializer ::= "=" local_variable_initializer ;
invocation_operator ::= "(" {argument ","}* ")" ;
 invocation_operator ::= "((" argument_list_or_key* "))" ;
post_increment_operator ::= "++" ;
indexer_declarator ::= type interface_type_dot? "this" "[" formal_parameter_list "]" ;
binary_operator_declarator ::= type "operator" overloadable_binary_operator "(" type id ")" ;
anonymous_method_signature ::= "(" anonymous_method_parameter_list? ")" ;
rank_specifier ::= "[" ","* "]" ;
general_catch_clause ::= "catch" block NL ;
static_constructor_modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
 static_constructor_modifiers ::= ("extern"? "unsafe"? "static") | ("unsafe"? "extern"? "static") | ("extern"? "static" "unsafe"?) | ("unsafe"? "static" "extern"?) | ("static" "extern"? "unsafe"?) | ("static" "unsafe"? "extern"?) ;
using_alias_directive ::= "using" id "=" namespace_or_type_name ";" NL ;
fixed_statement ::= "fixed" "(" pointer_type fixed_pointer_declarators ")" embedded_statement ;
anonymous_method_expression ::= "delegate" anonymous_method_signature? block ;
default_value_expression ::= "default" "(" type ")" ;
object_formals ::= "(" formal_parameter_list? ")" ;
floating_point_type ::= "float" | "double" ;
inclusive_or_expression ::= exclusive_or_expression | (inclusive_or_expression "|" exclusive_or_expression) ;
add_accessor_declaration ::= attributes? "add" block NL ;
specific_catch_clause ::= "catch" "(" class_type id? ")" block NL ;
constant_declaration ::= attributes? constant_modifiers? "const" type constant_declarators ";" NL ;
unchecked_statement ::= "unchecked" block NL ;
operator_body ::= (block NL) | (";" NL) ;
remove_accessor_declaration ::= attributes? "remove" block NL ;
type_parameter_constraints ::= {type_parameter_constraint ","}* ;
null_coalescing_expression ::= conditional_or_expression | (conditional_or_expression "??" null_coalescing_expression) ;
lock_statement ::= "lock" "(" expression ")" NL embedded_statement ;
nullable_type ::= non_nullable_value_type "?" ;
interface_property_declaration ::= attributes? "new"? type id NL "{" NL IN interface_accessors EX "}" NL ;
throw_statement ::= "throw" expression? ";" NL ;
enum_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
event_declaration ::= (attributes? event_modifiers? "event" type variable_declarators ";" NL) | (attributes? event_modifiers? "event" type member_name "{" NL IN event_accessor_declarations EX "}" NL EX) ;
delegate_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
 delegate_modifier ::= "unsafe" ;
stackalloc_initializer ::= "stackalloc" unmanaged_type "[" expression "]" ;
enum_base ::= ":" integral_type ;
dot_id_generic_dimension_specifier ::= "." id generic_dimension_specifier? ;
query_continuation ::= "into" item_name query_body ;
else_if_clause ::= "else" "if" "(" boolean_expression ")" nested_statement ;
parameter_array ::= attributes? "params" array_type id ;
argument_list_or_key ::= argument_list | "in" ;
constructor_constraint ::= "new" "(" ")" ;
attribute_section ::= "[" attribute_target_specifier? attribute_list ","? "]" ;
method_body ::= (block NL) | (";" NL) ;
pointer_indirection_expression ::= "*" unary_expression ;
overloadable_unary_operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
set_accessor_declaration ::= attributes? accessor_modifier? "set" accessor_body ;
yield_statement ::= ("yield" "return" expression ";" NL) | ("yield" "break" ";" NL) ;
enum_declaration ::= attributes? enum_modifiers? "enum" id enum_base? enum_body NL ;
primary_constraint ::= class_type | "class" | "struct" ;
indexer_declaration ::= attributes? indexer_modifiers? indexer_declarator "{" NL IN accessor_declarations EX "}" NL ;
class_base ::= ":" class_and_interface_type_ist ;
else_clause ::= "else" nested_statement ;
interface_indexer_declaration ::= attributes? "new"? type "this" "[" formal_parameter_list "]" "{" NL IN interface_accessors EX "}" NL ;
class_declaration ::= attributes? class_modifiers? "partial"? "class" id type_parameter_list? class_base? type_parameter_constraints_clauses? NL class_body ;
using_namespace_directive ::= "using" namespace_name ";" NL ;
checked_expression ::= "checked" "(" expression ")" ;
break_statement ::= "break" ";" NL ;
qualified_alias_member ::= id "::" id type_argument_list? ;
numeric_type ::= integral_type | floating_point_type | "decimal" ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
this_access ::= "this" ;
switch_statement ::= "switch" "(" expression ")" switch_block ;
join_clause ::= "join" item_name "in" src_expr "on" key_expr "equals" key_expr into_item_name? ;
multiplicative_expression ::= unary_expression | (multiplicative_expression "*" unary_expression) | (multiplicative_expression "/" unary_expression) | (multiplicative_expression "%" unary_expression) ;
enum_body ::= "{" NL IN enum_member_declarations? ","? EX "}" ";"? NL ;
return_statement ::= "return" expression? ";" NL ;
equals_variable_initializer ::= "=" variable_initializer ;
fixed_pointer_declarator ::= id "=" fixed_pointer_initializer ;
interface_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
 interface_modifier ::= "unsafe" ;
constructor_initializer ::= (":" "base" "(" argument_list? ")") | (":" "this" "(" argument_list? ")") ;
object_or_delegate_creation_expression ::= "new" type "(" argument_list? ")" ;
type_parameter_list ::= "<" type_parameters ">" ;
into_item_name ::= "into" item_name ;
interface_base ::= ":" interface_type_list ;
indexer_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 indexer_modifier ::= "unsafe" ;
unsafe_statement ::= "unsafe" block ;
object_initializer_expression ::= "new" array_type? object_formals? rank_specifiers? object_initializer ;
let_clause ::= "let" item_name "=" sel_expr ;
operator_modifier ::= "public" | "static" | "extern" ;
 operator_modifier ::= "unsafe" ;
array_creation_expression ::= ("new" non_array_type "[" expression_list "]" rank_specifiers? array_initializer?) | ("new" array_type array_initializer) ;
select_clause ::= "select" sel_expr ;
constant_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
struct_declaration ::= attributes? struct_modifiers? "partial"? "struct" id type_parameter_list? struct_interfaces? type_parameter_constraints_clauses? NL struct_body NL ;
property_declaration ::= NL attributes? property_modifiers? type member_name "{" NL IN accessor_declarations EX "}" NL ;
lambda_expression ::= (input_parameters "=>" expression) | (input_parameters "=>" block) ;
interface_type_dot ::= interface_type "." ;
class_body ::= "{" NL IN class_member_declarations? EX "}" ";"? NL ;
namespace_body ::= "{" NL IN extern_alias_directives? using_directives? namespace_member_declarations? EX "}" ";"? NL ;
typeof_expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound_type_name ")") | ("typeof" "(" "void" ")") | ("typeof" "(" ")") ;
struct_interfaces ::= ":" interface_type_list ;
named_argument ::= id "=" attribute_argument_expression ;
conversion_operator_declarator ::= ("implicit" "operator" type "(" type id ")") | ("explicit" "operator" type "(" type id ")") ;
struct_modifier ::= "new" | "public" | "proctected" | "internal" | "private" ;
 struct_modifier ::= "unsafe" ;
property_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 property_modifier ::= "unsafe" ;
and_expression ::= equality_expression | (and_expression "&" equality_expression) ;
--------------------cs::csharp-ecma-334-1.bgf--------------------
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | ("*" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations) | "}" ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
accessor-body ::= block | ";" ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
method-body ::= block | ";" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------dart::spec-0.01.bgf--------------------
mapLiteralEntry ::= (identifier ":" expression) | (stringLiteral ":" expression) ;
WHITESPACE ::= ("\t" | " " | NEWLINE)+ ;
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
constantObjectExpression ::= "const" type ("." identifier)? arguments ;
declaration ::= (constantConstructorSignature (redirection | initializers)?) | (constructorSignature (redirection | initializers)?) | (functionSignature redirection) | (namedConstructorSignature redirection) | ("abstract" getterSignature) | ("abstract" setterSignature) | ("abstract" operatorSignature) | ("abstract" functionSignature) | ("static" "final" type? staticFinalDeclarationList) | ("static"? initializedVariableDeclaration) ;
setterSignature ::= "static"? returnType? "set" identifier formalParameterList ;
defaultFormalParameter ::= normalFormalParameter ("=" expression)? ;
typeList ::= type ("," type)* ;
bitwiseOperator ::= "&" | "^" | "|" ;
label ::= identifier ":" ;
tryStatement ::= "try" block (catchPart+ finallyPart?) | finallyPart ;
NEWLINE ::= "\n" | "\r" ;
operatorSignature ::= returnType? "operator" operator formalParameterList ;
STRING_CONTENT_SQ ::= α | ("\" α) | STRING_INTERPOLATION ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
isOperator ::= "is" "!"? ;
finalVarOrType ::= ("final" type?) | "var" | type ;
getterSignature ::= "static"? returnType? "get" identifier formalParameterList ;
interfaceDefinition ::= "interface" identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
relationalOperator ::= ">=" | ">" | "<=" | "<" ;
classDefinition ::= "class" identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
booleanLiteral ::= "true" | "false" ;
libraryName ::= "#" "library" "(" stringLiteral ")" ";" ;
interfaceMemberDefinition ::= ("static" "final" type? initializedIdentifierList ";") | (functionSignature ";") | (constantConstructorSignature ";") | (namedConstructorSignature ";") | (getterSignature ";") | (setterSignature ";") | (operatorSignature ";") | (variableDeclaration ";") ;
superCallOrFieldInitializer ::= ("super" arguments) | ("super" "." identifier arguments) | fieldInitializer ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionSignature functionBody) | (returnType? getOrSet identifier formalParameterList functionBody) | ("final" type? staticFinalDeclarationList ";") | (variableDeclaration ";") ;
BUILT_IN_IDENTIFIER ::= "abstract" | "assert" | "class" | "extends" | "factory" | "get" | "implements" | "import" | "interface" | "is" | "library" | "negate" | "operator" | "set" | "source" | "static" | "typedef" ;
stringLiteral ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
superclass ::= "extends" type ;
initializedIdentifierList ::= initializedIdentifier ("," initializedIdentifier)* ;
MULTI_LINE_COMMENT ::= "/*" α* ;
interfaces ::= "implements" typeList ;
newExpression ::= "new" type ("." identifier)? arguments ;
methodSignature ::= factoryConstructorSignature | ("static" functionSignature) | getterSignature | setterSignature | operatorSignature | (functionSignature initializers?) | (namedConstructorSignature initializers?) ;
STRING_INTERPOLATION ::= ("$" IDENTIFIER_NO_DOLLAR) | ("$" "{" expression "}") ;
thisExpression ::= "this" ;
arguments ::= "(" argumentList? ")" ;
expressionList ::= expression ("," expression)* ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier "in" expression) | (identifier "in" expression) ;
ifStatement ::= "if" "(" expression ")" statement ("else" statement)? ;
functionExpressionBody ::= ("=>" expression) | block ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
scriptTag ::= "#!" α* NEWLINE ;
catchPart ::= "catch" "(" declaredIndentifier ("," declaredIndentifier)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | forStatement | whileStatement | doStatement | switchStatement | ifStatement | tryStatement | breakStatement | continueStatement | returnStatement | throwStatement | expressionStatement | assertStatement | (functionSignature functionBody) ;
getOrSet ::= "get" | "set" ;
assertStatement ::= "assert" "(" conditionalExpression ")" ";" ;
HEX_DIGIT ::= "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" | DIGIT ;
NUMBER ::= (DIGIT+ ("." DIGIT*)? EXPONENT?) | ("." DIGIT+ EXPONENT?) ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
shiftOperator ::= "<<" | ">>>" | ">>" ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
negateOperator ::= "!" | "~" ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("'" STRING_CONTENT_SQ* "'") | ("@" "'" α* "'") | ("@" """ α* """) ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
assignableExpression ::= (primary (arguments* assignableSelector)+) | ("super" assignableSelector) | identifier ;
libraryImport ::= "#" "import" "(" stringLiteral ("," "prefix:" stringLiteral)? ")" ";" ;
normalFormalParameters ::= normalFormalParameter ("," normalFormalParameter)* ;
ESCAPE_SEQUENCE ::= ("\" "n") | ("\" "r") | ("\" "f") | ("\" "b") | ("\" "t") | ("\" "v") | ("\" "x" HEX_DIGIT HEX_DIGIT) | ("\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("\" "u") ;
functionTypeAlias ::= "typedef" functionPrefix typeParameters? formalParameterList ";" ;
whileStatement ::= "while" "(" expression ")" statement ;
equalityOperator ::= "==" | "!=" | "===" | "!==" ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
typeArguments ::= "<" typeList ">" ;
shiftExpression ::= (additiveExpression (shiftOperator additiveExpression)*) | ("super" (shiftOperator additiveExpression)+) ;
formalParameterList ::= ("(" ")") | ("(" normalFormalParameters ("," namedFormalParameters)? ")") | namedFormalParameters ;
expressionStatement ::= expression? ";" ;
namedConstructorSignature ::= identifier "." identifier formalParameterList ;
incrementOperator ::= "++" | "--" ;
mapLiteral ::= "const"? typeArguments? "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | ("super" equalityOperator relationalExpression) ;
staticFinalDeclaration ::= identifier "=" expression ;
listLiteral ::= "const"? typeArguments? "[" (expressionList ","?)? "]" ;
breakStatement ::= "break" identifier? ";" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
IDENTIFIER_START ::= IDENTIFIER_START_NO_DOLLAR | "$" ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | ("super" ("|" bitwiseXorExpression)+) ;
redirection ::= ":" "this" ("." identifier)? arguments ;
throwStatement ::= "throw" expression? ";" ;
include ::= "#" "source" "(" stringLiteral ")" ";" ;
nullLiteral ::= "null" ;
IDENTIFIER_START_NO_DOLLAR ::= LETTER | "_" ;
unaryExpression ::= prefixExpression | postfixExpression | (unaryOperator "super") | ("-" "super") | (incrementOperator assignableExpression) ;
LETTER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
forStatement ::= "for" "(" forLoopParts ")" statement ;
classMemberDefinition ::= (declaration ";") | (methodSignature functionBody) ;
doStatement ::= "do" statement "while" "(" expression ")" ";" ;
operator ::= unaryOperator | binaryOperator | "[]" | "[]=" | "negate" ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | ("super" ("^" bitwiseAndExpression)+) ;
constantConstructorSignature ::= "const" qualified formalParameterList ;
STRING_CONTENT_DQ ::= α | ("\" α) | STRING_INTERPOLATION ;
fieldFormalParameter ::= finalVarOrType? "this" "." identifier ;
returnStatement ::= "return" expression? ";" ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | ("super" relationalOperator shiftExpression) ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | ("super" ("&" equalityExpression)+) ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
compoundAssignmentOperator ::= "*=" | "/=" | "~/=" | "%=" | "+=" | "-=" | "<<=" | (">" ">" ">" "="?) | ("<" "<" "="?) | "&=" | "^=" | "|=" ;
switchStatement ::= "switch" "(" expression ")" "{" switchCase* defaultCase? "}" ;
multiplicativeOperator ::= "*" | "/" | "%" | "~/" ;
functionBody ::= ("=>" expression ";") | block ;
factorySpecification ::= "factory" identifier typeParameters? ;
finallyPart ::= "finally" block ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
MULTI_LINE_STRING ::= (""""" α* """"") | ("'''" α* "'''") ;
superinterfaces ::= "extends" typeList ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
defaultCase ::= label? ("case" expression ":")* "default" ":" statements ;
assignmentOperator ::= "=" | compoundAssignmentOperator ;
additiveOperator ::= "+" | "-" ;
typeParameter ::= identifier ("extends" type)? ;
resource ::= "#" "resource" "(" stringLiteral ")" ";" ;
multiplicativeExpression ::= (unaryExpression (multiplicativeOperator unaryExpression)*) | ("super" (multiplicativeOperator unaryExpression)+) ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
block ::= "{" statements "}" ;
SINGLE_LINE_COMMENT ::= "//" α* NEWLINE? ;
returnType ::= "void" | type ;
continueStatement ::= "continue" identifier? ";" ;
factoryConstructorSignature ::= "factory" qualified typeVariables? ("." identifier)? formalParameterList ;
fieldInitializer ::= ("this" ".")? identifier "=" conditionalExpression ;
switchCase ::= label? ("case" expression ":")+ statements ;
additiveExpression ::= (multiplicativeExpression (additiveOperator multiplicativeExpression)*) | ("super" (additiveOperator multiplicativeExpression)+) ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
primary ::= thisExpression | ("super" assignableSelector) | functionExpression | literal | identifier | (newExpression constantObjectExpression) | ("(" expression ")") ;
--------------------dart::google.bgf--------------------
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
constInitializedIdentifier ::= identifier ("=" constantExpression)? ;
defaultFormalParameter ::= normalFormalParameter ("=" constantExpression)? ;
typeList ::= type ("," type)* ;
bitwiseOperator ::= "&" | "^" | "|" ;
label ::= identifier ":" ;
STRING_CONTENT_SQ ::= α | ("\\" α) ;
isOperator ::= IS "!"? ;
relationalOperator ::= ">=" | ">" | "<=" | "<" ;
classDefinition ::= (CLASS identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}") | (CLASS identifier typeParameters? interfaces? NATIVE STRING "{" classMemberDefinition* "}") ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
FACTORY ::= "factory" ;
interfaceMemberDefinition ::= (STATIC FINAL type? initializedIdentifierList ";") | (functionDeclaration ";") | (constantConstructorDeclaration ";") | (namedConstructorDeclaration ";") | (specialSignatureDefinition ";") | (variableDeclaration ";") ;
superCallOrFieldInitializer ::= (SUPER arguments) | (SUPER "." identifier arguments) | fieldInitializer ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionDeclaration functionBodyOrNative) | (returnType? getOrSet identifier formalParameterList functionBodyOrNative) | (FINAL type? staticFinalDeclarationList ";") | (constInitializedVariableDeclaration ";") ;
BREAK ::= "break" ;
initializedIdentifierList ::= initializedIdentifier ("," initializedIdentifier)* ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier IN expression) | (identifier IN expression) ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
factoryConstructorDeclaration ::= FACTORY qualified typeParameters? ("." identifier)? formalParameterList ;
HEX_DIGIT ::= "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" | DIGIT ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
THROW ::= "throw" ;
negateOperator ::= "!" | "~" ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
equalityOperator ::= "==" | "!=" | "===" | "!==" ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
expressionInParentheses ::= "(" expression ")" ;
namedConstructorDeclaration ::= identifier "." identifier formalParameterList ;
librarySource ::= SOURCE "=" "[" sourceUrls? "]" ;
mapLiteral ::= "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
staticFinalDeclaration ::= identifier "=" constantExpression ;
IMPLEMENTS ::= "implements" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | (SUPER ("|" bitwiseXorExpression)+) ;
redirection ::= ":" THIS ("." identifier)? arguments ;
FOR ::= "for" ;
CONTINUE ::= "continue" ;
IDENTIFIER_START_NO_DOLLAR ::= LETTER | "_" ;
IMPORT ::= "import" ;
OPERATOR ::= "operator" ;
NUMBER_OPT_FRACTIONAL_PART ::= ("." DIGIT+) | ε ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | (SUPER ("^" bitwiseAndExpression)+) ;
sourceUrls ::= STRING ("," STRING)* ","? ;
THIS ::= "this" ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
TRY ::= "try" ;
CATCH ::= "catch" ;
LIBRARY ::= "library" ;
functionBody ::= ("=>" expression ";") | block ;
MULTI_LINE_STRING ::= (""""" α* """"") | ("\'\'\'" α* "\'\'\'") ;
VOID ::= "void" ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
assignmentOperator ::= "=" | "*=" | "/=" | "~/=" | "%=" | "+=" | "-=" | "<<=" | ">>>=" | ">>=" | "&=" | "^=" | "|=" ;
additiveOperator ::= "+" | "-" ;
TRUE ::= "true" ;
block ::= "{" statements "}" ;
DO ::= "do" ;
fieldInitializer ::= (THIS ".")? identifier "=" conditionalExpression ;
NULL ::= "null" ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
switchCase ::= label? (CASE expression ":")+ statements ;
normalFormalParameterTail ::= ("," namedFormalParameters) | ("," normalFormalParameter normalFormalParameterTail?) ;
NEW ::= "new" ;
mapLiteralEntry ::= STRING ":" expression ;
userDefinableOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | bitwiseOperator | "==" | "~" | NEGATE | ("[" "]") | ("[" "]" "=") ;
EXTENDS ::= "extends" ;
NEWLINE ::= "\n" | "\r" ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
libraryDefinition ::= LIBRARY "{" libraryBody "}" ;
STATIC ::= "static" ;
interfaceDefinition ::= INTERFACE identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
TYPEDEF ::= "typedef" ;
FINALLY ::= "finally" ;
primaryNoFE ::= THIS | (SUPER assignableSelector) | literal | identifier | (CONST? typeArguments? compoundLiteral) | (NEW | CONST type ("." identifier)? arguments) | expressionInParentheses ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
SUPER ::= "super" ;
CLASS ::= "class" ;
expressionList ::= expression ("," expression)* ;
FINAL ::= "final" ;
arguments ::= "(" argumentList? ")" ;
functionExpressionBody ::= ("=>" expression) | block ;
directive ::= "#" identifier arguments ";" ;
catchPart ::= CATCH "(" declaredIdentifier ("," declaredIdentifier)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | iterationStatement | selectionStatement | tryStatement | (BREAK identifier? ";") | (CONTINUE identifier? ";") | (RETURN expression? ";") | (THROW expression? ";") | (expression? ";") | (ASSERT "(" conditionalExpression ")" ";") | (functionDeclaration functionBody) ;
NUMBER ::= (DIGIT+ NUMBER_OPT_FRACTIONAL_PART EXPONENT? NUMBER_OPT_ILLEGAL_END) | ("." DIGIT+ EXPONENT? NUMBER_OPT_ILLEGAL_END) ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
shiftOperator ::= "<<" | ">>>" | ">>" ;
ASSERT ::= "assert" ;
HASHBANG ::= "#!" α* NEWLINE? ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("\'" STRING_CONTENT_SQ* "\'") | ("@" "\'" α* "\'") | ("@" """ α* """) ;
selectionStatement ::= (IF "(" expression ")" statement (ELSE statement)?) | (SWITCH "(" expression ")" "{" switchCase* defaultCase? "}") ;
CONST ::= "const" ;
SET ::= "set" ;
libraryImport ::= IMPORT "=" "[" importReferences? "]" ;
functionTypeAlias ::= TYPEDEF functionPrefix typeParameters? formalParameterList ";" ;
typeArguments ::= "<" typeList ">" ;
ELSE ::= "else" ;
formalParameterList ::= ("(" namedFormalParameters? ")") | ("(" normalFormalParameter normalFormalParameterTail? ")") ;
GET ::= "get" ;
SWITCH ::= "switch" ;
incrementOperator ::= "++" | "--" ;
listLiteral ::= "[" (expressionList ","?)? "]" ;
CASE ::= "case" ;
RETURN ::= "return" ;
constInitializedVariableDeclaration ::= declaredIdentifier ("=" constantExpression)? ("," constInitializedIdentifier)* ;
IDENTIFIER_START ::= IDENTIFIER_START_NO_DOLLAR | "$" ;
IS ::= "is" ;
unaryExpression ::= postfixExpression | (prefixOperator unaryExpression) | (negateOperator SUPER) | ("-" SUPER) | (incrementOperator assignableExpression) ;
importReference ::= (IDENTIFIER ":")? STRING ;
LETTER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
IN ::= "in" ;
classMemberDefinition ::= (declaration ";") | (constructorDeclaration ";") | (methodDeclaration functionBodyOrNative) | (CONST factoryConstructorDeclaration functionNative) ;
ABSTRACT ::= "abstract" ;
DEFAULT ::= "default" ;
STRING_CONTENT_DQ ::= α | ("\\" α) ;
fieldFormalParameter ::= finalVarOrType? THIS "." identifier ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | (SUPER ("&" equalityExpression)+) ;
IF ::= "if" ;
SOURCE ::= "source" ;
multiplicativeOperator ::= "*" | "/" | "%" | "~/" ;
INTERFACE ::= "interface" ;
NATIVE ::= "native" ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
iterationStatement ::= (WHILE "(" expression ")" statement) | (DO statement WHILE "(" expression ")" ";") | (FOR "(" forLoopParts ")" statement) ;
defaultCase ::= label? (CASE expression ":")* DEFAULT ":" statements ;
WHILE ::= "while" ;
STRING ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
functionNative ::= NATIVE STRING? ";" ;
importReferences ::= importReference ("," importReference)* ","? ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
VAR ::= "var" ;
FALSE ::= "false" ;
NEGATE ::= "negate" ;
--------------------dart::spec-0.05.bgf--------------------
mapLiteralEntry ::= (identifier ":" expression) | (stringLiteral ":" expression) ;
WHITESPACE ::= ("\t" | " " | NEWLINE)+ ;
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
declaration ::= (constantConstructorSignature (redirection | initializers)?) | (functionSignature redirection) | (namedConstructorSignature redirection) | ("abstract" getterSignature) | ("abstract" setterSignature) | ("abstract" operatorSignature) | ("abstract" functionSignature) | ("static" "final" type? staticFinalDeclarationList) | ("static"? initializedVariableDeclaration) ;
setterSignature ::= "static"? returnType? "set" identifier formalParameterList ;
defaultFormalParameter ::= normalFormalParameter ("=" constantExpression)? ;
typeList ::= type ("," type)* ;
bitwiseOperator ::= "&" | "^" | "|" ;
label ::= identifier ":" ;
tryStatement ::= "try" block (catchPart+ finallyPart?) | finallyPart ;
NEWLINE ::= "\n" | "\r" ;
STRING_CONTENT_SQ ::= ("~" "\\" | "\'" | "$" | NEWLINE) | ("\\" "~" NEWLINE) | STRING_INTERPOLATION ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
isOperator ::= "is" "!"? ;
finalVarOrType ::= ("final" type?) | "var" | type ;
getterSignature ::= "static"? returnType? "get" identifier formalParameterList ;
interfaceDefinition ::= "interface" identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
relationalOperator ::= ">=" | ">" | "<=" | "<" ;
classDefinition ::= "class" identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
booleanLiteral ::= "true" | "false" ;
libraryName ::= "#" "library" "(" stringLiteral ")" ";" ;
interfaceMemberDefinition ::= ("static" "final" type? initializedIdentifierList ";") | (functionSignature ";") | (constantConstructorSignature ";") | (namedConstructorSignature ";") | (getterSignature ";") | (setterSignature ";") | (operatorSignature ";") | (variableDeclaration ";") ;
superCallOrFieldInitializer ::= ("super" arguments) | ("super" "." identifier arguments) | fieldInitializer ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionSignature functionBody) | (returnType? getOrSet identifier formalParameterList functionBody) | ("final" type? staticFinalDeclarationList ";") | (variableDeclaration ";") ;
BUILT_IN_IDENTIFIER ::= "abstract" | "assert" | "Dynamic" | "factory" | "get" | "implements" | import | "interface" | "library" | "negate" | operator | "set" | "source" | "static" | "typedef" ;
stringLiteral ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
superclass ::= "extends" type ;
MULTI_LINE_COMMENT ::= "/*" (MULTI_LINE_COMMENT | ("~" "*/"))* "*/" ;
interfaces ::= "implements" typeList ;
newExpression ::= "new" type ("." identifier)? arguments ;
methodSignature ::= factoryConstructorSignature | ("static" functionSignature) | getterSignature | setterSignature | operatorSignature | (functionSignature initializers?) | (namedConstructorSignature initializers?) ;
STRING_INTERPOLATION ::= ("$" IDENTIFIER_NO_DOLLAR) | ("$" "{" "Expression" "}") ;
thisExpression ::= "this" ;
arguments ::= "(" argumentList? ")" ;
expressionList ::= expression ("," expression)* ;
prefixOperator ::= "-" | negateOperator ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier "in" expression) | (identifier "in" expression) ;
ifStatement ::= "if" "(" expression ")" statement ("else" statement)? ;
functionExpressionBody ::= ("=>" expression) | block ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
scriptTag ::= "#!" ("~" NEWLINE)* NEWLINE ;
catchPart ::= "catch" "(" simpleFormalParameter ("," simpleFormalParameter)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | forStatement | whileStatement | doStatement | switchStatement | ifStatement | tryStatement | breakStatement | continueStatement | returnStatement | throwStatement | expressionStatement | assertStatement | (functionSignature functionBody) ;
getOrSet ::= "get" | "set" ;
assertStatement ::= "assert" "(" conditionalExpression ")" ";" ;
HEX_DIGIT ::= ("a" "." "." "f") | ("A" "." "." "F") | DIGIT ;
NUMBER ::= ("+"? DIGIT+ ("." DIGIT+)? EXPONENT?) | ("+"? "." DIGIT+ EXPONENT?) ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
shiftOperator ::= "<<" | ">>>" | ">>" ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
negateOperator ::= "!" | "~" ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("'" STRING_CONTENT_SQ* "'") | ("@' ' '" ("~" "'" | NEWLINE)* "'") | ("@" """ ("~" """ | NEWLINE)* """) ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
assignableExpression ::= (primary (arguments* assignableSelector)+) | ("super" assignableSelector) | identifier ;
normalFormalParameters ::= normalFormalParameter ("," normalFormalParameter)* ;
ESCAPE_SEQUENCE ::= "\n" | "\r" | "\f" | "\b" | "\t" | "\v" | ("\x" HEX_DIGIT HEX_DIGIT) | ("\u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("\u{" HEX_DIGIT_SEQUENCE "}") ;
functionTypeAlias ::= "typedef" functionPrefix typeParameters? formalParameterList ";" ;
whileStatement ::= "while" "(" expression ")" statement ;
equalityOperator ::= "==" | "!=" | "===" | "!==" ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
typeArguments ::= "<" typeList ">" ;
shiftExpression ::= (additiveExpression (shiftOperator additiveExpression)*) | ("super" (shiftOperator additiveExpression)+) ;
constObjectExpression ::= "const" type ("." identifier)? arguments ;
formalParameterList ::= ("(" ")") | ("(" normalFormalParameters ("," namedFormalParameters)? ")") | ("(" namedFormalParameters ")") ;
expressionStatement ::= expression? ";" ;
namedConstructorSignature ::= identifier "." identifier formalParameterList ;
incrementOperator ::= "++" | "--" ;
mapLiteral ::= "const"? typeArguments? "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | ("super" equalityOperator relationalExpression) ;
listLiteral ::= "const"? typeArguments? "[" (expressionList ","?)? "]" ;
breakStatement ::= "break" identifier? ";" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
IDENTIFIER_START ::= IDENTIFIER_START_NO_DOLLAR | "$" ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | ("super" ("|" bitwiseXorExpression)+) ;
redirection ::= ":" "this" ("." identifier)? arguments ;
throwStatement ::= "throw" expression? ";" ;
include ::= "#" "source" "(" stringLiteral ")" ";" ;
nullLiteral ::= "null" ;
IDENTIFIER_START_NO_DOLLAR ::= "LETTER" | "_" ;
unaryExpression ::= (prefixOperator unaryExpression) | postfixExpression | (unaryOperator "super") | ("-" "super") | (incrementOperator assignableExpression) ;
forStatement ::= "for" "(" forLoopParts ")" statement ;
import ::= "#" "import" "(" stringLiteral ("," "prefix:" stringLiteral)? ")" ";" ;
classMemberDefinition ::= (declaration ";") | (methodSignature functionBody) ;
doStatement ::= "do" statement "while" "(" expression ")" ";" ;
operator ::= unaryOperator | binaryOperator | ("[" "]") | ("[" "]" "=") | "negate" ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | ("super" ("^" bitwiseAndExpression)+) ;
constantConstructorSignature ::= "const" qualified formalParameterList ;
STRING_CONTENT_DQ ::= ("~" "\\" | """ | "$" | NEWLINE) | ("\\" "~" NEWLINE) | STRING_INTERPOLATION ;
fieldFormalParameter ::= finalVarOrType? "this" "." identifier ;
returnStatement ::= "return" expression? ";" ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | ("super" relationalOperator shiftExpression) ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | ("super" ("&" equalityExpression)+) ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
compoundAssignmentOperator ::= "*=" | "/=" | "~/=" | "%=" | "+=" | "-=" | "<<=" | ">>>=" | ">>=" | "&=" | "^=" | "|=" ;
switchStatement ::= "switch" "(" expression ")" "{" switchCase* defaultCase? "}" ;
multiplicativeOperator ::= "*" | "/" | "%" | "~/" ;
functionBody ::= ("=>" expression ";") | block ;
factorySpecification ::= "factory" qualified typeParameters? ;
finallyPart ::= "finally" block ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
MULTI_LINE_STRING ::= (""""" ("~" """"")* """"") | ("'''" ("~" "'''")* "'''") ;
superinterfaces ::= "extends" typeList ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
defaultCase ::= label? ("case" expression ":")* "default" ":" statements ;
assignmentOperator ::= "=" | compoundAssignmentOperator ;
additiveOperator ::= "+" | "-" ;
typeParameter ::= identifier ("extends" type)? ;
resource ::= "#" "resource" "(" stringLiteral ")" ";" ;
multiplicativeExpression ::= (unaryExpression (multiplicativeOperator unaryExpression)*) | ("super" (multiplicativeOperator unaryExpression)+) ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
block ::= "{" statements "}" ;
SINGLE_LINE_COMMENT ::= "//" "~" NEWLINE* NEWLINE? ;
returnType ::= "void" | type ;
continueStatement ::= "continue" identifier? ";" ;
factoryConstructorSignature ::= "factory" qualified typeParameters? ("." identifier)? formalParameterList ;
fieldInitializer ::= ("this" ".")? identifier "=" conditionalExpression ;
switchCase ::= label? ("case" expression ":")+ statements ;
additiveExpression ::= (multiplicativeExpression (additiveOperator multiplicativeExpression)*) | ("super" (additiveOperator multiplicativeExpression)+) ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
primary ::= thisExpression | ("super" assignableSelector) | functionExpression | literal | identifier | newExpression | constantObjectExpression | ("(" expression ")") ;
--------------------eiffel::bezault.bgf--------------------
Creation ::= "!" Type? "!" Writable Creation_call? ;
Deferred ::= "deferred" ;
Entity_declaration_list ::= (Entity_declaration_group ";")* ;
Constraint ::= "-" ">" Class_type ;
Boolean_constant ::= "True" | "False" ;
Assignment_attempt ::= Writable "?=" Expression ;
Feature_set ::= Feature_list | "all" ;
Strip ::= "Strip" "(" Attribute_list ")" ;
Precondition ::= "require" "else"? Assertion ;
Class_type_expanded ::= "expanded" Class_type ;
Parent_list ::= (Parent ";")* ;
Call_target ::= Parenthesized | "Result" | "Current" | Precursor ;
Tag_mark ::= Tag ":" ;
Unique ::= "Unique" ;
Indexing ::= "indexing" Index_list ;
Assignment ::= Writable ":=" Expression ;
External ::= "external" Language_name External_name? ;
Manifest_array ::= "<<" Expression_list ">>" ;
Check ::= "check" Assertion "end" ;
Then_part_list ::= (Then_part "elseif")+ ;
Clients ::= "{" Class_list "}" ;
Creators ::= "creation" (Creation_clause "creation")+ ;
Feature_list ::= (Feature_name ",")* ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Variant ::= "variant" Tag_mark? Expression ;
Interval ::= Choice_constant ".." Choice_constant ;
Type_list ::= (Type ",")* ;
Assertion ::= (Assertion_clause ";")* ;
Class_type_separate ::= "separate" Class_type ;
Rename_list ::= (Rename_pair ",")* ;
External_name ::= "alias" Manifest_string ;
Rename ::= "rename" Rename_list ;
Sign ::= "+" | "-" ;
Features ::= "feature" (Feature_clause "feature")+ ;
Postcondition ::= "ensure" "then"? Assertion ;
Address_mark ::= Feature_name | "Current" | "Result" ;
Wide_manifest_string ::= "$" Manifest_string ;
Anchor ::= Identifier | "Current" ;
Address ::= "$" Address_mark ;
Identifier_list ::= (Identifier ",")+ ;
Class_header ::= Header_mark? "class" Class_name ;
Choices ::= (Choice ",")* ;
Redefine ::= "redefine" Feature_list ;
Bit_type ::= "BIT" Bit_length ;
Compound ::= (Instruction ";")* ;
Identifier ::= Letter (Letter | Decimal_digit | "_")* ;
Wide_character_constant ::= "$" Character_constant ;
Expression_list ::= (Expression ",")* ;
When_part_list ::= "when" (When_part "when")+ ;
Loop ::= Initialization Invariant? Variant? Loop_body "end" ;
Constant_or_routine ::= "is" Feature_value ;
Writable ::= Identifier | "Result" ;
Call_chain ::= (Unqualified_call ".")+ ;
Initialization ::= "from" Compound ;
Exit ::= "until" Boolean_expression ;
Loop_body ::= Exit "loop" Compound ;
Parent_qualification ::= "{" Class_name "}" ;
Index_terms ::= (Index_value ",")+ ;
Obsolete ::= "obsolete" Message ;
Expression ::= "Current" | "Result" | Call | Operator_expression | Equality | Manifest_array | Old | Strip | Boolean_constant | Bit_constant | Integer | Real | Manifest_string | Character_constant | Wide_character_constant | Wide_manifest_string | Hexadecimal_constant ;
When_part ::= Choices "then" Compound ;
New_feature ::= "frozen"? Feature_name ;
Formal_generic_list ::= (Formal_generic ",")* ;
Then_part ::= Boolean_expression "then" Compound ;
Anchored ::= "like" Anchor ;
Undefine ::= "undefine" Feature_list ;
Debug ::= "debug" Debug_keys? Compound "end" ;
Rescue ::= "rescue" Compound ;
Prefix ::= "prefix" """ Prefix_operator """ ;
Index ::= Identifier ":" ;
Infix ::= "infix" """ Infix_operator """ ;
Local_declarations ::= "local" Entity_declaration_list ;
Procedure_list ::= (Procedure_name ",")* ;
Inheritance ::= "inherit" Parent_list ;
Comparison ::= "=" | "/=" ;
Call_qualifier ::= Call_target "." ;
Formal_arguments ::= "(" Entity_declaration_list ")" ;
New_feature_list ::= (New_feature ",")+ ;
Class_list ::= (Class_name ",")* ;
Routine ::= Obsolete? Header_comment? Precondition? Local_declarations? Routine_body Postcondition? Rescue? "end" ("--" Feature_name)? ;
Binary ::= "+" | "-" | "*" | "/" | "<" | ">" | "<=" | ">=" | "//" | "\\" | "^" | "and" | "or" | "xor" | ("and" "then") | ("or" "else") | "implies" ;
Invariant ::= "invariant" Assertion ;
Header_mark ::= "deferred" | "expanded" | "separate" ;
Integer ::= (Decimal_digit+) | (Decimal_digit (Decimal_digit Decimal_digit?)? ("_" Decimal_digit Decimal_digit Decimal_digit)+) ;
Creation_call ::= "." Procedure_name Actuals? ;
Parenthesized ::= "(" Expression ")" ;
Select ::= "select" Feature_list ;
Feature_adaptation ::= Rename? New_exports? Undefine? Redefine? Select? "end" ;
Rename_pair ::= Feature_name "as" Feature_name ;
Precursor ::= Parent_qualification? "Precursor" Actuals? ;
Else_part ::= "else" Compound ;
Class_declaration ::= Indexing? Class_header Formal_generics? Obsolete? Inheritance? Creators? Features? Invariant? "end" ("--" "class" Class_name)? ;
Type_mark ::= ":" Type ;
Actual_list ::= (Actual ",")* ;
Unary ::= "not" | "+" | "-" ;
Feature_declaration_list ::= (Feature_declaration ";")* ;
Index_list ::= (Index_clause ";")* ;
Debug_key_list ::= (Debug_key ",")* ;
New_export_list ::= (New_export_item ";")* ;
Retry ::= "retry" ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Routine_mark ::= "do" | "once" ;
Old ::= "old" Expression ;
Actuals ::= "(" Actual_list ")" ;
Attribute_list ::= (Attribute ",")* ;
Debug_keys ::= "(" Debug_key_list ")" ;
New_exports ::= "export" New_export_list ;
--------------------eiffel::cordy.bgf--------------------
Creation ::= ("!!" Writable Creation_call?) | ("!" Type? "!" Writable Creation_call?) ;
Deferred ::= IN "deferred" NL EX ;
Constraint ::= "->" Restricted_type ;
Boolean_constant ::= "true" | "false" ;
Assignment_attempt ::= Writable "?=" Expression ;
Feature_set ::= Feature_list | "all" ;
Strip ::= "strip" "(" Attribute_list ")" ;
Precondition ::= "require" "else"? Assertion ;
Class_type_expanded ::= "expanded" Class_type ;
when_When_part ::= "when" When_part ;
Tag_mark ::= Tag ":" ;
Unique ::= "unique" ;
Indexing ::= NL "indexing" Index_list ;
Assignment ::= Writable ":=" Expression ;
Actual_generics ::= "[" Type_list "]" ;
External ::= "external" Language_name External_name? NL ;
Manifest_array ::= "<<" Expression_list ">>" ;
Check ::= "check" Assertion "end" ;
Clients ::= "{" Class_list "}" ;
Feature_list ::= IN NL {Feature_name ","}* EX ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Variant ::= "variant" Tag_mark? Expression ;
Interval ::= Constant ".." Constant ;
Type_list ::= {Type ","}* ;
feature_Feature_clause ::= NL "feature" Clients? Feature_clause ;
External_name ::= "alias" Manifest_string ;
Rename_list ::= {Rename_pair ","}* ;
Rename ::= "rename" Rename_list NL ;
Sign ::= "+" | "-" ;
Postcondition ::= "ensure" "then"? Assertion ;
Address_mark ::= Feature_name | "Current" | "Result" ;
Anchor ::= Identifier | "Current" ;
Address ::= "$" Address_mark ;
Class_header ::= Header_mark? "class" Class_name ;
Choices ::= {Choice ","}* ;
dot_Unqualified_call ::= "." Unqualified_call ;
creation_Creation_clause ::= NL "creation" Creation_clause ;
Redefine ::= "redefine" Feature_list NL ;
elseif_Then_part ::= "elseif" Then_part ;
Bit_type ::= "BIT" Constant ;
Local ::= Identifier | "Result" ;
Restricted_actual_generics ::= "[" Restricted_type_list "]" ;
Parenthesized_qualifier ::= Parenthesized "." ;
Expression_list ::= {Expression ","}* ;
Separator ::= ";"? NL ;
Loop ::= Initialization Invariant? Variant? Loop_body "end" ;
Initialization ::= "from" Compound ;
Restricted_type_list ::= {Restricted_type ","}* ;
Exit ::= "until" Boolean_expression ;
Loop_body ::= Exit NL "loop" Compound ;
Index_terms ::= {Index_value ","}* ;
is_Constant ::= "is" Feature_value ;
Obsolete ::= "obsolete" Message NL ;
When_part ::= Choices "then" Compound ;
New_feature ::= "frozen"? Feature_name ;
Formal_generic_list ::= {Formal_generic ","}* ;
Then_part ::= Boolean_expression "then" Compound ;
Anchored ::= "like" Anchor ;
Undefine ::= "undefine" Feature_list NL ;
Rescue ::= "rescue" Compound ;
Debug ::= "debug" Debug_keys? Compound "end" ;
Prefix ::= "prefix" Prefix_name ;
Index ::= Identifier ":" ;
Infix ::= "infix" Infix_name ;
Local_declarations ::= "local" Entity_declaration_list ;
Formal_generics ::= "[" Formal_generic_list "]" ;
Inheritance ::= "inherit" NL IN Parent_list EX ;
Comparison ::= "=" | "/=" ;
Null ::= ";" NL ;
Formal_arguments ::= "(" Formal_entity_declaration_list ")" ;
Class_list ::= {Class_name ","}* ;
Routine ::= Obsolete? Header_comment? Precondition? Local_declarations? Routine_body Postcondition? Rescue? "end" ;
Binary ::= "+" | "-" | "*" | "/" | "<" | ">" | "<=" | ">=" | "//" | "\\" | "^" | "and" | "or" | "xor" | ("and" "then") | ("or" "else") | "implies" ;
Invariant ::= "invariant" Assertion ;
Header_mark ::= "deferred" | "expanded" ;
Creation_call ::= "." Unqualified_call ;
Parenthesized ::= "(" Expression ")" ;
Select ::= "select" Feature_list NL ;
Feature_adaptation ::= NL IN Rename? New_exports? Undefine? Redefine? Select? EX "end" ;
Rename_pair ::= Feature_name "as" Feature_name ;
Else_part ::= "else" Compound ;
Read_only ::= Formal | "Current" ;
Formal_entity_declaration_group_Separator ::= Entity_declaration_group ";"? ;
Class_declaration ::= Indexing? NL Class_header Formal_generics? NL IN Obsolete? Inheritance? Creators? Features? Invariant? EX "end" ;
Type_mark ::= ":" Type ;
Actual_list ::= {Actual ","}* ;
is_Routine ::= "is" NL Routine ;
Unary ::= "not" | "+" | "-" ;
Debug_key_list ::= {Debug_key ","}* ;
Retry ::= "retry" ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Routine_mark ::= "do" | "once" ;
Old ::= "old" Expression ;
Actuals ::= "(" Actual_list ")" ;
Attribute_list ::= {Identifier ","}* ;
Debug_keys ::= "(" Debug_key_list ")" ;
New_exports ::= "export" New_export_list NL ;
--------------------eiffel::iso-25436-2006.bgf--------------------
Comment_break ::= New_line Blanks_or_tabs? "--" ;
Inline_agent ::= "agent" Formal_arguments? Type_mark? Attribute_or_routine? Agent_actuals? ;
Deferred ::= "deferred" ;
Entity_declaration_list ::= {Entity_declaration_group ";"}+ ;
Converter_list ::= {Converter ","}+ ;
Constraint ::= "->" Constraining_types Constraint_creators? ;
Boolean_constant ::= "True" | "False" ;
Precondition ::= "require" "else"? Assertion ;
Feature_clause ::= "feature" Clients? Header_comment? Feature_declaration_list ;
Converters ::= "convert" Converter_list ;
Parent_list ::= {Parent ";"}+ ;
Basic_manifest_string ::= """ String_content """ ;
Explicit_creation_type ::= "{" Type "}" ;
Note_values ::= {Note_item ","}+ ;
Assignment ::= Variable ":=" Expression ;
Actual_generics ::= "[" Type_list "]" ;
External ::= "external" External_language External_name? ;
Tuple_parameter_list ::= "[" Tuple_parameters "]" ;
Then_part_list ::= {Then_part "elseif"}+ ;
Check ::= "check" Assertion Notes? "end" ;
Clients ::= "{" Class_list "}" ;
DLL_external ::= """ "dll" "windows"? DLL_identifier DLL_index? External_signature? External_file_use? """ ;
Assertion ::= {Assertion_clause ";"}* ;
Constant_interval ::= Constant ".." Constant ;
Rename_list ::= {Rename_pair ","}+ ;
Sign ::= "+" | "-" ;
Creation_expression ::= "create" Explicit_creation_type Explicit_creation_call? ;
Manifest_tuple ::= "[" Expression_list "]" ;
Anchor ::= Feature_name | "Current" ;
Address ::= "$" Variable ;
Open_bracket ::= "[" | "{" ;
Choices ::= {Choice ","}+ ;
Redefine ::= "redefine" Feature_list ;
Non_object_call ::= "{" Type "}." Unqualified_call ;
Only ::= "only" Feature_list? ;
Compound ::= {Instruction ";"}* ;
Creation_procedure_list ::= {Creation_procedure ","}+ ;
Constraint_creators ::= "create" Feature_list "end" ;
Explicit_value ::= "=" Manifest_constant ;
Expression_list ::= {Expression ","}* ;
Loop ::= Initialization Invariant? Exit_condition Loop_body Variant? "end" ;
Agent_qualified ::= Agent_target "." Agent_unqualified ;
Assigner_call ::= Expression ":=" Expression ;
Initialization ::= "from" Compound ;
Obsolete ::= "obsolete" Message ;
When_part ::= "when" Choices "then" Compound ;
Then_part ::= Boolean_expression "then" Compound ;
Undefine ::= "undefine" Feature_list ;
Integer_base_letter ::= "b" | "c" | "x" | "B" | "C" | "X" ;
Rescue ::= "rescue" Compound ;
Bracket_expression ::= Bracket_target "[" Actuals "]" ;
Creation_clause ::= "create" Clients? Header_comment? Creation_procedure_list ;
Local_declarations ::= "local" Entity_declaration_list? ;
Formal_generics ::= "[" Formal_generic_list "]" ;
Note_list ::= {Note_entry ";"}* ;
Formal_generic ::= "frozen"? Formal_generic_name Constraint? ;
New_feature_list ::= {New_feature ","}+ ;
Once ::= "once" ("(" Key_list ")")? ;
Notes ::= "note" Note_list ;
Constraint_list ::= {Single_constraint ","}+ ;
Invariant ::= "invariant" Assertion ;
Key_list ::= {Manifest_string ","}+ ;
Parenthesized ::= "(" Expression ")" ;
Renaming ::= Rename "end" ;
Note_name ::= Identifier ":" ;
Read_only ::= Formal | Constant_attribute | "Current" ;
Parenthesized_target ::= "(|" Expression "|)" ;
Type_mark ::= ":" Type ;
Actual_list ::= {Expression ","}+ ;
Feature_declaration_list ::= {Feature_declaration ";"}* ;
Retry ::= "retry" ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Routine_mark ::= "do" | Once ;
Bracket ::= "[]" ;
Actuals ::= "(" Actual_list ")" ;
New_exports ::= "export" New_export_list ;
Conversion_query ::= Feature_name ":{" Type_list "}" ;
Attribute ::= "attribute" Compound ;
Feature_set ::= Feature_list | "all" ;
Object_test ::= "{" Identifier ":" Type "}" Expression ;
Tag_mark ::= Tag ":" ;
Tuple_type ::= "TUPLE" Tuple_parameter_list? ;
Once_string ::= "once" Manifest_string ;
Feature_list ::= {Feature_name ","}+ ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Variant ::= "variant" Tag_mark? Expression ;
External_signature ::= "signature" External_argument_types? (":" External_type)? ;
Type_list ::= {Type ","}+ ;
External_name ::= "alias" Manifest_string ;
Rename ::= "rename" Rename_list ;
Postcondition ::= "ensure" "then"? Assertion Only? ;
Exit_condition ::= "until" Boolean_expression ;
Agent_actual_list ::= {Agent_actual ","}+ ;
Identifier_list ::= {Identifier ","}+ ;
Class_header ::= Header_mark? "class" Class_name ;
Placeholder ::= Manifest_type? "?" ;
Inherit_clause ::= "inherit" Non_conformance? Parent_list ;
Integer_base ::= "0" Integer_base_letter ;
Creation_instruction ::= "create" Explicit_creation_type? Creation_call ;
Multiple_constraint ::= "{" Constraint_list "}" ;
External_argument_types ::= "(" External_type_list ")" ;
Local ::= Identifier | "Result" ;
Agent_actuals ::= "(" Agent_actual_list ")" ;
Attachment_mark ::= "?" | "!" ;
C_external ::= """ "C" "inline"? External_signature? External_file_use? """ ;
Close_bracket ::= "]" | "}" ;
Comment ::= "--" {Simple_string Comment_break}* ;
Verbatim_string_closer ::= Close_bracket Simple_string? """ ;
Object_call ::= (Target ".")? Unqualified_call ;
Loop_body ::= "loop" Compound ;
Verbatim_string_opener ::= """ Simple_string? Open_bracket ;
Parent_qualification ::= "{" Class_name "}" ;
External_system_file ::= "<" Simple_string ">" ;
New_feature ::= "frozen"? Extended_feature_name ;
Formal_generic_list ::= {Formal_generic ","}+ ;
Anchored ::= Attachment_mark? "like" Anchor ;
Debug ::= "debug" ("(" Key_list ")")? Compound "end" ;
Assigner_mark ::= "assign" Feature_name ;
Alias ::= "alias" """ Alias_name """ "convert"? ;
External_type_list ::= {External_type ","}* ;
External_file_list ::= {External_file ","}+ ;
Manifest_type ::= "{" Type "}" ;
Comparison ::= "=" | "/=" | "~" | "/~" ;
Formal_arguments ::= "(" Entity_declaration_list ")" ;
Class_list ::= {Class_name ","}+ ;
Formal_generic_name ::= "?"? Identifier ;
Binary ::= "+" | "-" | "*" | "/" | "//" | "\\" | "^" | ".." | "<" | ">" | "<=" | ">=" | "and" | "or" | "xor" | ("and" "then") | ("or" "else") | "implies" | Free_binary ;
Header_mark ::= "deferred" | "expanded" | "frozen" ;
External_user_file ::= """ Simple_string """ ;
Select ::= "select" Feature_list ;
Feature_adaptation ::= Undefine? Redefine? Rename? New_exports? Select? "end" ;
Rename_pair ::= Feature_name "as" Extended_feature_name ;
Character_constant ::= "'" Character "'" ;
Else_part ::= "else" Compound ;
External_file_use ::= "use" External_file_list ;
Explicit_creation_call ::= "." Unqualified_call ;
Class_declaration ::= Notes? Class_header Formal_generics? Obsolete? Inheritance? Creators? Converters? Features? Invariant? Notes? "end" ;
Unary ::= "not" | "+" | "-" | Free_unary ;
Digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" | "_" ;
Attribute_or_routine ::= Precondition? Local_declarations? Feature_body Postcondition? Rescue? "end" ;
Type_interval ::= Manifest_type ".." Manifest_type ;
Conversion_procedure ::= Feature_name "({" Type_list "})" ;
New_export_list ::= {New_export_item ";"}+ ;
CPP_external ::= """ "C++" "inline" External_signature? External_file_use? """ ;
Old ::= "old" Expression ;
Call_agent ::= "agent" Call_agent_body ;
Non_conformance ::= "{" "NONE" "}" ;
--------------------fortran::derricks.bgf--------------------
EndSelectStmt ::= LblDef "end" "select" EndName? EOS ;
EndTypeStmt ::= LblDef "end" "type" TypeName? EOS ;
AccessIdList ::= AccessId ("," AccessId)* ;
RdIoCtlSpecList ::= (UnitIdentifier "," IoControlSpec) | (UnitIdentifier "," FormatIdentifier) | IoControlSpec | (RdIoCtlSpecList "," IoControlSpec) ;
CharLength ::= ("(" TypeParamValue ")") | ScalarIntLiteralConstant ;
FunctionArgList ::= FunctionArg | (FunctionArgList "," FunctionArg) | (SectionSubscriptList "," FunctionArg) ;
InquireStmt ::= (LblDef "inquire" "(" InquireSpecList ")" EOS) | (LblDef "inquire" "(" "iolength" "=" ScalarVariable ")" OutputItemList EOS) ;
DeferredShapeSpecList ::= DeferredShapeSpec ("," DeferredShapeSpec)* ;
LoopControl ::= ("while" "(" Expr ")") | (VariableName "=" Int-Real-Dp-Expression "," Int-Real-Dp-Expression ("," Int-Real-Dp-Expression)?) ;
ArrayAllocation ::= ArrayName ("(" DeferredShapeSpecList ")")? ;
AndOp ::= ".and." ;
PrintStmt ::= LblDef "print" FormatIdentifier ("," OutputItemList)? EOS ;
EquivalenceStmt ::= LblDef "equivalence" EquivalenceSetList EOS ;
NotOp ::= ".not." ;
CloseSpecList ::= CloseSpec ("," CloseSpec)* ;
ParameterStmt ::= LblDef "parameter" "(" NamedConstantDefList ")" EOS ;
ArithmeticIfStmt ::= LblDef "if" "(" ScalarNumericExpr ")" LblRef "," LblRef "," LblRef EOS ;
InquireSpec ::= ("unit" "=" UnitIdentifier) | ("file" "=" CExpr) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("exist" "=" ScalarVariable) | ("opened" "=" ScalarVariable) | ("number" "=" ScalarVariable) | ("named" "=" ScalarVariable) | ("name" "=" ScalarVariable) | ("access" "=" ScalarVariable) | ("sequential" "=" ScalarVariable) | ("direct" "=" ScalarVariable) | ("form" "=" ScalarVariable) | ("formatted" "=" ScalarVariable) | ("unformatted" "=" ScalarVariable) | ("recl" "=" Expr) | ("nextrec" "=" ScalarVariable) | ("blank" "=" ScalarVariable) | ("position" "=" ScalarVariable) | ("action" "=" ScalarVariable) | ("read" "=" ScalarVariable) | ("write" "=" ScalarVariable) | ("readwrite" "=" ScalarVariable) | ("delim" "=" ScalarVariable) | ("pad" "=" ScalarVariable) ;
SFDummyArgNameList ::= SFDummyArgName ("," SFDummyArgName)* ;
SavedEntityList ::= SavedEntity ("," SavedEntity)* ;
NamedConstantDef ::= NamedConstant "=" Expr ;
LabelDoStmt ::= LblDef "do" LblRef ","? LoopControl EOS ;
ConnectSpecList ::= ConnectSpec ("," ConnectSpec)* ;
IfThenStmt ::= LblDef (IfConstructName ":")? "if" "(" ScalarLogicalExpr ")" "then" EOS ;
PointerStmtObjectList ::= PointerStmtObject ("," PointerStmtObject)* ;
Primary ::= ArrayConstructor | UnsignedArithmeticConstant | Name | DataRef | FunctionReference | ("(" Expr ")") | Scon | LogicalConstant ;
BlockDoConstruct ::= (LblDef "do" LblRef EOS) | (LblDef "do" LoopControl EOS) | (LblDef "do" EOS) | (LblDef Name ":" "do" LblRef LoopControl EOS) | (LblDef Name ":" "do" LblRef EOS) | (LblDef Name ":" "do" LoopControl EOS) | (LblDef Name ":" "do" EOS) ;
DataStmtValue ::= Constant | (NamedConstantUse "*" Constant) ;
TypeParamValue ::= SpecificationExpr | "*" ;
PointerField ::= (Name "(" SFExprList ")" "%" Name) | (Name "(" SFDummyArgNameList ")" "%" Name) | (Name "%" Name) | (PointerField FieldSelector) ;
Sign ::= "+" | "-" ;
AssignedGotoStmt ::= (LblDef GoToKw VariableName EOS) | (LblDef GoToKw VariableName ","? "(" LblRef ("," LblRef)* ")" EOS) ;
FieldSelector ::= ("(" SectionSubscriptList ")" "%" Name) | ("%" Name) ;
EndWhereStmt ::= LblDef "end" "where" EOS ;
ComponentDefStmt ::= (LblDef TypeSpec ("," ComponentAttrSpecList)? ":" ":" ComponentDeclList EOS) | (LblDef TypeSpec ComponentDeclList EOS) ;
UseStmt ::= (LblDef "use" Name ("," RenameList)? EOS) | (LblDef "use" Name "," "only" ":" OnlyList? EOS) ;
DataStmtObjectList ::= DataStmtObject ("," DataStmtObject)* ;
PositionEditDescr ::= ("T" Icon) | ("TL" Icon) | ("TR" Icon) | (Icon "X") ;
Comblock ::= "/" CommonBlockName? "/" ;
Only ::= GenericSpec | ((Ident "=>")? UseName) ;
FormatItem ::= (Icon? DataEditDescr) | ControlEditDescr | CharStringEditDescr | (Icon? "(" FormatItemList ")") | (FormatItem ":" FormatItem) ;
InputImpliedDo ::= ("(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
ActualArg ::= ((Name "=")? Expr) | ((Name "=")? "*" LblRef) ;
BackspaceStmt ::= (LblDef "backspace" UnitIdentifier EOS) | (LblDef "backspace" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
FunctionParList ::= "(" (FunctionPar ("," FunctionPar)*)? ")" ;
DataIDoObjectList ::= DataIDoObject ("," DataIDoObject)* ;
DeallocateStmt ::= (LblDef "deallocate" "(" AllocateObjectList "," "stat" "=" Variable ")" EOS) | (LblDef "deallocate" "(" AllocateObjectList ")" EOS) ;
ExplicitShapeSpecList ::= ExplicitShapeSpec ("," ExplicitShapeSpec)* ;
AllocateStmt ::= (LblDef "allocate" "(" AllocationList "," "stat" "=" Variable ")" EOS) | (LblDef "allocate" "(" AllocationList ")" EOS) ;
RdCtlSpec ::= RdUnitId | ("(" RdIoCtlSpecList ")") ;
AssumedShapeSpec ::= LowerBound? ":" ;
Constant ::= NamedConstantUse | UnsignedArithmeticConstant | ("+" UnsignedArithmeticConstant) | ("-" UnsignedArithmeticConstant) | Scon | LogicalConstant | (Icon "_" Scon) | (NamedConstantUse "_" Scon) | StructureConstructor | BozLiteralConstant ;
ElseStmt ::= LblDef "else" IfConstructName? EOS ;
CloseStmt ::= LblDef "close" "(" CloseSpecList ")" EOS ;
PauseStmt ::= LblDef "pause" (Icon | Scon)? EOS ;
AllocationList ::= Allocation ("," Allocation)* ;
DeferredShapeSpec ::= ":" ;
CaseValueRange ::= Expr | (Expr ":") | (":" Expr) | (Expr ":" Expr) ;
AllocateObjectList ::= AllocateObject ("," AllocateObject)* ;
SignEditDescr ::= "S" | "SP" | "SS" ;
WhereConstructStmt ::= LblDef "where" "(" MaskExpr ")" EOS ;
EquivalenceSet ::= "(" EquivalenceObject "," EquivalenceObject ("," EquivalenceObject)* ")" ;
CloseSpec ::= UnitIdentifier | ("unit" "=" UnitIdentifier) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("status" "=" CExpr) ;
ComplexConst ::= "(" Expr "," Expr ")" ;
KindSelector ::= ("(" ("kind" "=")? Expr ")") | ("*" Icon) ;
PointerAssignmentStmt ::= (LblDef Name "=>" Target EOS) | (LblDef Name "%" Name "=>" Target EOS) | (LblDef Name "%" DataRef "=>" Target EOS) | (LblDef Name "(" SFExprList ")" "%" Name "=>" Target EOS) | (LblDef Name "(" SFExprList ")" "%" DataRef "=>" Target EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" Name "=>" Target EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" DataRef "=>" Target EOS) ;
DataStmt ::= LblDef "data" Datalist EOS ;
EndProgramStmt ::= (LblDef "end" EOS) | (LblDef "end" "program" EndName? EOS) ;
RdUnitId ::= ("(" UFExpr ")") | ("(" "*" ")") ;
CharStringEditDescr ::= Scon | (Icon "H" Character+) ;
CycleStmt ::= LblDef "cycle" EndName? EOS ;
LogicalConstant ::= (".true." "_" KindParam) | (".false." "_" KindParam) | ".true." | ".false." ;
InquireSpecList ::= (UnitIdentifier "," InquireSpec ("," InquireSpec)*) | (InquireSpec ("," InquireSpec)*) ;
FunctionPrefix ::= ("recursive" "function") | ("recursive" TypeSpec "function") | (TypeSpec "recursive" "function") | (TypeSpec? "function") ;
DataImpliedDo ::= "(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr ("," Expr)? ")" ;
TypeDeclarationStmt ::= (LblDef TypeSpec ("," AttrSpec)* ":" ":" EntityDecl ("," EntityDecl)* EOS) | (LblDef TypeSpec EntityDecl ("," EntityDecl)* EOS) ;
ContainsStmt ::= LblDef "contains" EOS ;
StructureConstructor ::= TypeName "(" Expr ("," Expr)* ")" ;
SFExprList ::= (SFExpr ":" Expr ":" Expr) | (SFExpr ":" ":" Expr) | (":" Expr ":" Expr) | (":" ":" Expr) | ":" | (":" Expr) | SFExpr | (SFExpr ":") | (SFExpr ":" Expr) | (SFExprList "," SectionSubscript) | (SFDummyArgNameList "," ":") | (SFDummyArgNameList "," ":" Expr) | (SFDummyArgNameList "," SFExpr ":") | (SFDummyArgNameList "," SFExpr ":" Expr) ;
EndInterfaceStmt ::= LblDef "end" "interface" EOS ;
NamedConstantDefList ::= NamedConstantDef ("," NamedConstantDef)* ;
PowerOp ::= "**" ;
ConnectSpec ::= UnitIdentifier | ("unit" "=" UnitIdentifier) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("file" "=" CExpr) | ("status" "=" CExpr) | ("access" "=" CExpr) | ("form" "=" CExpr) | ("recl" "=" Expr) | ("blank" "=" CExpr) | ("position" "=" CExpr) | ("action" "=" CExpr) | ("delim" "=" CExpr) | ("pad" "=" CExpr) ;
IfStmt ::= LblDef "if" "(" ScalarLogicalExpr ")" ActionStmt ;
PositionSpec ::= ("unit="? UnitIdentifier) | ("iostat=" ScalarVariable) | ("err=" LblRef) ;
IntentStmt ::= (LblDef "intent" "(" IntentSpec ")" ":" ":" IntentParList EOS) | (LblDef "intent" "(" IntentSpec ")" IntentParList EOS) ;
ReadStmt ::= (LblDef "read" RdCtlSpec InputItemList? EOS) | (LblDef "read" RdFmtId EOS) | (LblDef "read" RdFmtId "," InputItemList EOS) ;
ProcedureNameList ::= ProcedureName ("," ProcedureName)* ;
Variable ::= VariableName | (VariableName "(" Subscript ("," Subscript)* ")") | (VariableName SubstringRange) | (VariableName "(" Subscript ("," Subscript)* ")" SubstringRange) ;
SubroutineParList ::= "(" (SubroutinePar ("," SubroutinePar)*)? ")" ;
IntentSpec ::= "in" | "out" | ("in" "out") ;
EquivOp ::= ".eqv." | ".neqv." ;
AssumedSizeSpec ::= ((LowerBound ":")? "*") | (ExplicitShapeSpecList "," "*") | (ExplicitShapeSpecList "," LowerBound ":" "*") ;
IoControlSpec ::= ("unit" "=" UnitIdentifier) | ("fmt" "=" FormatIdentifier) | ("nml" "=" NamelistGroupName) | ("rec" "=" Expr) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("end" "=" LblRef) | ("advance" "=" CExpr) | ("size" "=" Variable) | ("eor" "=" LblRef) ;
OutputItemList ::= OutputItem ("," OutputItem)* ;
BlankInterpEditDescr ::= "BN" | "BZ" ;
EndDoStmt ::= LblDef "end" "do" Name? EOS ;
AcValueList ::= AcValue ("," AcValue)* ;
SubstringRange ::= "(" SubscriptTriplet ")" ;
OnlyList ::= Only ("," Only)* ;
FormatItemList ::= FormatItem ("," FormatItem)* ;
ComponentAttrSpecList ::= ComponentAttrSpec ("," ComponentAttrSpec)* ;
PointerStmt ::= (LblDef "pointer" ":" ":" PointerStmtObjectList EOS) | (LblDef "pointer" PointerStmtObjectList EOS) ;
SectionSubscriptList ::= SectionSubscript ("," SectionSubscript)* ;
IntentParList ::= IntentPar ("," IntentPar)* ;
ArrayElement ::= (StructureComponent "(" SectionSubscriptList ")") | (VariableName "(" SectionSubscriptList ")") ;
AssumedShapeSpecList ::= (LowerBound ":") | (DeferredShapeSpecList "," LowerBound ":") | (AssumedShapeSpecList "," AssumedShapeSpec) ;
InterfaceStmt ::= (LblDef "interface" GenericName EOS) | (LblDef "interface" GenericSpec EOS) | (LblDef "interface" EOS) ;
FormatStmt ::= LblDef "format" "(" FormatItemList? ")" EOS ;
PointerObjectList ::= PointerObject ("," PointerObject)* ;
AssignStmt ::= LblDef "assign" LblRef "to" VariableName EOS ;
CharSelector ::= ("(" "len" "=" TypeParamValue "," "kind" "=" Expr ")") | ("(" "len" "=" TypeParamValue "," Expr ")") | ("(" "len" "=" TypeParamValue ")") | ("(" ("kind" "=")? Expr ")") ;
ModuleStmt ::= LblDef "module" ModuleName EOS ;
EquivalenceSetList ::= EquivalenceSet ("," EquivalenceSet)* ;
CommonStmt ::= LblDef "common" Comblock? CommonBlockObjectList (","? Comblock CommonBlockObjectList)* EOS ;
EndModuleStmt ::= (LblDef "end" EOS) | (LblDef "end" "module" EndName? EOS) ;
GoToKw ::= "go" "to" ;
UnitIdentifier ::= UFExpr | "*" ;
DataEditDescr ::= ("I" Icon ("." Icon)?) | ("O" Icon ("." Icon)?) | ("B" Icon ("." Icon)?) | ("Z" Icon ("." Icon)?) | ("F" Icon "." Icon) | ("E" Icon "." Icon ("E" Icon)?) | ("EN" Icon "." Icon ("E" Icon)?) | ("ES" Icon "." Icon ("E" Icon)?) | ("G" Icon "." Icon ("E" Icon)?) | ("L" Icon) | ("A" Icon?) | ("D" Icon "." Icon) ;
ImplicitStmt ::= (LblDef "implicit" "none" EOS) | (LblDef "implicit" ImplicitSpec ("," ImplicitSpec)* EOS) ;
AccessStmt ::= (LblDef AccessSpec ":" ":" AccessIdList EOS) | (LblDef AccessSpec AccessIdList? EOS) ;
AttrSpec ::= "parameter" | AccessSpec | "allocatable" | ("dimension" "(" ArraySpec ")") | "external" | ("intent" "(" IntentSpec ")") | "intrinsic" | "optional" | "pointer" | "save" | "target" ;
RdFmtIdExpr ::= "(" UFExpr ")" ;
SubscriptTriplet ::= Expr? ":" Expr? (":" Expr)? ;
DataRef ::= (Name "%" Name) | (DataRef "%" Name) | (Name "(" SectionSubscriptList ")") | (DataRef "(" SectionSubscriptList ")") ;
Datalist ::= DataStmtSet ("," DataStmtSet)* ;
OptionalStmt ::= (LblDef "optional" ":" ":" OptionalParList EOS) | (LblDef "optional" OptionalParList EOS) ;
CaseConstruct ::= (LblDef Name ":" "select" "case" "(" Expr ")" EOS SelectCaseRange) | (LblDef "select" "case" "(" Expr ")" EOS SelectCaseRange) ;
CallStmt ::= (LblDef "call" SubroutineNameUse EOS) | (LblDef "call" SubroutineNameUse "(" (ActualArg ("," ActualArg)*)? ")" EOS) ;
ComponentDeclList ::= ComponentDecl ("," ComponentDecl)* ;
UnsignedArithmeticConstant ::= (Icon "_" KindParam) | (Rcon "_" KindParam) | Icon | Rcon | ComplexConst ;
ImplicitSpec ::= TypeSpec "(" LetterSpec ("," LetterSpec)* ")" ;
CommonBlockObjectList ::= CommonBlockObject ("," CommonBlockObject)* ;
AccessSpec ::= "public" | "private" ;
Rename ::= Ident "=>" UseName ;
NullifyStmt ::= LblDef "nullify" "(" PointerObjectList ")" EOS ;
SubroutinePar ::= DummyArgName | "*" ;
InterfaceBody ::= (LblDef FunctionPrefix FunctionName FunctionInterfaceRange) | (LblDef "subroutine" SubroutineName SubroutineInterfaceRange) ;
ControlEditDescr ::= PositionEditDescr | (Icon? "/") | ":" | SignEditDescr | (("-" | "+")? Icon "P" (Icon? DataEditDescr)?) | BlankInterpEditDescr ;
RdFmtId ::= LblRef | "*" | COperand | (COperand ConcatOp CPrimary) | (RdFmtIdExpr ConcatOp CPrimary) ;
AssignmentStmt ::= (LblDef Name "%" Name "=" Expr EOS) | (LblDef Name "%" DataRef "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "%" Name "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "%" DataRef "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" Name "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" DataRef "=" Expr EOS) | (LblDef Name "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "=" Expr EOS) | (LblDef Name "(" SFExprList ")" SubstringRange "=" Expr EOS) ;
ExternalStmt ::= LblDef "external" ExternalName ("," ExternalName)* EOS ;
OpenStmt ::= LblDef "open" "(" ConnectSpecList ")" EOS ;
MultOp ::= "*" | "/" ;
IoControlSpecList ::= (UnitIdentifier "," FormatIdentifier?) | (UnitIdentifier "," IoControlSpec) | IoControlSpec | (IoControlSpecList "," IoControlSpec) ;
TargetObject ::= ObjectName | (ObjectName "(" ArraySpec ")") ;
DataStmtSet ::= DataStmtObjectList "/" DataStmtValueList "/" ;
CaseSelector ::= ("(" CaseValueRange ("," CaseValueRange)* ")") | "default" ;
IntrinsicStmt ::= LblDef "intrinsic" IntrinsicProcedureName ("," IntrinsicProcedureName)* EOS ;
EntityDecl ::= (ObjectName "=" Expr) | (ObjectName "(" ArraySpec ")" "=" Expr) | (ObjectName "*" CharLength "=" Expr) | (ObjectName "*" CharLength "(" ArraySpec ")" "=" Expr) | ObjectName | (ObjectName "*" CharLength) | (ObjectName "(" ArraySpec ")") | (ObjectName "(" ArraySpec ")" "*" CharLength) ;
ProgramStmt ::= LblDef "program" ProgramName EOS ;
AllocatableStmt ::= (LblDef "allocatable" ":" ":" ArrayAllocationList EOS) | (LblDef "allocatable" ArrayAllocationList EOS) ;
ArrayDeclarator ::= VariableName "(" ArraySpec ")" ;
ComponentAttrSpec ::= "pointer" | ("dimension" "(" ComponentArraySpec ")") ;
EndBlockDataStmt ::= (LblDef "end" "block" "data" EndName? EOS) | (LblDef "end" EOS) ;
OrOp ::= ".or." ;
RewindStmt ::= (LblDef "rewind" UnitIdentifier EOS) | (LblDef "rewind" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
AddOp ::= "+" | "-" ;
CPrimary ::= COperand | ("(" CExpr ")") ;
DerivedTypeStmt ::= (LblDef "type" TypeName EOS) | (LblDef "type" ":" ":" TypeName EOS) | (LblDef "type" "," AccessSpec ":" ":" TypeName EOS) ;
OptionalParList ::= OptionalPar ("," OptionalPar)* ;
ElseIfStmt ::= LblDef "else" "if" "(" ScalarLogicalExpr ")" "then" IfConstructName? EOS ;
FunctionArg ::= Name "=" Expr ;
AllocatedShape ::= "(" SectionSubscriptList ")" ;
EntryStmt ::= (LblDef "entry" EntryName SubroutineParList EOS) | (LblDef "entry" EntryName SubroutineParList "result" "(" Name ")" EOS) ;
RelOp ::= "==" | "/=" | "<" | "<=" | ">" | ">=" | ".eq." | ".ne." | ".lt." | ".le." | ".gt." | ".ge." ;
CaseStmt ::= LblDef "case" CaseSelector Name? EOS ;
ReturnStmt ::= LblDef "return" Expr? EOS ;
ArrayAllocationList ::= ArrayAllocation ("," ArrayAllocation)* ;
NamelistGroup ::= "/" NamelistGroupName "/" NamelistGroupObject ("," NamelistGroupObject)* ;
ConcatOp ::= "//" ;
TypeSpec ::= ("integer" KindSelector) | ("real" KindSelector) | ("double" "precision") | ("complex" KindSelector) | ("character" CharSelector) | ("logical" KindSelector) | ("type" "(" TypeName ")") | "integer" | "real" | "complex" | "logical" | "character" | ("character" LengthSelector) ;
FunctionReference ::= Name "(" FunctionArgList? ")" ;
OutputImpliedDo ::= ("(" OutputItemList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" OutputItemList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
UFPrimary ::= Icon | Scon | Name | FunctionReference | DataRef | ("(" UFExpr ")") ;
NamelistStmt ::= LblDef "namelist" NamelistGroup (","? NamelistGroup)* EOS ;
AcImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
ContinueStmt ::= LblDef "continue" EOS ;
WhereStmt ::= LblDef "where" "(" MaskExpr ")" AssignmentStmt ;
SFPrimary ::= ArrayConstructor | Icon | Name | DataRef | FunctionReference | ("(" Expr ")") ;
DimensionStmt ::= (LblDef "dimension" ":" ":" ArrayDeclaratorList EOS) | (LblDef "dimension" ArrayDeclaratorList EOS) ;
PrivateSequenceStmt ::= (LblDef "private" EOS) | (LblDef "sequence" EOS) ;
SavedEntity ::= VariableName | ("/" CommonBlockName "/") ;
WriteStmt ::= LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS ;
ComponentDecl ::= ComponentName ("(" ComponentArraySpec ")")? ("*" CharLength)? ;
ExitStmt ::= LblDef "exit" EndName? EOS ;
FunctionRange ::= (FunctionParList EOS Body? EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS InternalSubProgPart EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS EndFunctionStmt) | (FunctionParList EOS InternalSubProgPart EndFunctionStmt) ;
PointerStmtObject ::= ObjectName | (ObjectName "(" DeferredShapeSpecList ")") ;
LetterSpec ::= Letter ("-" Letter)? ;
EndIfStmt ::= LblDef "end" "if" IfConstructName? EOS ;
FormatIdentifier ::= LblRef | CExpr | "*" ;
BlockDataStmt ::= LblDef "block" "data" BlockDataName? EOS ;
EndfileStmt ::= (LblDef "end" "file" UnitIdentifier EOS) | (LblDef "end" "file" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
DataStmtValueList ::= DataStmtValue ("," DataStmtValue)* ;
RenameList ::= Rename ("," Rename)* ;
InputItemList ::= InputItem ("," InputItem)* ;
EndFunctionStmt ::= (LblDef "end" EOS) | (LblDef "end" "function" EndName? EOS) ;
TargetStmt ::= (LblDef "target" ":" ":" TargetObjectList EOS) | (LblDef "target" TargetObjectList EOS) ;
ComputedGotoStmt ::= LblDef GoToKw "(" LblRef ("," LblRef)* ")" ","? ScalarIntExpr EOS ;
ElsewhereStmt ::= LblDef "elsewhere" EOS ;
GenericSpec ::= ("operator" "(" DefinedOperator ")") | ("assignment" "(" "=" ")") ;
ModuleProcedureStmt ::= LblDef "module" "procedure" ProcedureNameList EOS ;
TargetObjectList ::= TargetObject ("," TargetObject)* ;
StopStmt ::= LblDef "stop" (Icon | Scon)? EOS ;
SubroutineSubprogram ::= LblDef "recursive"? "subroutine" SubroutineName SubroutineRange ;
ExplicitShapeSpec ::= (LowerBound ":")? UpperBound ;
ArrayDeclaratorList ::= ArrayDeclarator ("," ArrayDeclarator)* ;
EndSubroutineStmt ::= (LblDef "end" "subroutine" EndName? EOS) | (LblDef "end" EOS) ;
SaveStmt ::= (LblDef "save" ":" ":" SavedEntityList EOS) | (LblDef "save" SavedEntityList? EOS) ;
LengthSelector ::= ("(" TypeParamValue ")") | ("*" CharLength) ;
ArrayConstructor ::= "(/" AcValueList "/)" ;
--------------------fortran::waite-cordy.bgf--------------------
EndSelectStmt ::= (LblDef "endselect" EndName? EOS) | (LblDef "end" "select" EndName? EOS) ;
NamelistGroups ::= ("/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "," "/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "," NamelistGroupObject) ;
EndTypeStmt ::= (LblDef "endtype" TypeName EOS) | (LblDef "endtype" EOS) | (LblDef "end" "type" TypeName EOS) | (LblDef "end" "type" EOS) ;
FunctionArgList ::= FunctionArg | (FunctionArgList "," FunctionArg) | (SectionSubscriptList "," FunctionArg) ;
RdIoCtlSpecList ::= (UnitIdentifier "," IoControlSpec) | (UnitIdentifier "," FormatIdentifier) | IoControlSpec | (RdIoCtlSpecList "," IoControlSpec) ;
CharLength ::= ("(" TypeParamValue ")") | Constant ;
InquireStmt ::= LblDef "inquire" "(" InquireSpecList ")" EOS ;
 InquireStmt ::= LblDef "inquire" "(" "iolength=" ScalarVariable ")" OutputItemList EOS ;
ArrayAllocation ::= ArrayName | (ArrayName "(" DeferredShapeSpecList ")") ;
LoopControl ::= VariableName "=" Expr "," Expr CommaExpr? ;
 LoopControl ::= "while" "(" Expr ")" ;
AndOp ::= SP ".and." SP ;
PrintStmt ::= (LblDef "print" FormatIdentifier "," OutputItemList EOS) | (LblDef "print" FormatIdentifier EOS) ;
NotOp ::= SP ".not." SP ;
EquivalenceStmt ::= LblDef "equivalence" EquivalenceSetList EOS ;
CloseSpecList ::= UnitIdentifierComma? {CloseSpec ","}* ;
ParameterStmt ::= LblDef "parameter" "(" NamedConstantDefList ")" EOS ;
ArithmeticIfStmt ::= LblDef "if" "(" Expr ")" LblRef "," LblRef "," LblRef EOS ;
InquireSpec ::= ("unit=" UnitIdentifier) | ("file=" CExpr) | ("err=" LblRef) | ("iostat=" ScalarVariable) | ("exist=" ScalarVariable) | ("opened=" ScalarVariable) | ("number=" ScalarVariable) | ("named=" ScalarVariable) | ("name=" ScalarVariable) | ("access=" ScalarVariable) | ("sequential=" ScalarVariable) | ("direct=" ScalarVariable) | ("form=" ScalarVariable) | ("formatted=" ScalarVariable) | ("unformatted=" ScalarVariable) | ("recl=" Expr) | ("nextrec=" ScalarVariable) | ("blank=" ScalarVariable) ;
 InquireSpec ::= ("position=" ScalarVariable) | ("action=" ScalarVariable) | ("read=" ScalarVariable) | ("write=" ScalarVariable) | ("readwrite=" ScalarVariable) | ("delim=" ScalarVariable) | ("pad=" ScalarVariable) ;
SectionSubscriptRef ::= "(" SectionSubscriptList ")" ;
NamedConstantDef ::= NamedConstant "=" Expr ;
Formatsep ::= "/" | ":" ;
LabelDoStmt ::= LblDef "do" DoLblRef CommaLoopControl EOS IN_2 ExecutionPartConstruct* EX_2 DoLblDef DoLabelStmt ;
ConnectSpecList ::= UnitIdentifierComma? {ConnectSpec ","}* ;
Primary ::= UnsignedArithmeticConstant | NameDataRef | FunctionReference | ("(" Expr ")") ;
 Primary ::= Scon ;
 Primary ::= LogicalConstant ;
 Primary ::= ArrayConstructor ;
IfThenStmt ::= LblDef "if" "(" Expr ")" "then" EOS IN_2 ;
BlockDoConstruct ::= LblDef NameColon? "do" CommaLoopControl? EOS IN_2 ExecutionPartConstruct* EX_2 EndDoStmt ;
OutputItemList1 ::= (Expr "," Expr) | (Expr "," OutputImpliedDo) | OutputImpliedDo | (OutputItemList1 "," Expr) | (OutputItemList1 "," OutputImpliedDo) ;
DataStmtValue ::= Constant | (Constant "*" Constant) | (NamedConstantUse "*" Constant) ;
TypeParamValue ::= Expr | "*" ;
PointerField ::= (Name SFExprListRef? "%" Name) | (PointerField FieldSelector) ;
Sign ::= "+" | "-" ;
FieldSelector ::= ("(" SectionSubscriptList ")" "%" Name) | ("%" Name) ;
AssignedGotoStmt ::= (LblDef GoToKw VariableName EOS) | (LblDef GoToKw VariableName "(" LblRefList ")" EOS) | (LblDef GoToKw VariableComma "(" LblRefList ")" EOS) ;
PlusMinus ::= "+" | "-" ;
EndWhereStmt ::= (LblDef "endwhere" EOS) | (LblDef "end" "where" EOS) ;
ComponentDefStmt ::= (LblDef TypeSpec "," ComponentAttrSpecList "::" ComponentDeclList EOS) | (LblDef TypeSpec "::" ComponentDeclList EOS) | (LblDef TypeSpec ComponentDeclList EOS) ;
SubroutineArgList ::= {SubroutineArg ","}* ;
UseStmt ::= (LblDef "use" Name EOS) | (LblDef "use" Name "," "only" ":" EOS) | (LblDef "use" Name "," RenameList EOS) | (LblDef "use" Name "," "only" ":" OnlyList EOS) ;
Only ::= GenericSpec | (Ident "=>" UseName) | UseName ;
Comblock ::= ("/" SPOFF "/" SPON) | ("/" CommonBlockName "/") ;
ComplexDataRefTail ::= SectionSubscriptRef ;
 ComplexDataRefTail ::= "%" Name ;
InputImpliedDo ::= "(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")" ;
FmtSpec ::= Formatedit | Formatsep | (Formatsep Formatedit) | (FmtSpec Formatsep) | (FmtSpec Formatsep Formatedit) | (FmtSpec "," Formatedit) | (FmtSpec "," Formatsep) | (FmtSpec "," Formatsep Formatedit) ;
BackspaceStmt ::= (LblDef "backspace" UnitIdentifier EOS) | (LblDef "backspace" "(" PositionSpecList ")" EOS) ;
FunctionParList ::= ("(" FunctionPars ")") | ε ;
DeallocateStmt ::= (LblDef "deallocate" "(" AllocateObjectList "," "stat=" Variable ")" EOS) | (LblDef "deallocate" "(" AllocateObjectList ")" EOS) ;
AllocateStmt ::= (LblDef "allocate" "(" AllocationList "," "stat=" Variable ")" EOS) | (LblDef "allocate" "(" AllocationList ")" EOS) ;
AssumedShapeSpec ::= (LowerBound ":") | ":" ;
RdCtlSpec ::= RdUnitId | ("(" RdIoCtlSpecList ")") ;
Constant ::= NamedConstantUse | (PlusMinus? UnsignedArithmeticConstant) | Scon | Hcon | LogicalConstant ;
 Constant ::= (Icon "_" Scon) | (NamedConstantUse "_" Scon) ;
 Constant ::= StructureConstructor | BozLiteralConstant ;
ElseStmt ::= LblDef EX_2 "else" EOS IN_2 ;
CloseStmt ::= LblDef "close" "(" CloseSpecList ")" EOS ;
PauseStmt ::= LblDef "pause" IconOrScon? EOS ;
DeferredShapeSpec ::= ":" ;
CaseValueRange ::= Expr | (Expr ":") | (":" Expr) | (Expr ":" Expr) ;
WhereConstructStmt ::= LblDef "where" "(" MaskExpr ")" EOS ;
EquivalenceSet ::= "(" EquivalenceObject "," EquivalenceObjectList ")" ;
SubroutinePars ::= {SubroutinePar ","}* ;
KindSelector ::= ("(" "kind=" Expr ")") | ("(" Expr ")") ;
ComplexConst ::= "(" ComplexComponent "," ComplexComponent ")" ;
CloseSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("status=" CExpr) | ("iostat=" ScalarVariable) ;
PointerAssignmentStmt ::= (LblDef Name "=>" Target EOS) | (LblDef Name SFExprListRef? "%" NameDataRef "=>" Target EOS) ;
DataStmt ::= LblDef "data" Datalist EOS ;
RdUnitId ::= ("(" UFExpr ")") | ("(" "*" ")") ;
EndProgramStmt ::= LblDef "end" EOS ;
 EndProgramStmt ::= (LblDef "endprogram" EndName? EOS) | (LblDef "end" "program" EndName? EOS) ;
CycleStmt ::= LblDef "cycle" EndName? EOS ;
LogicalConstant ::= (SP ".true." SP) | (SP ".false." SP) ;
 LogicalConstant ::= (SP ".true." SP "_" KindParam) | (SP ".false." SP "_" KindParam ".") ;
InquireSpecList ::= UnitIdentifier? {InquireSpec ","}* ;
SubscriptListRef ::= "(" SubscriptList ")" ;
FunctionPrefix ::= "function" | (TypeSpec "function") ;
 FunctionPrefix ::= ("recursive" "function") | ("recursive" TypeSpec "function") | (TypeSpec "recursive" "function") ;
DataImpliedDo ::= ("(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
TypeDeclarationStmt ::= LblDef TypeSpec EntityDeclList EOS ;
 TypeDeclarationStmt ::= LblDef TypeSpec AttrSpecSeq? "::" EntityDeclList EOS ;
ContainsStmt ::= LblDef "contains" EOS ;
StructureConstructor ::= TypeName "(" ExprList ")" ;
EndInterfaceStmt ::= (LblDef "endinterface" EOS) | (LblDef "end" "interface" EOS) ;
PowerOp ::= "**" ;
SFExprList ::= (Expr ":"? Expr?) | (":" Expr?) ;
 SFExprList ::= (Expr? ":" Expr ":" Expr) | (Expr? "::" Expr) ;
IfStmt ::= LblDef "if" "(" Expr ")" ActionStmt ;
ConnectSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("file=" CExpr) | ("status=" CExpr) | ("access=" CExpr) | ("form=" CExpr) | ("recl=" Expr) | ("blank=" CExpr) | ("iostat=" ScalarVariable) ;
 ConnectSpec ::= ("position=" CExpr) | ("action=" CExpr) | ("delim=" CExpr) | ("pad=" CExpr) ;
IntentStmt ::= LblDef "intent" "(" IntentSpec ")" ColonColon? IntentParList EOS ;
PositionSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("iostat=" ScalarVariable) ;
ReadStmt ::= (LblDef "read" RdCtlSpec InputItemList? EOS) | (LblDef "read" RdFmtId CommaInputItemList? EOS) ;
SubroutineParList ::= ("(" SubroutinePars ")") | ε ;
VariableComma ::= VariableName "," ;
IntentSpec ::= "in" | "out" | "inout" ;
EquivOp ::= (SP ".eqv." SP) | (SP ".neqv." SP) ;
AssumedSizeSpec ::= "*" | (LowerBound ":" "*") | (ExplicitShapeSpecList "," "*") | (ExplicitShapeSpecList "," LowerBound ":" "*") ;
IoControlSpec ::= ("fmt=" FormatIdentifier) | ("unit=" UnitIdentifier) | ("rec=" Expr) | ("end=" LblRef) | ("err=" LblRef) | ("iostat=" ScalarVariable) ;
 IoControlSpec ::= ("nml=" NamelistGroupName) | ("advance=" CExpr) | ("size=" Variable) | ("eor=" LblRef) ;
EndDoStmt ::= (LblDef "enddo" EndName? EOS) | (LblDef "end" "do" EndName? EOS) ;
SubstringRange ::= "(" Expr? SubscriptTripletTail ")" ;
CommaInputItemList ::= "," InputItemList ;
PointerStmt ::= LblDef "pointer" ColonColon? PointerStmtObjectList EOS ;
ArrayElement ::= VariableName "(" SectionSubscriptList ")" ;
 ArrayElement ::= StructureComponent "(" SectionSubscriptList ")" ;
AssumedShapeSpecList ::= (LowerBound ":") | (DeferredShapeSpecList "," LowerBound ":") | (AssumedShapeSpecList "," AssumedShapeSpec) ;
InterfaceStmt ::= (LblDef "interface" GenericName EOS) | (LblDef "interface" GenericSpec EOS) | (LblDef "interface" EOS) ;
FormatStmt ::= LblDef "format" "(" FmtSpec? ")" EOS ;
Comlist ::= (Comblock? CommonBlockObject) | (Comlist "," Comblock? CommonBlockObject) | (Comlist Comblock CommonBlockObject) ;
SavedCommonBlock ::= "/" CommonBlockName "/" ;
CommaSectionSubscript ::= "," SectionSubscript ;
AssignStmt ::= LblDef "assign" LblRef "to" VariableName EOS ;
CharSelector ::= ("(" "len=" TypeParamValue "," "kind=" Expr ")") | ("(" "len=" TypeParamValue "," Expr ")") | ("(" "len=" TypeParamValue ")") | ("(" "kind=" Expr ")") | ("(" Expr ")") ;
ModuleStmt ::= LblDef "module" ModuleName EOS ;
NameColon ::= Name ":" ;
CommonStmt ::= LblDef "common" Comlist EOS ;
EditElement ::= Fcon | MislexedFcon | Scon | Hcon | Ident | ("(" FmtSpec ")") ;
IncludeStmt ::= "include" Scon EOS ;
EndModuleStmt ::= (LblDef "endmodule" EndName? EOS) | (LblDef "end" "module" EndName? EOS) | (LblDef "end" EOS) ;
GoToKw ::= "goto" ;
 GoToKw ::= "go" "to" ;
UnitIdentifier ::= UFExpr | "*" ;
ImplicitStmt ::= LblDef "implicit" ImplicitSpecList EOS ;
 ImplicitStmt ::= LblDef "implicit" "none" EOS ;
AttrSpec ::= "parameter" | AccessSpec | "allocatable" | ("dimension" "(" ArraySpec ")") | "external" | ("intent" "(" IntentSpec ")") | "intrinsic" | "optional" | "pointer" | "save" | "target" ;
RdFmtIdExpr ::= "(" UFExpr ")" ;
OptionalStmt ::= LblDef "optional" ColonColon? OptionalParList EOS ;
UnitIdentifierComma ::= UnitIdentifier "," ;
Datalist ::= DataStmtSet | (Datalist? ","? DataStmtSet) ;
CaseConstruct ::= (LblDef Name ":" "selectcase" "(" Expr ")" EOS SelectCaseRange) | (LblDef "selectcase" "(" Expr ")" EOS SelectCaseRange) | (LblDef Name ":" "select" "case" "(" Expr ")" EOS SelectCaseRange) | (LblDef "select" "case" "(" Expr ")" EOS SelectCaseRange) ;
CallStmt ::= (LblDef "call" SubroutineNameUse EOS) | (LblDef "call" SubroutineNameUse "(" SubroutineArgList ")" EOS) ;
UnsignedArithmeticConstant ::= Icon | RDcon | ComplexConst ;
 UnsignedArithmeticConstant ::= Icon "_" KindParam ;
 UnsignedArithmeticConstant ::= RDcon "_" KindParam ;
ColonColon ::= "::" ;
ImplicitSpec ::= (TypeSpec ImplicitRanges) | (TypeSpec "(" ImplicitRanges ")") ;
AccessSpec ::= "public" | "private" ;
Rename ::= Ident "=>" UseName ;
NullifyStmt ::= LblDef "nullify" "(" PointerObjectList ")" EOS ;
SubroutinePar ::= DummyArgName | "*" ;
InterfaceBody ::= (LblDef FunctionPrefix FunctionName FunctionInterfaceRange) | (LblDef "subroutine" SubroutineName SubroutineInterfaceRange) ;
SubscriptTripletTail ::= ":" Expr? ;
 SubscriptTripletTail ::= (":" Expr ":" Expr) | ("::" Expr) ;
RdFmtId ::= LblRef | "*" | COperand | (COperand ConcatOp CPrimary) | (RdFmtIdExpr ConcatOp CPrimary) ;
AssignmentStmt ::= LblDef Name SFExprListRef? SubstringRange? "=" Expr EOS ;
 AssignmentStmt ::= (LblDef Name SFExprListRef? "%" NameDataRef "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" NameDataRef "=" Expr EOS) ;
AttrSpecSeq ::= ("," AttrSpec) | (AttrSpecSeq "," AttrSpec) ;
ExternalStmt ::= LblDef "external" ExternalNameList EOS ;
OpenStmt ::= LblDef "open" "(" ConnectSpecList ")" EOS ;
MultOp ::= "*" | "/" ;
TargetObject ::= ObjectName | (ObjectName "(" ArraySpec ")") ;
IoControlSpecList ::= (UnitIdentifier "$" ",") | (UnitIdentifier "," FormatIdentifier) | (UnitIdentifier "," IoControlSpec) | IoControlSpec | (IoControlSpecList "," IoControlSpec) ;
DataStmtSet ::= DataStmtObjectList "/" DataStmtValueList "/" ;
CaseSelector ::= ("(" CaseValueRangeList ")") | "default" ;
IntrinsicStmt ::= LblDef "intrinsic" IntrinsicList EOS ;
EntityDecl ::= ObjectName | (ObjectName "(" ArraySpec ")") | (ObjectName "*" CharLength) | (ObjectName "(" ArraySpec ")" "*" CharLength) ;
 EntityDecl ::= (ObjectName "=" Expr) | (ObjectName "(" ArraySpec ")" "=" Expr) | (ObjectName "*" CharLength "=" Expr) | (ObjectName "*" CharLength "(" ArraySpec ")" "=" Expr) ;
ProgramStmt ::= LblDef "program" ProgramName EOS ;
AllocatableStmt ::= LblDef "allocatable" ColonColon? ArrayAllocationList EOS ;
CommaExpr ::= "," Expr ;
ArrayDeclarator ::= VariableName "(" ArraySpec ")" ;
ComponentAttrSpec ::= "pointer" | ("dimension" "(" ComponentArraySpec ")") ;
AcValueList1 ::= (Expr "," Expr) | (Expr "," AcImpliedDo) | AcImpliedDo | (AcValueList1 "," Expr) | (AcValueList1 "," AcImpliedDo) ;
OrOp ::= SP ".or." SP ;
DoubleDoStmt ::= "do" LblRef CommaLoopControl EOS ;
EndBlockDataStmt ::= LblDef "end" EOS ;
 EndBlockDataStmt ::= (LblDef "endblockdata" EndName? EOS) | (LblDef "end" "blockdata" EndName? EOS) | (LblDef "endblock" "data" EndName? EOS) | (LblDef "end" "block" "data" EndName? EOS) ;
RewindStmt ::= (LblDef "rewind" UnitIdentifier EOS) | (LblDef "rewind" "(" PositionSpecList ")" EOS) ;
AddOp ::= "+" | "-" ;
DerivedTypeStmt ::= (LblDef "type" TypeName EOS) | (LblDef "type" "::" TypeName EOS) | (LblDef "type" "," AccessSpec "::" TypeName EOS) ;
CPrimary ::= COperand | ("(" CExpr ")") ;
FunctionArg ::= Name "=" Expr ;
ElseIfStmt ::= LblDef EX_2 "elseif" "(" Expr ")" "then" EOS IN_2 ;
 ElseIfStmt ::= LblDef EX_2 "else" "if" "(" Expr ")" "then" EOS IN_2 ;
StmtFunctionRange ::= "(" SFDummyArgNameList? ")" "=" Expr EOS ;
ImplicitRanges ::= {ImplicitRange ","}* ;
AllocatedShape ::= "(" SectionSubscriptList ")" ;
RelOp ::= (SP ".eq." SP) | (SP ".ne." SP) | (SP ".lt." SP) | (SP ".le." SP) | (SP ".gt." SP) | (SP ".ge." SP) ;
 RelOp ::= "==" | "/=" | "<" | "<=" | ">" | ">=" ;
EntryStmt ::= LblDef "entry" EntryName SubroutineParList "result" "(" Name ")" EOS ;
CaseStmt ::= (LblDef "case" CaseSelector EOS) | (LblDef "case" CaseSelector Name EOS) ;
ReturnStmt ::= LblDef "return" Expr? EOS ;
ImplicitRange ::= Ident "-" Ident ;
ConcatOp ::= "/" SPOFF "/" SPON ;
TypeSpec ::= "integer" | "real" | "doubleprecision" | "complex" | "logical" | "character" | ("character" LengthSelector) ;
 TypeSpec ::= ("integer" KindSelector) | ("real" KindSelector) | ("double" "precision") | ("complex" KindSelector) | ("character" CharSelector) | ("logical" KindSelector) | ("type" "(" TypeName ")") ;
FunctionReference ::= Name "(" ")" ;
 FunctionReference ::= Name "(" FunctionArgList ")" ;
OutputImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")") | ("(" OutputItemList1 "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")") ;
NamelistStmt ::= LblDef "namelist" NamelistGroups EOS ;
AcImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
UFPrimary ::= Icon | Scon | NameDataRef | FunctionReference | ("(" UFExpr ")") ;
WhereStmt ::= LblDef "where" "(" MaskExpr ")" AssignmentStmt ;
ContinueStmt ::= LblDef "continue" EOS ;
DimensionStmt ::= LblDef "dimension" ArrayDeclaratorList EOS ;
 DimensionStmt ::= LblDef "dimension" "::" ArrayDeclaratorList EOS ;
PrivateSequenceStmt ::= (LblDef "private" EOS) | (LblDef "sequence" EOS) ;
ComponentDecl ::= (ComponentName "(" ComponentArraySpec ")" "*" CharLength) | (ComponentName "(" ComponentArraySpec ")") | (ComponentName "*" CharLength) | ComponentName ;
WriteStmt ::= LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS ;
ExitStmt ::= LblDef "exit" EndName? EOS ;
FunctionRange ::= FunctionParList EOS Body? EndFunctionStmt ;
 FunctionRange ::= (FunctionParList "result" "(" Name ")" EOS BodyPlusInternals EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS EndFunctionStmt) | (FunctionParList EOS BodyPlusInternals EndFunctionStmt) ;
PointerStmtObject ::= ObjectName | (ObjectName "(" DeferredShapeSpecList ")") ;
CommaLoopControl ::= ","? LoopControl ;
FormatIdentifier ::= LblRef | CExpr | "*" ;
EndIfStmt ::= LblDef EX_2 "endif" EOS ;
 EndIfStmt ::= LblDef EX_2 "end" "if" EOS ;
EndfileStmt ::= (LblDef "endfile" UnitIdentifier EOS) | (LblDef "endfile" "(" PositionSpecList ")" EOS) ;
 EndfileStmt ::= (LblDef "end" "file" UnitIdentifier EOS) | (LblDef "end" "file" "(" PositionSpecList ")" EOS) ;
BlockDataStmt ::= LblDef "blockdata" BlockDataName? EOS ;
 BlockDataStmt ::= LblDef "block" "data" BlockDataName? EOS ;
EndFunctionStmt ::= LblDef "end" EOS ;
 EndFunctionStmt ::= (LblDef "endfunction" EndName? EOS) | (LblDef "end" "function" EndName? EOS) ;
TargetStmt ::= LblDef "target" ColonColon? TargetObjectList EOS ;
ComputedGotoStmt ::= LblDef GoToKw "(" LblRefList ")" ","? Expr EOS ;
ElsewhereStmt ::= LblDef "elsewhere" EOS ;
GenericSpec ::= ("operator" "(" DefinedOperator ")") | ("assignment" "(" "=" ")") ;
SubroutineArg ::= Expr | Hcon | ("*" LblRef) ;
 SubroutineArg ::= (Name "=" Expr) | (Name "=" Hcon) | (Name "=" "*" LblRef) ;
ModuleProcedureStmt ::= LblDef "module" "procedure" ProcedureNameList EOS ;
SFExprListRef ::= "(" SFExprList CommaSectionSubscript* ")" ;
StopStmt ::= LblDef "stop" IconOrScon? EOS ;
FunctionPars ::= {FunctionPar ","}* ;
ExplicitShapeSpec ::= (LowerBound ":" UpperBound) | UpperBound ;
SubroutineSubprogram ::= LblDef "subroutine" SubroutineName SubroutineRange ;
 SubroutineSubprogram ::= LblDef "recursive" "subroutine" SubroutineName SubroutineRange ;
EndSubroutineStmt ::= LblDef "end" EOS ;
 EndSubroutineStmt ::= (LblDef "endsubroutine" EndName? EOS) | (LblDef "end" "subroutine" EndName? EOS) ;
SaveStmt ::= (LblDef "save" EOS) | (LblDef "save" SavedEntityList EOS) ;
 SaveStmt ::= LblDef "save" "::" SavedEntityList EOS ;
LengthSelector ::= "*" CharLength ;
 LengthSelector ::= "(" TypeParamValue ")" ;
ArrayConstructor ::= "(/" AcValueList "/)" ;
--------------------java::java-1-jls-impl.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= Name "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
DimExpr ::= "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
Interfaces ::= "implements" InterfaceTypeList ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
Modifier ::= "public" ;
 Modifier ::= "protected" ;
 Modifier ::= "private" ;
 Modifier ::= "static" ;
 Modifier ::= "abstract" ;
 Modifier ::= "final" ;
 Modifier ::= "native" ;
 Modifier ::= "synchronized" ;
 Modifier ::= "transient" ;
 Modifier ::= "volatile" ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" Name ";" ;
SingleTypeImportDeclaration ::= "import" Name ";" ;
MethodInvocation ::= Name "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
TypeImportOnDemandDeclaration ::= "import" Name "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprs Dims? ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
MethodHeader ::= Modifiers? Type MethodDeclarator Throws? ;
 MethodHeader ::= Modifiers? "void" MethodDeclarator Throws? ;
Block ::= "{" BlockStatements? "}" ;
Throws ::= "throws" ClassTypeList ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
ContinueStatement ::= "continue" Identifier? ";" ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
PreIncrementExpression ::= "++" UnaryExpression ;
Finally ::= "finally" Block ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
Super ::= "extends" ClassType ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" Expression ")" UnaryExpressionNotPlusMinus ;
 CastExpression ::= "(" Name Dims ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
BreakStatement ::= "break" Identifier? ";" ;
ThrowStatement ::= "throw" Expression ";" ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" ArgumentList? ")" ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
EmptyStatement ::= ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
FieldDeclaration ::= Modifiers? Type VariableDeclarators ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
LabeledStatement ::= Identifier ":" Statement ;
AbstractMethodDeclaration ::= MethodHeader ";" ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
ConstructorDeclarator ::= SimpleName "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
QualifiedName ::= Name "." Identifier ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= Modifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
ExpressionStatement ::= StatementExpression ";" ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= PrimitiveType "[" "]" ;
 ArrayType ::= Name "[" "]" ;
 ArrayType ::= ArrayType "[" "]" ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
Dims ::= "[" "]" ;
 Dims ::= Dims "[" "]" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
PostIncrementExpression ::= PostfixExpression "++" ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassDeclaration ::= Modifiers? "class" Identifier Super? Interfaces? ClassBody ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-1-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
DimExpr ::= "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
Interfaces ::= "implements" InterfaceTypeList ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
MethodModifier ::= "public" ;
 MethodModifier ::= "protected" ;
 MethodModifier ::= "private" ;
 MethodModifier ::= "abstract" ;
 MethodModifier ::= "static" ;
 MethodModifier ::= "final" ;
 MethodModifier ::= "synchronized" ;
 MethodModifier ::= "native" ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" PackageName ";" ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
TypeImportOnDemandDeclaration ::= "import" PackageName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" TypeName DimExprs Dims? ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
Block ::= "{" BlockStatements? "}" ;
Throws ::= "throws" ClassTypeList ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
ContinueStatement ::= "continue" Identifier? ";" ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
PreIncrementExpression ::= "++" UnaryExpression ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
Finally ::= "finally" Block ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
Super ::= "extends" ClassType ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
FieldModifier ::= "public" ;
 FieldModifier ::= "protected" ;
 FieldModifier ::= "private" ;
 FieldModifier ::= "final" ;
 FieldModifier ::= "static" ;
 FieldModifier ::= "transient" ;
 FieldModifier ::= "volatile" ;
ConstructorModifier ::= "public" ;
 ConstructorModifier ::= "protected" ;
 ConstructorModifier ::= "private" ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
BreakStatement ::= "break" Identifier? ";" ;
ClassModifier ::= "public" ;
 ClassModifier ::= "abstract" ;
 ClassModifier ::= "final" ;
ThrowStatement ::= "throw" Expression ";" ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" ArgumentList? ")" ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
EmptyStatement ::= ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
LabeledStatement ::= Identifier ":" Statement ;
ConstantModifier ::= "public" ;
 ConstantModifier ::= "static" ;
 ConstantModifier ::= "final" ;
AbstractMethodModifier ::= "public" ;
 AbstractMethodModifier ::= "abstract" ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? ResultType MethodDeclarator Throws? ";" ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
ConstructorDeclarator ::= Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
ResultType ::= Type ;
 ResultType ::= "void" ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
ExpressionStatement ::= StatementExpression ";" ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
InterfaceModifier ::= "public" ;
 InterfaceModifier ::= "abstract" ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
Dims ::= "[" "]" ;
 Dims ::= Dims "[" "]" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
TypeName ::= Identifier ;
 TypeName ::= PackageName "." Identifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassDeclaration ::= ClassModifiers? "class" Identifier Super? Interfaces? ClassBody ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-2-jls-impl.bgf--------------------
Selector ::= "." Identifier Arguments? ;
 Selector ::= "." "this" ;
 Selector ::= "." "super" SuperSuffix ;
 Selector ::= "." "new" InnerCreator ;
 Selector ::= "[" Expression "]" ;
Expression3 ::= PrefixOp Expression3 ;
 Expression3 ::= "(" Expression | Type ")" Expression3 ;
 Expression3 ::= Primary Selector* PostfixOp* ;
IdentifierSuffix ::= "[" ("]" BracketsOpt "." "class") | (Expression "]") ;
 IdentifierSuffix ::= Arguments ;
 IdentifierSuffix ::= "." "class" | "this" | ("super" Arguments) | ("new" InnerCreator) ;
ParExpression ::= "(" Expression ")" ;
Modifier ::= "public" ;
 Modifier ::= "protected" ;
 Modifier ::= "private" ;
 Modifier ::= "static" ;
 Modifier ::= "abstract" ;
 Modifier ::= "final" ;
 Modifier ::= "native" ;
 Modifier ::= "synchronized" ;
 Modifier ::= "transient" ;
 Modifier ::= "volatile" ;
 Modifier ::= "strictfp" ;
Arguments ::= "(" (Expression ("," Expression)*)? ")" ;
ImportDeclaration ::= "import" Identifier ("." Identifier)* ("." "*")? ";" ;
PrefixOp ::= "++" ;
 PrefixOp ::= "--" ;
 PrefixOp ::= "!" ;
 PrefixOp ::= "~" ;
 PrefixOp ::= "+" ;
 PrefixOp ::= "-" ;
ConstantDeclaratorsRest ::= ConstantDeclaratorRest ("," ConstantDeclarator)* ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "|=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
Expression2Rest ::= (Infixop Expression3)* ;
 Expression2Rest ::= "instanceof" Type ;
Block ::= "{" BlockStatements "}" ;
Expression1Rest ::= ("?" Expression ":" Expression1)? ;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? ";" ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" ;
BasicType ::= "byte" ;
 BasicType ::= "short" ;
 BasicType ::= "char" ;
 BasicType ::= "int" ;
 BasicType ::= "long" ;
 BasicType ::= "float" ;
 BasicType ::= "double" ;
 BasicType ::= "boolean" ;
ArrayCreatorRest ::= "[" ("]" BracketsOpt ArrayInitializer) | (Expression "]" ("[" Expression "]")* BracketsOpt) ;
VariableDeclarators ::= VariableDeclarator ("," VariableDeclarator)* ;
Primary ::= "(" Expression ")" ;
 Primary ::= "this" Arguments? ;
 Primary ::= "super" SuperSuffix ;
 Primary ::= Literal ;
 Primary ::= "new" Creator ;
 Primary ::= Identifier ("." Identifier)* IdentifierSuffix? ;
 Primary ::= BasicType BracketsOpt "." "class" ;
 Primary ::= "void" "." "class" ;
VariableDeclaratorRest ::= BracketsOpt ("=" VariableInitializer)? ;
InterfaceDeclaration ::= "interface" Identifier ("extends" TypeList)? InterfaceBody ;
ConstructorDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody ;
InterfaceMethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? ";" ;
InterfaceBodyDeclaration ::= ";" ;
 InterfaceBodyDeclaration ::= ModifiersOpt InterfaceMemberDecl ;
InterfaceMemberDecl ::= InterfaceMethodOrFieldDecl ;
 InterfaceMemberDecl ::= "void" Identifier VoidInterfaceMethodDeclaratorRest ;
 InterfaceMemberDecl ::= ClassOrInterfaceDeclaration ;
LocalVariableDeclarationStatement ::= "final"? Type VariableDeclarators ";" ;
InterfaceBody ::= "{" InterfaceBodyDeclaration* "}" ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
Type ::= Identifier ("." Identifier)* BracketsOpt ;
 Type ::= BasicType ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
FormalParameters ::= "(" (FormalParameter ("," FormalParameter)*)? ")" ;
ForInit ::= StatementExpression MoreStatementExpressions ;
 ForInit ::= "final"? Type VariableDeclarators ;
TypeList ::= Type ("," Type)* ;
ExpressionStatement ::= StatementExpression ";" ;
PostfixOp ::= "++" ;
 PostfixOp ::= "--" ;
Infixop ::= "||" ;
 Infixop ::= "&&" ;
 Infixop ::= "|" ;
 Infixop ::= "^" ;
 Infixop ::= "&" ;
 Infixop ::= "==" ;
 Infixop ::= "!=" ;
 Infixop ::= "<" ;
 Infixop ::= ">" ;
 Infixop ::= "<=" ;
 Infixop ::= ">=" ;
 Infixop ::= "<<" ;
 Infixop ::= ">>" ;
 Infixop ::= ">>>" ;
 Infixop ::= "+" ;
 Infixop ::= "-" ;
 Infixop ::= "*" ;
 Infixop ::= "/" ;
 Infixop ::= "%" ;
InterfaceMethodOrFieldRest ::= ConstantDeclaratorsRest ";" ;
 InterfaceMethodOrFieldRest ::= InterfaceMethodDeclaratorRest ;
Statement ::= Block ;
 Statement ::= "if" ParExpression Statement ("else" Statement)? ;
 Statement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
 Statement ::= "while" ParExpression Statement ;
 Statement ::= "do" Statement "while" ParExpression ";" ;
 Statement ::= "try" Block Catches | (Catches? "finally" Block) ;
 Statement ::= "switch" ParExpression "{" SwitchBlockStatementGroups "}" ;
 Statement ::= "synchronized" ParExpression Block ;
 Statement ::= "return" Expression? ";" ;
 Statement ::= "throw" Expression ";" ;
 Statement ::= "break" Identifier? ";" ;
 Statement ::= "continue" Identifier? ";" ;
 Statement ::= ";" ;
 Statement ::= ExpressionStatement ;
 Statement ::= Identifier ":" Statement ;
SuperSuffix ::= Arguments ;
 SuperSuffix ::= "." Identifier Arguments? ;
ConstantDeclaratorRest ::= BracketsOpt "=" VariableInitializer ;
BracketsOpt ::= ("[" "]")* ;
CompilationUnit ::= ("package" QualifiedIdentifier ";")? ImportDeclaration* TypeDeclaration* ;
MethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
QualifiedIdentifier ::= Identifier ("." Identifier)* ;
MemberDecl ::= MethodOrFieldDecl ;
 MemberDecl ::= "void" Identifier MethodDeclaratorRest ;
 MemberDecl ::= Identifier ConstructorDeclaratorRest ;
 MemberDecl ::= ClassOrInterfaceDeclaration ;
QualifiedIdentifierList ::= QualifiedIdentifier ("," QualifiedIdentifier)* ;
ClassDeclaration ::= "class" Identifier ("extends" Type)? ("implements" TypeList)? ClassBody ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassOrInterfaceDeclaration ;
 BlockStatement ::= (Identifier ":")? Statement ;
MoreStatementExpressions ::= ("," StatementExpression)* ;
ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= "static"? Block ;
 ClassBodyDeclaration ::= ModifiersOpt MemberDecl ;
TypeDeclaration ::= ClassOrInterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::jdt.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------java::java-2-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
DimExpr ::= "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= Type "." "class" ;
 PrimaryNoNewArray ::= "void" "." "class" ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= ClassName "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
Interfaces ::= "implements" InterfaceTypeList ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
MethodModifier ::= "public" ;
 MethodModifier ::= "protected" ;
 MethodModifier ::= "private" ;
 MethodModifier ::= "abstract" ;
 MethodModifier ::= "static" ;
 MethodModifier ::= "final" ;
 MethodModifier ::= "synchronized" ;
 MethodModifier ::= "native" ;
 MethodModifier ::= "strictfp" ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" PackageName ";" ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= ClassName "." "super" "." Identifier "(" ArgumentList? ")" ;
TypeImportOnDemandDeclaration ::= "import" PackageOrTypeName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" TypeName DimExprs Dims? ;
 ArrayCreationExpression ::= "new" PrimitiveType Dims ArrayInitializer ;
 ArrayCreationExpression ::= "new" TypeName Dims ArrayInitializer ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
Block ::= "{" BlockStatements? "}" ;
Throws ::= "throws" ClassTypeList ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
ContinueStatement ::= "continue" Identifier? ";" ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
 InterfaceMemberDeclaration ::= ClassDeclaration ;
 InterfaceMemberDeclaration ::= InterfaceDeclaration ;
 InterfaceMemberDeclaration ::= ";" ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
PreIncrementExpression ::= "++" UnaryExpression ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
Finally ::= "finally" Block ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
 FieldAccess ::= ClassName "." "super" "." Identifier ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
Super ::= "extends" ClassType ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
FieldModifier ::= "public" ;
 FieldModifier ::= "protected" ;
 FieldModifier ::= "private" ;
 FieldModifier ::= "static" ;
 FieldModifier ::= "final" ;
 FieldModifier ::= "transient" ;
 FieldModifier ::= "volatile" ;
ConstructorModifier ::= "public" ;
 ConstructorModifier ::= "protected" ;
 ConstructorModifier ::= "private" ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
BreakStatement ::= "break" Identifier? ";" ;
ClassModifier ::= "public" ;
 ClassModifier ::= "protected" ;
 ClassModifier ::= "private" ;
 ClassModifier ::= "abstract" ;
 ClassModifier ::= "static" ;
 ClassModifier ::= "final" ;
 ClassModifier ::= "strictfp" ;
ThrowStatement ::= "throw" Expression ";" ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? ;
 ClassInstanceCreationExpression ::= Primary "." "new" Identifier "(" ArgumentList? ")" ClassBody? ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
EmptyStatement ::= ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
LabeledStatement ::= Identifier ":" Statement ;
ConstantModifier ::= "public" ;
 ConstantModifier ::= "static" ;
 ConstantModifier ::= "final" ;
AbstractMethodModifier ::= "public" ;
 AbstractMethodModifier ::= "abstract" ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? ResultType MethodDeclarator Throws? ";" ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= Primary "." "super" "(" ArgumentList? ")" ";" ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
PackageOrTypeName ::= Identifier ;
 PackageOrTypeName ::= PackageOrTypeName "." Identifier ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
ConstructorDeclarator ::= Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
ResultType ::= Type ;
 ResultType ::= "void" ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
ExpressionStatement ::= StatementExpression ";" ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
LocalVariableDeclaration ::= "final"? Type VariableDeclarators ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
InterfaceModifier ::= "public" ;
 InterfaceModifier ::= "protected" ;
 InterfaceModifier ::= "private" ;
 InterfaceModifier ::= "abstract" ;
 InterfaceModifier ::= "static" ;
 InterfaceModifier ::= "strictfp" ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
Dims ::= "[" "]" ;
 Dims ::= Dims "[" "]" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
 ClassMemberDeclaration ::= ClassDeclaration ;
 ClassMemberDeclaration ::= InterfaceDeclaration ;
 ClassMemberDeclaration ::= ";" ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
TypeName ::= Identifier ;
 TypeName ::= PackageOrTypeName "." Identifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassName ::= Identifier ;
 ClassName ::= AmbiguousName "." Identifier ;
ClassDeclaration ::= ClassModifiers? "class" Identifier Super? Interfaces? ClassBody ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-5-habelitz.bgf--------------------
GREATER_OR_EQUAL ::= ">=" ;
DIV_ASSIGN ::= "/=" ;
LONG ::= "long" ;
STAR_ASSIGN ::= "*=" ;
DOTSTAR ::= ".*" ;
OCTAL_LITERAL ::= "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ INTEGER_TYPE_SUFFIX? ;
JAVA_ID_PART ::= JAVA_ID_START | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
LOGICAL_OR ::= "||" ;
EXTENDS ::= "extends" ;
AND_ASSIGN ::= "&=" ;
XOR_ASSIGN ::= "^=" ;
FLOAT_TYPE_SUFFIX ::= "f" | "F" | "d" | "D" ;
DIV ::= "/" ;
ASSIGN ::= "=" ;
STATIC ::= "static" ;
SEMI ::= ";" ;
MOD_ASSIGN ::= "%=" ;
TRANSIENT ::= "transient" ;
PUBLIC ::= "public" ;
GREATER_THAN ::= ">" ;
QUESTION ::= "?" ;
OR ::= "|" ;
FINALLY ::= "finally" ;
PRIVATE ::= "private" ;
MOD ::= "%" ;
DEC ::= "--" ;
LOGICAL_AND ::= "&&" ;
LCURLY ::= "{" ;
STRING_LITERAL ::= """ (ESCAPE_SEQUENCE | string())* """ ;
BIT_SHIFT_RIGHT_ASSIGN ::= ">>>=" ;
BREAK ::= "break" ;
SHIFT_RIGHT ::= ">>" ;
LOGICAL_NOT ::= "!" ;
SHORT ::= "short" ;
SUPER ::= "super" ;
CHARACTER_LITERAL ::= "\'" ESCAPE_SEQUENCE | string() "\'" ;
CLASS ::= "class" ;
RPAREN ::= ")" ;
FINAL ::= "final" ;
CHAR ::= "char" ;
INTEGER_TYPE_SUFFIX ::= "l" | "L" ;
STRICTFP ::= "strictfp" ;
STAR ::= "*" ;
ELLIPSIS ::= "..." ;
DOUBLE ::= "double" ;
MINUS ::= "-" ;
INT ::= "int" ;
SHIFT_RIGHT_ASSIGN ::= ">>=" ;
THROWS ::= "throws" ;
LBRACK ::= "[" ;
HEX_LITERAL ::= "0" "x" | "X" HEX_DIGIT+ INTEGER_TYPE_SUFFIX? ;
OR_ASSIGN ::= "|=" ;
SHIFT_LEFT_ASSIGN ::= "<<=" ;
HEX_DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" ;
FLOATING_POINT_LITERAL ::= (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ (DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? FLOAT_TYPE_SUFFIX?) | (EXPONENT FLOAT_TYPE_SUFFIX?) | FLOAT_TYPE_SUFFIX) | (DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? FLOAT_TYPE_SUFFIX?) ;
THROW ::= "throw" ;
ASSERT ::= "assert" ;
SHIFT_LEFT ::= "<<" ;
UNICODE_ESCAPE ::= "\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT ;
COLON ::= ":" ;
ESCAPE_SEQUENCE ::= ("\\" "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UNICODE_ESCAPE | OCTAL_ESCAPE ;
INC ::= "++" ;
MINUS_ASSIGN ::= "-=" ;
FLOAT ::= "float" ;
XOR ::= "^" ;
ELSE ::= "else" ;
AND ::= "&" ;
COMMA ::= "," ;
SWITCH ::= "switch" ;
PLUS_ASSIGN ::= "+=" ;
NOT ::= "~" ;
AT ::= "@" ;
RETURN ::= "return" ;
CASE ::= "case" ;
IMPLEMENTS ::= "implements" ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
INSTANCEOF ::= "instanceof" ;
FOR ::= "for" ;
DOT ::= "." ;
CONTINUE ::= "continue" ;
PACKAGE ::= "package" ;
IMPORT ::= "import" ;
ABSTRACT ::= "abstract" ;
DEFAULT ::= "default" ;
LESS_OR_EQUAL ::= "<=" ;
THIS ::= "this" ;
LPAREN ::= "(" ;
IF ::= "if" ;
VOLATILE ::= "volatile" ;
CATCH ::= "catch" ;
TRY ::= "try" ;
RCURLY ::= "}" ;
JAVA_ID_START ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
PLUS ::= "+" ;
INTERFACE ::= "interface" ;
NATIVE ::= "native" ;
OCTAL_ESCAPE ::= ("0" | "1" | "2" | "3" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ;
EQUAL ::= "==" ;
VOID ::= "void" ;
SYNCHRONIZED ::= "synchronized" ;
WHILE ::= "while" ;
PROTECTED ::= "protected" ;
TRUE ::= "true" ;
BIT_SHIFT_RIGHT ::= ">>>" ;
DO ::= "do" ;
NOT_EQUAL ::= "!=" ;
BYTE ::= "byte" ;
BOOLEAN ::= "boolean" ;
NULL ::= "null" ;
RBRACK ::= "]" ;
LESS_THAN ::= "<" ;
FALSE ::= "false" ;
ENUM ::= "enum" ;
DECIMAL_LITERAL ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) INTEGER_TYPE_SUFFIX? ;
NEW ::= "new" ;
--------------------java::java-5-jls-impl.bgf--------------------
Selector ::= "." Identifier Arguments? ;
 Selector ::= "." ExplicitGenericInvocation ;
 Selector ::= "." "this" ;
 Selector ::= "." "super" SuperSuffix ;
 Selector ::= "." "new" NonWildcardTypeArguments? InnerCreator ;
 Selector ::= Expression? ;
Expression3 ::= PrefixOp Expression3 ;
 Expression3 ::= "(" Expression | Type ")" Expression3 ;
 Expression3 ::= Primary Selector* PostfixOp* ;
IdentifierSuffix ::= "[" ("]" ("[" "]")* "." "class") | (Expression "]") ;
 IdentifierSuffix ::= Arguments ;
 IdentifierSuffix ::= "." "class" | ExplicitGenericInvocation | "this" | ("super" Arguments) | ("new" NonWildcardTypeArguments? InnerCreator) ;
ParExpression ::= "(" Expression ")" ;
Modifier ::= Annotation ;
 Modifier ::= "public" ;
 Modifier ::= "protected" ;
 Modifier ::= "private" ;
 Modifier ::= "static" ;
 Modifier ::= "abstract" ;
 Modifier ::= "final" ;
 Modifier ::= "native" ;
 Modifier ::= "synchronized" ;
 Modifier ::= "transient" ;
 Modifier ::= "volatile" ;
 Modifier ::= "strictfp" ;
ImportDeclaration ::= "import" "static"? Identifier ("." Identifier)* ("." "*")? ";" ;
ForControl ::= ForVarControl ;
 ForControl ::= ForInit ";" Expression? ";" ForUpdate? ;
CreatedName ::= Identifier NonWildcardTypeArguments? ("." Identifier NonWildcardTypeArguments?)* ;
GenericMethodOrConstructorRest ::= Type | "void" Identifier MethodDeclaratorRest ;
 GenericMethodOrConstructorRest ::= Identifier ConstructorDeclaratorRest ;
ConstantDeclaratorsRest ::= ConstantDeclaratorRest ("," ConstantDeclarator)* ;
TypeParameter ::= Identifier ("extends" Bound)? ;
Expression2Rest ::= (InfixOp Expression3)* ;
 Expression2Rest ::= "instanceof" Type ;
Expression1Rest ::= "?" Expression ":" Expression1 ;
Block ::= "{" BlockStatements "}" ;
AnnotationTypeBody ::= "{" AnnotationTypeElementDeclarations? "}" ;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? ";" ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" ;
VariableDeclaratorId ::= Identifier ("[" "]")* ;
BasicType ::= "byte" ;
 BasicType ::= "short" ;
 BasicType ::= "char" ;
 BasicType ::= "int" ;
 BasicType ::= "long" ;
 BasicType ::= "float" ;
 BasicType ::= "double" ;
 BasicType ::= "boolean" ;
TypeParameters ::= "<" TypeParameter ("," TypeParameter)* ">" ;
EnumBody ::= (EnumConstants? ","? EnumBodyDeclarations?)* ;
Primary ::= ParExpression ;
 Primary ::= NonWildcardTypeArguments ExplicitGenericInvocationSuffix | ("this" Arguments) ;
 Primary ::= "this" Arguments? ;
 Primary ::= "super" SuperSuffix ;
 Primary ::= Literal ;
 Primary ::= "new" Creator ;
 Primary ::= Identifier ("." Identifier)* IdentifierSuffix? ;
 Primary ::= BasicType ("[" "]")* "." "class" ;
 Primary ::= "void" "." "class" ;
VariableDeclaratorRest ::= ("[" "]")* ("=" VariableInitializer)? ;
Bound ::= Type ("&" Type)* ;
ElementValueArrayInitializer ::= "{" ElementValues? ","? "}" ;
InterfaceMemberDecl ::= InterfaceMethodOrFieldDecl ;
 InterfaceMemberDecl ::= InterfaceGenericMethodDecl ;
 InterfaceMemberDecl ::= "void" Identifier VoidInterfaceMethodDeclaratorRest ;
 InterfaceMemberDecl ::= InterfaceDeclaration ;
 InterfaceMemberDecl ::= ClassDeclaration ;
InterfaceBody ::= "{" InterfaceBodyDeclaration* "}" ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
Type ::= Identifier TypeArguments? ("." Identifier TypeArguments?)* ("[" "]")* ;
 Type ::= BasicType ;
FormalParameters ::= "(" FormalParameterDecls? ")" ;
NonWildcardTypeArguments ::= "<" TypeList ">" ;
DefaultValue ::= "default" ElementValue ;
FormalParameterDecls ::= ("final" Annotations? Type FormalParameterDeclsRest)? ;
Annotation ::= "@" QualifiedIdentifier ("(" (Identifier "=")? ElementValue ")")? ;
Statement ::= Block ;
 Statement ::= "assert" Expression (":" Expression)? ";" ;
 Statement ::= "if" ParExpression Statement ("else" Statement)? ;
 Statement ::= "for" "(" ForControl ")" Statement ;
 Statement ::= "while" ParExpression Statement ;
 Statement ::= "do" Statement "while" ParExpression ";" ;
 Statement ::= "try" Block Catches | (Catches? "finally" Block) ;
 Statement ::= "switch" ParExpression "{" SwitchBlockStatementGroups "}" ;
 Statement ::= "synchronized" ParExpression Block ;
 Statement ::= "return" Expression? ";" ;
 Statement ::= "throw" Expression ";" ;
 Statement ::= "break" Identifier? ";" ;
 Statement ::= "continue" Identifier? ";" ;
 Statement ::= ";" ;
 Statement ::= StatementExpression ";" ;
 Statement ::= Identifier ":" Statement ;
InterfaceGenericMethodDecl ::= TypeParameters Type | "void" Identifier InterfaceMethodDeclaratorRest ;
CompilationUnit ::= (Annotations? "package" QualifiedIdentifier ";")? ImportDeclaration* TypeDeclaration* ;
QualifiedIdentifier ::= Identifier ("." Identifier)* ;
FormalParameterDeclsRest ::= VariableDeclaratorId ("," FormalParameterDecls)? ;
 FormalParameterDeclsRest ::= "..." VariableDeclaratorId ;
TypeDeclaration ::= ClassOrInterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
ForVarControl ::= "final"? Annotations? Type Identifier ForVarControlRest ;
EnumBodyDeclarations ::= ";" ClassBodyDeclaration* ;
Expressions ::= ("," StatementExpression)* ;
VoidMethodDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
TypeArgument ::= Type ;
 TypeArgument ::= "?" ("extends" | "super" Type)? ;
Arguments ::= "(" (Expression ("," Expression)*)? ")" ;
PrefixOp ::= "++" ;
 PrefixOp ::= "--" ;
 PrefixOp ::= "!" ;
 PrefixOp ::= "~" ;
 PrefixOp ::= "+" ;
 PrefixOp ::= "-" ;
ForVarControlRest ::= VariableDeclaratorsRest ";" Expression? ";" ForUpdate? ;
 ForVarControlRest ::= ":" Expression ;
InfixOp ::= "||" ;
 InfixOp ::= "&&" ;
 InfixOp ::= "|" ;
 InfixOp ::= "^" ;
 InfixOp ::= "&" ;
 InfixOp ::= "==" ;
 InfixOp ::= "!=" ;
 InfixOp ::= "<" ;
 InfixOp ::= ">" ;
 InfixOp ::= "<=" ;
 InfixOp ::= ">=" ;
 InfixOp ::= "<<" ;
 InfixOp ::= ">>" ;
 InfixOp ::= ">>>" ;
 InfixOp ::= "+" ;
 InfixOp ::= "-" ;
 InfixOp ::= "*" ;
 InfixOp ::= "/" ;
 InfixOp ::= "%" ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "|=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
EnumConstants ::= EnumConstant ;
 EnumConstants ::= EnumConstants "," EnumConstant ;
NormalInterfaceDeclaration ::= "interface" Identifier TypeParameters? ("extends" TypeList)? InterfaceBody ;
ArrayCreatorRest ::= "[" ("]" ("[" "]")* ArrayInitializer) | (Expression "]" ("[" Expression "]")* ("[" "]")*) ;
VariableDeclarators ::= VariableDeclarator ("," VariableDeclarator)* ;
ConstructorDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody ;
InterfaceBodyDeclaration ::= ";" ;
 InterfaceBodyDeclaration ::= Modifier* InterfaceMemberDecl ;
InterfaceMethodDeclaratorRest ::= FormalParameters ("[" "]")* ("throws" QualifiedIdentifierList)? ";" ;
ElementValues ::= ElementValue ("," ElementValues)? ;
LocalVariableDeclarationStatement ::= "final"? Type VariableDeclarators ";" ;
TypeArguments ::= "<" TypeArgument ("," TypeArgument)* ">" ;
VariableDeclaratorsRest ::= VariableDeclaratorRest ("," VariableDeclarator)* ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
EnumDeclaration ::= "enum" Identifier ("implements" TypeList)? EnumBody ;
TypeList ::= Type ("," Type)* ;
PostfixOp ::= "++" ;
 PostfixOp ::= "--" ;
InterfaceMethodOrFieldRest ::= ConstantDeclaratorsRest ";" ;
 InterfaceMethodOrFieldRest ::= InterfaceMethodDeclaratorRest ;
AnnotationTypeDeclaration ::= "@" "interface" Identifier AnnotationTypeBody ;
SuperSuffix ::= Arguments ;
 SuperSuffix ::= "." Identifier Arguments? ;
ConstantDeclaratorRest ::= ("[" "]")* "=" VariableInitializer ;
NormalClassDeclaration ::= "class" Identifier TypeParameters? ("extends" Type)? ("implements" TypeList)? ClassBody ;
AnnotationTypeElementRest ::= Type AnnotationMethodOrConstantRest ";" ;
 AnnotationTypeElementRest ::= ClassDeclaration ;
 AnnotationTypeElementRest ::= InterfaceDeclaration ;
 AnnotationTypeElementRest ::= EnumDeclaration ;
 AnnotationTypeElementRest ::= AnnotationTypeDeclaration ;
MethodDeclaratorRest ::= FormalParameters ("[" "]")* ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
AnnotationMethodRest ::= "(" ")" ("[" "]")* DefaultValue? ;
MemberDecl ::= GenericMethodOrConstructorDecl ;
 MemberDecl ::= MethodOrFieldDecl ;
 MemberDecl ::= "void" Identifier VoidMethodDeclaratorRest ;
 MemberDecl ::= Identifier ConstructorDeclaratorRest ;
 MemberDecl ::= InterfaceDeclaration ;
 MemberDecl ::= ClassDeclaration ;
ExplicitGenericInvocationSuffix ::= "super" SuperSuffix ;
 ExplicitGenericInvocationSuffix ::= Identifier Arguments ;
QualifiedIdentifierList ::= QualifiedIdentifier ("," QualifiedIdentifier)* ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassOrInterfaceDeclaration ;
 BlockStatement ::= (Identifier ":")? Statement ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "case" EnumConstantName ":" ;
 SwitchLabel ::= "default" ":" ;
ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= "static"? Block ;
 ClassBodyDeclaration ::= Modifier* MemberDecl ;
--------------------java::java-5-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= Type "." "class" ;
 PrimaryNoNewArray ::= "void" "." "class" ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= ClassName "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
TypeDeclSpecifier ::= TypeName ;
 TypeDeclSpecifier ::= ClassOrInterfaceType "." Identifier ;
Wildcard ::= "?" WildcardBounds? ;
MethodModifier ::= Annotation ;
 MethodModifier ::= "public" ;
 MethodModifier ::= "protected" ;
 MethodModifier ::= "private" ;
 MethodModifier ::= "abstract" ;
 MethodModifier ::= "static" ;
 MethodModifier ::= "final" ;
 MethodModifier ::= "synchronized" ;
 MethodModifier ::= "native" ;
 MethodModifier ::= "strictfp" ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
TypeImportOnDemandDeclaration ::= "import" PackageOrTypeName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" PrimitiveType Dims ArrayInitializer ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType Dims ArrayInitializer ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
AnnotationTypeElementDeclaration ::= AbstractMethodModifiers? Type Identifier "(" ")" Dims? DefaultValue? ";" ;
 AnnotationTypeElementDeclaration ::= ConstantDeclaration ;
 AnnotationTypeElementDeclaration ::= ClassDeclaration ;
 AnnotationTypeElementDeclaration ::= InterfaceDeclaration ;
 AnnotationTypeElementDeclaration ::= EnumDeclaration ;
 AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration ;
 AnnotationTypeElementDeclaration ::= ";" ;
TypeParameters ::= "<" TypeParameterList ">" ;
LastFormalParameter ::= VariableModifiers? Type "..."? VariableDeclaratorId ;
 LastFormalParameter ::= FormalParameter ;
ElementValuePairs ::= ElementValuePair ;
 ElementValuePairs ::= ElementValuePairs "," ElementValuePair ;
PreIncrementExpression ::= "++" UnaryExpression ;
ElementValueArrayInitializer ::= "{" ElementValues? ","? "}" ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
 FieldAccess ::= ClassName "." "super" "." Identifier ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
BasicForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
FieldModifier ::= Annotation ;
 FieldModifier ::= "public" ;
 FieldModifier ::= "protected" ;
 FieldModifier ::= "private" ;
 FieldModifier ::= "static" ;
 FieldModifier ::= "final" ;
 FieldModifier ::= "transient" ;
 FieldModifier ::= "volatile" ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
ConstructorModifier ::= Annotation ;
 ConstructorModifier ::= "public" ;
 ConstructorModifier ::= "protected" ;
 ConstructorModifier ::= "private" ;
DefaultValue ::= "default" ElementValue ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
ClassInstanceCreationExpression ::= "new" TypeArguments? ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? ;
 ClassInstanceCreationExpression ::= Primary "." "new" TypeArguments? Identifier TypeArguments? "(" ArgumentList? ")" ClassBody? ;
SingleElementAnnotation ::= "@" TypeName "(" ElementValue ")" ;
EmptyStatement ::= ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
ConstantModifier ::= Annotation ;
 ConstantModifier ::= "public" ;
 ConstantModifier ::= "static" ;
 ConstantModifier ::= "final" ;
AbstractMethodModifier ::= Annotation ;
 AbstractMethodModifier ::= "public" ;
 AbstractMethodModifier ::= "abstract" ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ";" ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
PackageOrTypeName ::= Identifier ;
 PackageOrTypeName ::= PackageOrTypeName "." Identifier ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
TypeParameterList ::= TypeParameterList "," TypeParameter ;
 TypeParameterList ::= TypeParameter ;
ConstructorDeclarator ::= TypeParameters? Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
AssertStatement ::= "assert" Expression ";" ;
 AssertStatement ::= "assert" Expression ":" Expression ";" ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
EnumDeclaration ::= ClassModifiers? "enum" Identifier Interfaces? EnumBody ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
ExpressionStatement ::= StatementExpression ";" ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
NormalAnnotation ::= "@" TypeName "(" ElementValuePairs? ")" ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
VariableModifier ::= "final" ;
 VariableModifier ::= Annotation ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
AnnotationTypeDeclaration ::= InterfaceModifiers? "@" "interface" Identifier AnnotationTypeBody ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
DimExpr ::= "[" Expression "]" ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
Interfaces ::= "implements" InterfaceTypeList ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
AdditionalBound ::= "&" InterfaceType ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= Annotations? "package" PackageName ";" ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= ClassName "." "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= TypeName "." NonWildTypeArguments Identifier "(" ArgumentList? ")" ;
ElementValuePair ::= Identifier "=" ElementValue ;
Throws ::= "throws" ExceptionTypeList ;
Block ::= "{" BlockStatements? "}" ;
AnnotationTypeBody ::= "{" AnnotationTypeElementDeclarations? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
 InterfaceMemberDeclaration ::= ClassDeclaration ;
 InterfaceMemberDeclaration ::= InterfaceDeclaration ;
 InterfaceMemberDeclaration ::= ";" ;
NonWildTypeArguments ::= "<" ReferenceTypeList ">" ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
EnumBody ::= (EnumConstants? ","? EnumBodyDeclarations?)* ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
Finally ::= "finally" Block ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
EnhancedForStatement ::= "for" "(" VariableModifiers? Type Identifier ":" Expression ")" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
Super ::= "extends" ClassType ;
FormalParameters ::= FormalParameter ;
 FormalParameters ::= FormalParameters "," FormalParameter ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
BreakStatement ::= "break" Identifier? ";" ;
WildcardBounds ::= "extends" ReferenceType ;
 WildcardBounds ::= "super" ReferenceType ;
ClassModifier ::= Annotation ;
 ClassModifier ::= "public" ;
 ClassModifier ::= "protected" ;
 ClassModifier ::= "private" ;
 ClassModifier ::= "abstract" ;
 ClassModifier ::= "static" ;
 ClassModifier ::= "final" ;
 ClassModifier ::= "strictfp" ;
ThrowStatement ::= "throw" Expression ";" ;
ExceptionTypeList ::= ExceptionType ;
 ExceptionTypeList ::= ExceptionTypeList "," ExceptionType ;
TypeBound ::= "extends" ClassOrInterfaceType AdditionalBoundList? ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
ReferenceTypeList ::= ReferenceType ;
 ReferenceTypeList ::= ReferenceTypeList "," ReferenceType ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
SingleStaticImportDeclaration ::= "import" "static" TypeName "." Identifier ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
StaticImportOnDemandDeclaration ::= "import" "static" TypeName "." "*" ";" ;
LabeledStatement ::= Identifier ":" Statement ;
EnumBodyDeclarations ::= ";" ClassBodyDeclarations? ;
Arguments ::= "(" ArgumentList? ")" ;
ExplicitConstructorInvocation ::= NonWildTypeArguments? "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= Primary "." NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
EnumConstants ::= EnumConstant ;
 EnumConstants ::= EnumConstants "," EnumConstant ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
MarkerAnnotation ::= "@" TypeName ;
NormalInterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
ActualTypeArgumentList ::= ActualTypeArgument ;
 ActualTypeArgumentList ::= ActualTypeArgumentList "," ActualTypeArgument ;
ElementValues ::= ElementValue ;
 ElementValues ::= ElementValues "," ElementValue ;
TypeArguments ::= "<" ActualTypeArgumentList ">" ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
FormalParameterList ::= LastFormalParameter ;
 FormalParameterList ::= FormalParameters "," LastFormalParameter ;
ResultType ::= Type ;
 ResultType ::= "void" ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarators ";" ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
InterfaceModifier ::= Annotation ;
 InterfaceModifier ::= "public" ;
 InterfaceModifier ::= "protected" ;
 InterfaceModifier ::= "private" ;
 InterfaceModifier ::= "abstract" ;
 InterfaceModifier ::= "static" ;
 InterfaceModifier ::= "strictfp" ;
Dims ::= "[" "]" ;
 Dims ::= Dims "[" "]" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
NormalClassDeclaration ::= ClassModifiers? "class" Identifier TypeParameters? Super? Interfaces? ClassBody ;
PreDecrementExpression ::= "--" UnaryExpression ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
 ClassMemberDeclaration ::= ClassDeclaration ;
 ClassMemberDeclaration ::= InterfaceDeclaration ;
 ClassMemberDeclaration ::= ";" ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
TypeName ::= Identifier ;
 TypeName ::= PackageOrTypeName "." Identifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassName ::= Identifier ;
 ClassName ::= AmbiguousName "." Identifier ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "case" EnumConstantName ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-5-parr.bgf--------------------
interfaceBodyDeclaration ::= (modifiers interfaceMemberDecl) | ";" ;
interfaceMemberDecl ::= interfaceMethodOrFieldDecl | interfaceGenericMethodDecl | ("void" Identifier voidInterfaceMethodDeclaratorRest) | interfaceDeclaration | classDeclaration ;
interfaceBody ::= "{" interfaceBodyDeclaration* "}" ;
typeList ::= type ("," type)* ;
classOrInterfaceModifier ::= annotation | "public" | "protected" | "private" | "abstract" | "static" | "final" | "strictfp" ;
variableModifier ::= "final" | annotation ;
HexDigit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" ;
interfaceMethodOrFieldRest ::= (constantDeclaratorsRest ";") | interfaceMethodDeclaratorRest ;
statement ::= block | (ASSERT expression (":" expression)? ";") | ("if" parExpression statement ("else" statement)?) | ("for" "(" forControl ")" statement) | ("while" parExpression statement) | ("do" statement "while" parExpression ";") | ("try" block (catches "finally" block) | catches | ("finally" block)) | ("switch" parExpression "{" switchBlockStatementGroups "}") | ("synchronized" parExpression block) | ("return" expression? ";") | ("throw" expression ";") | ("break" Identifier? ";") | ("continue" Identifier? ";") | ";" | (statementExpression ";") | (Identifier ":" statement) ;
enhancedForControl ::= variableModifiers type Identifier ":" expression ;
IntegerTypeSuffix ::= "l" | "L" ;
constantDeclaratorRest ::= ("[" "]")* "=" variableInitializer ;
normalClassDeclaration ::= "class" Identifier typeParameters? ("extends" type)? ("implements" typeList)? classBody ;
conditionalAndExpression ::= inclusiveOrExpression ("&&" inclusiveOrExpression)* ;
relationalOp ::= (t1::"<" t2::("="?)) | (t1::">" t2::("="?)) | "<" | ">" ;
booleanLiteral ::= "true" | "false" ;
inclusiveOrExpression ::= exclusiveOrExpression ("|" exclusiveOrExpression)* ;
CharacterLiteral ::= "\'" EscapeSequence | string() "\'" ;
methodDeclaratorRest ::= formalParameters ("[" "]")* ("throws" qualifiedNameList)? methodBody | ";" ;
memberDecl ::= genericMethodOrConstructorDecl | memberDeclaration | ("void" Identifier voidMethodDeclaratorRest) | (Identifier constructorDeclaratorRest) | interfaceDeclaration | classDeclaration ;
annotationMethodRest ::= Identifier "(" ")" defaultValue? ;
typeBound ::= type ("&" type)* ;
typeDeclaration ::= classOrInterfaceDeclaration | ";" ;
classBodyDeclaration ::= ";" | ("static"? block) | (modifiers memberDecl) ;
selector ::= ("." Identifier arguments?) | ("." "this") | ("." "super" superSuffix) | ("." "new" innerCreator) | ("[" expression "]") ;
identifierSuffix ::= (("[" "]")+ "." "class") | (("[" expression "]")+) | arguments | ("." "class") | ("." explicitGenericInvocation) | ("." "this") | ("." "super" arguments) | ("." "new" innerCreator) ;
annotationName ::= Identifier ("." Identifier)* ;
classOrInterfaceType ::= Identifier typeArguments? ("." Identifier typeArguments?)* ;
modifier ::= annotation | "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "transient" | "volatile" | "strictfp" ;
explicitConstructorInvocation ::= (nonWildcardTypeArguments? "this" | "super" arguments ";") | (primary "." nonWildcardTypeArguments? "super" arguments ";") ;
expressionList ::= expression ("," expression)* ;
arguments ::= "(" expressionList? ")" ;
packageDeclaration ::= "package" qualifiedName ";" ;
forControl ::= enhancedForControl | (forInit? ";" expression? ";" forUpdate?) ;
genericMethodOrConstructorRest ::= (type | "void" Identifier methodDeclaratorRest) | (Identifier constructorDeclaratorRest) ;
JavaIDDigit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
Exponent ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
elementValuePair ::= Identifier "=" elementValue ;
andExpression ::= equalityExpression ("&" equalityExpression)* ;
enumConstants ::= enumConstant ("," enumConstant)* ;
variableDeclarator ::= variableDeclaratorId ("=" variableInitializer)? ;
annotationTypeBody ::= "{" annotationTypeElementDeclaration* "}" ;
arrayInitializer ::= "{" (variableInitializer ("," variableInitializer)* ","?)? "}" ;
variableDeclaratorId ::= Identifier ("[" "]")* ;
qualifiedName ::= Identifier ("." Identifier)* ;
ASSERT ::= "assert" ;
variableDeclarators ::= variableDeclarator ("," variableDeclarator)* ;
Letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
FloatingPointLiteral ::= (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* Exponent? FloatTypeSuffix?) | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent? FloatTypeSuffix?) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent FloatTypeSuffix?) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ FloatTypeSuffix) ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
enumBody ::= "{" enumConstants? ","? enumBodyDeclarations? "}" ;
primitiveType ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" ;
constructorDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? constructorBody ;
interfaceMethodDeclaratorRest ::= formalParameters ("[" "]")* ("throws" qualifiedNameList)? ";" ;
elementValueArrayInitializer ::= "{" (elementValue ("," elementValue)*)? ","? "}" ;
StringLiteral ::= """ (EscapeSequence | string())* """ ;
DecimalLiteral ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) IntegerTypeSuffix? ;
conditionalExpression ::= conditionalOrExpression ("?" expression ":" expression)? ;
constructorBody ::= "{" explicitConstructorInvocation? blockStatement* "}" ;
localVariableDeclarationStatement ::= localVariableDeclaration ";" ;
typeArguments ::= "<" typeArgument ("," typeArgument)* ">" ;
type ::= (classOrInterfaceType ("[" "]")*) | (primitiveType ("[" "]")*) ;
classBody ::= "{" classBodyDeclaration* "}" ;
formalParameters ::= "(" formalParameterDecls? ")" ;
enumDeclaration ::= ENUM Identifier ("implements" typeList)? enumBody ;
castExpression ::= ("(" primitiveType ")" unaryExpression) | ("(" type | expression ")" unaryExpressionNotPlusMinus) ;
nonWildcardTypeArguments ::= "<" typeList ">" ;
HexLiteral ::= "0" "x" | "X" HexDigit+ IntegerTypeSuffix? ;
equalityExpression ::= instanceOfExpression ("==" | "!=" instanceOfExpression)* ;
annotationTypeDeclaration ::= "@" "interface" Identifier annotationTypeBody ;
defaultValue ::= "default" elementValue ;
literal ::= integerLiteral | FloatingPointLiteral | CharacterLiteral | StringLiteral | booleanLiteral | "null" ;
annotation ::= "@" annotationName ("(" (elementValuePairs | elementValue)? ")")? ;
superSuffix ::= arguments | ("." Identifier arguments?) ;
unaryExpressionNotPlusMinus ::= ("~" unaryExpression) | ("!" unaryExpression) | castExpression | (primary selector* ("++" | "--")?) ;
interfaceGenericMethodDecl ::= typeParameters type | "void" Identifier interfaceMethodDeclaratorRest ;
annotationTypeElementRest ::= (type annotationMethodOrConstantRest ";") | (normalClassDeclaration ";"?) | (normalInterfaceDeclaration ";"?) | (enumDeclaration ";"?) | (annotationTypeDeclaration ";"?) ;
unaryExpression ::= ("+" unaryExpression) | ("-" unaryExpression) | ("++" unaryExpression) | ("--" unaryExpression) | unaryExpressionNotPlusMinus ;
formalParameterDeclsRest ::= (variableDeclaratorId ("," formalParameterDecls)?) | ("..." variableDeclaratorId) ;
fieldDeclaration ::= variableDeclarators ";" ;
switchLabel ::= ("case" constantExpression ":") | ("case" enumConstantName ":") | ("default" ":") ;
UnicodeEscape ::= "\\" "u" HexDigit HexDigit HexDigit HexDigit ;
enumBodyDeclarations ::= ";" classBodyDeclaration* ;
voidMethodDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? methodBody | ";" ;
parExpression ::= "(" expression ")" ;
exclusiveOrExpression ::= andExpression ("^" andExpression)* ;
typeArgument ::= type | ("?" ("extends" | "super" type)?) ;
importDeclaration ::= "import" "static"? qualifiedName ("." "*")? ";" ;
constantDeclaratorsRest ::= constantDeclaratorRest ("," constantDeclarator)* ;
assignmentOperator ::= "=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=" | (t1::"<" t2::"<" t3::"=") | (t1::">" t2::">" t3::">" t4::("="?)) | (t1::">" t2::">" t3::"=") ;
typeParameter ::= Identifier ("extends" typeBound)? ;
multiplicativeExpression ::= unaryExpression ("*" | "/" | "%" unaryExpression)* ;
block ::= "{" blockStatement* "}" ;
OctalEscape ::= ("\\" "0" | "1" | "2" | "3" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ;
voidInterfaceMethodDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? ";" ;
catchClause ::= "catch" "(" formalParameter ")" block ;
normalInterfaceDeclaration ::= "interface" Identifier typeParameters? ("extends" typeList)? interfaceBody ;
arrayCreatorRest ::= "[" ("]" ("[" "]")* arrayInitializer) | (expression "]" ("[" expression "]")* ("[" "]")*) ;
FloatTypeSuffix ::= "f" | "F" | "d" | "D" ;
qualifiedNameList ::= qualifiedName ("," qualifiedName)* ;
OctalLiteral ::= "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ IntegerTypeSuffix? ;
additiveExpression ::= multiplicativeExpression ("+" | "-" multiplicativeExpression)* ;
instanceOfExpression ::= relationalExpression ("instanceof" type)? ;
elementValuePairs ::= elementValuePair ("," elementValuePair)* ;
shiftOp ::= (t1::"<" t2::("<"?)) | (t1::">" t2::">" t3::">") | (t1::">" t2::(">"?)) ;
EscapeSequence ::= ("\\" "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UnicodeEscape | OctalEscape ;
primary ::= parExpression | ("this" ("." Identifier)* identifierSuffix?) | ("super" superSuffix) | literal | ("new" creator) | (Identifier ("." Identifier)* identifierSuffix?) | (primitiveType ("[" "]")* "." "class") | ("void" "." "class") ;
ENUM ::= "enum" ;
conditionalOrExpression ::= conditionalAndExpression ("||" conditionalAndExpression)* ;
--------------------java::java-5-stahl.bgf--------------------
DIV_ASSIGN ::= "/=" ;
STAR_ASSIGN ::= "*=" ;
LE ::= "<=" ;
NUM_INT ::= ("." ("." ".") | ((("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? (f1::FLOAT_SUFFIX)?)?)) | (("0" (("x" | "X" HEX_DIGIT+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+))?) | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("l" | "L" | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? (f2::FLOAT_SUFFIX)?) | (EXPONENT (f3::FLOAT_SUFFIX)?) | (f4::FLOAT_SUFFIX))?) ;
DIV ::= "/" ;
statement ::= compoundStatement | (declaration SEMI) | (expression SEMI) | (m::modifiers enumDefinition | classDefinition) | (IDENT c::COLON statement) | ("if" LPAREN expression RPAREN statement ("else" statement)?) | ("for" LPAREN (parameterDeclaration COLON expression) | (forInit SEMI forCond SEMI forIter) RPAREN statement) | ("while" LPAREN expression RPAREN statement) | ("do" statement "while" LPAREN expression RPAREN SEMI) | ("break" IDENT? SEMI) | ("continue" IDENT? SEMI) | ("return" expression? SEMI) | ("switch" LPAREN expression RPAREN LCURLY casesGroup* RCURLY) | tryBlock | ("throw" expression SEMI) | ("synchronized" LPAREN expression RPAREN compoundStatement) | (ASSERT expression (COLON expression)? SEMI) | (s::SEMI) ;
ASSIGN ::= "=" ;
SEMI ::= ";" ;
GT ::= ">" ;
postfixExpression ::= primaryExpression ((DOT "this") | (DOT ta1::typeArguments (IDENT (lp::LPAREN argList RPAREN)?) | ("super" (lp3::LPAREN argList RPAREN) | (DOT ta2::typeArguments IDENT (lps::LPAREN argList RPAREN)?))) | (DOT newExpression) | (lb::LBRACK expression RBRACK))* ((in::INC) | (de::DEC))? ;
interfaceDefinition ::= "interface" IDENT tp::typeParameters ie::interfaceExtends ib::interfaceBlock ;
MOD_ASSIGN ::= "%=" ;
LAND ::= "&&" ;
classDefinition ::= "class" IDENT tp::typeParameters sc::superClassClause ic::implementsClause cb::classBlock ;
LNOT ::= "!" ;
QUESTION ::= "?" ;
MOD ::= "%" ;
classField ::= (mods::modifiers (it::innerTypeDef) | (tp::typeParameters (h::ctorHead s::constructorBody) | (md::memberDef))) | ("static" s3::compoundStatement) | (s4::compoundStatement) ;
DEC ::= "--" ;
STRING_LITERAL ::= """ (ESC | string())* """ ;
LCURLY ::= "{" ;
SR ::= ">>" ;
GE ::= ">=" ;
SL ::= "<<" ;
importDefinition ::= i::"import" "static"? identifierStar SEMI ;
newExpression ::= "new" typeArguments type (LPAREN argList RPAREN classBlock?) | (newArrayDeclarator arrayInitializer?) ;
RPAREN ::= ")" ;
modifier ::= "private" | "public" | "protected" | "static" | "transient" | "final" | "abstract" | "native" | "threadsafe" | "synchronized" | "volatile" | "strictfp" ;
explicitConstructorInvocation ::= typeArguments ("this" lp1::LPAREN argList RPAREN SEMI) | ("super" lp2::LPAREN argList RPAREN SEMI) ;
ESC ::= "\\" "n" | "r" | "t" | "b" | "f" | """ | "\'" | "\\" | ("u"+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("0" | "1" | "2" | "3" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?)?) | ("4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?) ;
STAR ::= "*" ;
finallyClause ::= "finally" compoundStatement ;
ELLIPSIS ::= "..." ;
MINUS ::= "-" ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "$" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "$")* ;
SR_ASSIGN ::= ">>=" ;
BSR_ASSIGN ::= ">>>=" ;
LBRACK ::= "[" ;
handler ::= "catch" LPAREN parameterDeclaration RPAREN compoundStatement ;
NUM_DOUBLE ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "d" | "D") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "d" | "D") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "d" | "D") | EXPONENT) ;
HEX_DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
BOR_ASSIGN ::= "|=" ;
ASSERT ::= "assert" ;
COLON ::= ":" ;
implementsClause ::= (i::"implements" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
INC ::= "++" ;
MINUS_ASSIGN ::= "-=" ;
annotationTypeDefinition ::= AT "interface" IDENT ab::annotationBlock ;
primaryExpression ::= (identPrimary (DOT "class")?) | constant | "true" | "false" | "null" | newExpression | "this" | "super" | (LPAREN assignmentExpression RPAREN) | (builtInType (lbt::LBRACK RBRACK)* DOT "class") ;
BXOR ::= "^" ;
BAND_ASSIGN ::= "&=" ;
packageDefinition ::= annotations p::"package" identifier SEMI ;
BAND ::= "&" ;
NUM_LONG ::= ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "l" | "L" ;
BXOR_ASSIGN ::= "^=" ;
COMMA ::= "," ;
FLOAT_SUFFIX ::= "f" | "F" | "d" | "D" ;
PLUS_ASSIGN ::= "+=" ;
AT ::= "@" ;
aCase ::= ("case" expression) | "default" COLON ;
BNOT ::= "~" ;
defaultValue ::= ("default" annotationMemberValue)? ;
LOR ::= "||" ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DOT ::= "." ;
CHAR_LITERAL ::= "\'" ESC | string() "\'" ;
BOR ::= "|" ;
NUM_FLOAT ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "f" | "F") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "f" | "F") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "f" | "F") | EXPONENT) ;
BSR ::= ">>>" ;
parameterModifier ::= ("final" | annotation)* ;
interfaceExtends ::= (e::"extends" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
relationalExpression ::= shiftExpression ((LT | GT | LE | GE shiftExpression)*) | ("instanceof" typeSpec) ;
LPAREN ::= "(" ;
builtInType ::= "void" | "boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" ;
throwsClause ::= "throws" identifier (COMMA identifier)* ;
RCURLY ::= "}" ;
PLUS ::= "+" ;
typeArgument ::= (q::QUESTION (("extends" referenceTypeSpec) | ("super" referenceTypeSpec))?) | referenceTypeSpec ;
SL_ASSIGN ::= "<<=" ;
EQUAL ::= "==" ;
tryBlock ::= "try" compoundStatement handler* finallyClause? ;
typeParameter ::= IDENT ("extends" classOrInterfaceType (BAND classOrInterfaceType)*)? ;
superClassClause ::= ("extends" classOrInterfaceType)? ;
NOT_EQUAL ::= "!=" ;
LT ::= "<" ;
RBRACK ::= "]" ;
ENUM ::= "enum" ;
--------------------java::java-5-studman.bgf--------------------
DIV_ASSIGN ::= "/=" ;
STAR_ASSIGN ::= "*=" ;
LE ::= "<=" ;
NUM_INT ::= ("." ((("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? (f1::FLOAT_SUFFIX)?) | "..")?) | (("0" (("x" | "X" HEX_DIGIT+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+))?) | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("l" | "L" | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? (f2::FLOAT_SUFFIX)?) | (EXPONENT (f3::FLOAT_SUFFIX)?) | (f4::FLOAT_SUFFIX))?) ;
DIV ::= "/" ;
statement ::= compoundStatement | (declaration SEMI) | (expression SEMI) | (m::modifiers classDefinition) | (IDENT c::COLON statement) | ("if" LPAREN expression RPAREN statement ("else" statement)?) | forStatement | ("while" LPAREN expression RPAREN statement) | ("do" statement "while" LPAREN expression RPAREN SEMI) | ("break" IDENT? SEMI) | ("continue" IDENT? SEMI) | ("return" expression? SEMI) | ("switch" LPAREN expression RPAREN LCURLY casesGroup* RCURLY) | tryBlock | ("throw" expression SEMI) | ("synchronized" LPAREN expression RPAREN compoundStatement) | ("assert" expression (COLON expression)? SEMI) | (s::SEMI) ;
ASSIGN ::= "=" ;
SEMI ::= ";" ;
GT ::= ">" ;
postfixExpression ::= primaryExpression ((DOT typeArguments? (IDENT (lp::LPAREN argList RPAREN)?) | ("super" (lp3::LPAREN argList RPAREN) | (DOT typeArguments? IDENT (lps::LPAREN argList RPAREN)?))) | (DOT "this") | (DOT newExpression) | (lb::LBRACK expression RBRACK))* ((in::INC) | (de::DEC))? ;
MOD_ASSIGN ::= "%=" ;
interfaceDefinition ::= "interface" IDENT (tp::typeParameters)? ie::interfaceExtends ib::interfaceBlock ;
LAND ::= "&&" ;
classDefinition ::= "class" IDENT (tp::typeParameters)? sc::superClassClause ic::implementsClause cb::classBlock ;
LNOT ::= "!" ;
QUESTION ::= "?" ;
MOD ::= "%" ;
annotationDefinition ::= AT "interface" IDENT ab::annotationBlock ;
classField ::= (mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? (h::ctorHead s::constructorBody) | (t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? (s2::compoundStatement) | SEMI) | (v::variableDefinitions SEMI)))) | ("static" s3::compoundStatement) | (s4::compoundStatement) ;
DEC ::= "--" ;
STRING_LITERAL ::= """ (ESC | string())* """ ;
LCURLY ::= "{" ;
SR ::= ">>" ;
GE ::= ">=" ;
SL ::= "<<" ;
importDefinition ::= i::"import" "static"? identifierStar SEMI ;
newExpression ::= "new" typeArguments? type (LPAREN argList RPAREN classBlock?) | (newArrayDeclarator arrayInitializer?) ;
RPAREN ::= ")" ;
modifier ::= "private" | "public" | "protected" | "static" | "transient" | "final" | "abstract" | "native" | "threadsafe" | "synchronized" | "volatile" | "strictfp" ;
explicitConstructorInvocation ::= typeArguments? ("this" lp1::LPAREN argList RPAREN SEMI) | ("super" lp2::LPAREN argList RPAREN SEMI) ;
ESC ::= "\\" "n" | "r" | "t" | "b" | "f" | """ | "\'" | "\\" | ("u"+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("0" | "1" | "2" | "3" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?)?) | ("4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?) ;
STAR ::= "*" ;
finallyClause ::= "finally" compoundStatement ;
MINUS ::= "-" ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "$" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "$")* ;
SR_ASSIGN ::= ">>=" ;
BSR_ASSIGN ::= ">>>=" ;
LBRACK ::= "[" ;
handler ::= "catch" LPAREN parameterDeclaration RPAREN compoundStatement ;
NUM_DOUBLE ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "d" | "D") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "d" | "D") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "d" | "D") | EXPONENT) ;
HEX_DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
BOR_ASSIGN ::= "|=" ;
TRIPLE_DOT ::= "..." ;
COLON ::= ":" ;
implementsClause ::= (i::"implements" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
INC ::= "++" ;
MINUS_ASSIGN ::= "-=" ;
primaryExpression ::= (identPrimary (DOT "class")?) | constant | "true" | "false" | "null" | newExpression | "this" | "super" | (LPAREN assignmentExpression RPAREN) | (builtInType (lbt::LBRACK RBRACK)* DOT "class") ;
BXOR ::= "^" ;
BAND_ASSIGN ::= "&=" ;
packageDefinition ::= annotations p::"package" identifier SEMI ;
BAND ::= "&" ;
NUM_LONG ::= ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "l" | "L" ;
BXOR_ASSIGN ::= "^=" ;
COMMA ::= "," ;
enumDefinition ::= "enum" IDENT ic::implementsClause eb::enumBlock ;
FLOAT_SUFFIX ::= "f" | "F" | "d" | "D" ;
PLUS_ASSIGN ::= "+=" ;
AT ::= "@" ;
aCase ::= ("case" expression) | "default" COLON ;
BNOT ::= "~" ;
LOR ::= "||" ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
typeArgumentBounds ::= "extends" | "super" classOrInterfaceType ;
DOT ::= "." ;
forStatement ::= f::"for" LPAREN traditionalForClause | forEachClause RPAREN statement ;
CHAR_LITERAL ::= "\'" ESC | string() "\'" ;
BOR ::= "|" ;
typeParameterBounds ::= "extends" classOrInterfaceType (BAND classOrInterfaceType)* ;
NUM_FLOAT ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "f" | "F") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "f" | "F") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "f" | "F") | EXPONENT) ;
BSR ::= ">>>" ;
parameterModifier ::= annotation* (f::"final")? annotation* ;
interfaceExtends ::= (e::"extends" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
relationalExpression ::= shiftExpression ((LT | GT | LE | GE shiftExpression)*) | ("instanceof" typeSpec) ;
LPAREN ::= "(" ;
builtInType ::= "void" | "boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" ;
throwsClause ::= "throws" identifier (COMMA identifier)* ;
RCURLY ::= "}" ;
PLUS ::= "+" ;
SL_ASSIGN ::= "<<=" ;
EQUAL ::= "==" ;
tryBlock ::= "try" compoundStatement handler* finallyClause? ;
superClassClause ::= ("extends" c::classOrInterfaceType)? ;
annotationField ::= mods::modifiers (td::typeDefinitionInternal) | (t::typeSpec (i::IDENT LPAREN RPAREN rt::declaratorBrackets ("default" amvi::annotationMemberValueInitializer)? SEMI) | (v::variableDefinitions SEMI)) ;
NOT_EQUAL ::= "!=" ;
LT ::= "<" ;
RBRACK ::= "]" ;
--------------------java::java-1-cordy-guo.bgf--------------------
for_update ::= {expression ","}* ;
empty_statement ::= ";" NL ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
relational_op_shift_expression ::= (relational_op shift_expression) | ("instanceof" type_specifier) ;
conditional_choice ::= "?" expression ":" conditional_expression ;
relational_op ::= "<" | ">" | "<=" | ">=" ;
and_inclusive_or_expression ::= "&&" inclusive_or_expression ;
for_statement ::= "for" "(" for_init for_expression for_update ")" statement NL ;
null_literal ::= "null" ;
catch_clause ::= "catch" "(" type_specifier variable_name ")" block ;
unary_op ::= "+" | "-" | "~" | "!" ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
dimension ::= "[" expression? "]" ;
label_statement ::= label_name ":" NL ;
while_statement ::= "while" "(" expression ")" statement NL ;
import_declaration ::= "import" imported_name ";" NL NL ;
implements_clause ::= "implements" qualified_name+ ;
or_and_expression ::= "^" and_expression ;
method_argument ::= "(" {argument ","}* ")" ;
formal_parameter ::= "final"? type_specifier formal_parameter_name ;
continue_statement ::= "continue" label_name? ";" NL ;
modifier ::= "abstract" | "final" | "public" | "protected" | "private" | "static" | "transient" | "volatile" | "native" | "synchronized" | "strictfp" ;
throw_statement ::= "throw" expression ";" NL ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" ;
extends_clause ::= "extends" type_name+ ;
interface_header ::= modifier* "interface" interface_name extends_clause? implements_clause? ;
dot_id ::= "." id ;
mult_op ::= "*" | "/" | "%" ;
method_declarator ::= method_name "(" {formal_parameter ","}* ")" dimension* ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
throws ::= "throws" qualified_name+ ;
equality_op ::= "==" | "!=" ;
for_init ::= ({expression ","}* ";") | local_variable_declaration ;
switch_block ::= "{" IN NL switch_alternative* EX "}" ;
method_body ::= (block NL NL) | (";" NL NL) ;
add_op ::= "+" | "-" ;
shift_op ::= "<<" | ">>" | ">>>" ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
do_statement ::= "do" statement "while" "(" expression ")" ";" NL ;
or_exclusive_or_expression ::= "|" exclusive_or_expression ;
variable_declaration ::= modifier* type_specifier variable_declarators ";" NL ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
or_conditional_and_expression ::= "||" conditional_and_expression ;
else_clause ::= "else" statement ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
break_statement ::= "break" label_name? ";" NL ;
finally_clause ::= "finally" block ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
package_header ::= "package" package_name ";" NL NL ;
switch_statement ::= "switch" "(" expression ")" switch_block NL ;
return_statement ::= "return" expression? ";" NL ;
equals_variable_initializer ::= "=" variable_initializer ;
boolean_literal ::= "true" | "false" ;
cast_expression ::= "(" type_specifier ")" unary_expression ;
constructor_declarator ::= class_name "(" {formal_parameter ","}* ")" ;
and_equality_expression ::= "&" equality_expression ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
primitive_type ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | "void" ;
static_initializer ::= NL "static" block NL NL ;
block ::= "{" NL IN declaration_or_statement* EX "}" ;
subscript ::= "[" expression "]" ;
expression_statement ::= expression ";" NL ;
empty_declaration ::= ";" NL ;
dot_star ::= "." "*" ;
pre_inc_dec ::= "++" | "--" ;
synchronized_statement ::= "synchronized" "(" expression ")" statement NL ;
post_inc_dec ::= "++" | "--" ;
primary ::= literal | reference | ("(" expression ")" component*) | class_instance_creation_expression | array_creation_expression ;
--------------------java::java-1-jouault.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------java::java-3-bruneliere.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------java::java-4-sdf.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
DimExpr ::= "[" Expression "]" ;
ArrayAccess ::= Name "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= Name "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
Interfaces ::= "implements" InterfaceType ("," InterfaceType)* ;
Modifier ::= "public" ;
 Modifier ::= "protected" ;
 Modifier ::= "private" ;
 Modifier ::= "static" ;
 Modifier ::= "abstract" ;
 Modifier ::= "final" ;
 Modifier ::= "native" ;
 Modifier ::= "synchronized" ;
 Modifier ::= "transient" ;
 Modifier ::= "volatile" ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" Name ";" ;
SingleTypeImportDeclaration ::= "import" Name ";" ;
MethodInvocation ::= Name "(" (Expression ("," Expression)*)? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" (Expression ("," Expression)*)? ")" ;
 MethodInvocation ::= Primary "." ClassInstanceCreationExpression ;
 MethodInvocation ::= "super" "." Identifier "(" (Expression ("," Expression)*)? ")" ;
TypeImportOnDemandDeclaration ::= "import" Name "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExpr+ Dim* ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExpr+ Dim* ;
 ArrayCreationExpression ::= "new" PrimitiveType DimExprInitialized+ ArrayInitializer ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprInitialized+ ArrayInitializer ;
Block ::= "{" BlockStatement* "}" ;
Throws ::= "throws" ClassType ("," ClassType)* ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)*)? ","? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
Dim ::= "[" "]" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
Finally ::= "finally" Block ;
MethodRes ::= "void" ;
 MethodRes ::= Type ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
FieldAccess ::= Name ;
 FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
InterfaceBody ::= "{" InterfaceMemberDeclaration* "}" ;
Super ::= "extends" ClassType ;
BreakStatement ::= "break" Identifier? ";" ;
ThrowStatement ::= "throw" Expression ";" ;
Identifier ::= "@" NatCon ;
StatementExpression ::= Expression "++" ;
 StatementExpression ::= Expression "--" ;
 StatementExpression ::= "++" Expression ;
 StatementExpression ::= "--" Expression ;
 StatementExpression ::= Assignment ;
 StatementExpression ::= Expression "++" ;
 StatementExpression ::= Expression "--" ;
 StatementExpression ::= "++" Expression ;
 StatementExpression ::= "--" Expression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" (Expression ("," Expression)*)? ")" ;
 ClassInstanceCreationExpression ::= "new" ClassType "(" (Expression ("," Expression)*)? ")" ClassBody ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
EmptyStatement ::= ";" ;
FieldDeclaration ::= Modifier* Type VariableDeclarator ("," VariableDeclarator)* ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
LabeledStatement ::= Identifier ":" Statement ;
Expression ::= Primary ;
 Expression ::= "+" Expression ;
 Expression ::= "-" Expression ;
 Expression ::= "~" Expression ;
 Expression ::= "!" Expression ;
 Expression ::= "(" PrimitiveType Dim* ")" Expression ;
 Expression ::= "(" Type ")" Expression ;
 Expression ::= "(" Name Dim+ ")" Expression ;
 Expression ::= Expression "*" Expression ;
 Expression ::= Expression "/" Expression ;
 Expression ::= Expression "%" Expression ;
 Expression ::= Expression "+" Expression ;
 Expression ::= Expression "-" Expression ;
 Expression ::= Expression "<<" Expression ;
 Expression ::= Expression ">>" Expression ;
 Expression ::= Expression ">>>" Expression ;
 Expression ::= Expression "<" Expression ;
 Expression ::= Expression ">" Expression ;
 Expression ::= Expression "<=" Expression ;
 Expression ::= Expression ">=" Expression ;
 Expression ::= Expression "instanceof" ReferenceType ;
 Expression ::= Expression "==" Expression ;
 Expression ::= Expression "!=" Expression ;
 Expression ::= Expression "&" Expression ;
 Expression ::= Expression "^" Expression ;
 Expression ::= Expression "|" Expression ;
 Expression ::= Expression "&&" Expression ;
 Expression ::= Expression "||" Expression ;
 Expression ::= Expression "?" Expression ":" Expression ;
 Expression ::= StatementExpression ;
 Expression ::= Assignment ;
 Expression ::= "+" Expression ;
 Expression ::= "-" Expression ;
 Expression ::= "~" Expression ;
 Expression ::= "!" Expression ;
 Expression ::= Expression "<" Expression ;
 Expression ::= Expression ">" Expression ;
 Expression ::= Expression "<=" Expression ;
 Expression ::= Expression ">=" Expression ;
AbstractMethodDeclaration ::= MethodHeader ";" ;
ExplicitConstructorInvocation ::= "this" "(" (Expression ("," Expression)*)? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" (Expression ("," Expression)*)? ")" ";" ;
ExtendsInterfaces ::= "extends" InterfaceType ("," InterfaceType)* ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
ConstructorDeclarator ::= SimpleName "(" (FormalParameter ("," FormalParameter)*)? ")" ;
Name ::= Type "." "class" ;
 Name ::= Identifier ("." Identifier)* ;
AssertStatement ::= "assert" Expression ";" ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
InterfaceDeclaration ::= Modifier* "interface" Identifier ExtendsInterfaces? InterfaceBody ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatement* "}" ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroup* SwitchLabel* "}" ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprInitialized ::= "[" Expression? "]" ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block CatchClause+ ;
 TryStatement ::= "try" Block CatchClause* Finally ;
LocalVariableDeclaration ::= Type VariableDeclarator ("," VariableDeclarator)* ;
ArrayType ::= PrimitiveType "[" "]" ;
 ArrayType ::= Name "[" "]" ;
 ArrayType ::= ArrayType "[" "]" ;
MethodDeclarator ::= Identifier "(" (FormalParameter ("," FormalParameter)*)? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
StatementExpressionList ::= StatementExpression ("," StatementExpression)* ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassDeclaration ::= Modifier* "class" Identifier Super? Interfaces? ClassBody ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
 ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= ClassDeclaration ;
 ClassBodyDeclaration ::= InterfaceDeclaration ;
SwitchLabel ::= "case" Expression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-5-cordy-guo-dean.bgf--------------------
wildcard_type ::= ("?" wildcard_type_bound?) | (id wildcard_type_bound?) ;
for_update ::= {expression ","}* ;
var_arg_specifier ::= "..." ;
empty_statement ::= ";" NL ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
relational_op_shift_expression ::= (relational_op shift_expression) | ("instanceof" type_specifier) ;
conditional_choice ::= "?" expression ":" conditional_expression ;
relational_op ::= "<" | ">" | "<=" | ">=" ;
and_inclusive_or_expression ::= "&&" inclusive_or_expression ;
for_statement ::= "for" "(" for_init for_expression for_update ")" statement NL ;
single_annotation_value ::= (expression) | nested_annotation | ("{" {expression_or_nested_annotation ","}* "}") ;
null_literal ::= "null" ;
catch_clause ::= "catch" "(" modifier* type_specifier variable_name ")" block ;
unary_op ::= "+" | "-" | "~" | "!" ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
dimension ::= "[" expression? "]" ;
label_statement ::= label_name ":" statement ;
while_statement ::= "while" "(" expression ")" statement NL ;
import_declaration ::= ("import" "static"? imported_name ";" NL NL) | (";" NL) ;
implements_clause ::= "implements" qualified_name+ ;
assert_error_code ::= ":" expression ;
or_and_expression ::= "^" and_expression ;
method_argument ::= "(" {argument ","}* ")" ;
annotation_value_spec ::= "(" annotation_value_list ")" ;
formal_parameter ::= annotation* "final"? type_specifier var_arg_specifier? formal_parameter_name ;
continue_statement ::= "continue" label_name? ";" NL ;
modifier ::= "abstract" | "final" | "public" | "protected" | "private" | "static" | "transient" | "volatile" | "native" | "synchronized" | ("strictfp") | (annotation) ;
throw_statement ::= "throw" expression ";" NL ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | (SPOFF ">" ">=" SPON) | (SPOFF ">" ">" ">=" SPON) | "&=" | "^=" | "|=" ;
extends_clause ::= "extends" type_name+ ;
interface_header ::= modifier* annot_marker? "interface" interface_name extends_clause? implements_clause? ;
dot_id ::= ("." generic_argument? id) | ("." "class") | ("." class_instance_declaration) ;
mult_op ::= "*" | "/" | "%" ;
method_declarator ::= method_name "(" {formal_parameter ","}* ")" dimension* ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
throws ::= "throws" qualified_name+ ;
equality_op ::= "==" | "!=" ;
for_init ::= ({expression ","}* ";") | local_variable_declaration ;
switch_block ::= "{" IN NL switch_alternative* EX "}" ;
keyed_annotation_value ::= id "=" single_annotation_value ;
generic_parameter ::= "<" {type_parameter ","}* ">" ;
method_body ::= (block NL NL) | (annotation_default? ";" NL NL) ;
add_op ::= "+" | "-" ;
wildcard_type_bound ::= ("extends" type_specifier) | ("super" type_specifier) ;
shift_op ::= "<<" | (SPOFF ">" ">" SPON) | (SPOFF ">" ">" ">" SPON) ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
annotation_value_list ::= (single_annotation_value) | ({keyed_annotation_value ","}*) ;
do_statement ::= "do" statement "while" "(" expression ")" ";" NL ;
and_type_spec ::= "&" type_specifier ;
class_instance_declaration ::= class_instance_creation_expression | "class" ;
or_exclusive_or_expression ::= "|" exclusive_or_expression ;
variable_declaration ::= modifier* type_specifier variable_declarators ";" NL ;
assert_statement ::= "assert" expression assert_error_code? ";" NL ;
type_bound_clause ::= "extends" type_bound ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
or_conditional_and_expression ::= "||" conditional_and_expression ;
else_clause ::= "else" statement ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
annotation_default ::= ("default" expression) | ("default" array_initializer) ;
break_statement ::= "break" label_name? ";" NL ;
annotation ::= SPOFF "@" reference "@"? SPON annotation_value_spec? NL ;
finally_clause ::= "finally" block ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
package_header ::= annotation* "package" package_name ";" NL NL ;
generic_argument ::= "<" {type_argument ","}* ">" ;
switch_statement ::= "switch" "(" expression ")" switch_block NL ;
enum_body ::= "{" IN {enum_element ","}* ","? class_body_declaration* EX "}" ";"? NL NL ;
return_statement ::= "return" expression? ";" NL ;
equals_variable_initializer ::= "=" variable_initializer ;
boolean_literal ::= "true" | "false" ;
cast_expression ::= "(" type_specifier ")" unary_expression ;
constructor_declarator ::= class_name "(" {formal_parameter ","}* ")" ;
and_equality_expression ::= "&" equality_expression ;
annot_marker ::= "@" ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
primitive_type ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | "void" ;
static_initializer ::= NL "static" block NL NL ;
block ::= "{" NL IN declaration_or_statement* EX "}" ;
subscript ::= "[" expression "]" ;
for_in_statement ::= "for" "(" for_in_init ":" expression ")" statement NL ;
enum_header ::= modifier* id? "enum" declared_name? implements_clause? ;
expression_statement ::= expression ";" NL ;
empty_declaration ::= ";" NL ;
dot_star ::= "." "*" ;
pre_inc_dec ::= "++" | "--" ;
synchronized_statement ::= "synchronized" "(" expression ")" statement NL ;
primary ::= (literal component*) | reference | ("(" expression ")" component*) | (class_instance_creation_expression component*) | (array_creation_expression component*) ;
post_inc_dec ::= "++" | "--" ;
--------------------java::java-5-giquel.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------java::java-5-landman.bgf--------------------
DimExpr ::= [dim] "[" Expr "]" ;
ImportDec ::= [typeImportOnDemandDec] "import" PackageName "." "*" ";" ;
 ImportDec ::= [typeImportDec] "import" TypeName ";" ;
 ImportDec ::= [staticImportDec] "import" "static" TypeName "." Id ";" ;
 ImportDec ::= [staticImportOnDemandDec] "import" "static" TypeName "." "*" ";" ;
PackageDec ::= [packageDec] Anno* "package" PackageName ";" ;
VarDec ::= [varDec] VarDecId "=" VarInit ;
 VarDec ::= [varDec] VarDecId ;
VarMod ::= "final" ;
Interfaces ::= [implementsDec] "implements" {InterfaceType ","}+ ;
Modifier ::= "protected" ;
 Modifier ::= "private" ;
 Modifier ::= "volatile" ;
 Modifier ::= "synchronized" ;
 Modifier ::= "final" ;
 Modifier ::= "strictfp" ;
 Modifier ::= "transient" ;
 Modifier ::= "abstract" ;
 Modifier ::= "native" ;
 Modifier ::= "static" ;
 Modifier ::= "public" ;
ConstrMod ::= "protected" ;
 ConstrMod ::= "private" ;
 ConstrMod ::= "public" ;
ElemVal ::= [elemValArrayInit] "{" {ElemVal ","}* "}" ;
 ElemVal ::= Expr ;
 ElemVal ::= Anno ;
 ElemVal ::= [elemValArrayInit] "{" {ElemVal ","}* "," "}" ;
InterfaceMemberDec ::= [semicolon] ";" ;
 InterfaceMemberDec ::= InterfaceDec ;
 InterfaceMemberDec ::= AbstractMethodDec ;
 InterfaceMemberDec ::= ClassDec ;
 InterfaceMemberDec ::= ConstantDec ;
Block ::= [block] "{" BlockStm* "}" ;
Throws ::= [throwsDec] "throws" {ExceptionType ","}+ ;
ElemValPair ::= [elemValPair] Id "=" ;
CatchClause ::= [catch] "catch" "(" FormalParam ")" Block ;
ArrayInit ::= [arrayInit] "{" {VarInit ","}* "," "}" ;
 ArrayInit ::= [arrayInit] "{" {VarInit ","}* "}" ;
Dim ::= [dim] "[" "]" ;
EnumBody ::= [enumBody] "{" {EnumConst ","}* EnumBodyDecs? "}" ;
 EnumBody ::= [enumBody] "{" {EnumConst ","}* "," EnumBodyDecs? "}" ;
ConstrInv ::= [qSuperConstrInv] Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" ;
 ConstrInv ::= [superConstrInv] TypeArgs? "super" "(" {Expr ","}* ")" ";" ;
 ConstrInv ::= [altConstrInv] TypeArgs? "this" "(" {Expr ","}* ")" ";" ;
FieldAccess ::= [qSuperField] TypeName "." "super" "." Id ;
 FieldAccess ::= [field] "." Id ;
 FieldAccess ::= [superField] "super" "." Id ;
MethodSpec ::= [method] MethodName ;
 MethodSpec ::= [superMethod] "super" "." TypeArgs? Id ;
 MethodSpec ::= [genericMethod] AmbName "." TypeArgs Id ;
 MethodSpec ::= [qSuperMethod] TypeName "." "super" "." TypeArgs? Id ;
 MethodSpec ::= [method] "." TypeArgs? Id ;
Super ::= [superDec] "extends" ClassType ;
TypeArgs ::= [typeArgs] "<" {ActualTypeArg ","}+ ">" ;
AnnoDecHead ::= [annoDecHead] "@" "interface" Id ;
ArraySubscript ::= "[" Expr "]" ;
PackageName ::= [packageName] {Id "."}+ ;
ConstrBody ::= [constrBody] "{" ConstrInv? BlockStm* "}" ;
Anno ::= [singleElemAnno] "@" TypeName "(" ")" ;
 Anno ::= [anno] "@" TypeName "(" {ElemValPair ","}* ")" ;
 Anno ::= [markerAnno] "@" TypeName ;
ArrayCreationExpr ::= [newArray] "new" ArrayBaseType DimExpr+ ;
 ArrayCreationExpr ::= [newArray] "new" ArrayBaseType ArrayInit ;
TypeDec ::= InterfaceDec ;
 TypeDec ::= ClassDec ;
 TypeDec ::= [semicolon] ";" ;
FieldMod ::= "public" ;
 FieldMod ::= "static" ;
 FieldMod ::= "transient" ;
 FieldMod ::= "final" ;
 FieldMod ::= "volatile" ;
 FieldMod ::= "private" ;
 FieldMod ::= "protected" ;
FieldDec ::= [fieldDec] Type {VarDec ","}+ ";" ;
LocalVarDecStm ::= [localVarDecStm] LocalVarDec ";" ;
AnnoElemDec ::= EnumDec ;
 AnnoElemDec ::= [semicolon] ";" ;
 AnnoElemDec ::= ClassDec ;
 AnnoElemDec ::= ConstantDec ;
 AnnoElemDec ::= InterfaceDec ;
 AnnoElemDec ::= [annoMethodDec] AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" ;
BoolLiteral ::= [false] "false" ;
 BoolLiteral ::= [true] "true" ;
TypeBound ::= [typeBound] "extends" {ClassOrInterfaceType "&"}+ ;
MethodBody ::= [noMethodBody] ";" ;
 MethodBody ::= Block ;
MethodMod ::= "final" ;
 MethodMod ::= "strictfp" ;
 MethodMod ::= "synchronized" ;
 MethodMod ::= "protected" ;
 MethodMod ::= "private" ;
 MethodMod ::= "static" ;
 MethodMod ::= "public" ;
 MethodMod ::= "abstract" ;
 MethodMod ::= "native" ;
AmbName ::= [ambName] AmbName "." Id ;
 AmbName ::= [ambName] Id ;
MethodDecHead ::= [deprMethodDecHead] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ;
 MethodDecHead ::= [methodDecHead] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ;
ExprName ::= [exprName] Id ;
 ExprName ::= [exprName] AmbName "." Id ;
DefaultVal ::= [defaultVal] "default" ;
AbstractMethodDec ::= [abstractMethodDec] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ";" ;
 AbstractMethodDec ::= [deprAbstractMethodDec] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" ;
AbstractMethodMod ::= "abstract" ;
 AbstractMethodMod ::= "public" ;
EnumConstArgs ::= "(" {Expr ","}* ")" ;
StaticInit ::= [staticInit] "static" Block ;
FormalParam ::= [varArityParam] Type "..." VarDecId ;
 FormalParam ::= [param] Type VarDecId ;
ClassLiteral ::= [voidClass] "void" "." "class" ;
 ClassLiteral ::= [class] Type "." "class" ;
EnumBodyDecs ::= [enumBodyDecs] ";" ClassBodyDec* ;
ExtendsInterfaces ::= [extendsInterfaces] "extends" {InterfaceType ","}+ ;
ActualTypeArg ::= Type ;
 ActualTypeArg ::= [wildcard] "?" WildcardBound? ;
PackageOrTypeName ::= [packageOrTypeName] Id ;
 PackageOrTypeName ::= [packageOrTypeName] PackageOrTypeName "." Id ;
MethodName ::= [methodName] AmbName "." Id ;
 MethodName ::= [methodName] Id ;
InterfaceDec ::= InterfaceDecHead "{" InterfaceMemberDec* "}" ;
 InterfaceDec ::= AnnoDecHead "{" AnnoElemDec* "}" ;
InterfaceMod ::= "public" ;
 InterfaceMod ::= "static" ;
 InterfaceMod ::= "abstract" ;
 InterfaceMod ::= "strictfp" ;
 InterfaceMod ::= "protected" ;
 InterfaceMod ::= "private" ;
InterfaceDecHead ::= [interfaceDecHead] "interface" Id TypeParams? ExtendsInterfaces? ;
IntType ::= [int] "int" ;
 IntType ::= [byte] "byte" ;
 IntType ::= [long] "long" ;
 IntType ::= [short] "short" ;
 IntType ::= [char] "char" ;
CondMid ::= "?" Expr ":" ;
WildcardBound ::= [wildcardUpperBound] "extends" RefType ;
 WildcardBound ::= [wildcardLowerBound] "super" RefType ;
TypeDecSpec ::= TypeName ;
 TypeDecSpec ::= [member] TypeDecSpec TypeArgs "." Id ;
EnumDecHead ::= [enumDecHead] "enum" Id Interfaces? ;
PrimType ::= NumType ;
 PrimType ::= [boolean] "boolean" ;
ConstantDec ::= [constantDec] Type {VarDec ","}+ ";" ;
ConstantMod ::= "static" ;
 ConstantMod ::= "public" ;
 ConstantMod ::= "final" ;
ClassBody ::= [classBody] "{" ClassBodyDec* "}" ;
SwitchBlock ::= [switchBlock] "{" SwitchGroup* SwitchLabel* "}" ;
ResultType ::= Type ;
 ResultType ::= [void] "void" ;
FloatType ::= [double] "double" ;
 FloatType ::= [float] "float" ;
Expr ::= [postDecr] Expr "--" ;
 Expr ::= [postIncr] Expr "++" ;
 Expr ::= [castPrim] "(" PrimType ")" Expr ;
 Expr ::= [castRef] "(" RefType ")" Expr ;
 Expr ::= [minus] Expr ;
 Expr ::= [preIncr] "++" Expr ;
 Expr ::= [plus] Expr ;
 Expr ::= [preDecr] "--" Expr ;
 Expr ::= [this] "this" ;
 Expr ::= [mul] Expr "*" Expr ;
 Expr ::= [div] Expr Expr ;
 Expr ::= [remain] Expr "%" Expr ;
 Expr ::= [qThis] TypeName "." "this" ;
 Expr ::= [complement] "~" Expr ;
 Expr ::= [not] "!" Expr ;
 Expr ::= [plus] Expr Expr ;
 Expr ::= [minus] Expr Expr ;
 Expr ::= [uRightShift] Expr ">>>" Expr ;
 Expr ::= [rightShift] Expr ">>" Expr ;
 Expr ::= [leftShift] Expr "<<" Expr ;
 Expr ::= [ltEq] Expr "<=" Expr ;
 Expr ::= [lt] Expr "<" Expr ;
 Expr ::= [gtEq] Expr ">=" Expr ;
 Expr ::= [instanceOf] Expr "instanceof" RefType ;
 Expr ::= [gt] Expr ">" Expr ;
 Expr ::= [eq] Expr "==" Expr ;
 Expr ::= [notEq] Expr "!=" Expr ;
 Expr ::= [and] Expr "&" Expr ;
 Expr ::= [excOr] Expr "^" Expr ;
 Expr ::= [or] Expr "|" Expr ;
 Expr ::= [lazyAnd] Expr "&&" Expr ;
 Expr ::= [lazyOr] Expr "||" Expr ;
 Expr ::= [cond] Expr CondMid Expr ;
 Expr ::= [assignMinus] LHS "-=" Expr ;
 Expr ::= [assignExcOr] LHS "^=" Expr ;
 Expr ::= [assignPlus] LHS "+=" Expr ;
 Expr ::= [assignURightShift] LHS ">>>=" Expr ;
 Expr ::= [assignAnd] LHS "&=" Expr ;
 Expr ::= [assignDiv] LHS "/=" Expr ;
 Expr ::= [assignMul] LHS "*=" Expr ;
 Expr ::= [assignRemain] LHS "%=" Expr ;
 Expr ::= [assignLeftShift] LHS "<<=" Expr ;
 Expr ::= [assignRightShift] LHS ">>=" Expr ;
 Expr ::= [assignOr] LHS "|=" Expr ;
 Expr ::= [assign] LHS "=" Expr ;
 Expr ::= [qNewInstance] Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? ;
 Expr ::= [lit] Literal ;
 Expr ::= [newInstance] "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? ;
 Expr ::= [exprName] ExprName ;
 Expr ::= ArrayCreationExpr ;
 Expr ::= "(" Expr ")" ;
 Expr ::= ε ;
 Expr ::= [invoke] MethodSpec "(" {Expr ","}* ")" ;
ArrayType ::= [arrayType] Type "[" "]" ;
ClassMemberDec ::= ClassDec ;
 ClassMemberDec ::= MethodDec ;
 ClassMemberDec ::= FieldDec ;
 ClassMemberDec ::= [semicolon] ";" ;
 ClassMemberDec ::= InterfaceDec ;
ConstrHead ::= [constrDecHead] TypeParams? Id "(" {FormalParam ","}* ")" Throws? ;
Stm ::= [synchronized] "synchronized" "(" Expr ")" Block ;
 Stm ::= [exprStm] Expr ";" ;
 Stm ::= [for] "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm ;
 Stm ::= [for] "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm ;
 Stm ::= Block ;
 Stm ::= [continue] "continue" Id? ";" ;
 Stm ::= [try] "try" Block CatchClause+ ;
 Stm ::= [throw] "throw" Expr ";" ;
 Stm ::= [switch] "switch" "(" Expr ")" SwitchBlock ;
 Stm ::= [if] "if" "(" Expr ")" Stm ;
 Stm ::= [break] "break" Id? ";" ;
 Stm ::= [empty] ";" ;
 Stm ::= [labeled] Id ":" Stm ;
 Stm ::= [assertStm] "assert" Expr ":" Expr ";" ;
 Stm ::= [forEach] "for" "(" FormalParam ":" Expr ")" Stm ;
 Stm ::= [assertStm] "assert" Expr ";" ;
 Stm ::= [try] "try" Block CatchClause* "finally" Block ;
 Stm ::= [return] "return" Expr? ";" ;
 Stm ::= [doWhile] "do" Stm "while" "(" Expr ")" ";" ;
 Stm ::= [while] "while" "(" Expr ")" Stm ;
 Stm ::= [if] "if" "(" Expr ")" Stm "else" Stm ;
ClassDecHead ::= [classDecHead] "class" Id TypeParams? Super? Interfaces? ;
ClassMod ::= "abstract" ;
 ClassMod ::= "static" ;
 ClassMod ::= "public" ;
 ClassMod ::= "strictfp" ;
 ClassMod ::= "final" ;
 ClassMod ::= "private" ;
 ClassMod ::= "protected" ;
NullLiteral ::= [null] "null" ;
LocalVarDec ::= [localVarDec] Type {VarDec ","}+ ;
TypeName ::= [typeName] PackageOrTypeName "." Id ;
 TypeName ::= [typeName] Id ;
ArrayBaseType ::= TypeName ;
 ArrayBaseType ::= PrimType ;
 ArrayBaseType ::= [unboundWld] TypeName "<" "?" ">" ;
SwitchLabel ::= [case] "case" Expr ":" ;
 SwitchLabel ::= [default] "default" ":" ;
TypeParams ::= [typeParams] "<" {TypeParam ","}+ ">" ;
--------------------modula::sdf.bgf--------------------
Selector ::= "^" | ("." Id) | ("[" Expr ("," Expr)* "]") | ("(" (Actual ("," Actual)*)? ")") ;
EnumType ::= "{" IdList? "}" ;
WhileStmt ::= "WHILE" Expr "DO" Stmts "END" ;
IdList ::= Id ("," Id)* ;
ExceptionDecl ::= Id ("(" Type ")")? ;
ImportItem ::= Id | (Id "AS" Id) ;
AssignStmt ::= Expr ":=" Expr ;
SubrangeType ::= "[" Expr ".." Expr "]" ;
TypeLiteral ::= ArrayType | PackedType | EnumType | ObjectType | ProcedureType | RecordType | RefType | SetType | SubrangeType | ("(" Type ")") | TypeName ;
PackedType ::= "BITS" Expr "FOR" Type ;
Block ::= Decl* "BEGIN" Stmts "END" ;
Override ::= Id ":=" Expr ;
QualId ::= Id ("." Id)? ;
Brand ::= "BRANDED" TextLiteral? ;
CallStmt ::= Expr "(" (Actual ("," Actual)*)? ")" ;
VariableDecl ::= (IdList ":" Type ":=" Expr) | (IdList ":" Type) | (IdList ":=" Expr) ;
Binding ::= Id "=" Expr ;
GenFmls ::= "(" IdList? ")" ;
Constructor ::= Type "{" AnyCons? "}" ;
Field ::= (IdList ":" Type ":=" Expr) | (IdList ":" Type) | (IdList ":=" Expr) ;
Fields ::= (Field (";" Field)* ";"?)? ;
TryFinStmt ::= "TRY" Stmts "FINALLY" Stmts "END" ;
Label ::= Expr (".." Expr)? ;
Case ::= Label ("," Label)* "=>" Stmts ;
WithStmt ::= "WITH" Binding ("," Binding)* "DO" Stmts "END" ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
RecordType ::= "RECORD" Fields "END" ;
Decl ::= ("CONST" (ConstDecl ";")*) | ("TYPE" (TypeDecl ";")*) | ("EXCEPTION" (ExceptionDecl ";")*) | ("VAR" (VariableDecl ";")*) | (ProcedureHead ("=" Block Id)? ";") | ("REVEAL" (QualId "=" | "<:" Type ";")*) ;
GenActls ::= "(" IdList? ")" ;
TryXptStmt ::= "TRY" Stmts "EXCEPT" "|"? Handler ("|" Handler)* ("ELSE" Stmts)? "END" ;
Formals ::= (Formal (";" Formal)* ";"?)? ;
Mode ::= "VALUE" | "VAR" | "READONLY" ;
Id ::= "NOT" | "ROOT" ;
ObjectType ::= Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? ("OVERRIDES" Overrides)? "END" ;
CaseStmt ::= "CASE" Expr "OF" "|"? Case ("|" Case)* ("ELSE" Stmts)? "END" ;
ReturnStmt ::= "RETURN" Expr? ;
RaiseStmt ::= "RAISE" QualId ("(" Expr ")")? ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
ProcedureHead ::= "PROCEDURE" Id Signature ;
GenMod ::= "GENERIC" "MODULE" Id GenFmls ";" Import* Block Id "." ;
Actual ::= TypeLiteral | ((Id ":=")? Expr) ;
LoopStmt ::= "LOOP" Stmts "END" ;
Handler ::= QualId ("," QualId)* ("(" Id ")")? "=>" Stmts ;
Raises ::= ("{" (QualId ("," QualId)*)? "}") | "ANY" ;
ExitStmt ::= "EXIT" ;
IfStmt ::= "IF" Expr "THEN" Stmts ("ELSIF" Expr "THEN" Stmts)* ("ELSE" Stmts)? "END" ;
TCase ::= Type ("," Type)* ("(" Id ")")? "=>" Stmts ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= Id "=" | "<:" Type ;
RepeatStmt ::= "REPEAT" Stmts "UNTIL" Expr ;
Compilation ::= "UNSAFE"? Interface | Module | GenInf | GenMod ;
Addop ::= "+" | "-" | "&" ;
AnyCons ::= Elt ("," Elt)* ("," "..")? ;
SetType ::= "SET" "OF" Type ;
Relop ::= "=" | "#" | "<" | "<=" | ">" | ">=" | "IN" ;
Interface ::= ("INTERFACE" Id ";" Import* Decl* "END" Id ".") | ("INTERFACE" Id "=" Id GenActls "END" Id ".") ;
Signature ::= "(" Formals ")" (":" Type)? ("RAISES" Raises)? ;
AsImport ::= "IMPORT" ImportItem ("," ImportItem)* ";" ;
Expr ::= (Expr "OR" Expr) | (Expr "AND" Expr) | ("NOT" Expr) | (Expr Relop Expr) | (Expr Addop Expr) | (Expr Mulop Expr) | ("+" Expr) | ("-" Expr) | (Expr Selector) | Id | Literal | Constructor | ("(" Expr ")") ;
ArrayType ::= "ARRAY" (Type ("," Type)*)? "OF" Type ;
Methods ::= (Method (";" Method)* ";"?)? ;
GenInf ::= "GENERIC" "INTERFACE" Id GenFmls ";" Import* Decl* "END" Id "." ;
ForStmt ::= "FOR" Id ":=" Expr "TO" Expr ("BY" Expr)? "DO" Stmts "END" ;
Formal ::= (Mode? IdList ":" Type ":=" Expr) | (Mode? IdList ":" Type) | (Mode? IdList ":=" Expr) ;
FromImport ::= "FROM" Id "IMPORT" IdList ";" ;
ProcedureType ::= "PROCEDURE" Signature ;
Elt ::= (Expr ".." Expr) | Expr | (Id ":=" Expr) ;
ConstDecl ::= Id (":" Type)? "=" Expr ;
Module ::= ("MODULE" Id ("EXPORTS" IdList)? ";" Import* Block Id ".") | ("MODULE" Id ("EXPORTS" IdList)? "=" Id GenActls "END" Id ".") ;
TCaseStmt ::= "TYPECASE" Expr "OF" "|"? TCase ("|" TCase)* ("ELSE" Stmts)? "END" ;
Stmts ::= (Stmt (";" Stmt)* ";"?)? ;
Overrides ::= (Override (";" Override)* ";"?)? ;
TypeName ::= "ROOT" | ("UNTRACED" "ROOT") ;
Mulop ::= "*" | "/" | "DIV" | "MOD" ;
Method ::= Id Signature (":=" Expr)? ;
--------------------modula::src-052.bgf--------------------
Selector ::= "^" | ("." Ident) | ("[" Expr ("," Expr)* "]") | ("(" (Actual ("," Actual)*)? ")") ;
RecordElt ::= (Ident ":=")? Expr ;
EnumType ::= "{" IDList? "}" ;
ExceptionDecl ::= Ident ("(" Type ")")? ;
WhileStmt ::= "WHILE" Expt "DO" Stmts "END" ;
SubrangeType ::= "[" ConstExpr ".." ConstExpr "]" ;
AssignStmt ::= Expr ":=" Expr ;
Ancestor ::= TypeName | ObjectType | "UNTRACED" ;
HexDigit ::= Digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
PackedType ::= "BITS" ConstExpr "FOR" Type ;
Block ::= Declaration* "BEGIN" Stmts "END" ;
Number ::= (Digit+) | (Digit+ "_" HexDigit+) | (Digit+ "." Digit+ Exponent?) ;
Brand ::= "BRANDED" TextLiteral? ;
OtherChar ::= " " | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "‘" | "{" | "|" | "}" | "~" | ExtendedChar ;
CallStmt ::= Expr "(" (Actual ("," Actual)*)? ")" ;
VariableDecl ::= IDList ":" Type "&" ":=" Expr ;
Binding ::= Ident "=" Expr ;
Constructor ::= Type "{" (SetCons | RecordCons | ArrayCons)? "}" ;
Field ::= IDList ":" Type "&" ":=" ConstExpr ;
Type ::= TypeName | ArrayType | PackedType | EnumType | ObjectType | ProcedureType | RecordType | RefType | SetType | SubrangeType | ("(" Type ")") ;
Declaration ::= ("CONST" (ConstDecl ";")*) | ("TYPE" (TypeDecl ";")*) | ("EXCEPTION" (ExceptionDecl ";")*) | ("VAR" (VariableDecl ";")*) | (ProcedureHead ("=" Block Ident)? ";") | ("REVEAL" (TypeID "=" | "<:" Type ";")*) ;
CharLiteral ::= "’" PrintingChar | Escape "’" ;
IDList ::= Ident ("," Ident)* ;
Fields ::= (Field (";" Field)* ";"?)? ;
TryFinStmt ::= "TRY" Stmts "FINALLY" Stmts "END" ;
Ident ::= Letter (Letter | Digit | "_")* ;
Case ::= Labels ("," Labels)* "=>" Stmts ;
ExtendedChar ::= " " | "¡" | "¢" | "£" | "¤" | "¥" | "¦" | "§" | "¨" | "©" | "ª" | "«" | "¬" | "­" | "®" | "¯" | "°" | "±" | "²" | "³" | "´" | "µ" | "¶" | "·" | "¸" | "¹" | "º" | "»" | "¼" | "½" | "¾" | "¿" | "À" | "Á" | "Â" | "Ã" | "Ä" | "Å" | "Æ" | "Ç" | "È" | "É" | "Ê" | "Ë" | "Ì" | "Í" | "Î" | "Ï" | "Ð" | "Ñ" | "Ò" | "Ó" | "Ô" | "Õ" | "Ö" | "×" | "Ø" | "Ù" | "Ú" | "Û" | "Ü" | "Ý" | "Þ" | "ß" | "à" | "á" | "â" | "ã" | "ä" | "å" | "æ" | "ç" | "è" | "é" | "ê" | "ë" | "ì" | "í" | "î" | "ï" | "ð" | "ñ" | "ò" | "ó" | "ô" | "õ" | "ö" | "÷" | "ø" | "ù" | "ú" | "û" | "ü" | "ý" | "þ" | "ÿ" ;
Exponent ::= "E" | "e" | "D" | "d" ("+" | "-")? Digit+ ;
WithStmt ::= "WITH" Binding ("," Binding)* "DO" Stmts "END" ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
RecordType ::= "RECORD" Fields "END" ;
TryXptStmt ::= "TRY" Stmts "EXCEPT" Handler? ("|" Handler)* ("ELSE" Stmts)? "END" ;
Letter ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
Import ::= ("FROM" Ident)? "IMPORT" IDList ";" ;
Operator ::= "+" | "-" | "*" | "/" | "." | "^" | (":" "=") | "=" | "$" | "<" | ("<" "=") | (">" "=") | ">" | "&" | ("<" ":") | ("=" ">") | "," | ";" | "|" | ":" | ("." ".") | "(" | ")" | "{" | "}" | "[" | "]" ;
Formals ::= (Formal (";" Formal)* ";"?)? ;
OctalDigit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ;
RecordCons ::= RecordElt ("," RecordElt)* ;
ObjectType ::= Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? "END" ;
CaseStmt ::= "CASE" Expr "OF" Case? ("|" Case)* ("ELSE" Stmts)? "END" ;
ReturnStmt ::= "RETURN" Expr? ;
RaiseStmt ::= "RAISE" ExceptionID ("(" Expr ")")? ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
ProcedureHead ::= "PROCEDURE" Ident Signature ;
Actual ::= ((Ident ":=")? Expr) | Type ;
LoopStmt ::= "LOOP" Stmts "END" ;
Handler ::= ExceptionID ("," ExceptionID)* ("(" Ident ")")? "=>" Stmts ;
Raises ::= "{" (ExceptionID ("," ExceptionID)*)? "}" ;
ExitStmt ::= "EXIT" ;
IfStmt ::= "IF" Expr "THEN" Stmts ("ELSIF" Expt "THEN" Stmts)* ("ELSE" Stmts)? "END" ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= Ident "=" | "<:" Type ;
Compilation ::= "UNSAFE"? Interface | Module ;
TextLiteral ::= """ (PrintingChar | Escape)* """ ;
Addop ::= "+" | "-" | "&" ;
Escape ::= ("\" "n") | ("\" "t") | ("\" "r") | ("\" "f") | ("\" "\") | ("\" "’") | ("\" """) | ("\" OctalDigit OctalDigit OctalDigit) ;
Labels ::= ConstExpr (".." ConstExpr)? ;
SetType ::= "SET" "OF" Type ;
Relop ::= "=" | "#" | "<" | "<=" | ">" | ">=" | "IN" ;
Interface ::= "INTERFACE" Ident ";" Import* Declaration* "END" Ident "." ;
Signature ::= "(" Formals ")" (":" Type)? ("RAISES" Raises)? ;
Expr ::= E1 ("OR" E1)* ;
SetCons ::= SetElt ("." SetElt)* ;
E8 ::= Ident | Number | CharLiteral | TextLiteral | Constructor | ("(" Expr ")") ;
ArrayType ::= "ARRAY" (Type ("," Type)*)? "OF" Type ;
Methods ::= (Method (";" Method)* ";"?)? ;
E6 ::= ("+" | "-")* E7 ;
ForStmt ::= "FOR" Ident ":=" Expt "TO" Expr ("BY" Expr)? "DO" Stmts "END" ;
Formal ::= ("VALUE" | "VAR" | "READONLY")? IDList ":" Type "&" ":=" ConstExpr ;
ProcedureID ::= Ident ("." Ident)? ;
Digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
E2 ::= "NOT"* E3 ;
ProcedureType ::= "PROCEDURE" Signature ;
ConstDecl ::= Ident (":" Type)? "=" ConstExpr ;
E1 ::= E2 ("AND" E2)* ;
TCaseStmt ::= "TYPECASE" Expr "OF" Tcase? ("|" Tcase)* ("ELSE" Stmts)? "END" ;
Module ::= "MODULE" Ident ("EXPORTS" IDList)? ";" Import* Block Ident "." ;
SetElt ::= Expr (".." Expr)? ;
Stmts ::= (Stmt (";" Stmt)* ";"?)? ;
ExceptionID ::= Ident ("." Ident)? ;
ArrayCons ::= Expr ("," Expr)* ("," "..")? ;
TypeName ::= (Ident ("." Ident)?) | "ROOT" | ("UNTRACED" "ROOT") ;
Mulop ::= "*" | "/" | "DIV" | "MOD" ;
Tcase ::= Type ("," Type)* ("(" Ident ")")? "=>" Stmts ;
Repeatstmt ::= "REPEAT" Stmts "UNTIL" Expr ;
Method ::= Ident Signature "&" ":=" ProcedureID ;
--------------------modula::dagenais-cordy.bgf--------------------
Selector ::= ("." id) | ("[" Expr ComaExpr* "]") | ("(" {Actual ","}* ")") | "^" ;
IdList ::= {id ","}* ;
WhileStmt ::= "WHILE" Expr "DO" Stmts "END" ;
ExceptionDecl ::= id ParenthesizedType? ";" NL ;
DotDotConstExpr ::= ".." ConstExpr ;
SubrangeType ::= "[" ConstExpr ".." ConstExpr "]" ;
AssignStmt ::= Expr ":=" Expr ;
ParenthesizedType ::= "(" Type ")" ;
DotDotExpr ::= ".." Expr ;
PackedType ::= "BITS" ConstExpr "FOR" Type ;
TypecaseStmt ::= "TYPECASE" Expr "OF" NL TCase? VerticalTCase* ElseStmts? "END" ;
IInterface ::= "UNSAFE"? "INTERFACE" id "=" id GenActls "END" id "." NL ;
Block ::= Decl* "BEGIN" Stmts "END" ;
Override ::= id ":=" ConstExpr ;
Brand ::= "BRANDED" ConstExpr? ;
ExceptOrFinally ::= ("EXCEPT" NL Handler? VerticalHandler* ElseStmts?) | ("FINALLY" Stmts) ;
VerticalCase ::= "|" Case ;
CallStmt ::= Expr "(" {Actual ","}* ")" ;
VariableDecl ::= IdList ColonType? EqualExpr? ";" NL ;
Binding ::= id "=" Expr ;
RaisesList ::= ("{" {QualId ","}* "}") | "ANY" ;
SemicolonFormal ::= ";" Formal ;
GenFmls ::= "(" IdList? ")" ;
SemiColonOverride ::= ";" NL Override ;
Constructor ::= Type "{" AnyCons "}" ;
Type ::= TypeName | ArrayType | EnumerationType | RecordType | ObjectType | ProcedureType | RefType | SetType | SubrangeType | PackedType | ("(" Type ")") ;
EqualBlock ::= "=" IN NL Block id EX ;
SemiColonStmt ::= ";" NL Stmt ;
OptStmts ::= Stmt SemiColonStmt* ";"? NL ;
ParenthesizedId ::= "(" id ")" ;
TheOverrides ::= "OVERRIDES" NL Overrides ;
VerticalHandler ::= "|" Handler ;
ElseStmts ::= "ELSE" Stmts ;
Case ::= {Labels ","}* "=>" Stmts ;
OrE1 ::= "OR" E1 ;
WithStmt ::= "WITH" Binding+ "DO" Stmts "END" ;
VerticalTCase ::= "|" TCase ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
RecordType ::= "RECORD" IN NL Fields "END" EX ;
Decl ::= (ProcedureHead EqualBlock? ";" NL NL) | ("VAR" IN NL VariableDecl* EX) | ("TYPE" IN NL TypeDecl* EX NL) | ("CONST" IN NL ConstDecl* EX NL) | ("EXCEPTION" IN NL ExceptionDecl* EX NL) | ("REVEAL" IN NL RevealDecl* EX NL) ;
GenActls ::= "(" IdList? ")" ;
Formals ::= Formal SemicolonFormal* ";"? ;
EqualConstExpr ::= ":=" ConstExpr ;
Mode ::= "VALUE" | "VAR" | "READONLY" ;
RecordCons ::= {RecordElt ","}* ;
AddOp ::= "+" | "-" | "&" ;
MethodList ::= IN Method SemiColonMethod* ";"? EX NL ;
RelOp ::= "=" | "#" | "<" | "<=" | ">" | ">=" | "IN" ;
ObjectType ::= ObjectOrTypeName? Brand? "OBJECT" IN NL Fields TheMethods? TheOverrides? "END" EX ;
ReturnStmt ::= "RETURN" Expr? ;
CaseStmt ::= "CASE" Expr "OF" NL Case? VerticalCase* ElseStmts? "END" ;
RevealDecl ::= (QualId "=" Type ";" NL) | (QualId "<:" Type ";" NL) ;
ComaExpr ::= "," Expr ;
RaiseStmt ::= "RAISE" QualId ParenthesizedExpr? ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
ProcedureHead ::= "PROCEDURE" id Signature ;
SemiColonMethod ::= ";" NL Method ;
GInterface ::= "GENERIC" "INTERFACE" id GenFmls ";" Import* Decl* NL "END" id "." NL ;
ParenthesizedExpr ::= "(" Expr ")" ;
Actual ::= Type | Expr | (id ":=" Expr) ;
LoopStmt ::= "LOOP" Stmts "END" ;
OverrideList ::= IN Override SemiColonOverride* ";"? EX NL ;
Handler ::= {QualId ","}* ParenthesizedId? "=>" Stmts ;
Elsif ::= "ELSIF" Expr "THEN" Stmts ;
EqualExpr ::= ":=" Expr ;
Raises ::= "RAISES" RaisesList ;
ExitStmt ::= "EXIT" ;
MulOp ::= "*" | "/" | "DIV" | "MOD" ;
IfStmt ::= "IF" Expr "THEN" Stmts Elsif* ElseStmts? "END" ;
DotId ::= "." id ;
TCase ::= {Type ","}* ParenthesizedId? "=>" Stmts ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= (id "=" Type ";" NL) | (id "<:" Type ";" NL) ;
RepeatStmt ::= "REPEAT" Stmts "UNTIL" Expr ;
TheMethods ::= "METHODS" NL Methods ;
Exports ::= "EXPORTS" IdList ;
SignOp ::= "+" | "-" ;
SetType ::= "SET" "OF" Type ;
ColonType ::= ":" Type ;
Interface ::= "UNSAFE"? "INTERFACE" id ";" NL NL Import* Decl* NL "END" id "." NL ;
FieldList ::= IN Field SemiColonField* ";"? EX NL ;
Signature ::= "(" Formals? ")" ColonType? Raises? ;
ComaImportItem ::= "," ImportItem ;
AsImport ::= "IMPORT" ImportItem ComaImportItem* ";" NL NL ;
IModule ::= "UNSAFE"? "MODULE" id Exports? "=" id GenActls "END" id "." NL ;
SetCons ::= {SetElt ","}* ;
E8 ::= id | Number | charlit | stringlit | ("(" Expr ")") | Constructor ;
ArrayType ::= "ARRAY" {Type ","}* "OF" Type ;
GModule ::= "GENERIC" "MODULE" id GenFmls ";" NL NL Import* Block id "." NL ;
ForStmt ::= "FOR" id ":=" Expr "TO" Expr ByExpr? "DO" Stmts "END" ;
FromImport ::= "FROM" id "IMPORT" IdList ";" NL NL ;
E2 ::= "NOT"* E3 ;
ProcedureType ::= "PROCEDURE" Signature ;
AsId ::= "AS" id ;
ConstDecl ::= id ColonType? "=" ConstExpr ";" NL ;
ByExpr ::= "BY" Expr ;
Module ::= "UNSAFE"? "MODULE" id Exports? ";" NL NL Import* Block id "." NL ;
ArrayCons ::= {Expr ","}* ComaDotDot? ;
SemiColonField ::= ";" NL Field ;
TypeName ::= QualId | "ROOT" | ("UNTRACED" "ROOT") ;
AndE2 ::= "AND" E2 ;
TryStmt ::= "TRY" Stmts ExceptOrFinally "END" ;
EnumerationType ::= "{" IdList? "}" ;
ComaDotDot ::= "," ".." ;
--------------------xpath::w3c-xpath1.bgf--------------------
AbbreviatedRelativeLocationPath ::= [NT-AbbreviatedRelativeLocationPath] RelativeLocationPath "//" Step ;
NameTest ::= [NT-NameTest] "*" | (NCName ":" "*") | QName ;
AxisSpecifier ::= [NT-AxisSpecifier] (AxisName "::") | AbbreviatedAxisSpecifier ;
NodeType ::= [NT-NodeType] "comment" | "text" | "processing-instruction" | "node" ;
RelationalExpr ::= [NT-RelationalExpr] AdditiveExpr | (RelationalExpr "<" AdditiveExpr) | (RelationalExpr ">" AdditiveExpr) | (RelationalExpr "<=" AdditiveExpr) | (RelationalExpr ">=" AdditiveExpr) ;
PathExpr ::= [NT-PathExpr] LocationPath | FilterExpr | (FilterExpr "/" RelativeLocationPath) | (FilterExpr "//" RelativeLocationPath) ;
OrExpr ::= [NT-OrExpr] AndExpr | (OrExpr "or" AndExpr) ;
PrimaryExpr ::= [NT-PrimaryExpr] VariableReference | ("(" Expr ")") | Literal | Number | FunctionCall ;
Predicate ::= [NT-Predicate] "[" PredicateExpr "]" ;
FunctionCall ::= [NT-FunctionCall] FunctionName "(" (Argument ("," Argument)*)? ")" ;
NodeTest ::= [NT-NodeTest] NameTest | (NodeType "(" ")") | ("processing-instruction" "(" Literal ")") ;
AbsoluteLocationPath ::= [NT-AbsoluteLocationPath] ("/" RelativeLocationPath?) | AbbreviatedAbsoluteLocationPath ;
VariableReference ::= [NT-VariableReference] "$" QName ;
OperatorName ::= [NT-OperatorName] "and" | "or" | "mod" | "div" ;
EqualityExpr ::= [NT-EqualityExpr] RelationalExpr | (EqualityExpr "=" RelationalExpr) | (EqualityExpr "!=" RelationalExpr) ;
AndExpr ::= [NT-AndExpr] EqualityExpr | (AndExpr "and" EqualityExpr) ;
AxisName ::= [NT-AxisName] "ancestor" | "ancestor-or-self" | "attribute" | "child" | "descendant" | "descendant-or-self" | "following" | "following-sibling" | "namespace" | "parent" | "preceding" | "preceding-sibling" | "self" ;
MultiplicativeExpr ::= [NT-MultiplicativeExpr] UnaryExpr | (MultiplicativeExpr MultiplyOperator UnaryExpr) | (MultiplicativeExpr "div" UnaryExpr) | (MultiplicativeExpr "mod" UnaryExpr) ;
AbbreviatedAbsoluteLocationPath ::= [NT-AbbreviatedAbsoluteLocationPath] "//" RelativeLocationPath ;
Number ::= [NT-Number] (Digits ("." Digits?)?) | ("." Digits) ;
MultiplyOperator ::= [NT-MultiplyOperator] "*" ;
Digits ::= [NT-Digits] ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
RelativeLocationPath ::= [NT-RelativeLocationPath] Step | (RelativeLocationPath "/" Step) | AbbreviatedRelativeLocationPath ;
AbbreviatedStep ::= [NT-AbbreviatedStep] "." | ".." ;
Operator ::= [NT-Operator] OperatorName | MultiplyOperator | "/" | "//" | "|" | "+" | "-" | "=" | "!=" | "<" | "<=" | ">" | ">=" ;
ExprToken ::= [NT-ExprToken] "(" | ")" | "[" | "]" | "." | ".." | "@" | "," | "::" | NameTest | NodeType | Operator | FunctionName | AxisName | Literal | Number | VariableReference ;
UnaryExpr ::= [NT-UnaryExpr] UnionExpr | ("-" UnaryExpr) ;
AbbreviatedAxisSpecifier ::= [NT-AbbreviatedAxisSpecifier] "@"? ;
UnionExpr ::= [NT-UnionExpr] PathExpr | (UnionExpr "|" PathExpr) ;
AdditiveExpr ::= [NT-AdditiveExpr] MultiplicativeExpr | (AdditiveExpr "+" MultiplicativeExpr) | (AdditiveExpr "-" MultiplicativeExpr) ;
--------------------assembly::delphi.bgf--------------------
asm_opcode_prefix ::= "lock" space? ;
asm_primary ::= ("[" asm_expr "]") | ("(" asm_expr ")") | asm_register | id | anynumber | charlit | stringlit | asmhex | (SP asmlabel) ;
asm_infixop ::= "." | "+" | "-" | "*" | "/" | "ptr" | "mod" | "xor" | "and" | "or" | "shr" | "shl" ;
segmt_overr ::= SPOFF ":" asm_expr SPON ;
asm_directive ::= "DB" | "DW" | "DD" | "DQ" ;
asm_prefixop ::= "high" | "low" | "offset" | "dmtindex" | "vmtoffset" | "type" | "not" | "&" | sign | "@" ;
asm_register ::= ("ST" "(" integernumber ")") | ("ST") | "FS" | ("GS") | "EAX" | "EBX" | "ECX" | ("EDX") | "ESP" | "EBP" | "ESI" | ("EDI") | "AX" | "BX" | "CX" | ("DX") | "SP" | "BP" | "SI" | ("DI") | "AL" | "BL" | "CL" | ("DL") | "CS" | "DS" | "SS" | ("ES") | "AH" | "BH" | "CH" | ("DH") | ("CS" segmt_overr?) | ("DS" segmt_overr?) | ("SS" segmt_overr?) | ("FS" segmt_overr?) | ("GS" segmt_overr?) | ("ES" segmt_overr?) ;
asm_unlabeledstm_semi ::= asm_unlabeledstm ";"? NL ;
asm_unlabeledstm ::= (asm_directive {asm_directive_arg ","}*) | (asm_opcode_prefix? asm_opcode {asm_expr ","}*) ;
asmid ::= ("@"* asmlbl) | ("@+"* id) | ("@+"* anynumber) | ("@+"* key) ;
asm_postfixop ::= ("[" asm_expr "]") | ("." asm_expr) ;
asm_opcode ::= "adc" | "add" | "and" | "bswap" | "bt" | "btr" | "bts" | "call" | "cdq" | "cld" | "cmp" | "dec" | "div" | "f2xm1" | "fabs" | "fadd" | "faddp" | "fbstp" | "fchs" | "fclex" | "fcom" | "fcomp" | "fcos" | "fdiv" | "fdivp" | "fdivrp" | "ffree" | "fiadd" | "fidiv" | "fild" | "fimul" | "fistp" | "fld" | "fld1" | "fldcw" | "fldl2e" | "fldlg2" | "fldln2" | "fldz" | "fmul" | "fmulp" | "fnclex" | "fninit" | "fnstcw" | "fnstsw" | "fpatan" | "fprem" | "fptan" | "frndint" | "fscale" | "fsin" | "fsincos" | "fsqrt" | "fstcw" | "fstp" | "fstsw" | "fsub" | "fsubp" | "fsubr" | "fwait" | "fxch" | "fxtract" | "fyl2x" | "fyl2xp1" | "imul" | "inc" | "int" | "ja" | "jae" | "jb" | "jbe" | "jc" | "je" | "jecxz" | "jg" | "jge" | "jl" | "jle" | "jmp" | "jnc" | "jne" | "jnl" | "jns" | "jnz" | "jo" | "jp" | "js" | "jz" | "lea" | "leave" | "lodsb" | "lodsw" | "loop" | "mov" | "movsb" | "movsx" | "movzx" | "mul" | "neg" | "not" | "or" | "pop" | "popfd" | "push" | "pushfd" | "rcl" | "rcr" | "rep" | "repe" | "repne" | "ret" | "rol" | "ror" | "sahf" | "sar" | "sbb" | "seto" | "shl" | "shld" | "shr" | "shrd" | "std" | "stosb" | "stosd" | "stosw" | "sub" | "test" | "wait" | "xadd" | "xchg" | "xor" ;
asm_stmtblock ::= "asm" asm_stm* end_struct ;
--------------------basic::vb6-cordy.bgf--------------------
subprogram_declaration ::= access_modifier? "static"? sub_or_function id lib_description? subprogram_argument_description? as_type? eol IN sub_scope EX "end" sub_or_function ;
short_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? colon_declaration_or_statement* ":" "next" id? ;
event_argument_list ::= "(" event_argument+ ")" ;
error_statement ::= "error" expn ;
chdir_statement ::= "chdir" filepath ;
property_argument_list ::= "(" {property_argument ","}* ")" ;
deletesetting_statement ::= "deletesetting" expn+ ;
chdrive_statement ::= "chdrive" drive ;
type_declaration ::= access_modifier? "type" id eol IN type_member_definition* EX "end" "type" ;
short_else_clause ::= "else" single_declaration_or_statement ;
line_input_statement ::= "line" "input" filenumber "," reference ;
close_statement ::= "close" {filenumber ","}* ;
property_argument ::= "optional"? byref_or_byval? "paramarray"? id parens? as_type? equals_expn? ;
lset_statement ::= "lset" reference "=" expn ;
label_statement ::= EX id ":" IN ;
rmdir_statement ::= "rmdir" filepath ;
while_statement ::= "while" expn eol IN sub_scope EX "wend" ;
component_selector ::= ("." id) | ("." key) | subscript ;
op ::= "^" | "*" | "/" | "\" | "mod" | "+" | "-" | "&" | "=" | "<>" | "<=" | ">=" | ":=" | ">" | "<" | "!" | "is" | "not" | "and" | "or" | "xor" | "eqv" | "imp" | "like" ;
variable_declaration_keyword ::= "dim" | "redim" | access_modifier ;
subroutine_bracketless_params ::= expn {optional_expn ","}* ;
resume_statement ::= ("resume" "next") | ("resume" number?) ;
letterrange ::= id SPOFF "-" id SPON ;
attribute_definition ::= reference "=" expn+ ;
set_statement ::= "set" reference "=" set_object_expn ;
call_statement ::= "call"? reference subroutine_bracketless_params? ;
kill_statement ::= "kill" filepath ;
star_size ::= "*" expn ;
get_statement ::= "get" filenumber comma_recordnumber? "," reference ;
filenumber ::= "#" primary ;
select_case_statement ::= "select" "case" expn eol IN case_alternative* last_case_alternative? EX "end" "select" ;
preprocessor_if_statement ::= "#if" expn "then" eol IN sub_scope EX preprocessor_elsif_clause* preprocessor_else_clause? "#end" "if" ;
compare_mode ::= "binary" | "text" | "database" ;
do_statement ::= "do" while_or_until_clause? eol IN sub_scope EX "loop" while_or_until_clause? ;
name_statement ::= "name" filepath "as" filepath ;
open_statement ::= "open" filepath "for" mode access_spec? lock? "as" filenumber length_spec? ;
access_spec ::= "access" access_mode ;
initial_value ::= "=" expn ;
to_or_downto ::= "to" | "downto" ;
short_if_statement ::= "if" expn "then" single_declaration_or_statement short_else_clause? ;
def_keyword ::= "defbool" | "defbyte" | "defcur" | "defdate" | "defdbl" | "defdec" | "defint" | "deflng" | "defobj" | "defsng" | "defstr" | "defvar" ;
prefix_op ::= "+" | "-" | "not" | "typeof" | "addressof" ;
on_error_action ::= ("resume" "next") | ("goto" expn) ;
parens ::= "(" ")" ;
last_case_alternative ::= eol* "case" "else" eol IN sub_scope EX ;
elsif_clause ::= "elseif" expn "then" eol IN sub_scope EX ;
mode ::= "append" | "binary" | "input" | "output" | "random" ;
filecopy_statement ::= "filecopy" filepath "," filepath ;
rset_statement ::= "rset" reference "=" expn ;
access_mode ::= "read" | "write" | ("read" "write") ;
beep_statement ::= "beep" ;
on_error_statement ::= "on" "local"? "error" on_error_action ;
colon_declaration_or_statement ::= ":" declaration_or_statement? ;
full_for_each_statement ::= "for" "each" id "in" expn eol IN sub_scope EX "next" id? ;
preprocessor_elsif_clause ::= "#elseif" expn "then" eol IN sub_scope EX ;
exit_what_indicator ::= "do" | "for" | "function" | "property" | "sub" ;
subprogram_argument_description ::= "(" {subprogram_argument ","}* ")" ;
set_object_expn ::= ("new"? expn) | "nothing" ;
goto_statement ::= on_expn? "goto" expn ;
savepicture_statement ::= "savepicture" expn "," expn ;
exit_statement ::= "exit" exit_what_indicator ;
to_number ::= "to" number ;
alias_description ::= "alias" stringlit ;
attribute_statement ::= "attribute" attribute_definition+ ;
short_for_each_statement ::= "for" "each" id "in" expn eol colon_declaration_or_statement* ":" "next" id? ;
drive ::= id ":" ;
property_statement ::= access_modifier? "static"? "property" get_let_set id property_argument_list? as_type? eol IN sub_scope EX "end" "property" ;
setattr_statement ::= "setattr" filepath "," expn ;
reset_statement ::= "reset" ;
full_if_statement ::= "if" expn "then" eol IN sub_scope EX elsif_clause* else_clause? "end" "if" ;
time_statement ::= "time" "=" expn ;
assignment_statement ::= "let"? reference "=" expn ;
spc_tab ::= ("spc" "(" expn? ")") | ("tab" "(" expn? ")") ;
length_spec ::= "len" "=" expn ;
declare_subprogram_declaration ::= access_modifier? "declare" sub_or_function id lib_description alias_description? subprogram_argument_description? as_type? ;
stop_statement ::= "stop" ;
equals_expn ::= "=" expn ;
until_clause ::= "until" expn ;
implements_declaration ::= "implements" id ;
class_file_header ::= "version" number "class" eol+ class_begin_block ;
seek_statement ::= "seek" filenumber "," expn ;
savesetting_statement ::= "savesetting" {expn ","}* ;
randomize_statement ::= "randomize" number? ;
mkdir_statement ::= "mkdir" filepath ;
constant_declaration ::= access_modifier? "const" constant_description ;
print_statement ::= "print" filenumber "," {print_item ","}* ;
lock_statement ::= "lock" filenumber comma_recordrange? ;
enum_member_definition ::= (id "=" expn eol) | eol ;
subprogram_argument ::= "optional"? byref_or_byval? id? parens? as_type? equals_expn? ;
load_statement ::= "load" expn ;
get_let_set ::= "get" | "let" | "set" ;
access_modifier ::= "public" | "private" | "friend" | "static" ;
on_expn ::= "on" expn ;
reference ::= ("."? "!"? id component_selector*) | ("." key component_selector*) ;
gosub_statement ::= on_expn? "gosub" expn ;
preprocessor_else_clause ::= "#else" eol IN sub_scope EX ;
step_clause ::= "step" expn ;
lib_description ::= "lib" stringlit ;
put_statement ::= "put" filenumber comma_expn? "," reference ;
charpos ::= expn | ";" ;
while_clause ::= "while" expn ;
enum_declaration ::= access_modifier? "enum" id eol IN enum_member_definition* EX "end" "enum" ;
input_statement ::= "input" filenumber "," {reference ","}* ;
mid_statement ::= "mid" reference "=" stringlit ;
width_statement ::= "width" filenumber "," expn ;
with_statement ::= "with" reference eol IN sub_scope EX "end" "with" ;
to_expn ::= "to" expn ;
else_clause ::= "else" eol IN sub_scope EX ;
sub_or_function ::= "sub" | "function" ;
unlock_statement ::= "unlock" filenumber comma_recordrange? ;
class_declaration ::= "class" id eol IN sub_scope EX "end" "class" ;
class_begin_block ::= "begin" reference? IN class_begin_item* EX "end" ;
unload_statement ::= "unload" expn ;
lock ::= "shared" | ("lock" "read") | ("lock" "write") | ("lock" "read" "write") ;
as_type ::= "as" "new"? reference star_size? ;
option_statement ::= ("option" "base" number) | ("option" "compare" compare_mode) | ("option" "explicit") | ("option" "private" "module") ;
comma_recordrange ::= "," number to_number? ;
return_statement ::= "return" ;
date_statement ::= "date" "=" expn ;
case_alternative ::= eol* "case" is_operator? case_expn+ eol IN sub_scope EX ;
slash_id ::= ("\" id) | ("/" id) ;
comma_expn ::= "," expn ;
is_operator ::= "is" op? ;
erase_statement ::= "erase" {id ","}* ;
array_description ::= "withevents"? "preserve"? id "(" {subscript_expn ","}* ")" as_type? ;
byref_or_byval ::= "byref" | "byval" ;
write_statement ::= "write" filenumber "," {print_item ","}* ;
end_statement ::= "end" ;
subscript ::= "(" {optional_subscript ","}* ")" ;
event_statement ::= "public"? "event" id event_argument_list? ;
full_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? eol IN sub_scope EX "next" id? ;
comma_recordnumber ::= "," expn ;
eol ::= (tab_vbcomment? newline) | ":" ;
primary ::= reference | stringlit | number | hexnumber | octnumber | datelit | returncode | filenumber | (prefix_op primary) | ("(" {expn ","}* ")") ;
app_activate_statement ::= "appactivate" expn comma_expn? ;
--------------------basic::vb-glineur.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------bibtex::bibtex-1.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------bibtex::bql.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------dot::doux.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------dot::palies.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------dot::rascal-concrete.bgf--------------------
StatementOptional ::= Statement ";"? ;
Statement ::= AttrStatement ;
 Statement ::= EdgeStatement ;
 Statement ::= NodeStatement ;
 Statement ::= Id "=" Id ;
EdgeOp ::= "->" ;
 EdgeOp ::= "--" ;
Graph ::= "digraph" ;
 Graph ::= AttrTag ;
 Graph ::= "graph" ;
Subgraph ::= ("subgraph" Id?)? "{" StatementList "}" ;
DotAttr ::= Id "=" Id ;
 DotAttr ::= Id "=" Id "," ;
AttrTag ::= "node" ;
 AttrTag ::= "graph" ;
 AttrTag ::= "edge" ;
DOT ::= LAYOUT* Graph Id "{" StatementList "}" "\n"? ;
AttrList0 ::= "[" DotAttr* "]" ;
Port ::= ":" Id Id? ;
--------------------html::allilaire.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------html::clark-basic.bgf--------------------
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
InputType.class ::= "text" | "password" | "checkbox" | "radio" | "submit" | "reset" | "hidden" ;
select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
scope.attrib ::= (scope::("row" | "col"))? ;
object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
--------------------html::clark.bgf--------------------
frame.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (noresize::"noresize")? (scrolling::("yes" | "no" | "auto"))? ;
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
CellHAlign.attrib ::= (align::("left" | "center" | "right" | "justify" | "char"))? (char::Character.datatype)? (charoff::Length.datatype)? ;
 CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
shape.attrib ::= (shape::("rect" | "circle" | "poly" | "default"))? ;
Cell.attrib ::= (nowrap::"nowrap")? (bgcolor::Color.datatype)? (width::Pixels.datatype)? (height::Pixels.datatype)? ;
 Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
pre.attlist ::= (width::Length.datatype)? ;
 pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
menu.attlist ::= Common.attrib (compact::"compact")? ;
ol.attlist ::= (type::string())? (compact::"compact")? (start::string())? ;
 ol.attlist ::= Common.attrib ;
frame.attrib ::= name.attlist ;
 frame.attrib ::= (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))? ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 applet.attlist ::= name.attlist ;
ul.attlist ::= (type::string())? (compact::"compact")? ;
 ul.attlist ::= Common.attrib ;
scope.attrib ::= (scope::("row" | "col" | "rowgroup" | "colgroup"))? ;
 scope.attrib ::= (scope::("row" | "col"))? ;
rules.attrib ::= (rules::("none" | "groups" | "rows" | "cols" | "all"))? ;
br.attlist ::= (clear::("left" | "all" | "right" | "none"))? ;
 br.attlist ::= Core.attrib ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
 legend.attlist ::= (align::("top" | "bottom" | "left" | "right"))? ;
dir.attlist ::= Common.attrib (compact::"compact")? ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
script.attlist ::= (language::ContentType.datatype)? ;
 script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
hr.attlist ::= (align::("left" | "center" | "right"))? (noshade::"noshade")? (size::Pixels.datatype)? (width::Pixels.datatype)? ;
 hr.attlist ::= Common.attrib ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
 input.attlist ::= align.attrib ;
dl.attlist ::= (compact::"compact")? ;
 dl.attlist ::= Common.attrib ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
align.attrib ::= (align::("left" | "all" | "right" | "none"))? ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
InputType.class ::= "image" | "button" ;
 InputType.class ::= "text" | "password" | "checkbox" | "radio" | "submit" | "reset" | "hidden" ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
dir.attrib ::= dir::("ltr" | "rtl") ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom" | "baseline"))? ;
 CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
--------------------html::cordy.bgf--------------------
tag_beg ::= "<" id attributes ">" NL ;
singleton_id ::= "br" | "hr" | ("|" "img") | "meta" | "base" | "basefont" | x_id | "dt" ;
equals_attribute_value ::= "=" attribute_value ;
comment_tag ::= "<!" comment_text* ">" NL ;
tag ::= "<" id attributes ">" NL IN tag_elements EX "</" id ">" NL ;
text_unit ::= (punctuation SP) | (")" SP) | (SP "(") | token | ("<" number) ;
tag_end ::= "</" id ">" NL ;
singleton_tag ::= ("<" singleton_id attributes ">" singleton_tag_end? NL) | ("<" id attributes "/>" NL) ;
singleton_tag_end ::= "</" singleton_id ">" ;
--------------------html::guyard.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------html::clark-strict.bgf--------------------
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
CellHAlign.attrib ::= (align::("left" | "center" | "right" | "justify" | "char"))? (char::Character.datatype)? (charoff::Length.datatype)? ;
 CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
shape.attrib ::= (shape::("rect" | "circle" | "poly" | "default"))? ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
InputType.class ::= "image" | "button" ;
 InputType.class ::= "text" | "password" | "checkbox" | "radio" | "submit" | "reset" | "hidden" ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
frame.attrib ::= name.attlist ;
 frame.attrib ::= (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))? ;
dir.attrib ::= dir::("ltr" | "rtl") ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom" | "baseline"))? ;
 CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
scope.attrib ::= (scope::("row" | "col" | "rowgroup" | "colgroup"))? ;
 scope.attrib ::= (scope::("row" | "col"))? ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
rules.attrib ::= (rules::("none" | "groups" | "rows" | "cols" | "all"))? ;
--------------------javascript::synytskyy-cordy.bgf--------------------
js_else_clause ::= "else" js_declaration_or_statement ;
js_logical_or_logical_and_expn ::= "||" js_logical_and_expn ;
js_subscripts ::= "[" js_expn "]" ;
js_additive_op ::= "+" | "-" ;
js_conditional_clause ::= "?" js_assignment_expn ":" js_assignment_expn ;
js_label ::= id ":" ;
js_bitwise_or_bitwise_xor_expn ::= "|" js_bitwise_xor_expn ;
js_field_selector ::= "." id ;
js_break_statement ::= "break" id? ;
js_statement ::= (js_compound_statement ";"?) | (js_expression_statement ";"?) | (js_if_statement ";"?) | (js_for_statement ";"?) | (js_while_statement ";"?) | (js_break_statement ";"?) | (js_continue_statement ";"?) | (js_return_statement ";"?) | (js_with_statement ";"?) | (js_switch_statement ";"?) | (js_do_statement ";"?) | (js_try_catch_statement ";"?) | (js_throw_statement ";"?) | (js_debugger_statement ";"?) | js_empty_statement ;
js_literal ::= "null" | "true" | "false" | js_numeric_literal | js_string_literal | js_regular_expn_literal ;
js_multiplicative_op ::= "*" | "/" | "%" ;
js_shift_op ::= "<<" | ">>" | ">>>" ;
js_try_catch_statement ::= "try" js_compound_statement js_catch_clause? js_finally_clause? ;
js_do_statement ::= "do" js_statement "while" "(" js_expn ")" ;
js_variable_declaration ::= "var" {js_variable_description ","}* ;
js_with_statement ::= "with" "(" js_expn ")" js_statement ;
js_while_statement ::= "while" "(" js_expn ")" js_statement ;
js_logical_and_bitwise_or_expn ::= "&&" js_bitwise_or_expn ;
js_bitwise_and_equality_expn ::= "&" js_equality_expn ;
js_catch_clause ::= NL "catch" "(" id ")" js_compound_statement ;
js_unary_op ::= "delete" | "void" | "typeof" | "++" | "--" | "+" | "-" | "~" | "!" ;
js_object_literal ::= "{" {js_property_assignment ","}* ","? "}" ;
js_finally_clause ::= NL "finally" js_compound_statement ;
js_postfix_op ::= "++" | "--" ;
js_throw_statement ::= "throw" js_expn ;
js_arguments ::= "(" {js_assignment_expn ","}* ")" ;
js_assignment_op ::= "=" | "*=" | ("/" SPOFF "=" SPON) | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" ;
js_case_clause_value ::= ("case" js_expn ":") | ("default" ":") ;
js_switch_statement ::= "switch" "(" js_expn ")" "{" NL js_case_clause* "}" ;
js_return_statement ::= "return" js_expn? ;
js_constant_declaration ::= "const" {js_constant_description ","}* ;
js_array_literal ::= "[" {js_array_element ","}* "]" ;
js_compound_statement ::= "{" NL IN js_subscope EX "}" ;
js_equality_op ::= "==" | "!=" | "===" | "!==" | "in" | "instanceof" ;
js_bitwise_xor_bitwise_and_expn ::= "^" js_bitwise_and_expn ;
js_continue_statement ::= "continue" id? ;
js_variable_initialization ::= "=" js_assignment_expn ;
js_function_declaration ::= NL "function" id "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" NL ;
js_debugger_statement ::= "debugger" ;
js_empty_statement ::= ";" ;
js_lefthand_side_expn ::= "new"? js_member_expn ;
js_primary_expn ::= "this" | "class" | id | js_literal | js_array_literal | js_object_literal | js_function_expn | ("(" js_expn ")") ;
js_declaration ::= (js_variable_declaration ";"?) | (js_constant_declaration ";"?) | (js_function_declaration ";"?) ;
js_for_statement ::= ("for" "(" {js_declaration_or_statement_no_nl ","}* ";" js_expn? ";" js_expn? ")" js_statement) | ("for" "each"? "(" js_declaration_or_statement_no_nl "in" js_expn ")" js_statement) ;
js_if_statement ::= "if" "(" js_expn ")" js_declaration_or_statement js_else_clause? ;
js_relational_op ::= "<" | ">" | "<=" | ">=" ;
js_function_expn ::= "function" id? "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" ;
js_property_assignment ::= (js_property_name ":" js_expn) | ("get" js_property_name "(" ")" "{" js_subscope "}") | ("set" js_property_name "(" js_property_set_parameter ")" "{" js_subscope "}") ;
--------------------occam::mu-mitchell.bgf--------------------
iteration-statement ::= "while" "(" condition ")" statement "do" statement "while" "(" expression ")" ";" "for" "(" for-init-statement condition? ";" expression? ")" statement ;
logical-or-expression ::= logical-and-expression logical-or-expression "||" logical-and-expression ;
relational-expression ::= shift-expression relational-expression "<" shift-expression relational-expression ">" shift-expression relational-expression "<=" shift-expression relational-expression ">=" shift-expression ;
type-id-list ::= type-id type-id-list "," type-id ;
init-declarator-list ::= init-declarator init-declarator-list "," init-declarator ;
exception-declaration ::= type-specifier-seq declarator type-specifier-seq abstract-declarator type-specifier-seq "..." ;
enumerator-definition ::= enumerator enumerator "=" constant-expression ;
try-block ::= "try" compound-statement handler-seq ;
linkage-specification ::= "extern" string-literal "{" declaration-seq? "}" "extern" string-literal declaration ;
expression-statement ::= expression? ";" ;
delete-expression ::= "::"? "delete" cast-expression "::"? "delete" "[" "]" cast-expression ;
conversion-function-id ::= "operator" conversion-type-id ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression "++" cast-expression "--" cast-expression unary-operator cast-expression "sizeof" unary-expression "sizeof" "(" type-id ")" new-expression delete-expression ;
template-parameter-list ::= template-parameter template-parameter-list "," template-parameter ;
explicit-instantiation ::= "template" declaration ;
unnamed-namespace-definition ::= "namespace" "{" namespace-body "}" ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
postfix-expression ::= primary-expression postfix-expression "[" expression "]" postfix-expression "(" expression-list? ")" simple-type-specifier "(" expression-list? ")" "typename" "::"? nested-name-specifier identifier "(" expression-list? ")" "typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")" postfix-expression "." "template"? id-expression postfix-expression "->" "template"? id-expression postfix-expression "." pseudo-destructor-name postfix-expression "->" pseudo-destructor-name postfix-expression "++" postfix-expression "--" "dynamic_cast" "<" type-id ">" "(" expression ")" "static_cast" "<" type-id ">" "(" expression ")" "reinterpret_cast" "<" type-id ">" "(" expression ")" "const_cast" "<" type-id ">" "(" expression ")" "typeid" "(" expression ")" "typeid" "(" type-id ")" ;
multiplicative-expression ::= pm-expression multiplicative-expression "*" pm-expression multiplicative-expression "/" pm-expression multiplicative-expression "%" pm-expression ;
selection-statement ::= "if" "(" condition ")" statement "if" "(" condition ")" statement "else" statement "switch" "(" condition ")" statement ;
qualified-id ::= "::"? nested-name-specifier "template"? unqualified-id "::" identifier "::" operator-function-id "::" template-id ;
base-clause ::= ":" base-specifier-list ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
pm-expression ::= cast-expression pm-expression ".*" cast-expression pm-expression "->*" cast-expression ;
simple-type-specifier ::= "::"? nested-name-specifier? type-name "::"? nested-name-specifier "template" template-id "char" "wchar_t" "bool" "short" "int" "long" "signed" "unsigned" "float" "double" "void" ;
cast-expression ::= unary-expression "(" type-id ")" cast-expression ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= "::"? "new" new-placement? new-type-id new-initializer? "::"? "new" new-placement? "(" type-id ")" new-initializer? ;
initializer ::= "=" initializer-clause "(" expression-list ")" ;
direct-new-declarator ::= "[" expression "]" direct-new-declarator "[" constant-expression "]" ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= "::"? nested-name-specifier? class-name identifier ;
decl-specifier ::= storage-class-specifier type-specifier function-specifier "friend" "typedef" ;
direct-abstract-declarator ::= direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-abstract-declarator? "[" constant-expression? "]" "(" abstract-declarator ")" ;
storage-class-specifier ::= "auto" "register" "static" "extern" "mutable" ;
type-parameter ::= "class" identifier? "class" identifier? "=" type-id "typename" identifier? "typename" identifier? "=" type-id "template" "<" template-parameter-list ">" "class" identifier? "template" "<" template-parameter-list ">" "class" identifier? "=" id-expression ;
parameter-declaration ::= decl-specifier-seq declarator decl-specifier-seq declarator "=" assignment-expression decl-specifier-seq abstract-declarator? decl-specifier-seq abstract-declarator? "=" assignment-expression ;
extension-namespace-definition ::= "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression exclusive-or-expression "^" and-expression ;
cv-qualifier ::= "const" "volatile" ;
pseudo-destructor-name ::= "::"? nested-name-specifier? type-name "::" "~" type-name "::"? nested-name-specifier "template" template-id "::" "~" type-name "::"? nested-name-specifier? "~" type-name ;
template-id ::= template-name "<" template-argument-list? ">" ;
and-expression ::= equality-expression and-expression "&" equality-expression ;
compound-statement ::= "{" statement-seq? "}" ;
equality-expression ::= relational-expression equality-expression "==" relational-expression equality-expression "!=" relational-expression ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
base-specifier-list ::= base-specifier base-specifier-list "," base-specifier ;
member-declaration ::= decl-specifier-seq? member-declarator-list? ";" function-definition ";"? "::"? nested-name-specifier "template"? unqualified-id ";" using-declaration template-declaration ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
parameter-declaration-clause ::= parameter-declaration-list? "..."? parameter-declaration-list "," "..." ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= declarator pure-specifier? declarator constant-initializer? identifier? ":" constant-expression ;
shift-expression ::= additive-expression shift-expression "<<" additive-expression shift-expression ">>" additive-expression ;
primary-expression ::= literal "this" "(" expression ")" id-expression ;
base-specifier ::= "::"? nested-name-specifier? class-name "virtual" access-specifier? "::"? nested-name-specifier? class-name access-specifier "virtual"? "::"? nested-name-specifier? class-name ;
conditional-expression ::= logical-or-expression logical-or-expression "?" expression ":" assignment-expression ;
elaborated-type-specifier ::= class-key "::"? nested-name-specifier? identifier "enum" "::"? nested-name-specifier? identifier "typename" "::"? nested-name-specifier identifier "typename" "::"? nested-name-specifier "template"? template-id ;
initializer-clause ::= assignment-expression "{" initializer-list ","? "}" "{" "}" ;
constant-initializer ::= "=" constant-expression ;
additive-expression ::= multiplicative-expression additive-expression "+" multiplicative-expression additive-expression "-" multiplicative-expression ;
declarator-id ::= id-expression "::"? nested-name-specifier? type-name ;
parameter-declaration-list ::= parameter-declaration parameter-declaration-list "," parameter-declaration ;
labeled-statement ::= identifier ":" statement "case" constant-expression ":" statement "default" ":" statement ;
new-initializer ::= "(" expression-list? ")" ;
expression-list ::= assignment-expression expression-list "," assignment-expression ;
using-declaration ::= "using" "typename"? "::"? nested-name-specifier unqualified-id ";" "using" "::" unqualified-id ";" ;
ctor-initializer ::= ":" mem-initializer-list ;
pure-specifier ::= "=" "0" ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= initializer-clause initializer-list "," initializer-clause ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
operator ::= "new" | "delete" | ("new" "[]") | ("delete" "[]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | "()" | "[]" ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr-operator ::= "*" cv-qualifier-seq? "&" "::"? nested-name-specifier "*" cv-qualifier-seq? ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
mem-initializer-list ::= mem-initializer mem-initializer "," mem-initializer-list ;
inclusive-or-expression ::= exclusive-or-expression inclusive-or-expression "|" exclusive-or-expression ;
template-argument-list ::= template-argument template-argument-list "," template-argument ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
condition ::= expression type-specifier-seq declarator "=" assignment-expression ;
expression ::= assignment-expression expression "," assignment-expression ;
access-specifier ::= "private" "protected" "public" ;
direct-declarator ::= declarator-id direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-declarator "[" constant-expression? "]" "(" declarator ")" ;
logical-and-expression ::= inclusive-or-expression logical-and-expression "&&" inclusive-or-expression ;
nested-name-specifier ::= class-or-namespace-name "::" nested-name-specifier? class-or-namespace-name "::" "template" nested-name-specifier ;
member-specification ::= member-declaration member-specification? access-specifier ":" member-specification? ;
jump-statement ::= "break" ";" "continue" ";" "return" expression? ";" "goto" identifier ";" ;
class-key ::= "class" "struct" "union" ;
function-specifier ::= "inline" "virtual" "explicit" ;
operator-function-id ::= "operator" operator ;
member-declarator-list ::= member-declarator member-declarator-list "," member-declarator ;
enumerator-list ::= enumerator-definition enumerator-list "," enumerator-definition ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier operator-function-id conversion-function-id "~" class-name template-id ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "namespace" identifier "{" namespace-body "}" ;
--------------------occam::mu-srour.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------occam::srour.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------odf::opendoc-1.0-strict.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
rowOrCol ::= "row" | "column" ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
custom-shape-type ::= "non-primitive" | string ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
lineMode ::= "continuous" | "skip-white-space" ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
fontStyle ::= "normal" | "italic" | "oblique" ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
horiBackPos ::= "left" | "center" | "right" ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
vertBackPos ::= "top" | "center" | "bottom" ;
shadowType ::= "none" | string ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
types ::= "submit" | "reset" | "push" | "url" ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
fontVariant ::= "normal" | "small-caps" ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "dash" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
fontPitch ::= "fixed" | "variable" ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
boolean ::= "true" | "false" ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
navigation ::= "none" | "current" | "parent" ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right") ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
states ::= "unchecked" | "checked" | "unknown" ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "rigth" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
--------------------odf::opendoc-1.0.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
rowOrCol ::= "row" | "column" ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
custom-shape-type ::= "non-primitive" | string ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
lineMode ::= "continuous" | "skip-white-space" ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
fontStyle ::= "normal" | "italic" | "oblique" ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
horiBackPos ::= "left" | "center" | "right" ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
vertBackPos ::= "top" | "center" | "bottom" ;
shadowType ::= "none" | string ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
types ::= "submit" | "reset" | "push" | "url" ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
fontVariant ::= "normal" | "small-caps" ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "dash" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
fontPitch ::= "fixed" | "variable" ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
boolean ::= "true" | "false" ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
navigation ::= "none" | "current" | "parent" ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right") ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
states ::= "unchecked" | "checked" | "unknown" ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "rigth" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
--------------------odf::opendoc-1.1-strict.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
rowOrCol ::= "row" | "column" ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
custom-shape-type ::= "non-primitive" | string ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
lineMode ::= "continuous" | "skip-white-space" ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
fontStyle ::= "normal" | "italic" | "oblique" ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
horiBackPos ::= "left" | "center" | "right" ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
vertBackPos ::= "top" | "center" | "bottom" ;
shadowType ::= "none" | string ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
types ::= "submit" | "reset" | "push" | "url" ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
 presentation-settings-attlist ::= (presentation:show-end-of-presentation-slide::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::color)? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
fontVariant ::= "normal" | "small-caps" ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "dash" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
fontPitch ::= "fixed" | "variable" ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
boolean ::= "true" | "false" ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
navigation ::= "none" | "current" | "parent" ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
states ::= "unchecked" | "checked" | "unknown" ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "right" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
--------------------odf::opendoc-1.1.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
rowOrCol ::= "row" | "column" ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
custom-shape-type ::= "non-primitive" | string ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
lineMode ::= "continuous" | "skip-white-space" ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
fontStyle ::= "normal" | "italic" | "oblique" ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
horiBackPos ::= "left" | "center" | "right" ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
vertBackPos ::= "top" | "center" | "bottom" ;
shadowType ::= "none" | string ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
types ::= "submit" | "reset" | "push" | "url" ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
 presentation-settings-attlist ::= (presentation:show-end-of-presentation-slide::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::color)? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
fontVariant ::= "normal" | "small-caps" ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "dash" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
fontPitch ::= "fixed" | "variable" ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
boolean ::= "true" | "false" ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
navigation ::= "none" | "current" | "parent" ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
states ::= "unchecked" | "checked" | "unknown" ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "right" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
--------------------odf::opendoc-1.2-dsig.bgf--------------------
dsig-document-signatures-attlist ::= dsig:version::"1.2" ;
--------------------odf::opendoc-1.2-manifest.bgf--------------------
key-derivation-attlist ::= manifest:key-derivation-name::("PBKDF2" | anyURI) manifest:salt::base64Binary manifest:iteration-count::nonNegativeInteger (manifest:key-size::nonNegativeInteger)? ;
encryption-data-attlist ::= manifest:checksum-type::("SHA1/1K" | anyURI) manifest:checksum::base64Binary ;
start-key-generation-attlist ::= manifest:start-key-generation-name::("SHA1" | anyURI) (manifest:key-size::nonNegativeInteger)? ;
file-entry-attlist ::= manifest:full-path::string (manifest:size::nonNegativeInteger)? manifest:media-type::string (manifest:preferred-view-mode::("edit" | "presentation-slide-show" | "read-only" | namespacedToken))? (manifest:version::string)? ;
algorithm-attlist ::= manifest:algorithm-name::("Blowfish CFB" | anyURI) manifest:initialisation-vector::base64Binary ;
manifest-attlist ::= manifest:version::"1.2" ;
--------------------odf::opendoc-1.2.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-page-layout-attlist ::= style:name::styleName (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") text:style-name::styleNameRef ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-notes-configuration-content ::= text-note-class (text:citation-style-name::styleNameRef)? (text:citation-body-style-name::styleNameRef)? (text:default-style-name::styleNameRef)? (text:master-page-name::styleNameRef)? (text:start-value::nonNegativeInteger)? common-num-format-prefix-suffix-attlist common-num-format-attlist? (text:start-numbering-at::("document" | "chapter" | "page"))? (text:footnotes-position::("text" | "page" | "section" | "document"))? (text:note-continuation-notice-forward::string())? (text:note-continuation-notice-backward::string())? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? (svg:x1::coordinate svg:y1::coordinate)? (draw:start-shape::IDREF)? (draw:start-glue-point::nonNegativeInteger)? (svg:x2::coordinate svg:y2::coordinate)? (draw:end-shape::IDREF)? (draw:end-glue-point::nonNegativeInteger)? (draw:line-skew::(length (length length?)?))? (svg:d::pathData)? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? table:direction::("from-another-table" | "to-another-table" | "from-same-table") (table:contains-error::boolean)? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? style:width::length (style:height::zeroToHundredPercent)? (style:vertical-align::("top" | "middle" | "bottom"))? (style:color::color)? ;
table-null-date ::= table:null-date::((table:value-type::"date")? (table:date-value::date)?) ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string)? (svg:units-per-em::integer)? (svg:panose-1::string)? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string)? (svg:bbox::string)? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? style:name::string (style:font-adornments::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-pitch::fontPitch)? (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName (draw:display-name::string)? (draw:style::("rect" | "round"))? (draw:dots1::integer)? (draw:dots1-length::(length | percent))? (draw:dots2::integer)? (draw:dots2-length::(length | percent))? (draw:distance::(length | percent))? ;
number-month-attlist ::= (number:textual::boolean)? (number:possessive-form::boolean)? (number:style::("short" | "long"))? ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
number-seconds-attlist ::= (number:style::("short" | "long"))? (number:decimal-places::integer)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name" | "plain-number" | "plain-number-and-name"))? (text:outline-level::positiveInteger)? ;
db-file-based-database-attlist ::= xlink:type::"simple" xlink:href::anyIRI db:media-type::string (db:extension::string)? ;
common-svg-font-face-xlink-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string (table:application-data::string)? (table:grand-total::("none" | "row" | "column" | "both"))? (table:ignore-empty-rows::boolean)? (table:identify-categories::boolean)? table:target-range-address::cellRangeAddress (table:buttons::cellRangeAddressList)? (table:show-filter-button::boolean)? (table:drill-down-on-double-click::boolean)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
rowOrCol ::= "row" | "column" ;
common-data-style-attlist ::= style:name::styleName (style:display-name::string)? (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? (number:title::string)? (style:volatile::boolean)? (number:transliteration-format::string)? (number:transliteration-language::countryCode)? (number:transliteration-country::countryCode)? (number:transliteration-style::("short" | "medium" | "long"))? ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:table::integer)? (table:multi-deletion-spanned::integer)? ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
text-section-source-attr ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")?)? (text:section-name::string)? (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
db-application-connection-settings-attlist ::= (db:is-table-name-length-limited::boolean)? (db:enable-sql92-check::boolean)? (db:append-table-alias-name::boolean)? (db:ignore-driver-privileges::boolean)? (db:boolean-comparison-mode::("equal-integer" | "is-boolean" | "equal-boolean" | "equal-use-only-zero"))? (db:use-catalog::boolean)? (db:max-row-count::integer)? (db:suppress-version-columns::boolean)? ;
labelPositions ::= "avoid-overlap" | "center" | "top" | "top-right" | "right" | "bottom-right" | "bottom" | "bottom-left" | "left" | "top-left" | "inside" | "outside" | "near-origin" ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
text-sequence-ref-content ::= (text:reference-format::(common-ref-format-values | "category-and-value" | "caption" | "value"))? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? (dr3d:projection::("parallel" | "perspective"))? (dr3d:distance::length)? (dr3d:focal-length::length)? (dr3d:shadow-slant::angle)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (dr3d:ambient-color::color)? (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε common-draw-position-attlist (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε (chart:style-name::styleNameRef)? ;
table-validation-attlist ::= table:name::string (table:condition::string)? (table:base-cell-address::cellAddress)? (table:allow-empty-cell::boolean)? (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
style-tab-stop-attlist ::= style:position::length ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) (style:leader-type::lineType)? (style:leader-style::lineStyle)? (style:leader-width::lineWidth)? (style:leader-color::("font-color" | color))? (style:leader-text::character)? (style:leader-text-style::styleNameRef)? ;
text-bookmark-ref-content ::= (text:reference-format::(common-ref-format-values | "number-no-superior" | "number-all-superior" | "number"))? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? (draw:stroke-dash::styleNameRef)? (draw:stroke-dash-names::styleNameRefs)? (svg:stroke-width::length)? (svg:stroke-color::color)? (draw:marker-start::styleNameRef)? (draw:marker-end::styleNameRef)? (draw:marker-start-width::length)? (draw:marker-end-width::length)? (draw:marker-start-center::boolean)? (draw:marker-end-center::boolean)? (svg:stroke-opacity::(string() | zeroToHundredPercent))? (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none"))? (svg:stroke-linecap::("butt" | "square" | "round"))? (draw:symbol-color::color)? (text:animation::("none" | "scroll" | "alternate" | "slide"))? (text:animation-direction::("left" | "right" | "up" | "down"))? (text:animation-start-inside::boolean)? (text:animation-stop-inside::boolean)? (text:animation-repeat::nonNegativeInteger)? (text:animation-delay::duration)? (text:animation-steps::length)? (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? (draw:fit-to-size::boolean)? (draw:fit-to-contour::boolean)? (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? (fo:wrap-option::("no-wrap" | "wrap"))? (style:shrink-to-fit::boolean)? (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? (draw:color-inversion::boolean)? (draw:luminance::zeroToHundredPercent)? (draw:contrast::percent)? (draw:gamma::percent)? (draw:red::signedZeroToHundredPercent)? (draw:green::signedZeroToHundredPercent)? (draw:blue::signedZeroToHundredPercent)? (draw:image-opacity::zeroToHundredPercent)? (draw:shadow::("visible" | "hidden"))? (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? (draw:shadow-color::color)? (draw:shadow-opacity::zeroToHundredPercent)? (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? (draw:line-distance::distance)? (draw:guide-overhang::length)? (draw:guide-distance::distance)? (draw:start-guide::length)? (draw:end-guide::length)? (draw:placing::("below" | "above"))? (draw:parallel::boolean)? (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? (draw:show-unit::boolean)? (draw:decimal-places::nonNegativeInteger)? (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? (draw:caption-angle-type::("fixed" | "free"))? (draw:caption-angle::angle)? (draw:caption-gap::distance)? (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? (draw:caption-escape::(length | percent))? (draw:caption-line-length::length)? (draw:caption-fit-line-length::boolean)? (dr3d:horizontal-segments::nonNegativeInteger)? (dr3d:vertical-segments::nonNegativeInteger)? (dr3d:edge-rounding::percent)? (dr3d:edge-rounding-mode::("correct" | "attractive"))? (dr3d:back-scale::percent)? (dr3d:depth::length)? (dr3d:backface-culling::("enabled" | "disabled"))? (dr3d:end-angle::angle)? (dr3d:close-front::boolean)? (dr3d:close-back::boolean)? (dr3d:lighting-mode::("standard" | "double-sided"))? (dr3d:normals-kind::("object" | "flat" | "sphere"))? (dr3d:normals-direction::("normal" | "inverse"))? (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? (dr3d:texture-kind::("luminance" | "intensity" | "color"))? (dr3d:texture-filter::("enabled" | "disabled"))? (dr3d:texture-mode::("replace" | "modulate" | "blend"))? (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? (dr3d:shininess::percent)? (dr3d:shadow::("visible" | "hidden"))? common-draw-rel-size-attlist (fo:min-width::(length | percent))? (fo:min-height::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist (style:print-content::boolean)? (style:protect::("none" | (("content" | "position" | "size")+)))? (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? common-vertical-pos-attlist common-vertical-rel-attlist common-text-anchor-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist common-background-transparency-attlist common-editable-attlist (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? (style:wrap-dynamic-threshold::nonNegativeLength)? (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? (style:wrap-contour::boolean)? (style:wrap-contour-mode::("full" | "outside"))? (style:run-through::("foreground" | "background"))? (style:flow-with-text::boolean)? (style:overflow-behavior::("clip" | "auto-create-new-frame"))? (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? (fo:clip::("auto" | clipShape))? (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? common-writing-mode-attlist (draw:frame-display-scrollbar::boolean)? (draw:frame-display-border::boolean)? (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? (draw:draw-aspect::("content" | "thumbnail" | "icon" | "print-view"))? (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") common-field-description-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? (style:type::"right") | (style:type::"left" style:position::length) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean table:data-field::string table:member-count::nonNegativeInteger table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string (text:table-type::("table" | "query" | "command"))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
custom-shape-type ::= "non-primitive" | string ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist (chart:style-name::styleNameRef)? (table:cell-range-address::cellRangeAddressList)? (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? dr3d-scene-attlist common-dr3d-transform-attlist xml-id? ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
script-event-listener-attlist ::= script:event-name::string script:language::string (script:macro-name::string) | (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? (text:use-outline-level::boolean)? (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:index-scope::("document" | "chapter"))? (text:relative-tab-stop-position::boolean)? ;
lineMode ::= "continuous" | "skip-white-space" ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
text-a-attlist ::= (office:name::string)? (office:title::string)? xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? (draw:fill-color::color)? (draw:secondary-fill-color::color)? (draw:fill-gradient-name::styleNameRef)? (draw:gradient-step-count::nonNegativeInteger)? (draw:fill-hatch-name::styleNameRef)? (draw:fill-hatch-solid::boolean)? (draw:fill-image-name::styleNameRef)? (style:repeat::("no-repeat" | "repeat" | "stretch"))? (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? (draw:tile-repeat-offset::(zeroToHundredPercent "horizontal" | "vertical"))? (draw:opacity::zeroToHundredPercent)? (draw:opacity-name::styleNameRef)? (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? (fo:color::color)? (style:use-window-font-color::boolean)? (style:text-outline::boolean)? (style:text-line-through-type::lineType)? (style:text-line-through-style::lineStyle)? (style:text-line-through-width::lineWidth)? (style:text-line-through-color::("font-color" | color))? (style:text-line-through-text::string)? (style:text-line-through-text-style::styleNameRef)? (style:text-position::(percent | "super" | "sub" percent?))? (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? (style:script-type::("latin" | "asian" | "complex" | "ignore"))? (fo:letter-spacing::(length | "normal"))? (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? (fo:script::scriptCode)? (style:script-asian::scriptCode)? (style:script-complex::scriptCode)? (style:rfc-language-tag::language)? (style:rfc-language-tag-asian::language)? (style:rfc-language-tag-complex::language)? (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? (style:font-relief::("none" | "embossed" | "engraved"))? (fo:text-shadow::shadowType)? (style:text-underline-type::lineType)? (style:text-underline-style::lineStyle)? (style:text-underline-width::lineWidth)? (style:text-underline-color::("font-color" | color))? (style:text-overline-type::lineType)? (style:text-overline-style::lineStyle)? (style:text-overline-width::lineWidth)? (style:text-overline-color::("font-color" | color))? (style:text-overline-mode::lineMode)? (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? (style:text-underline-mode::lineMode)? (style:text-line-through-mode::lineMode)? (style:letter-kerning::boolean)? (style:text-blinking::boolean)? common-background-color-attlist (style:text-combine::("none" | "letters" | "lines"))? (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? (style:text-scale::percent)? (style:text-rotation-angle::angle)? (style:text-rotation-scale::("fixed" | "line-height"))? (fo:hyphenate::boolean)? (fo:hyphenation-remain-char-count::positiveInteger)? (fo:hyphenation-push-char-count::positiveInteger)? (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
office-dde-source-attlist ::= (office:name::string)? (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? (presentation:preset-id::string)? (presentation:preset-sub-type::string)? (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? (presentation:master-element::IDREF)? (presentation:group-id::string)? (xml-id (anim:id::NCName)?)? ;
config-config-item-attlist ::= config:name::string config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
fontStyle ::= "normal" | "italic" | "oblique" ;
office-meta-data ::= (meta:generator::string) | (dc:title::string) | (dc:description::string) | (dc:subject::string) | (meta:keyword::string) | (meta:initial-creator::string) | dc-creator | (meta:printed-by::string) | (meta:creation-date::dateTime) | dc-date | (meta:print-date::dateTime) | (meta:template::(xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?)) | (meta:auto-reload::((xlink:type::"simple" xlink:href::anyIRI (xlink:show::"replace")? (xlink:actuate::"onLoad")?)? (meta:delay::duration)?)) | (meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)) | (dc:language::language) | (meta:editing-cycles::nonNegativeInteger) | (meta:editing-duration::duration) | (meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (meta:frame-count::nonNegativeInteger)? (meta:sentence-count::nonNegativeInteger)? (meta:syllable-count::nonNegativeInteger)? (meta:non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?)) | (meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string())) ;
style-list-level-label-alignment-attlist ::= text:label-followed-by::("listtab" | "space" | "nothing") (text:list-tab-stop-position::length)? (fo:text-indent::length)? (fo:margin-left::length)? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") text:outline-level::nonNegativeInteger ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-ref-format-values ::= "page" | "chapter" | "direction" | "text" ;
common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? (draw:start-angle::angle)? (draw:end-angle::angle)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist (text:page-adjust::integer)? (text:select-page::("previous" | "current" | "next"))? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress table:data-cell-range-address::cellRangeAddress table:orientation::("column" | "row") ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? (svg:viewBox::(integer integer integer integer))? (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? (draw:text-rotate-angle::angle)? (draw:extrusion-allowed::boolean)? (draw:text-path-allowed::boolean)? (draw:concentric-gradient-fill-allowed::boolean)? (draw:extrusion::boolean)? (draw:extrusion-brightness::zeroToHundredPercent)? (draw:extrusion-depth::(length double))? (draw:extrusion-diffusion::percent)? (draw:extrusion-number-of-line-segments::integer)? (draw:extrusion-light-face::boolean)? (draw:extrusion-first-light-harsh::boolean)? (draw:extrusion-second-light-harsh::boolean)? (draw:extrusion-first-light-level::zeroToHundredPercent)? (draw:extrusion-second-light-level::zeroToHundredPercent)? (draw:extrusion-first-light-direction::vector3D)? (draw:extrusion-second-light-direction::vector3D)? (draw:extrusion-metal::boolean)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (draw:extrusion-rotation-angle::(angle angle))? (draw:extrusion-rotation-center::vector3D)? (draw:extrusion-shininess::zeroToHundredPercent)? (draw:extrusion-skew::(double angle))? (draw:extrusion-specularity::zeroToHundredPercent)? (dr3d:projection::("parallel" | "perspective"))? (draw:extrusion-viewpoint::point3D)? (draw:extrusion-origin::(extrusionOrigin extrusionOrigin))? (draw:extrusion-color::boolean)? (draw:enhanced-path::string)? (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? (draw:text-areas::string)? (draw:glue-points::string)? (draw:glue-point-type::("none" | "segments" | "rectangle"))? (draw:glue-point-leaving-directions::string)? (draw:text-path::boolean)? (draw:text-path-mode::("normal" | "path" | "shape"))? (draw:text-path-scale::("path" | "shape"))? (draw:text-path-same-letter-heights::boolean)? (draw:modifiers::string)? ;
table-data-pilot-field-reference-attlist ::= table:field-name::string (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
horiBackPos ::= "left" | "center" | "right" ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:type::"simple" xlink:href::anyIRI) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? common-field-fixed-attlist ;
db-column-definition-attlist ::= db:name::string (db:data-type::db-data-types)? (db:type-name::string)? (db:precision::positiveInteger)? (db:scale::positiveInteger)? (db:is-nullable::("no-nulls" | "nullable"))? (db:is-empty-allowed::boolean)? (db:is-autoincrement::boolean)? ;
presentation-event-listener-attlist ::= script:event-name::string presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound" | "last-visited-page") (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:start-scale::percent)? (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onRequest")?)? (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? (table:table-name::string)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? (style:filter-name::string)? (draw:opacity::zeroToHundredPercent)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
text-illustration-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-caption::boolean)? (text:caption-sequence-name::string)? (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? common-num-format-attlist? common-num-format-prefix-suffix-attlist (style:paper-tray-name::("default" | string))? (style:print-orientation::("portrait" | "landscape"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist (style:register-truth-ref-style-name::styleNameRef)? (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? (style:print-page-order::("ttb" | "ltr"))? (style:first-page-number::(positiveInteger | "continue"))? (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? (style:footnote-max-height::length)? common-writing-mode-attlist (style:layout-grid-mode::("none" | "line" | "both"))? (style:layout-grid-standard-mode::boolean)? (style:layout-grid-base-height::length)? (style:layout-grid-ruby-height::length)? (style:layout-grid-lines::positiveInteger)? (style:layout-grid-base-width::length)? (style:layout-grid-color::color)? (style:layout-grid-ruby-below::boolean)? (style:layout-grid-print::boolean)? (style:layout-grid-display::boolean)? (style:layout-grid-snap-to::boolean)? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? (style:lines::positiveInteger)? (style:distance::length)? (style:style-name::styleNameRef)? ;
db-key-attlist ::= (db:name::string)? db:type::("primary" | "unique" | "foreign") (db:referenced-table-name::string)? (db:update-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? (db:delete-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? ;
table-linked-source-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (table:filter-name::string)? (table:filter-options::string)? (table:refresh-delay::duration)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? (style:line-height-at-least::nonNegativeLength)? (style:line-spacing::length)? (style:font-independent-line-spacing::boolean)? common-text-align (fo:text-align-last::("start" | "center" | "justify"))? (style:justify-single-word::boolean)? (fo:keep-together::("auto" | "always"))? (fo:widows::nonNegativeInteger)? (fo:orphans::nonNegativeInteger)? (style:tab-stop-distance::nonNegativeLength)? (fo:hyphenation-keep::("auto" | "page"))? (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? (style:register-true::boolean)? common-horizontal-margin-attlist (fo:text-indent::(length | percent))? (style:auto-text-indent::boolean)? common-vertical-margin-attlist common-margin-attlist common-break-attlist common-background-color-attlist common-border-attlist common-border-line-width-attlist (style:join-border::boolean)? common-padding-attlist common-shadow-attlist common-keep-with-next-attlist (text:number-lines::boolean)? (text:line-number::nonNegativeInteger)? (style:text-autospace::("none" | "ideograph-alpha"))? (style:punctuation-wrap::("simple" | "hanging"))? (style:line-break::("normal" | "strict"))? (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? common-writing-mode-attlist (style:writing-mode-automatic::boolean)? (style:snap-to-layout-grid::boolean)? common-page-number-attlist common-background-transparency-attlist ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
table-data-pilot-groups-attlist ::= table:source-field-name::string (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) table:step::double table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
vertBackPos ::= "top" | "center" | "bottom" ;
shadowType ::= "none" | string ;
draw-layer-attlist ::= draw:name::string (draw:protected::boolean)? (draw:display::("always" | "screen" | "printer" | "none"))? ;
types ::= "submit" | "reset" | "push" | "url" ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? (style:use-optimal-row-height::boolean)? common-background-color-attlist common-break-attlist (fo:keep-together::("auto" | "always"))? ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) draw:corners::positiveInteger ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
draw-hatch-attlist ::= draw:name::styleName (draw:display-name::string)? draw:style::("single" | "double" | "triple") (draw:color::color)? (draw:distance::length)? (draw:rotation::angle)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? (presentation:show::string)? (presentation:full-screen::boolean)? (presentation:endless::boolean)? (presentation:pause::duration)? (presentation:show-logo::boolean)? (presentation:force-manual::boolean)? (presentation:mouse-visible::boolean)? (presentation:mouse-as-pen::boolean)? (presentation:start-with-navigator::boolean)? (presentation:animations::("enabled" | "disabled"))? (presentation:transition-on-click::("enabled" | "disabled"))? (presentation:stay-on-top::boolean)? (presentation:show-end-of-presentation-slide::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? (text:anchor-page-number::positiveInteger)? ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:count::positiveInteger)? (table:table::integer)? ;
office-document-common-attrs ::= office:version::"1.2" (grddl:transformation::(anyIRI*))? ;
db-component-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")?)? (db:as-template::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
table-consolidation-attlist ::= table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) table:source-cell-range-addresses::cellRangeAddressList table:target-cell-address::cellAddress (table:use-labels::("none" | "row" | "column" | "both"))? (table:link-to-source-data::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? (presentation:transition-speed::presentationSpeeds)? (smil:type::string)? (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (presentation:duration::duration)? (presentation:visibility::("visible" | "hidden"))? (draw:background-size::("full" | "border"))? (presentation:background-objects-visible::boolean)? (presentation:background-visible::boolean)? (presentation:display-header::boolean)? (presentation:display-footer::boolean)? (presentation:display-page-number::boolean)? (presentation:display-date-time::boolean)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? (style:text-align-source::("fix" | "value-type"))? common-style-direction-attlist (style:glyph-orientation-vertical::("auto" | "0" | "0deg" | "0rad" | "0grad"))? common-writing-mode-attlist common-shadow-attlist common-background-color-attlist common-border-attlist (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? common-border-line-width-attlist common-padding-attlist (fo:wrap-option::("no-wrap" | "wrap"))? common-rotation-angle-attlist (style:rotation-align::("none" | "bottom" | "top" | "center"))? (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? (style:print-content::boolean)? (style:decimal-places::nonNegativeInteger)? (style:repeat-content::boolean)? (style:shrink-to-fit::boolean)? ;
presentation-date-time-decl-attlist ::= presentation:name::string presentation:source::("fixed" | "current-date") (style:data-style-name::styleNameRef)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? (svg:origin::string)? (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeDecimal | "indefinite"))? ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") table:add-empty-lines::boolean ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell common-repeat common-delay-for-repeat (form:max-value::integer)? (form:min-value::integer)? (form:step-size::positiveInteger)? (form:page-step-size::positiveInteger)? (form:orientation::("horizontal" | "vertical"))? ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? (table:condition-source::("self" | "cell-range"))? (table:condition-source-range-address::cellRangeAddress)? (table:display-duplicates::boolean)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
db-data-types ::= "bit" | "boolean" | "tinyint" | "smallint" | "integer" | "bigint" | "float" | "real" | "double" | "numeric" | "decimal" | "char" | "varchar" | "longvarchar" | "date" | "time" | "timestmp" | "binary" | "varbinary" | "longvarbinary" | "sqlnull" | "other" | "object" | "distinct" | "struct" | "array" | "blob" | "clob" | "ref" ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align (text:space-before::length)? (text:min-label-width::nonNegativeLength)? (text:min-label-distance::nonNegativeLength)? (style:font-name::string)? (fo:width::positiveLength)? (fo:height::positiveLength)? common-vertical-rel-attlist common-vertical-pos-attlist (text:list-level-position-and-space-mode::("label-width-and-position" | "label-alignment"))? ;
style-style-content ::= (style:family::"text" style-text-properties?) | (style:family::"paragraph" style-paragraph-properties? style-text-properties?) | (style:family::"section" style-section-properties?) | (style:family::"ruby" style-ruby-properties?) | (style:family::"table" style-table-properties?) | (style:family::"table-column" style-table-column-properties?) | (style:family::"table-row" style-table-row-properties?) | (style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties?) | (style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties?) | (style:family::"drawing-page" style-drawing-page-properties?) | (style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties?) ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
db-connection-resource-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")? ;
db-data-source-setting-types ::= "boolean" | "short" | "int" | "long" | "double" | "string" ;
table-database-range-attlist ::= (table:name::string)? (table:is-selection::boolean)? (table:on-update-keep-styles::boolean)? (table:on-update-keep-size::boolean)? (table:has-persistent-data::boolean)? (table:orientation::("column" | "row"))? (table:contains-header::boolean)? (table:display-filter-buttons::boolean)? table:target-range-address::cellRangeAddress (table:refresh-delay::boolean)? ;
chart-dimension ::= "x" | "y" | "z" ;
text-section-attlist ::= common-section-attlist (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
fontVariant ::= "normal" | "small-caps" ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
fontPitch ::= "fixed" | "variable" ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? (table:target-range-address::cellRangeAddress)? (table:case-sensitive::boolean)? (table:language::languageCode)? (table:country::countryCode)? (table:script::scriptCode)? (table:rfc-language-tag::language)? (table:algorithm::string)? (table:embedded-number-behavior::("alpha-numeric" | "integer" | "double"))? ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
boolean ::= "true" | "false" ;
anim-transition-filter-attlist ::= smil:type::string (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string (table:acceptance-state::("accepted" | "rejected" | "pending"))? (table:rejecting-change-id::string)? ;
chart-chart-attlist ::= chart:class::namespacedToken common-draw-size-attlist (chart:column-mapping::string)? (chart:row-mapping::string)? (chart:style-name::styleNameRef)? (xlink:type::"simple" xlink:href::anyIRI)? xml-id? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? (table:align::("left" | "center" | "right" | "margins"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-page-number-attlist common-break-attlist common-background-color-attlist common-shadow-attlist common-keep-with-next-attlist (style:may-break-between-rows::boolean)? (table:border-model::("collapsing" | "separating"))? common-writing-mode-attlist (table:display::boolean)? ;
form-form-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?)? (office:target-frame::targetFrameName)? (form:method::("get" | "post" | string))? (form:enctype::string)? (form:allow-deletes::boolean)? (form:allow-inserts::boolean)? (form:allow-updates::boolean)? (form:apply-filter::boolean)? (form:command-type::("table" | "query" | "command"))? (form:command::string)? (form:datasource::(anyIRI | string))? (form:master-fields::string)? (form:detail-fields::string)? (form:escape-processing::boolean)? (form:filter::string)? (form:ignore-result::boolean)? (form:navigation-mode::navigation)? (form:order::string)? (form:tab-cycle::tab-cycles)? ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") table:index::nonNegativeInteger ;
paragraph-content ::= string() | (text:s::((text:c::nonNegativeInteger)?)) | (text:tab::text-tab-attr) | (text:line-break::ε) | text-soft-page-break | (text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content-or-hyperlink*)) | (text:meta::(text-meta-attlist paragraph-content-or-hyperlink*)) | text-bookmark | text-bookmark-start | text-bookmark-end | (text:reference-mark::(text:name::string)) | (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) | (text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*))) | (text:ruby::((text:style-name::styleNameRef)? text:ruby-base::(paragraph-content-or-hyperlink*) text:ruby-text::((text:style-name::styleNameRef)? string()))) | office-annotation | office-annotation-end | change-marks | shape | (text:date::(text-date-attlist string())) | (text:time::(text-time-attlist string())) | (text:page-number::(text-page-number-attlist string())) | (text:page-continuation::(text-page-continuation-attlist string())) | (text:sender-firstname::(common-field-fixed-attlist string())) | (text:sender-lastname::(common-field-fixed-attlist string())) | (text:sender-initials::(common-field-fixed-attlist string())) | (text:sender-title::(common-field-fixed-attlist string())) | (text:sender-position::(common-field-fixed-attlist string())) | (text:sender-email::(common-field-fixed-attlist string())) | (text:sender-phone-private::(common-field-fixed-attlist string())) | (text:sender-fax::(common-field-fixed-attlist string())) | (text:sender-company::(common-field-fixed-attlist string())) | (text:sender-phone-work::(common-field-fixed-attlist string())) | (text:sender-street::(common-field-fixed-attlist string())) | (text:sender-city::(common-field-fixed-attlist string())) | (text:sender-postal-code::(common-field-fixed-attlist string())) | (text:sender-country::(common-field-fixed-attlist string())) | (text:sender-state-or-province::(common-field-fixed-attlist string())) | (text:author-name::(common-field-fixed-attlist string())) | (text:author-initials::(common-field-fixed-attlist string())) | (text:chapter::(text-chapter-attlist string())) | (text:file-name::(text-file-name-attlist string())) | (text:template-name::(text-template-name-attlist string())) | (text:sheet-name::string()) | (text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string())) | (text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string())) | (text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:text-input::(common-field-description-attlist string())) | (text:initial-creator::(common-field-fixed-attlist string())) | (text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string())) | (text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string())) | (text:description::(common-field-fixed-attlist string())) | (text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string())) | (text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:printed-by::(common-field-fixed-attlist string())) | (text:title::(common-field-fixed-attlist string())) | (text:subject::(common-field-fixed-attlist string())) | (text:keywords::(common-field-fixed-attlist string())) | (text:editing-cycles::(common-field-fixed-attlist string())) | (text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string())) | (text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:creator::(common-field-fixed-attlist string())) | (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) | (text:database-display::(text-database-display-attlist string())) | (text:database-next::text-database-next-attlist) | (text:database-row-select::text-database-row-select-attlist) | (text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string())) | (text:database-name::(common-field-database-table string())) | (text:page-variable-set::(text-set-page-variable-attlist string())) | (text:page-variable-get::(text-get-page-variable-attlist string())) | (text:placeholder::(text-placeholder-attlist string())) | (text:conditional-text::(text-conditional-text-attlist string())) | (text:hidden-text::(text-hidden-text-attlist string())) | (text:reference-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:note-ref::(text-common-ref-content text-note-ref-content)) | (text:sequence-ref::(text-common-ref-content text-sequence-ref-content)) | (text:script::((xlink:type::"simple" xlink:href::anyIRI) | string() (script:language::string)?)) | (text:execute-macro::((text:name::string)? office-event-listeners? string())) | (text:hidden-paragraph::(text-hidden-paragraph-attlist string())) | (text:dde-connection::(text:connection-name::string string())) | (text:measure::(text:kind::("value" | "unit" | "gap") string())) | (text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:meta-field::(text-meta-field-attlist paragraph-content-or-hyperlink*)) | (text:toc-mark-start::text-toc-mark-start-attrs) | (text:toc-mark-end::text-id) | (text:toc-mark::(text:string-value::string text-outline-level)) | (text:user-index-mark-start::(text-id text-outline-level text-index-name)) | (text:user-index-mark-end::text-id) | (text:user-index-mark::(text:string-value::string text-outline-level text-index-name)) | (text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs)) | (text:alphabetical-index-mark-end::text-id) | (text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs)) | (text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string())) | (presentation:header::ε) | (presentation:footer::ε) | (presentation:date-time::ε) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger table:value::(string | double) table:operator::string (table:case-sensitive::string)? (table:data-type::("text" | "number"))? ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) table:order::("ascending" | "descending") ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media" | IDREF))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
navigation ::= "none" | "current" | "parent" ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger svg:x::(distance | percent) svg:y::(distance | percent) (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
table-data-pilot-field-attlist ::= table:source-field-name::string (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) (table:is-data-layout-field::string)? (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? (table:used-hierarchy::integer)? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
list-linkage-type ::= (form:list-linkage-type::("selection" | "selection-indices"))? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? (chart:three-dimensional::boolean)? (chart:deep::boolean)? (chart:right-angled-axes::boolean)? (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyIRI)) | ε (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? (chart:sort-by-x-values::boolean)? (chart:vertical::boolean)? (chart:connect-bars::boolean)? (chart:gap-width::integer)? (chart:overlap::integer)? (chart:group-bars-per-axis::boolean)? (chart:japanese-candle-stick::boolean)? (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? (chart:pie-offset::nonNegativeInteger)? (chart:angle-offset::angle)? (chart:hole-size::percent)? (chart:lines::boolean)? (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? (chart:stacked::boolean)? (chart:percentage::boolean)? (chart:treat-empty-cells::("use-zero" | "leave-gap" | "ignore"))? (chart:link-data-style-to-source::boolean)? (chart:logarithmic::boolean)? (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? (chart:reverse-direction::boolean)? (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? common-style-direction-attlist common-rotation-angle-attlist (chart:data-label-number::("none" | "value" | "percentage" | "value-and-percentage"))? (chart:data-label-text::boolean)? (chart:data-label-symbol::boolean)? (chart:label-separator::text-p)? (chart:label-position::labelPositions)? (chart:label-position-negative::labelPositions)? (chart:visible::boolean)? (chart:auto-position::boolean)? (chart:auto-size::boolean)? (chart:mean-value::boolean)? (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant" | "standard-error" | "cell-range"))? (chart:error-percentage::double)? (chart:error-margin::double)? (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? (chart:error-lower-range::cellRangeAddressList)? (chart:error-upper-range::cellRangeAddressList)? (chart:series-source::("columns" | "rows"))? (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? (chart:axis-position::("start" | "end" | double))? (chart:axis-label-position::("near-axis" | "near-axis-other-side" | "outside-start" | "outside-end"))? (chart:tick-mark-position::("at-labels" | "at-axis" | "at-labels-and-axis"))? (chart:include-hidden-cells::boolean)? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? draw:name::styleName (draw:display-name::string)? ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
draw-a-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (office:name::string)? (office:title::string)? (office:server-map::boolean)? xml-id? ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") (text:string-value::string)? ;
common-draw-area-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)? (office:name::string)? (draw:nohref::"nohref")? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? (smil:additive::("replace" | "sum"))? ;
states ::= "unchecked" | "checked" | "unknown" ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? common-num-format-attlist? (text:style-name::styleNameRef)? (text:increment::nonNegativeInteger)? (text:number-position::("left" | "right" | "inner" | "outer"))? (text:offset::nonNegativeLength)? (text:count-empty-lines::boolean)? (text:count-in-text-boxes::boolean)? (text:restart-on-page::boolean)? ;
--------------------pascal::delphi.bgf--------------------
procedure_body_semi ::= procedure_body ";" NL ;
external_name ::= ("name" expr) | ("index" expr) ;
builtinid ::= "string" | "file" | "set" ;
dispid_spec ::= "dispid" SP expr ;
procedure_keyword ::= "function" | "procedure" | "constructor" | "destructor" ;
pointer_type ::= "^" SPOFF qualified_id SPON ;
of_const ::= "of" "const" ;
colon_id ::= "," NL id ;
selection_stm ::= ("if" expr "then" nested_stm else_stm?) | ("case" expr "of" case_selector* case_else? end_struct) ;
default_spec ::= ("default" SP expr) | "nodefault" ;
set_type ::= "set" of_basetype ;
dotdot_expr ::= ".." expression ;
of_basetype ::= "of" type_spec ;
boolean_type ::= "boolean" | "bytebool" | "wordbool" | "longbool" ;
try_finally_stm ::= "try" NL statement_list "finally" NL statement_list end_struct ;
initialization_kw ::= "initialization" | "begin" ;
implements_spec ::= "implements" {qualified_id ","}* ;
at_address ::= "at" expr ;
case_else ::= "else" statement_list ;
postfix_opr ::= arguments | array_subscript | ("." id) | "^" ;
exports_section ::= "exports" {exports_entry ","}* ";" NL ;
constant_decl ::= identlist constant_spec hint_directive? ";" NL ;
interface_keyword ::= "interface" | "dispinterface" ;
defaultarray_spec ::= ";" "default" ;
in_filename ::= "in" filenamelit ;
type_section ::= "type" NL IN type_decl+ EX ;
array_type ::= ("array" of_const) | ("packed"? "array" array_index_list* of_basetype) ;
colon ::= SPOFF ":" SPON ;
heritage_list ::= ("(" {qualified_id ","}* ")") | ("helper" "for" id) ;
assign_stm ::= expr ":=" expr ;
external_directive ::= "external" expr? external_name? ;
namespace ::= id "." ;
exception_handler ::= "on" exception_var? type_spec "do" nested_stm ;
raise_stm ::= "raise" expr? at_address? ;
absolute_init ::= "absolute" expr ;
stored_spec ::= "stored" SP expr ;
argmfmt ::= ":" anynumber ;
arguments ::= "(" argm? semi_argm* ")" ;
calling_spec ::= "pascal" | "safecall" | "stdcall" | "cdecl" | "register" | "local" ;
class_reference_type ::= "class" "of" qualified_id ;
property_decl ::= "property" id prop_indexes? colon_type? prop_specifier* defaultarray_spec? ";" NL ;
prop_index_decl ::= prop_index_name+ colon_type ";"? ;
record_constant ::= "(" record_field_constant_semi* record_field_constant? ")" ;
var_keyword ::= "var" | "threadvar" ;
goto_stm ::= "goto" label_id ;
directive ::= "dynamic" | "virtual" | "abstract" | ("message" qualified_id?) | ("dispid" sign? anynumber) | "override" | "overload" | "reintroduce" | "static" | "assembler" | "far" | "export" | hint_directive | calling_spec ;
semi_set_element ::= "," SP set_element ;
procedure_signature ::= "class"? procedure_keyword procedure_id? formal_parameters? colon_type? ;
call_stm ::= expr | "inherited" ;
array_constant ::= "(" {typed_const ","}* ")" ;
method_decl ::= (procedure_signature method_deleg) | (procedure_signature ";" dispid_spec ";") | procedure_intf_decl ;
infix_opr ::= ">" | "<" | "<=" | ">=" | "<>" | "=" | "in" | "is" | "as" | "+" | "-" | "or" | "xor" | "*" | "/" | "div" | "mod" | "and" | "shl" | "shr" | "^" ;
parm_qual ::= "var" | "const" | "out" ;
var_decl ::= identlist colon_type hint_directive? var_init? ";" NL ;
uses_clause ::= "uses" NL IN {uses_item ","}* ";" EX NL ;
ctrlchar ::= "^'A" | "^'B" | "^'C" | "^'D" | "^'E" | "^'F" | "^'G" | "^'H" | "^'I" | "^'J" | "^'K" | "^'L" | "^'M" | "^'N" | "^'O" | "^'P" | "^'Q" | "^'R" | "^'S" | "^'T" | "^'U" | "^'V" | "^'W" | "^'X" | "^'Y" | "^'Z" ;
statement_semi ::= statement? ";" NL ;
semi_directive ::= ";"? directive ;
sign ::= "+" | "-" ;
real_type ::= "real" | "real48" | "single" | "double" | "extended" | "comp" | "currency" ;
formal_parameters ::= "(" formal_parameter semi_formal_parameter* ")" ;
end_struct ::= "end" ;
record_field_constant_semi ::= record_field_constant ";" NL ;
to_or_downto ::= "to" | "downto" ;
variant_type ::= "variant" | "olevariant" ;
resource_section ::= "resourcestring" constant_decl+ ;
equal ::= "=" ;
exception_handler_semi ::= exception_handler ";" NL ;
with_stm ::= "with" expr+ "do" nested_stm ;
accessor_spec ::= "readonly" | "writeonly" | (accessor_verb qualified_id) ;
procedure_external_decl ::= procedure_intf_decl external_directive semi_calling_spec? ";"? NL ;
interface_kw ::= "interface" NL ;
sequence_stm ::= "begin" NL statement_list end_struct ;
variant_section ::= "case" id_colon? type_spec "of" record_variant+ ;
parameter ::= {id ","}* parameter_type? ;
string_type ::= "string" | "shortstring" | "ansistring" | "widestring" | ("string" "[" expression "]") ;
of_object ::= "of" "object" ;
else_stm ::= NL "else" nested_stm ;
procedure_intf_decl ::= procedure_signature semi_directive* ";"? NL ;
array_subscript ::= "[" expression? semi_expression* "]" ;
prop_indexes ::= "[" prop_index_decl+ "]" ;
atom_expr ::= charlit | anynumber | ctrlchar | "nil" | ("(" expression ")") | set_constructor | qualified_id ;
class_keyword ::= "class" | "record" | "object" ;
class_type ::= "packed"? class_keyword heritage_list? NL class_body? ;
guid_decl ::= "[" expr "]" ;
requires_clause ::= "requires" {qualified_id ","}* ";" NL ;
set_constructor ::= "[" set_element? semi_set_element* "]" ;
file_type ::= "file" of_basetype? ;
finalization_kw ::= "finalization" ;
integer_type ::= "shortint" | "smallint" | "longint" | "int64" | "word" | "byte" | "longword" | "integer" | "cardinal" ;
enumerated_type ::= "(" enum_spec+ ")" ;
implementation_kw ::= "implementation" NL ;
file_end ::= "." ;
accessor_verb ::= "read" | "write" ;
record_variant ::= expr+ colon "(" visibility_default ")" ";"? NL ;
hint_directive ::= "platform" | "deprecated" | "library" ;
label_decl ::= "label" {label_id ","}* ";" NL ;
visibility ::= "public" | "protected" | ("strict"? "private") | "published" | "automated" ;
loop_stm ::= ("repeat" statement_list "until" expr) | ("while" expr "do" nested_stm) | ("for" id ":=" expr to_or_downto expr "do" nested_stm) | ("for" id "in" id "do" nested_stm) ;
array_index_list ::= "[" {array_index ","}* "]" ;
method_deleg ::= equal qualified_id ";" NL ;
type_decl ::= identlist equal "type"? type_spec hint_directive? ";" NL ;
contains_clause ::= "contains" {uses_item ","}* ";" NL ;
case_selector ::= {case_label ","}* colon nested_stm ";"? ;
procedure_body ::= sequence_stm | "forward" ;
try_except_stm ::= "try" NL statement_list "except" NL exception_block end_struct ;
semi_formal_parameter ::= ";" formal_parameter ;
semi_expression ::= "," SP expression ;
const_section ::= "const" NL IN constant_decl+ EX ;
semi_argm ::= "," SP argm ;
index_spec ::= "index" SP expr ;
semi_calling_spec ::= ";"? calling_spec ;
program_file_list ::= "(" {id ","}* ")" ;
unit_decl ::= "unit" qualified_id hint_directive? ";" NL ;
program_decl ::= ("program" qualified_id program_file_list? ";" NL) | ("library" qualified_id ";" NL) ;
prefix_opr ::= ("not" SP) | ("inherited" SP) | "@" | sign ;
char_type ::= "char" | "ansichar" | "widechar" ;
package_decl ::= "package" qualified_id ";" NL ;
prop_index_modifier ::= "const" | "var" ;
--------------------pascal::delphipp.bgf--------------------
pp_boolexpr ::= booleanlit | (boolfunc space? "(" id ")") | ("NOT" space? pp_boolexpr) | id | (pp_boolexpr "pp_boolopr" pp_boolexpr) | (pp_litexpr "pp_compareopr" pp_litexpr) | ("(" pp_boolexpr ")") ;
cmline ::= "//" cmlinebody* EOL ;
namespace ::= id "." ;
pp_endif ::= ("{$" space? endif_alt bracketbody* "}") | ("(*$" space? endif_alt starbody* "*)") ;
pp_directivestmt ::= ("{$" space? {pp_directive ","}* bracketbody* "}") | ("(*$" space? {pp_directive ","}* starbody* "*)") ;
pp_minenumsize ::= "Z1" | "Z2" | "Z4" ;
pp_ifexpr ::= ("{$" space? if_alt bracketbody* "}") | ("(*$" space? if_alt starbody* "*)") ;
cmstarblock ::= "(*" starbody* "*)" ;
pp_directive ::= ("DEFINE" space id) | ("UNDEF" space id) | ("INCLUDE" space? filenamelit) | ("I" space? filenamelit) | ("LINK" space? filenamelit) | ("L" space? filenamelit) | ("RESOURCE" space? filenamelit space? filenamelit?) | ("R" space? filenamelit space? filenamelit?) | ("HPPEMIT" space? charlit) | ("EXTERNALSYM" space id) | "NODEFINE" | "MINENUMSIZE" | "DENYPACKAGEUNIT" | "WEAKPACKAGEUNIT" | ("IMAGEBASE" space? anynumber) | ("C" space id) | ("MINENUMSIZE" space anynumber) | pp_minenumsize | ("ALIGN" space? anynumber) | pp_align | ("M" space? {anynumber ","}*) | ("MAXSTACKSIZE" space anynumber) | ("MINSTACKSIZE" space anynumber) | ("RESOURCERESERVE" space anynumber) | "NOINCLUDE" | "WARN" | "MESSAGE" | "APPTYPE" | ("LIBPREFIX" space? charlit) | ("LIBSUFIX" space? charlit) | ("LIBVERSION" space? charlit) | ("DESCRIPTION" space? charlit) | ("D" space? charlit) | ("EXTENSION" space id) | ("E" space id) | (pp_switch space?) ;
booleanlit ::= "FALSE" | "TRUE" ;
cmbracketblock ::= "{" bracketbody* "}" ;
boolfunc ::= "DEFINED" | "DECLARED" | "OPTION" ;
codetoken ::= "(" | ")" | "." | ";" | ":" | "," | "[" | "]" | "+" | "-" | "*" | "/" | "^" | "=" | "@" | ">" | "<" | "<>" | ">=" | "<=" | ":=" | "//" | id | anynumber | charlit | space ;
pp_compareopr ::= ">" | "<" | "=" | ">=" | "<=" | "<>" ;
pp_elseifexpr ::= ("{$" space? else_alt space? bracketbody* "}") | ("(*$" space? else_alt space? starbody* "*)") ;
pp_boolopr ::= "AND" | "OR" | "XOR" ;
if_alt ::= ("IF" space? pp_boolexpr) | ("IFDEF" space? id) | ("IFNDEF" space? id) | ("IFOPT" space? pp_switch) ;
pp_align ::= "A1" | "A2" | "A4" | "A8" ;
else_alt ::= ("ELSEIF" space? pp_boolexpr) | ("ELSE" space?) ;
endif_alt ::= "ENDIF" | "IFEND" ;
pp_switchopt ::= "+" | "-" | "ON" | "OFF" ;
--------------------pascal::object.bgf--------------------
object_heritage ::= "(" ref_name ")" ;
semi_case_selector ::= ";" NL case_selector ;
realType ::= "real48" | "real" | "single" | "double" | "extended" | "currency" | "comp" ;
dotDot_expression ::= ".." expression ;
not_word ::= "not" | "Not" | "NOT" ;
type_declaration ::= decl_name "=" type_or_restrictedType ;
unit_definition ::= "unit" decl_name ";" NL interface_section NL implementation_section NL init_section "." ;
program_definition ::= "program" decl_name program_file_list? ";" NL program_block "." ;
package_definition ::= "package" decl_name ";" NL requires_clause? contains_clause? "end" "." ;
stringType ::= "string" | "ansistring" | "widestring" | ("string" "[" expression "]") ;
else_statement ::= "else" statement? ;
semicolon_record_field_constant ::= ";" decl_name ":" typed_constant ;
at_address ::= "at" ref_name ;
assign_expression ::= ":=" expression ;
class_heritage ::= "(" {ref_name ","}* ")" ;
op ::= ">" | "<" | "<=" | ">=" | "<>" | "=" | "in" | "is" | "+" | "-" | "or" | "xor" | "*" | "/" | "div" | "mod" | "and" | "shl" | "shr" | "DIV" | "AND" ;
while_statement ::= "while" expression do statement ;
type_section ::= "type" IN NL type_declaration+ EX NL ;
interface_section ::= "interface" NL NL uses_clause? NL interface_declaration* ;
semi_statement ::= ";" NL statement ;
bool_value ::= "true" | "false" | "True" | "False" ;
raise_statement ::= "raise" ref_name? at_address? ;
compound_statement ::= begin IN NL statement_list EX NL "end" NL ;
enumeratedType ::= "(" {decl_name ","}* ")" ;
object_modifier ::= ("." id) | array_subscript | arguments | "^" | as_type ;
subrangeType ::= expression ".." expression ;
fileType ::= "file" "of" typeId ;
pond_number ::= "#" number ;
procedure ::= "procedure" | "Procedure" ;
classType ::= "class" class_heritage? IN NL class_element_list? vis_spec_element_list* EX NL "end"? ;
record_constant ::= "(" typed_constant semicolon_record_field_constant* ")" ;
dot_id ::= "." id ;
comma_case_label ::= "," case_label ;
if_statement ::= if expression "then" statement? else_statement? ;
try_except_statement ::= "try" IN NL statement_list EX NL except ";"? IN NL exception_block EX NL "end" ;
array_constant ::= "(" {typed_constant ","}* ")" ;
for ::= "for" | "For" ;
semi_exception_handler ::= ";" exception_handler ;
in_clause ::= "in" charlit ;
implementsTypeId ::= "implements" typeId ;
parm_qual ::= var | "const" | "out" ;
semi_directive ::= ";" directive ;
constructor_heading ::= "constructor" decl_name formal_parameters? ;
destructor_heading ::= "destructor" decl_name formal_parameters? ;
setType ::= "set" "of" ordinalType ;
requires_idList_semicolon ::= "requires" ref_name+ ";" NL ;
init_section ::= ("intitialization" IN NL statement_list fin_statement_list? EX NL "end") | compound_statement | "end" ;
to_or_downto ::= "to" | "downto" ;
constructor_declaration ::= constructor_heading ";" IN NL block EX NL ";" NL ;
field_declaration ::= decl_name+ ":" type ";" NL ;
endNameTag ::= SPOFF SP "</" "UID" ">" SPON ;
structType ::= (arrayType "packed"?) | (setType "packed"?) | (fileType "packed"?) | (recordType "packed"?) ;
parameter ::= {decl_name ","}* parameter_type? ;
begin ::= "begin" | "Begin" ;
of_object ::= "of" "object" ;
array_subscript ::= "[" {expression ","}* "]" ;
class_referenceType ::= "class" "of" typeId ;
set_constructor ::= "[" {set_element ","}* "]" ;
function_heading ::= function_word decl_name formal_parameters? ":" type_or_string ;
record_variant ::= expression+ ":" "(" field_list? ")" ;
repeating_statement ::= "repeat" statement ";"? "until" expression ;
absolute_assignment ::= "absolute" id_or_expression ;
function_declaration ::= function_heading semi_directive? ";" IN NL block EX NL ";" NL ;
index_expession ::= "index" expression ;
do ::= "do" | "Do" | "DO" ;
program_file_list ::= "(" {id ","}* ")" ;
param_init ::= "=" expression ;
array_of ::= array_word set_constructor? "of" ;
semicolon_virtual ::= ";" "virtual" ;
write_id ::= "write" ref_name ;
for_statement ::= for ref_name ":=" expression to_or_downto expression do statement ;
contains_idList_semicolon ::= "contains" ref_name+ ";" NL ;
read_id ::= "read" ref_name ;
exception_handler_list ::= exception_handler semi_exception_handler* ";"? ;
var_declaration ::= decl_name+ ":" type var_assignment? ;
predefinedType ::= "integer" | "real" | "boolean" | "char" | "byte" ;
stored_id_OR_stored_expression ::= "stored" id_or_expression ;
constant_declaration ::= (decl_name "=" expression ";" NL) | (decl_name ":" typeId "=" typed_constant ";" NL) ;
variantType ::= "variant" | "olevariant" ;
exception_handler ::= "on" exception_var? type do IN NL statement EX ;
implementation_section ::= "implementation" IN NL uses_clause? declaration_section* EX NL ;
library_definition ::= "library" decl_name ";" NL program_block "." ;
arguments ::= "(" {expression ","}* ")" ;
label_declaration_section ::= "label" decl_name ;
directive ::= "cdecl" | "register" | "dynamic" | "virtual" | "export" | "external" | "far" | "forward" | ("message" ref_name?) | "override" | "overload" | "pascal" | "reintroduce" | "safecall" | "stdcall" | "Override" ;
factor ::= ref_name | charlit | (pond_number+) | ("@" "@"? ref_name) | "nil" | ("(" expression ")") | (not_word factor) | set_constructor | (predefinedType "(" expression ")") | bool_value | ("-"? number) ;
labelId_colon ::= labelId ":" ;
property_interface ::= property_parameter_list? ":" type ;
startNameTag ::= SPOFF SP "<" "UID" SP "name" "=" stringlit ">" SPON ;
default_expression_OR_nodefault ::= ("default" expression) | "nodefault" ;
type_or_restrictedType ::= (type ";" NL) | (restrictedType ";" NL) ;
constant_section ::= "const" IN NL constant_declaration* EX NL ;
semi_virtual_method_heading ::= ";" NL virtual_method_heading ;
constant_assignment ::= "=" expression ;
rel_op ::= ">" | "<" | "<=" | ">=" | "<>" | "=" | "in" | "is" ;
interface_heritage ::= "(" {ref_name ","}* ")" ;
uses_clause ::= "uses" IN NL uses_item+ ";" EX NL ;
object ::= (id object_modifier*) | ("(" ref_name ")" object_modifier*) ;
add_op ::= "+" | "-" | "or" | "xor" ;
mul_op ::= "*" | "/" | "div" | "mod" | "and" | "shl" | "shr" | "DIV" | "AND" ;
id_colon ::= decl_name ":" ;
formal_parameters ::= "(" formal_parameter semi_formal_parameter* ")" ;
class_visibility ::= "public" | "protected" | "Protected" | "private" | "published" ;
semi_ident_list_colonType ::= ";" NL ident_list_colonType ;
class_element_semi ::= NL class_element ";" ;
exception_var ::= decl_name ":" ;
ordinal_identifier ::= "shortint" | "smallint" | "integer" | "byte" | "longint" | "int64" | "word" | "boolean" | "char" | "widechar" | "longchar" | "pchar" ;
with_statement ::= "with" ref_name+ do statement ;
destructor_declaration ::= destructor_heading ";" IN NL block EX NL ";" NL ;
property_word ::= "property" | "Property" ;
arrayType ::= array_word square_ordinalType? "of" type ;
as ::= "As" | "as" ;
array_word ::= "array" | "Array" ;
labelId ::= "label" number+ ";" NL ;
try_finally_statement ::= "try" IN NL statement_list EX NL "finally" IN NL statement_list EX NL "end" ;
recordType ::= "record" field_list "end" ;
variant_section ::= "case" id_colon? typeId "of" record_variant_semicolon+ ";"? ;
square_ordinalType ::= "[" {ordinalType ","}* "]" ;
var ::= "var" | "Var" ;
simple_statement ::= (ref_name assign_expression?) | ("inherited" ref_name?) | ("goto" labelId) ;
fin_statement_list ::= "finalization" statement_list ;
case_statement ::= "case" expression "of" case_selector IN NL semi_case_selector* ";"? EX NL else_statement? ";"? NL "end" ;
property_parameter_list ::= "[" idList_colonTypeId_semicolon* "]" ;
if ::= "if" | "If" ;
except ::= "except" | "Except" ;
objectType ::= "object" object_heritage? object_field_list? method_list? "end" ;
pointerType ::= "^" typeId ;
exported_heading ::= (procedure_heading ";" NL) | (function_heading ";" NL) | (constructor_heading ";" NL) | (destructor_heading ";" NL) ;
var_declaration_semicolon ::= var_declaration ";" NL ;
interfaceType ::= "interface" interface_heritage? class_method_list? class_property_list? "end" ;
function_word ::= "function" | "Function" ;
parameter_type ::= ":" array_of? type param_init? ;
case_selector ::= case_label comma_case_label* ":" statement ;
procedure_declaration ::= procedure_heading ";" IN NL block EX NL ";" NL ;
semi_formal_parameter ::= ";" NL formal_parameter ;
record_variant_semicolon ::= record_variant ";" NL ;
ident_list_colonType ::= decl_name+ ":" type ;
idList_colonTypeId_semicolon ::= decl_name+ ":" typeId ";" NL ;
--------------------uml::collab.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::extended.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::fragment.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::oocm.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::reuse.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::statecharts.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::stereo.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::uml-uc.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::uml2.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::umldi-2.0.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::umldi-ag.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::umldi-c.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::umldi-mm.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::umldi-sm.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::umldi-uc.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------uml::yuml.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------xml::rosendal.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------xml::zhang-cordy.bgf--------------------
more_cps ::= spaces "," spaces cp ;
notationtype ::= "NOTATION" spaces "(" spaces name more_names* spaces ")" ;
pi ::= "<?" pitarget sub1_pi? "?>" ;
fixed ::= "#FIXED" spaces ;
contentspec ::= "EMPTY" | "ANY" | mixed | children ;
choice_item ::= spaces "|" spaces cp ;
repetition ::= "?" | "*" | "+" ;
notationdecl ::= "<!NOTATION" spaces name spaces exid_or_pubid spaces ">" spaces ;
defaultdecl ::= "#REQUIRED" | "#IMPLIED" | (fixed? attvalue) ;
longstringlit ::= """ not_dquote* """ ;
decl ::= markupdecl | ("%" name ";") | spaces ;
attlistdecl ::= "<!ATTLIST" spaces name attdef* spaces ">" spaces ;
elementdecl ::= "<!ELEMENT" spaces name spaces contentspec spaces ">" spaces ;
sub2_pi ::= token "?>" token ;
cdsect ::= "<![CDATA[" cdata* cdend ;
choice ::= "(" spaces cp choice_item choice_item* spaces ")" ;
pedecl ::= "<!ENTITY" spaces "%" spaces name spaces pedef spaces ">" spaces ;
seq ::= "(" spaces cp more_cps* spaces ")" ;
more_names ::= spaces "|" spaces name ;
pcdata ::= "(" spaces "#PCDATA" spaces ")" ;
attribute ::= spaces name "=" attvalue spaces ;
exid_sys ::= "SYSTEM" spaces literal ;
empty_elem_tag ::= "<" name spaces attribute* "/>" ;
doctypedecl ::= "<!DOCTYPE" spaces name spaces sp_external_id? spaces declbody? spaces ">" spaces ;
cdend ::= "]]>" ;
etag ::= "</" name spaces ">" ;
exid_or_pubid ::= external_id | ("PUBLIC" spaces literal) ;
declbody ::= "[" decl* "]" ;
exid_pub ::= "PUBLIC" spaces literal spaces literal ;
reference ::= ("&" name ";") | charref ;
stringtype ::= "CDATA" ;
gedecl ::= "<!ENTITY" spaces name spaces entitydef spaces ">" spaces ;
stag ::= "<" name spaces attribute* ">" ;
enumeration ::= "(" spaces nmtoken more_nmtokens* spaces ")" ;
longcharlit ::= "'" not_quote* "'" ;
pcdata_or_name ::= "(" spaces "#PCDATA" more_names* spaces ")*" ;
more_nmtokens ::= spaces "|" spaces nmtoken ;
tokenizedtype ::= "ID" | "IDREF" | "IDREFS" | "ENTITY" | "ENTITIES" | "NMTOKEN" | "NMTOKENS" ;
ndatadecl ::= spaces "NDATA" spaces name ;
--------------------xquery::rosendal.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------xslt::clark.bgf--------------------
output.element ::= output::(extension.atts (method::("xml" | "html" | "text" | qname-but-not-ncname.datatype))? (version::string())? (encoding::string())? (omit-xml-declaration::("yes" | "no"))? (standalone::("yes" | "no"))? (doctype-public::string())? (doctype-system::string())? (cdata-section-elements::qnames.datatype)? (indent::("yes" | "no"))? (media-type::string())?) ;
sort.element ::= sort::(extension.atts (select::expression.datatype)? (lang::(string() | expr-avt.datatype))? (data-type::("text" | "number" | qname-but-not-ncname.datatype | expr-avt.datatype))? (order::("ascending" | "descending" | expr-avt.datatype))? (case-order::("upper-first" | "lower-first" | expr-avt.datatype))?) ;
text.element ::= text::(extension.atts (disable-output-escaping::("yes" | "no"))? string()) ;
version ::= "1.0" ;
number.element ::= number::(extension.atts (level::("single" | "multiple" | "any"))? (count::pattern.datatype)? (from::pattern.datatype)? (value::expression.datatype)? (format::avt.datatype)? (lang::(string() | expr-avt.datatype))? (letter-value::("alphabetic" | "traditional" | expr-avt.datatype))? (grouping-separator::(char.datatype | expr-avt.datatype))? (grouping-size::(number.datatype | expr-avt.datatype))?) ;
message.element ::= message::(extension.atts (terminate::("yes" | "no"))? template.model) ;
prefixes.datatype ::= (string() | "#default")* ;
value-of.element ::= value-of::(extension.atts select::expression.datatype (disable-output-escaping::("yes" | "no"))?) ;
prefix.datatype ::= string() | "#default" ;
--------------------xslt::rosendal.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------logo::sdf.bgf--------------------
FunctionDef ::= "to" Id Formal* Block ;
Block ::= "[" Command* "]" ;
Exp ::= Integer | Formal | "xcor" | "ycor" | "heading" | ("towards" Exp Exp) | "pendown?" | ("sum" Exp Exp) | ("difference" Exp Exp) | ("product" Exp Exp) | ("quotient" Exp Exp) | ("remainder" Exp Exp) | ("minus" Exp) | ("less?" Exp Exp) | ("greater?" Exp Exp) | ("equal?" Exp Exp) | ("notequal?" Exp Exp) ;
BasicCommand ::= ("if" Exp Block) | ("ifelse" Exp Block Block) | ("repeat" Exp Block) | ("forward" Exp) | ("back" Exp) | ("left" Exp) | ("right" Exp) | ("setxy" Exp Exp) | ("setx" Exp) | ("sety" Exp) | "home" | "showturtle" | "hideturtle" | "clean" | "clearscreen" | "pendown" | "penup" | ("pencolor" Color) | ("local" QuotedId) | ("make" QuotedId Exp) ;
Id ::= "xcor" | "ycor" | "heading" | "towards" | "pendown?" | "sum" | "difference" | "product" | "quotient" | "remainder" | "minus" | "less?" | "greater?" | "equal?" | "notequal?" | "to" | "if" | "ifelse" | "repeat" | "forward" | "back" | "left" | "right" | "setxy" | "setx" | "sety" | "home" | "showturtle" | "hideturtle" | "clean" | "clearscreen" | "pendown" | "penup" | "local" | "make" ;
--------------------php::cordy.bgf--------------------
VarModifier ::= "public" | "protected" | "private" | "static" | "final" ;
ArrowObjectProperty ::= "->" ObjectProperty CallParams? ;
ForEachVar ::= CVar | ("&" CVar) ;
SwitchStatement ::= ("switch" "(" Expr ")" NL "{" ";"? NL IN Case* EX "}" NL) | ("switch" "(" Expr ")" ":" ";"? NL IN Case* EX "endswitch" ";" NL) ;
PHPCloseTag ::= ("?>" NL) | ("%>" NL) ;
EqualsStaticScalar ::= "=" StaticScalar ;
PHPOpenTag ::= ("<?php" NL) | ("<?" NL) | ("<%" NL) | ("<?=" NL) ;
StringConstant ::= stringlit | charlit | CommandString | ("<<<" id IN NL EncapsedInlineHTML* id EX) ;
LogicalXorLogicalAndExpr ::= "xor" LogicalAndExpr ;
CaseSeparator ::= ";" | ":" ;
BitOrBitXorExpr ::= "|" BitXorExpr ;
BitXorBitAndExpr ::= "^" BitAndExpr ;
Block ::= "{" NL IN TopStatement* EX "}" NL ;
Param ::= (TypeHint? "&"? TVariable EqualsStaticScalar?) | ("const" TVariable) ;
ArrayKey ::= Expr "=>" ;
UnsetStatement ::= "unset" "(" {ObjectCVar ","}+ ")" ";" NL ;
IncDec ::= "++" | "--" ;
ShiftOp ::= "<<" | ">>" ;
InterfaceDecl ::= "interface" id NL InterfaceExtendsClause? "{" NL IN InterfaceMember* EX NL "}" ;
Primary ::= VariableOrFunctionCall | ScalarConstant | Array | List | InternalFunction | ("(" Expr ")") ;
PrintStatement ::= "print" {Expr ","}+ ";"? NL ;
IfConditionalOrExpr ::= "?" Expr ":" Expr ;
bigtag_id ::= "html" | "body" | "head" | "form" | "table" | "tr" | "td" | "script" | "select" | "label" | "div" ;
ImplementsClause ::= "implements" {Name ","}+ NL ;
GlobalStaticStatement ::= ("global" {CVar ","}+ ";" NL) | ("static" {StaticVariable ","}+ ";" NL) ;
WhileStatement ::= ("while" "(" Expr ")" NL Statement) | ("while" "(" Expr ")" ":" NL IN TopStatement* EX "endwhile" ";" NL) ;
ExprStatement ::= Expr ";"? NL ;
BitAndEqualityExpr ::= "&" EqualityExpr ;
PlusMinus ::= "+" | "-" ;
InternalFunction ::= ("new" Primary) | ("clone" Primary) | ("isset" "(" {ObjectCVar ","}+ ")") | ("empty" "(" ObjectCVar ")") | ("intval" "(" ObjectCVar ")") | ("eval" "(" Expr ")") | ("exit" exit_value?) | ("include" Expr) | ("include_once" Expr) | ("require" Expr) | ("require_once" Expr) ;
ConditionalAndBitOrExpr ::= "&&" BitOrExpr ;
MultOp ::= "*" | "/" | "%" ;
ScalarConstant ::= (PlusMinus? NumericConstant) | StringConstant | MagicConstant | BooleanConstant | "null" ;
UnaryOp ::= "~" | "-" | "@" | ("(" CastType ")") | ("@" "!") ;
AssignOp ::= ".=" | "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "=&" ;
Case ::= ("case" Expr CaseSeparator NL IN TopStatement* EX) | ("default" CaseSeparator NL IN TopStatement* EX) ;
ConditionalOrConditionalAndExpr ::= "||" ConditionalAndExpr ;
InterfaceExtendsClause ::= "extends" {Name ","}+ ;
BooleanConstant ::= "true" | "false" ;
ThrowStatement ::= "throw" Expr ";" NL ;
NotExpr ::= "!"* InstanceExpr ;
ExtendsClause ::= "extends" id NL ;
VariableName ::= SimpleVariableName | ("$" VariableName) | ("{" SimpleVariableName "}") | ("{" Expr "}") ;
ForStatement ::= ("for" "(" {Expr ","}* ";" {Expr ","}* ";" {Expr ","}* ")" NL Statement) | ("for" "(" {Expr ","}* ";" {Expr ","}* ";" {Expr ","}* ")" ":" NL IN Statement* EX "endfor" ";" NL) ;
DeclareStatement ::= "declare" "(" Directive* ")" NL Statement ;
ForEachStatement ::= ("foreach" "(" Expr "as" ForEachPattern ")" NL Statement) | ("foreach" "(" Expr "as" ForEachPattern ")" ":" NL IN Statement* EX "endforeach" ";" NL) ;
AddOp ::= "+" | "-" ;
FunctionDecl ::= "function" "&"? id "(" {Param ","}* ")" NL Block ;
List ::= "list" "(" {ListElem ","}* ")" ;
Array ::= "array" "(" IN {ArrayPair ","}* ","? EX ")" ;
CastType ::= "int" | "integer" | "bool" | "boolean" | "real" | "double" | "float" | "string" | "array" | "object" | "unset" ;
ElseIfStatement ::= "elseif" "(" Expr ")" NL Statement ;
ArrayValue ::= Expr | ("&" ObjectCVar) ;
InstanceOfUnaryExpr ::= "instanceof" UnaryExpr ;
xml_colon ::= "xml:" ;
tag_attribute ::= SP xml_colon? id_or_key "=" token ;
ForEachKey ::= ForEachVar "=>" ;
ControlStatement ::= ("break" Expr? ";" NL) | ("continue" Expr? ";" NL) | ("return" Expr? ";" NL) ;
ClassType ::= "class" | ("abstract" "class") | ("final" "class") ;
IfStatement ::= ("if" "(" Expr ")" NL Statement ElseIfStatement* ElseStatement?) | ("if" "(" Expr ")" ":" NL IN TopStatement* EX AltElseifStatement* AltElseStatement? "endif" ";" NL) ;
LogicalAndAssignmentExpr ::= "and" AssignmentExpr ;
AltElseifStatement ::= "elseif" "(" Expr ")" ":" NL IN TopStatement* EX ;
CallParam ::= "&"? Expr ;
AltElseStatement ::= "else" ":" NL IN TopStatement* EX ;
EchoStatement ::= "echo" {Expr ","}+ ";"? NL ;
id_or_key ::= (id "-"? id?) | key ;
CallParams ::= "(" {CallParam ","}* ")" ;
ClassNameColonColon ::= ClassName "::" ;
ClassDecl ::= ClassType id NL ExtendsClause? ImplementsClause? "{" NL IN ClassMember* EX "}" NL ;
CatAddExpr ::= "." AddExpr ;
EqualityOp ::= "==" | "!=" | "===" | "!==" ;
Catch ::= "catch" "(" id TVariable ")" NL Block ;
tag ::= ("<" SPOFF bigtag_id tag_attribute* ">" SPON IN NL) | (EX FL "<" SPOFF "/" bigtag_id ">" SPON FL) | ("<" SPOFF "!"? id_or_key tag_attribute* ">" SPON NL) | ("<" SPOFF "/" id_or_key ">" SPON NL) | ("<" SPOFF id_or_key tag_attribute* "/>" SPON NL) ;
SimpleVariableName ::= id | ("$" SPOFF IdOrKey SPON) ;
ElseStatement ::= "else" NL Statement ;
TryStatement ::= "try" NL Block Catch* ;
InterfaceMember ::= VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL ;
ClassMember ::= (VarModifiers? FunctionDecl) | (VarModifiers? "abstract" VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL) | ("var" {InstanceVariable ","}+ ";" NL) | ("const" id "=" StaticScalar ";" NL) | (VarModifiers {InstanceVariable ","}+ ";" NL) ;
exit_value ::= "(" Expr? ")" ;
tag_token_or_key ::= tag | (";" NL) | token | key ;
OrLogicalXorExpr ::= "or" LogicalXorExpr ;
NullStatement ::= ";" NL ;
DoStatement ::= "do" NL Statement "while" "(" Expr ")" ";" NL ;
VariableExtension ::= ("[" Expr? "]") | ("{" Expr "}") ;
InequalityOp ::= "<>" | "<" | "<=" | ">" | ">=" ;
--------------------python::indent-cordy.bgf--------------------
indent ::= SP "INDENT" ;
compound ::= ("{" compoundtoken* "}") | ("[" compoundtokensquare* "]") | ("(" compoundtokenround* ")") ;
dedent ::= "DEDENT" SP ;
--------------------python::sorochan-cordy.bgf--------------------
not_test ::= "not"* endofline* comparison ;
for_stmt ::= "for" exprlist "in" testlist ":" suite else_clause? ;
long ::= (SPOFF "l" SPON) | (SPOFF "L" SPON) ;
del_stmt ::= "del" exprlist ;
fpdef ::= (id endofline?) | (SPOFF "(" SPON fplist endofline* ")" endofline?) ;
lambdef ::= "lambda" varargslist? ":" test ;
testplist_gexp ::= (test+ endofline? ","?) | (test endofline? gen_for) ;
as_name ::= "as" id ;
return_stmt ::= "return" testlist? ;
arglist ::= star_test? {argument ","}* comma_opt_star_test? ;
if_test ::= endofline* "if" or_test "else" test ;
sliceop ::= ":" test? ;
unary_op ::= "+" | "-" | "~" ;
decorator_arglist ::= SPOFF "(" SPON IN arglist? endofline* ")" EX ;
argument_value ::= (endofline* gen_for?) | ("=" endofline* test) ;
plist_if ::= "if" old_test plist_iter? ;
gen_if ::= "if" old_test gen_iter? ;
in_test ::= "in" test ;
is_expr ::= "=" endofline* assign_value ;
parameters ::= SPOFF "(" SPON varargslist? endofline* ")" ;
comma_opt_star_test ::= "," star_test? comma_opt_star_test? ;
fplist ::= fpdef+ ","? ;
yield_expr ::= "yield" testlist ;
listmaker ::= (endofline* test endofline* plist_for endofline*) | (endofline* {test ","}* ","? endofline*) ;
import_name ::= "import" dotted_as_names ;
global_stmt ::= "global" id+ ;
stringprefix ::= "r" | "u" | "ur" | "R" | "U" | "UR" | "Ur" | "uR" | "b" ;
old_lambdef ::= "lambda" varargslist? ":" old_test ;
augassign ::= "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**=" | "//=" ;
andop_and_test ::= endofline* "and" endofline* and_test ;
continue_stmt ::= "continue" ;
star_test ::= (endofline* "*" test) | (endofline* "**" test) ;
gen_for ::= "for" exprlist "in" or_test gen_iter? ;
xorop_expr ::= endofline* "^" endofline* xor_expr ;
except_clause ::= "except" except_test? ;
import_as_names ::= import_as_name+ ","? ;
atom ::= id | literal | ("(" IN endofline* yield_expr? endofline* ")" EX) | ("(" IN endofline* testplist_gexp endofline* ")" EX) | ("[" IN endofline* listmaker? "]" EX) | ("{" IN endofline* dictmaker? endofline* "}" EX) | ("`" testlist1 "`") ;
orop_expr ::= endofline* "|" endofline* expr ;
dictmaker ::= {dict_entry ","}* endofline* ","? endofline* ;
semicolon_small_stmt ::= ";" small_stmt ;
try_stmt ::= "try" ":" suite except_clause_suite* else_clause? finally_clause? ;
as_or_comma_test ::= ("as" test) | ("," test) ;
imag ::= (SPOFF "j" SPON) | (SPOFF "J" SPON) ;
as_id ::= "as" id ;
andop_and_expr ::= endofline* "&" endofline* and_expr ;
funcdef ::= "def" id parameters ":" suite ;
shift_op ::= "<<" | ">>" ;
comma_test ::= endofline? "," test ;
raise_stmt ::= "raise" test_list? ;
decorator ::= "@" dotted_name decorator_arglist? endofline endofline* ;
exec_stmt ::= "exec" expr in_test? comma_test? ;
pass_stmt ::= "pass" ;
else_clause ::= "else" ":" suite ;
simple_stmt ::= (small_stmt semicolon_small_stmt* ";"?) | comment ;
arith_op ::= "+" | "-" ;
trailer ::= (SPOFF "(" SPON IN arglist endofline* ")" EX) | ("[" IN subscriptlist "]" EX) | (endofline* "." endofline* id) ;
orop_or_test ::= endofline* "or" endofline* or_test ;
exp_factor ::= "**" factor ;
testlist ::= test+ endofline* ","? ;
testplist_safe ::= old_test+ ","? ;
with_var ::= "as" expr ;
indent ::= "INDENT" IN ;
fpdef_test_comma ::= fpdef_test "," ;
finally_clause ::= "finally" ":" suite ;
if_stmt ::= "if" test ":" suite elif_clause* else_clause? ;
dict_entry ::= endofline* test ":" endofline* test ;
subscriptlist ::= subscript+ "," endofline* ;
import_items ::= "*" | (endofline* SPOFF "(" SPON import_as_names endofline* ")") | (endofline* import_as_names) ;
varargslist ::= (fpdef_test_comma* endofline* "*" id) | (fpdef_test_comma* endofline* "*" id endofline? "," endofline* "**" id) | (fpdef_test_comma* endofline* "**" id) | (fpdef_test+ ","?) ;
with_stmt ::= "with" test with_var? ":" suite ;
assert_stmt ::= "assert" test comma_test? ;
print_stmt ::= "print" ">>"? {test ","}* ","? ;
plist_for ::= "for" endofline* exprlist "in" testplist_safe plist_iter? ;
while_stmt ::= "while" test ":" suite else_clause? ;
term_op ::= "*" | "/" | "%" | "//" ;
exprlist ::= expr+ endofline* ","? ;
comp_op ::= "<" | ">" | "==" | ">=" | "<=" | "<>" | "!=" | "in" | ("not" "in") | "is" | ("is" "not") ;
except_clause_suite ::= except_clause ":" suite ;
classdef ::= ("class" id? ":" suite) | ("class" id? SPOFF "(" SPON testlist? endofline* ")" ":" suite) ;
subscript ::= (endofline* "." "." "." endofline?) | (endofline* test endofline?) | (endofline* test? ":" test? sliceop? endofline?) ;
elif_clause ::= "elif" test ":" suite ;
dot_dotted_name ::= endofline* "." endofline* dotted_name ;
break_stmt ::= "break" ;
dedent ::= "DEDENT" EX ;
is_test ::= "=" endofline* test ;
import_from ::= "from" "."* dotted_name? endofline* "import" import_items ;
testlist1 ::= {test ","}* ;
--------------------markup::cml.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------markup::cnf.bgf--------------------
Dimacs ::= prologue::Prologue lines::({Line "\n"}+) "\n" ;
--------------------markup::csv-rascal-concrete.bgf--------------------
Record ::= [record] {Field ","}+ ;
--------------------markup::ebxml.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------markup::docbook-walsh.bgf--------------------
parameter.attlist ::= (class::("command" | "function" | "option"))? moreinfo.attrib common.attrib parameter.role.attrib local.parameter.attrib ;
bridgehead.attlist ::= (renderas::("other" | "sect1" | "sect2" | "sect3" | "sect4" | "sect5"))? common.attrib bridgehead.role.attrib local.bridgehead.attrib ;
substeps.attlist ::= (performance::("optional" | "required"))? common.attrib substeps.role.attrib local.substeps.attrib ;
qandaset.attlist ::= (defaultlabel::("qanda" | "number" | "none"))? common.attrib qandaset.role.attrib local.qandaset.attrib ;
videodata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib videodata.role.attrib local.videodata.attrib ;
constant.attlist ::= (class::"limit")? common.attrib constant.role.attrib local.constant.attrib ;
tfoot.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
citetitle.attlist ::= (pubwork::("article" | "book" | "chapter" | "part" | "refentry" | "section" | "journal" | "series" | "set" | "manuscript"))? common.attrib citetitle.role.attrib local.citetitle.attrib ;
bibliocoverage.attlist ::= (spatial::("dcmipoint" | "iso3166" | "dcmibox" | "tgn" | "otherspatial"))? (otherspatial::string())? (temporal::("dcmiperiod" | "w3c-dtf" | "othertemporal"))? (othertemporal::string())? common.attrib bibliocoverage.role.attrib local.bibliocoverage.attrib ;
row.attlist ::= (rowsep::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
literallayout.attlist ::= width.attrib linespecific.attrib (class::("monospaced" | "normal"))? common.attrib literallayout.role.attrib local.literallayout.attrib ;
symbol.attlist ::= (class::"limit")? common.attrib symbol.role.attrib local.symbol.attrib ;
arg.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib arg.role.attrib local.arg.attrib ;
tbody.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
thead.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
sect5.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect4"))? label.attrib status.attrib common.attrib sect5.role.attrib local.sect5.attrib ;
sect4.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect5"))? label.attrib status.attrib common.attrib sect4.role.attrib local.sect4.attrib ;
medialabel.attlist ::= (class::("cartridge" | "cdrom" | "disk" | "tape"))? common.attrib medialabel.role.attrib local.medialabel.attrib ;
application.attlist ::= (class::("hardware" | "software"))? moreinfo.attrib common.attrib application.role.attrib local.application.attrib ;
simplelist.attlist ::= (columns::string())? (type::("inline" | "vert" | "horiz"))? common.attrib simplelist.role.attrib local.simplelist.attrib ;
sect3.attlist ::= (renderas::("sect1" | "sect2" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect3.role.attrib local.sect3.attrib ;
sect2.attlist ::= (renderas::("sect1" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect2.role.attrib local.sect2.attrib ;
replaceable.attlist ::= (class::("command" | "function" | "option" | "parameter"))? common.attrib replaceable.role.attrib local.replaceable.attrib ;
sect1.attlist ::= (renderas::("sect2" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect1.role.attrib local.sect1.attrib ;
table.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno)? (rowsep::yesorno)? tbl.table.att bodyatt secur ;
area.attlist ::= label.attrib linkends.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib area.role.attrib local.area.attrib ;
methodparam.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib methodparam.role.attrib local.methodparam.attrib ;
classsynopsis.attlist ::= (language::string())? (class::("class" | "interface"))? common.attrib classsynopsis.role.attrib local.classsynopsis.attrib ;
step.attlist ::= (performance::("optional" | "required"))? common.attrib step.role.attrib local.step.attrib ;
entrytbl.attlist ::= cols::string() tbl.tgroup.att (colname::string())? (spanname::string())? (namest::string())? (nameend::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
orderedlist.attlist ::= (numeration::("arabic" | "upperalpha" | "loweralpha" | "upperroman" | "lowerroman"))? (inheritnum::("inherit" | "ignore"))? (continuation::("continues" | "restarts"))? (spacing::("normal" | "compact"))? common.attrib orderedlist.role.attrib local.orderedlist.attrib ;
tgroup.attlist ::= cols::string() tbl.tgroup.att (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
areaspec.attlist ::= (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? common.attrib areaspec.role.attrib local.areaspec.attrib ;
sgmltag.attlist ::= (class::("attribute" | "attvalue" | "element" | "endtag" | "emptytag" | "genentity" | "numcharref" | "paramentity" | "pi" | "xmlpi" | "starttag" | "sgmlcomment"))? common.attrib sgmltag.role.attrib local.sgmltag.attrib ;
filename.attlist ::= (class::("headerfile" | "partition" | "devicefile" | "libraryfile" | "directory" | "extension" | "symlink"))? (path::string())? moreinfo.attrib common.attrib filename.role.attrib local.filename.attrib ;
biblio.class.attrib ::= (class::("uri" | "doi" | "isbn" | "issn" | "libraryofcongress" | "pubnumber" | "other"))? (otherclass::string())? ;
imagedata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib imagedata.role.attrib local.imagedata.attrib ;
spanspec.attlist ::= namest::string() nameend::string() spanname::string() (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
moreinfo.attrib ::= (moreinfo::("refentry" | "none"))? ;
systemitem.attlist ::= (class::("constant" | "event" | "eventhandler" | "domainname" | "fqdomainname" | "ipaddress" | "netmask" | "etheraddress" | "groupname" | "library" | "macro" | "osname" | "filesystem" | "resource" | "systemname" | "username" | "newsgroup"))? moreinfo.attrib common.attrib systemitem.role.attrib local.systemitem.attrib ;
itemizedlist.attlist ::= (spacing::("normal" | "compact"))? mark.attrib common.attrib itemizedlist.role.attrib local.itemizedlist.attrib ;
linespecific.attrib ::= (format::"linespecific")? (linenumbering::("numbered" | "unnumbered"))? ;
revisionflag.attrib ::= (revisionflag::("changed" | "added" | "deleted" | "off"))? ;
tbl.table.att ::= (tabstyle::string())? (tocentry::yesorno)? (shortentry::yesorno)? (orient::("port" | "land"))? (pgwide::yesorno)? ;
group.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib group.role.attrib local.group.attrib ;
indexterm.attlist ::= pagenum.attrib (scope::("all" | "global" | "local"))? (significance::("preferred" | "normal"))? (class::("singular" | "startofrange" | "endofrange"))? (startref::string())? (zone::string())? common.attrib indexterm.role.attrib local.indexterm.attrib ;
graphics.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? local.graphics.attrib ;
database.attlist ::= (class::("name" | "table" | "field" | "key1" | "key2" | "record"))? moreinfo.attrib common.attrib database.role.attrib local.database.attrib ;
notation.class ::= "BMP" | "CGM-CHAR" | "CGM-BINARY" | "CGM-CLEAR" | "DITROFF" | "DVI" | "EPS" | "EQN" | "FAX" | "GIF" | "GIF87a" | "GIF89a" | "JPG" | "JPEG" | "IGES" | "PCX" | "PIC" | "PNG" | "PS" | "SGML" | "TBL" | "TEX" | "TIFF" | "WMF" | "WPG" | "SVG" | "linespecific" | local.notation.class ;
colspec.attlist ::= (colnum::string())? (colname::string())? (colwidth::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
productname.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib productname.role.attrib local.productname.attrib ;
informaltable.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno.attvals)? (rowsep::yesorno.attvals)? common.table.attribs tbl.table.att local.informaltable.attrib ;
article.attlist ::= (class::("journalarticle" | "productsheet" | "whitepaper" | "techreport" | "specification" | "faq"))? (parentbook::string())? status.attrib common.attrib article.role.attrib local.article.attrib ;
areaset.attlist ::= label.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib areaset.role.attrib local.areaset.attrib ;
bibliorelation.type.attrib ::= (type::("isversionof" | "hasversion" | "isreplacedby" | "replaces" | "isrequiredby" | "requires" | "ispartof" | "haspart" | "isreferencedby" | "references" | "isformatof" | "hasformat" | "othertype" | local.bibliorelation.types))? (othertype::string())? ;
entry.attlist ::= (colname::string())? (namest::string())? (nameend::string())? (spanname::string())? (morerows::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? (rotate::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
keyaction.attrib ::= (action::("click" | "double-click" | "press" | "seq" | "simul" | "other"))? (otheraction::string())? local.keyaction.attrib ;
trademark.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib trademark.role.attrib local.trademark.attrib ;
orgname.attlist ::= common.attrib (class::("corporation" | "nonprofit" | "consortium" | "informal" | "other"))? (otherclass::string())? orgname.role.attrib local.orgname.attrib ;
--------------------markup::kml.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------markup::graphml-doux.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------markup::json-rascal-abstract.bgf--------------------
Value ::= (null::ε) | (object::(members::((memberName::string() memberValue::Value)*))) | (array::(values::(Value*))) | (integer::(n::integer())) | (float::(r::integer())) | (string::(s::string())) | (boolean::(b::("true" | "false"))) ;
--------------------markup::json-rascal-concrete.bgf--------------------
Object ::= [Object] "{" members::({Member ","}*) "}" ;
Member ::= [Member] memberName::StringLiteral ":" memberValue::Value ;
Array ::= [Array] "[" values::({Value ","}*) "]" ;
Value ::= NumericLiteral ;
 Value ::= StringLiteral ;
 Value ::= [True] "true" ;
 Value ::= Object ;
 Value ::= Array ;
 Value ::= [Null] "null" ;
 Value ::= [False] "false" ;
--------------------markup::json-zaytsev-abstract.bgf--------------------
JSO ::= (jsnumber::(n::integer())) | (jsstring::(s::string())) | (jsboolean::(b::("true" | "false"))) | (jsarray::(xs::(JSO*))) | (jsobject::(kvs::((JSO JSO)*))) | (jsnull::ε) ;
--------------------markup::json-zaytsev-concrete.bgf--------------------
JSONNull ::= "null" ;
JSONKeyValue ::= key::JSONBasicType ":" val::JSONBasicType ;
JSONObject ::= "{" {JSONKeyValue ","}* "}" ;
JSONNumber ::= "-"? Digits ("." Digits)? ;
JSONArray ::= "[" {JSONBasicType ","}* "]" ;
JSONBoolean ::= "false" ;
 JSONBoolean ::= "true" ;
--------------------markup::mathml-furubayashi.bgf--------------------
mml.att-equalrows ::= (equalrows::("true" | "false"))? ;
mml.alignmentscope.datatype ::= ("true" | "false")+ ;
mml.att-actiontype ::= ((actiontype::"toggle" selection::mml.positiveinteger.datatype) | (actiontype::"statusline") | (actiontype::"tooltip") | (actiontype::"highlight" mml.color.datatype*) | (actiontype::"menu" selection::mml.positiveinteger.datatype))? ;
mml.att-displaystyle ::= (displaystyle::("true" | "false"))? ;
mml.att-linebreak ::= (linebreak::("auto" | "newline" | "indentingnewline" | "nobreak" | "goodbreak" | "badbreak"))? ;
mml.att-nargs ::= (nargs::("nary" | mml.number.datatype))? ;
mml.framespacing.datatype ::= string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") ;
mml.att-movablelimits ::= (movablelimits::("true" | "false"))? ;
mml.att-equalcolumns ::= (equalcolumns::("true" | "false"))? ;
mml.att-fontstyle ::= (fontstyle::("normal" | "italic"))? ;
mml.att-linethickness ::= (linethickness::(mml.length.datatype | "thin" | "medium" | "thick"))? ;
mml.color.datatype ::= string() | string() | "transparent" ;
mml.att-mathvariant ::= (mathvariant::("normal" | "bold" | "italic" | "bold-italic" | "double-struck" | "bold-fraktur" | "script" | "bold-script" | "fraktur" | "sans-serif" | "bold-sans-serif" | "sans-serif-italic" | "sans-serif-bold-italic" | "monospace"))? ;
mml.att-closure ::= (closure::("open" | "closed" | "open-closed" | "closed-open"))? ;
mml.att-symmetric ::= (symmetric::("true" | "false"))? ;
mml.columnspacing.datatype ::= (string() string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace")+ ;
mml.columnalign.datatype ::= ("left" | "center" | "right")+ ;
mml.rowalign.datatype ::= ("top" | "bottom" | "center" | "baseline" | "axis")+ ;
mml.att-fence ::= (fence::("true" | "false"))? ;
mml.namedspace.datatype ::= string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace" ;
mml.att-stretchy ::= (stretchy::("true" | "false"))? ;
mml.att-bevelled ::= (bevelled::("true" | "false"))? ;
mml.att-frame ::= (frame::("none" | "solid" | "dashed"))? ;
mml.att-occurrence ::= (occurrence::("prefix" | "infix" | "function-model"))? ;
mml.att-accent ::= (accent::("true" | "false"))? ;
mml.att-maxsize ::= (maxsize::(mml.namedspace.datatype | "infinity"))? ;
mml.att-separator ::= (separator::("true" | "false"))? ;
mml.att-mathsize ::= (mathsize::("small" | "normal" | "big" | mml.length.datatype))? ;
mml.att-rowspan ::= (rowspan::("top" | "bottom" | "center" | "baseline" | "axis"))? ;
mml.att-fontweight ::= (fontweight::("normal" | "bold"))? ;
mml.lines.datatype ::= ("none" | "solid" | "dashed")+ ;
mml.menclose.qname ::= menclose::(mml.PresExpression mml.Common.attrib (notation::("longdiv" | "actuarial" | "radical"))?) ;
mml.att-form ::= (form::("prefix" | "infix" | "postfix"))? ;
mml.att-overflow ::= (overflow::("scroll" | "elide" | "truncate" | "scale"))? ;
mml.align.datatype ::= "top" | "bottom" | "center" | "baseline" | "axis" integer()? ;
mml.att-largeop ::= (largeop::("true" | "false"))? ;
mml.att-edge ::= (edge::("left" | "right"))? ;
mml.att-type ::= (type::("e-notation" | "integer" | "rational" | "real" | "float" | "complex-polar" | "complex-cartesian" | "constant"))? ;
mml.att-scope ::= (scope::("local" | "global"))? ;
mml.columnwidth.datatype ::= ("auto" | string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") | "fit")+ ;
mml.att-accentunder ::= (accentunder::("true" | "false"))? ;
mml.att-order ::= (order::("lexicographic" | "numeric"))? ;
--------------------markup::pnml-booleans.bgf--------------------
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
--------------------markup::r2ml.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------markup::pnml-ext-inhibitor.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-ext-reset.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-ext-resetinhibitor.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-ext-specialarcs.bgf--------------------
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
--------------------markup::pnml-highlevelnet.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/highlevelnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/symmetricnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-hlpng.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pt-hlpng" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-pnmlcoremodel.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-ptnet.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-symmetricnet.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/symmetricnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::svg-furubayashi-basic.bgf--------------------
SVG.Font.attrib ::= ε ;
 SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-size-adjust::SVG.FontSizeAdjustValue.datatype)? (font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit"))? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-variant::("normal" | "small-caps" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
SVG.clipPath ::= clipPath::(SVG.Description.class* (SVG.Animation.class | SVG.Use.class)* SVG.Shape.class? SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (clipPathUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)? (contentScriptType::SVG.ContentType.datatype)? (contentStyleType::SVG.ContentType.datatype)?) ;
SVG.TextContent.attrib ::= ε ;
 SVG.TextContent.attrib ::= (alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (baseline-shift::SVG.BaselineShiftValue.datatype)? (direction::("ltr" | "rtl" | "inherit"))? (dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype)? (glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype)? (kerning::SVG.KerningValue.datatype)? (letter-spacing::SVG.SpacingValue.datatype)? (text-anchor::("start" | "middle" | "end" | "inherit"))? (text-decoration::SVG.TextDecorationValue.datatype)? (unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit"))? (word-spacing::SVG.SpacingValue.datatype)? SVG.TextContent.extra.attrib ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.color-interpolation.attrib ::= (color-interpolation::("auto" | "sRGB" | "linearRGB" | "inherit"))? ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.pattern ::= pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (patternUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternContentUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternTransform::SVG.TransformList.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.text-rendering.attrib ::= (text-rendering::("auto" | "optimizeSpeed" | "optimizeLegibility" | "geometricPrecision" | "inherit"))? ;
SVG.filter ::= filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (filterRes::SVG.NumberOptionalNumber.datatype)? (filterUnits::("userSpaceOnUse" | "objectBoundingBox"))? (primitiveUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Text.attrib ::= ε ;
 SVG.Text.attrib ::= (writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"))? SVG.Text.extra.attrib ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
SVG.linearGradient ::= linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.radialGradient ::= radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? (r::SVG.Length.datatype)? (fx::SVG.Coordinate.datatype)? (fy::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.FilterColor.attrib ::= (color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit"))? SVG.FilterColor.extra.attrib ;
 SVG.FilterColor.attrib ::= ε ;
SVG.mask ::= mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (maskUnits::("userSpaceOnUse" | "objectBoundingBox"))? (maskContentUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.overflow.attrib ::= (overflow::("visible" | "hidden" | "scroll" | "auto" | "inherit"))? ;
SVG.tref ::= tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.image-rendering.attrib ::= (image-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.pointer-events.attrib ::= (pointer-events::("visiblePainted" | "visibleFill" | "visibleStroke" | "visible" | "painted" | "fill" | "stroke" | "all" | "none" | "inherit"))? ;
SVG.shape-rendering.attrib ::= (shape-rendering::("auto" | "optimizeSpeed" | "crispEdges" | "geometricPrecision" | "inherit"))? ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
--------------------markup::svg-furubayashi-tiny.bgf--------------------
SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
 SVG.Font.attrib ::= ε ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)?) ;
SVG.TextContent.attrib ::= (text-anchor::("start" | "middle" | "end" | "inherit"))? SVG.TextContent.extra.attrib ;
 SVG.TextContent.attrib ::= ε ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
--------------------markup::svg-furubayashi.bgf--------------------
SVG.Font.attrib ::= ε ;
 SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-size-adjust::SVG.FontSizeAdjustValue.datatype)? (font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit"))? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-variant::("normal" | "small-caps" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
SVG.clipPath ::= clipPath::(SVG.Description.class* (SVG.Animation.class | SVG.Use.class | SVG.Shape.class | SVG.Text.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (clipPathUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)? (contentScriptType::SVG.ContentType.datatype)? (contentStyleType::SVG.ContentType.datatype)?) ;
SVG.TextContent.attrib ::= ε ;
 SVG.TextContent.attrib ::= (alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (baseline-shift::SVG.BaselineShiftValue.datatype)? (direction::("ltr" | "rtl" | "inherit"))? (dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype)? (glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype)? (kerning::SVG.KerningValue.datatype)? (letter-spacing::SVG.SpacingValue.datatype)? (text-anchor::("start" | "middle" | "end" | "inherit"))? (text-decoration::SVG.TextDecorationValue.datatype)? (unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit"))? (word-spacing::SVG.SpacingValue.datatype)? SVG.TextContent.extra.attrib ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.feConvolveMatrix ::= feConvolveMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib order::SVG.NumberOptionalNumber.datatype kernelMatrix::string() (divisor::SVG.Number.datatype)? (bias::SVG.Number.datatype)? (targetX::SVG.Integer.datatype)? (targetY::SVG.Integer.datatype)? (edgeMode::("duplicate" | "wrap" | "none"))? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)? (preserveAlpha::SVG.Boolean.datatype)?) ;
SVG.color-interpolation.attrib ::= (color-interpolation::("auto" | "sRGB" | "linearRGB" | "inherit"))? ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.pattern ::= pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (patternUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternContentUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternTransform::SVG.TransformList.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.feMorphology ::= feMorphology::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (operator::("erode" | "dilate"))? (radius::SVG.NumberOptionalNumber.datatype)?) ;
SVG.marker ::= marker::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (refX::SVG.Coordinate.datatype)? (refY::SVG.Coordinate.datatype)? (markerUnits::("strokeWidth" | "userSpaceOnUse"))? (markerWidth::SVG.Length.datatype)? (markerHeight::SVG.Length.datatype)? (orient::string())? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.text-rendering.attrib ::= (text-rendering::("auto" | "optimizeSpeed" | "optimizeLegibility" | "geometricPrecision" | "inherit"))? ;
SVG.filter ::= filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (filterRes::SVG.NumberOptionalNumber.datatype)? (filterUnits::("userSpaceOnUse" | "objectBoundingBox"))? (primitiveUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Text.attrib ::= ε ;
 SVG.Text.attrib ::= (writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"))? SVG.Text.extra.attrib ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
SVG.linearGradient ::= linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.feTurbulence ::= feTurbulence::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib (baseFrequency::SVG.NumberOptionalNumber.datatype)? (numOctaves::SVG.Integer.datatype)? (seed::SVG.Number.datatype)? (stitchTiles::("stitch" | "noStitch"))? (type::("fractalNoise" | "turbulence"))?) ;
SVG.feDisplacementMap ::= feDisplacementMap::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (scale::SVG.Number.datatype)? (xChannelSelector::("R" | "G" | "B" | "A"))? (yChannelSelector::("R" | "G" | "B" | "A"))?) ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.radialGradient ::= radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? (r::SVG.Length.datatype)? (fx::SVG.Coordinate.datatype)? (fy::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.FilterColor.attrib ::= ε ;
 SVG.FilterColor.attrib ::= (color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit"))? SVG.FilterColor.extra.attrib ;
SVG.mask ::= mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (maskUnits::("userSpaceOnUse" | "objectBoundingBox"))? (maskContentUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.overflow.attrib ::= (overflow::("visible" | "hidden" | "scroll" | "auto" | "inherit"))? ;
SVG.tref ::= tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.image-rendering.attrib ::= (image-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.pointer-events.attrib ::= (pointer-events::("visiblePainted" | "visibleFill" | "visibleStroke" | "visible" | "painted" | "fill" | "stroke" | "all" | "none" | "inherit"))? ;
SVG.shape-rendering.attrib ::= (shape-rendering::("auto" | "optimizeSpeed" | "crispEdges" | "geometricPrecision" | "inherit"))? ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
--------------------markup::svg-palies.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------markup::wiki-mediawiki-bnf.bgf--------------------
image-valign-text-bottom ::= "text-bottom" ;
title-legal-char ::= space | "%" | "!" | """ | "$" | "&" | "'" | "(" | ")" | "*" | "," | "-" | "." | "/" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | ":" | ";" | "=" | "?" | "@" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "\" | "^" | "_" | "`" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "~" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | " " | "¡" | "¢" | "£" | "¤" | "¥" | "¦" | "§" | "¨" | "©" | "ª" | "«" | "¬" | "­" | "®" | "¯" | "°" | "±" | "²" | "³" | "´" | "µ" | "¶" | "·" | "¸" | "¹" | "º" | "»" | "¼" | "½" | "¾" | "¿" | "À" | "Á" | "Â" | "Ã" | "Ä" | "Å" | "Æ" | "Ç" | "È" | "É" | "Ê" | "Ë" | "Ì" | "Í" | "Î" | "Ï" | "Ð" | "Ñ" | "Ò" | "Ó" | "Ô" | "Õ" | "Ö" | "×" | "Ø" | "Ù" | "Ú" | "Û" | "Ü" | "Ý" | "Þ" | "ß" | "à" | "á" | "â" | "ã" | "ä" | "å" | "æ" | "ç" | "è" | "é" | "ê" | "ë" | "ì" | "í" | "î" | "ï" | "ð" | "ñ" | "ò" | "ó" | "ô" | "õ" | "ö" | "÷" | "ø" | "ù" | "ú" | "û" | "ü" | "ý" | "þ" | "ÿ" | "+" ;
bullet-item ::= "*" (list-item | item-body)? ;
pre-opening-tag ::= "<pre" (whitespace characters?)? ">" ;
hex-digit ::= decimal-digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
LF ::= "\n" ;
image-valign-bottom ::= "bottom" ;
lcase-letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
isbn ::= "ISBN" spaces isbn-number ;
image-mode-frame ::= "framed" | "enframed" | "frame" ;
TAB ::= "\t" ;
image-valign-sub ::= "sub" ;
interwiki-prefix ::= interwiki ":" ;
article-link ::= (interwiki-prefix | ":")? namespace-prefix? article-title ;
 article-link ::= ((interwiki-prefix | ":")? namespace-prefix? article-title) | ("/" article-title) | ("../"* article-title?) ;
CR ::= "\r" ;
harmless-character ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
category-link ::= internal-link-start category-namespace ":" article-title (pipe sort-key)? internal-link-end ;
level-6-heading ::= "======" inline-text "======" space-tabs newline ;
image-align-right ::= "right" ;
level-5-heading ::= "=====" inline-text "=====" space-tabs newline ;
image-valign-middle ::= "middle" ;
level-4-heading ::= "====" inline-text "====" space-tabs newline ;
html-closing-tag ::= "</html" whitespace? ">" ;
level-3-heading ::= "===" inline-text "===" space-tabs newline ;
internal-link-start ::= "[[" ;
level-2-heading ::= "==" inline-text "==" space-tabs newline ;
pmid-number ::= "PMID" spaces digits ;
level-1-heading ::= "=" inline-text "=" space-tabs newline ;
table-row ::= "|-" CSS? newline table-column table-row? ;
pre-closing-tag ::= "</pre" whitespace? ">" ;
behaviourswitch-nogallery ::= "__NOGALLERY__" ;
sub-page-separator ::= "/" ;
definition ::= ":" inline-text ;
wiki-markup-characters ::= "|" | "[" | "]" | "*" | "#" | ":" | ";" | "<" | ">" | "=" | "'" | "{" | "}" ;
gallery-block ::= "<gallery>" newline? gallery-image (newline? gallery-image)* newline? "</gallery>" ;
plain-text ::= unicode-wiki | ("<nowiki>" ("|" | "[" | "]" | "<" | ">" | "{" | "}")* "</nowiki>") | (unicode-wiki space* "*" | "#" | ":" | ";") | (unicode-wiki space? "=" space? unicode-wiki) | (unicode-wiki "'") | ("'" unicode-wiki) ;
image-align-center ::= "center" | "centre" ;
table ::= "{|" (space table-parameters)? newline table-first-row "|}" ;
ucase-letter ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
image-extension ::= "jpg" | "jpeg" | "png" | "svg" | "gif" | "bmp" ;
category-namespace ::= "Category" ;
behaviourswitch-notoc ::= "__NOTOC__" ;
image-inline ::= "[[" "Image:" page-name "." image-extension (pipe image-option)* "]]" ;
external-link-end ::= "]" ;
nowiki-opening-tag ::= "<nowiki" (whitespace characters?)? ">" ;
bold-italic-toggle ::= "'''''" ;
bad-title-characters ::= "[" | "]" | "{" | "}" | "<" | ">" | "_" | "|" | "#" ;
html-entity ::= ("&" html-entity-name ";") | ("&#" decimal-number ";") | ("&#x" hex-number ";") ;
namespace-prefix ::= namespace? ":" ;
article-title ::= page sub-page* ;
 article-title ::= (title-legal-char | "%")* ;
enumerated-item ::= "#" (list-item | item-body)? ;
dashes ::= "-"+ ;
html-comment ::= "<!--" characters? "-->" ;
image-name ::= page-name "." image-extension ;
underscore ::= "_" ;
unescaped-greater-than ::= ">" ;
image-align-none ::= "none" ;
unescaped-ampersand ::= "&" ;
decimal-digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
defined-term ::= ";" text definition? ;
image-mode-auto-thumb ::= "thumbnail" | "thumb" ;
image-valign-super ::= "super" | "sup" ;
image-param-upright ::= "upright" ("="? digits)? ;
pipe ::= "|" ;
behaviourswitch-toc ::= "__TOC__" ;
redirect-tag ::= "#redirect" ;
rfc-number ::= "RFC" spaces digits ;
nowiki-closing-tag ::= "</nowiki" whitespace? ">" ;
media-inline ::= "[[" "Media:" page-name "." media-extension "]]" ;
gallery-image ::= image-name ("|" caption)? ;
behaviourswitch-noeditsection ::= "__NOEDITSECTION__" ;
image-param-border ::= "border" ;
bold-toggle ::= "'''" ;
behaviourswitch-forcetoc ::= "__FORCETOC__" ;
protocol ::= "http://" | "https://" | "ftp://" | "ftps://" | "mailto:" ;
internal-link-end ::= "]]" ;
symbol ::= html-unsafe-symbol | underscore | "." | "," ;
media-extension ::= "ogg" | "wav" ;
table-column-multiline ::= "|" (table-cell-parameters "|")? any-text newline table-column-multiline? ;
indent-item ::= ":" (list-item | item-body)? ;
unescaped-less-than ::= "<" ;
italic-toggle ::= "''" ;
image-valign-baseline ::= "baseline" ;
external-link-start ::= "[" ;
image-size-parameter ::= digits "px" ;
image-mode-frameless ::= "frameless" ;
table-column-line ::= "|" inline-text ("|" table-column-line)? ;
interwiki ::= "Wikipedia" ;
internal-link ::= internal-link-start article-link ("#" section-id)? (pipe link-description?)? internal-link-end extra-description? ;
image-valign-top ::= "top" ;
image-mode-manual-thumb ::= ("thumbnail=" image-name) | ("thumb=" image-name) ;
space ::= " " ;
horizontal-rule ::= "----" dashes? inline-text? newline ;
html-opening-tag ::= "<html" (whitespace characters?)? ">" ;
section-id ::= (title-legal-char | "%" | "#")* ;
image-align-left ::= "left" ;
image-valign-text-top ::= "text-top" ;
image-param-page ::= "page=$1" | "page $1" ;
isbn-number ::= "97" "8" | "9" (space | "-")? decimal-digit (space | "-")? "9"* decimal-digit | "X" | "x" ;
--------------------markup::wiki-mediawiki-ebnf.bgf--------------------
internal_link ::= start_link full_pagename ("|" label)? end_link label_extension ;
template ::= "{{" title ("|" part)* "}}" ;
horizontal_rule ::= "----" "-"* ;
start_link ::= "[[" ;
current_date ::= "~~~~~" ;
ASCII_letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
table_cell ::= (line_break "|" (style | whitespace)* text) | (table_cell "||" (style | whitespace)* text) ;
part ::= (name "=")? value ;
continue_definition_list ::= definition_list | continue_definition_list | ":" | "*" | "#" line_break definition_list ;
table_start ::= "{|" (style | whitespace)* line_break ;
nowiki ::= "<nowiki>" text "</nowiki>" ;
place_TOC ::= (whitespace | line_break)* "__TOC__" (whitespace | line_break)* ;
ordered_list ::= "#" text ;
digit ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0" ;
header_link ::= "/*" text "*/" ;
table_end ::= "|}" ;
table_row ::= line_break "|-" "-"* (style | whitespace)* line_break ;
bold_text ::= "'''" text "'''" ;
tplarg ::= "{{{" title ("|" part)* "}}}" ;
table_header_cell ::= (line_break "!" (style | whitespace)* text) | (table_cell "!!" | "||" (style | whitespace)* text) ;
ISBN_link ::= digit ("-" | " ")? digit digit digit ("-" | " ")? digit digit digit digit digit ("-" | " " digit | "X" | "x")? ;
bold_italic_text ::= "'''''" text "'''''" ;
continue_unordered_list ::= unordered_list | continue_unordered_list | ":" | "*" | "#" line_break unordered_list ;
comment ::= "<!--" Text? "-->" ;
table_header ::= "|+" text line_break ;
end_link ::= "]]" ;
redirect ::= "#REDIRECT" internal_link ;
italic_text ::= "''" text "''" ;
disable_section_edit ::= (whitespace | line_break)* "__NOEDITSECTION__" (whitespace | line_break)* ;
force_TOC ::= (whitespace | line_break)* "__FORCETOC__" (whitespace | line_break)* ;
disable_TOC ::= (whitespace | line_break)* "__NOTOC__" (whitespace | line_break)* ;
URL ::= ASCII_letter* "://" URL_char* ;
user_signature_with_date ::= "~~~~" ;
definition_list ::= text? ":" text ;
full_pagename ::= ((namespace ":") | ":")? pagename ;
unordered_list ::= "*" text ;
Commentary ::= "<comment" Text? ">" Text? "</comment>" ;
header6 ::= line_break "======" whitespace? text whitespace? "======" header_end ;
continue_ordered_list ::= ordered_list | continue_ordered_list | ":" | "*" | "#" line_break ordered_list ;
header5 ::= line_break "=====" whitespace? text whitespace? "=====" header_end ;
header4 ::= line_break "====" whitespace? text whitespace? "====" header_end ;
code_line ::= line_break " " text ;
header3 ::= line_break "===" whitespace? text whitespace? "===" header_end ;
URL_char ::= ASCII_letter | digit | "-" | "_" | "." | "~" | "!" | "*" | "'" | "(" | ")" | ";" | ":" | "@" | "&" | "=" | "+" | "$" | "," | "/" | "?" | "%" | "#" | "[" | "]" ;
header2 ::= line_break "==" whitespace? text whitespace? "==" header_end ;
user_signature ::= "~~~" ;
header1 ::= line_break "=" whitespace? text whitespace? "=" header_end ;
--------------------markup::wiki-simple.bgf--------------------
WikiLink ::= [barred] "[[" destination::PageName "|" description::(MWWord+) "]]" ;
 WikiLink ::= [simple] "[[" destination::PageName "]]" ;
--------------------markup::wiki-table.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------fl::antlr.bgf--------------------
function ::= n::ID (a::ID)+ "=" e::expr NEWLINE+ ;
ifThenElse ::= "if" c::expr "then" e1::expr "else" e2::expr ;
ops ::= "==" | "+" | "-" ;
atom ::= ID | INT | ("(" e::expr ")") ;
--------------------fl::dcg.bgf--------------------
function ::= name name+ "=" expr newline+ ;
expr ::= [binary] atom (ops atom)* ;
 expr ::= [apply] name atom+ ;
 expr ::= [ifThenElse] "if" expr "then" expr "else" expr ;
ops ::= [equal] "==" ;
 ops ::= [plus] "+" ;
 ops ::= [minus] "-" ;
atom ::= [literal] int ;
 atom ::= [argument] name ;
 atom ::= "(" expr ")" ;
--------------------fl::python.bgf--------------------
operators ::= "==" | "+" | "-" ;
literal ::= "-"? integer() ;
_THEN ::= "then" ;
_IF ::= "if" ;
function ::= name name+ "=" expr ;
_ELSE ::= "else" ;
atom ::= name | literal | ("(" expr ")") ;
--------------------fl::rascal-c.bgf--------------------
Function ::= [fun] f::Name args::(Name+) "=" body::Expr ;
Expr ::= [ifThenElse] "if" cond::Expr "then" thenbranch::Expr "else" elsebranch::Expr ;
 Expr ::= "(" e::Expr ")" ;
 Expr ::= [literal] i::Int ;
 Expr ::= [argument] a::Name ;
 Expr ::= [binary] lexpr::Expr op::Ops rexpr::Expr ;
 Expr ::= [apply] f::Name vargs::(Expr+) ;
Program ::= [prg] functions::({Function "\n"}+) ;
Ops ::= [plus] "+" ;
 Ops ::= [equal] "==" ;
 Ops ::= [minus] "-" ;
--------------------fl::rascal.bgf--------------------
Function ::= Name Name+ "=" Expr Newline ;
Expr ::= [binary] Expr Ops Expr ;
 Expr ::= [apply] Name Expr+ ;
 Expr ::= [ifThenElse] "if" Expr "then" Expr "else" Expr ;
 Expr ::= "(" Expr ")" ;
 Expr ::= [argument] Name ;
 Expr ::= [literal] Int ;
Ops ::= [minus] "-" ;
 Ops ::= [plus] "+" ;
 Ops ::= [equal] "==" ;
--------------------fl::sdf.bgf--------------------
Function ::= Name Name+ "=" Expr Newline+ ;
Expr ::= [binary] Expr Ops Expr ;
 Expr ::= [apply] Name Expr+ ;
 Expr ::= [ifThenElse] "if" Expr "then" Expr "else" Expr ;
 Expr ::= "(" Expr ")" ;
 Expr ::= [argument] Name ;
 Expr ::= [literal] Int ;
Ops ::= [minus] "-" ;
 Ops ::= [plus] "+" ;
 Ops ::= [equal] "==" ;
--------------------fl::txl.bgf--------------------
fun ::= id id+ "=" expression newline ;
expression ::= (expression op expression) | (id expression+) | ("if" expression "then" expression "else" expression) | ("(" expression ")") | id | number ;
op ::= "+" | "-" | "==" ;
--------------------metasyntax::bnf-sdf.bgf--------------------
Element ::= NonTerminal | Terminal | ("[" Element ("|" Element)* "]") | ("{" Element ("|" Element)* "}") | "|" | "[" | "]" | "{" | "}" | "<" | ">" | "..." | "::=" | (Element Element) ;
Rule ::= NonTerminal "::=" Elements ;
NonTerminal ::= "<" string() ">" ;
Elements ::= Element ("|" Element)* ;
--------------------metasyntax::txl.bgf--------------------
eachArgs ::= SP "each" varidOrLiteral* ;
formatCue ::= "[" formatId "]" ;
condition ::= (EX "where" "not"? "all"? NL IN commentNL* expression NL) | (EX "assert" "not"? "all"? NL IN commentNL* expression NL) ;
commentsStatement ::= "comments" NL IN commentConvention* EX "end" "comments" NL NL ;
keysStatement ::= "keys" NL IN keyword* EX NL "end" "keys" NL NL ;
constructor ::= EX "construct" varid SP type NL IN replacement ;
type ::= formatCues | ("[" typeSpec "]") ;
deconstructor ::= EX skippingType? "deconstruct" "not"? "*"? type? varid NL IN pattern ;
barLiteralsAndTypes ::= EX "|" TAB IN literalOrType* NL ;
ruleid ::= id | special | "#" | key ;
functionStatement ::= ("function" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "replace" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX "by" NL IN replacement EX EX "end" "function" NL NL) | ("function" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "match" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX EX "end" "function" NL NL) ;
tokenPattern ::= (typeid TAB_24 stringlit NL) | (TAB_16 "|" TAB_24 stringlit NL) | (typeid TAB_16 "..."? "|" TAB_24 stringlit NL) | (typeid TAB_16 "+" TAB_24 stringlit NL) | (comment NL) ;
barDotDotDot ::= EX "|" TAB IN "..." NL ;
typeSpec ::= (typeModifier? typeid typeRepeater?) | "!" ;
tokensStatement ::= "tokens" NL IN tokenPattern* EX "end" "tokens" NL NL ;
ruleApplication ::= (SP "[" ruleid varidOrLiteral* eachArgs? "]" commentNL*) | (SP lengthrule varidOrLiteral* eachArgs? "]" commentNL*) ;
defineStatement ::= "define" typeid NL IN IN literalOrType* NL barLiteralsAndTypes* EX EX "end" "define" NL NL RESET ;
ruleStatement ::= ("rule" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "replace" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX "by" NL IN replacement EX EX "end" "rule" NL NL) | ("rule" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "match" dollarStar? SP type NL IN pattern EX EX constructDeconstructImportExportOrCondition* "end" "rule" NL NL) ;
importer ::= EX "import" varid type? NL IN pattern? ;
formatId ::= "NL" | ("IN" IN) | ("EX" EX) ;
typeModifier ::= "opt" | "repeat" | "list" | "attr" | "see" | "not" | "push" | "pop" | ":" | "~" | ">" | "<" ;
unquotedLiteral ::= (SP "'") | token ;
dollarStar ::= (SP "$") | (SP "*") ;
redefineOrDefine ::= "redefine" | "define" ;
skippingType ::= "skipping" SP type commentNL* ;
dotDotDotBar ::= "..." EX NL "|" TAB IN ;
quotedLiteral ::= ("'" unquotedLiteral) | ("'" key) ;
compoundsStatement ::= "compounds" NL IN compound* EX NL "end" "compounds" NL NL ;
includeStatement ::= "include" stringlit NL ;
externalStatement ::= ("external" "rule" ruleid formalArgument* NL NL) | ("external" "function" ruleid formalArgument* NL NL) ;
typeRepeater ::= "+" | "*" | "?" | "," | ",+" ;
exporter ::= EX "export" varid type? NL IN replacement? ;
redefineStatement ::= "redefine" typeid NL IN IN dotDotDotBar? literalOrType* NL barLiteralsAndTypes* barDotDotDot? EX EX "end" redefineOrDefine NL NL RESET ;
--------------------metasyntax::ebnf-bgf.bgf--------------------
selectable-expression ::= selector::string() "::" expression ;
definition-separator-metasymbol ::= "\n" " " ;
end-group-metasymbol ::= ")" ;
empty ::= "EMPTY" ;
end-terminal-metasymbol ::= """ ;
optionality-metasymbol ::= "?" ;
any ::= "ANY" ;
epsilon ::= "EPSILON" ;
repetition-metasymbol ::= "+" | "*" ;
marked-expression ::= "<" expression ">" ;
start-group-metasymbol ::= "(" ;
label ::= "[" string() "]" ;
start-terminal-metasymbol ::= """ ;
definition ::= expression (" " expression)* ;
terminator-metasymbol ::= "\n" ;
defining-metasymbol ::= ":" ;
value ::= "INT" | "STR" ;
--------------------metasyntax::ebnf-iso-1.bgf--------------------
start_repeat_symbol ::= "{" | "(:" ;
defining_symbol ::= "=" ;
decimal_digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
except_symbol ::= "-" ;
end_option_symbol ::= "]" | "/)" ;
definition_separator_symbol ::= "|" | "/" | "!" ;
vertical_tabulation_character ::= "\v" ;
end_group_symbol ::= ")" ;
end_comment_symbol ::= "*)" ;
other_character ::= " " | ":" | "+" | "_" | "%" | "@" | "&" | "#" | "$" | "<" | ">" | "\" | "^" | "‘" | "~" ;
form_feed ::= "\f" ;
end_repeat_symbol ::= "}" | ":)" ;
start_group_symbol ::= "(" ;
start_comment_symbol ::= "(*" ;
new_line ::= "\r"* "\n" "\r"* ;
space_character ::= " " ;
terminator_symbol ::= ";" | "." ;
special_sequence_symbol ::= "?" ;
horizontal_tabulation_character ::= "\t" ;
first_quote_symbol ::= "’" ;
second_quote_symbol ::= """ ;
repetition_symbol ::= "*" ;
letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
start_option_symbol ::= "[" | "(/" ;
concatenate_symbol ::= "," ;
--------------------metasyntax::ebnf-iso-2.bgf--------------------
comment ::= "(*" comment_symbol* "*)" ;
factor ::= (integer "*")? primary ;
definitions_list ::= single_definition ("|" single_definition)* ;
term ::= factor ("-" exception)? ;
single_definition ::= term ("," term)* ;
syntax_rule ::= meta_identifier "=" definitions_list ";" ;
special_sequence ::= "?" character* "?" ;
repeated_sequence ::= "{" definitions_list "}" ;
terminal_string ::= ("’" character+ "’") | (""" character+ """) ;
grouped_sequence ::= "(" definitions_list ")" ;
optional_sequence ::= "[" definitions_list "]" ;
--------------------metasyntax::ebnf-iso-3.bgf--------------------
COMMENT ::= "(*" COMMENT_SYMBOL* "*)" ;
FACTOR ::= (INTEGER "*")? PRIMARY ;
DEFINITIONS_LIST ::= SINGLE_DEFINITION ("/" SINGLE_DEFINITION)* ;
TERMINAL ::= ("’" CHARACTER+ "’") | (""" CHARACTER+ """) ;
TERM ::= FACTOR ("-" EXCEPTION)? ;
SINGLE_DEFINITION ::= TERM ("," TERM)* ;
SYNTAX_RULE ::= META_IDENTIFIER "=" DEFINITIONS_LIST "." ;
SPECIAL_SEQUENCE ::= "?" CHARACTER* "?" ;
REPEATED_SEQUENCE ::= "(:" DEFINITIONS_LIST ":)" ;
GROUPED_SEQUENCE ::= "(" DEFINITIONS_LIST ")" ;
OPTIONAL_SEQUENCE ::= "(/" DEFINITIONS_LIST "/)" ;
--------------------metasyntax::relaxng.bgf--------------------
combine-att ::= (combine::("choice" | "interleave"))? ;
--------------------metasyntax::ebnf-sdf.bgf--------------------
Rule ::= IdCon "::=" Expression ;
Expression ::= IdCon | String | ("(" Expression ")") | (Expression "?") | (Expression "*") | (Expression "+") | (Expression "|" Expression) | (Expression Expression) ;
String ::= """ string() """ ;
--------------------metasyntax::lll-kort.bgf--------------------
group ::= "(" disjunction ")" ;
basis ::= ident | literal | "%epsilon" | alternation | group ;
alternation ::= "{" basis basis "}" repetition ;
rule ::= ident ":" disjunction ";" ;
disjunction ::= {conjunction "|"}+ ;
repetition ::= "+" | "*" | "?" ;
--------------------metasyntax::lll-ldta.bgf--------------------
rule ::= sort ":" alts ";" ;
alts-tail ::= "|" alt ;
repetition ::= "*" | "+" | "?" ;
--------------------metasyntax::xsd-guyard.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metasyntax::yacc-sdf.bgf--------------------
Rule ::= NonTerminal ":" (Expression? ("|" Expression?)*)? ";" ;
Expression ::= Terminal | NonTerminal | Literal | ("%prec" Terminal) | C-code | (Expression Expression) ;
Grammar ::= C-declarations Yacc-declarations "%%" Grammar-rules "%%" Extra-C-code ;
Yacc-declaration ::= ("%token" | "%left" | "%right" | "%nonassoc" (Terminal | Literal)+ String?) | ("%start" Terminal) ;
--------------------metasyntax::s-expressions.bgf--------------------
Base64 ::= "|" Base64Char* "|" ;
List ::= "(" SExp* ")" ;
HexaDecimal ::= "#" HexDigit* "#" ;
Display ::= "[" SimpleString "]" ;
--------------------metasyntax::yacc-txl.bgf--------------------
plusOrStar ::= "+" | "*" ;
tokenDefinition ::= yac_tokenDefinition | ("define" yac_id NL IN yac_tokenDefinition EX "end" "define" NL NL) ;
productionDefinition ::= (yac_id ":" NL IN SP SP literalsAndTypes barLiteralsAndTypes* ";"? NL EX) | ("define" yac_id NL IN SP SP literalsAndTypes NL barLiteralsAndTypes* EX "end" "define" NL NL) ;
type ::= (SP "[" yac_id "]") | (SP "[" "opt" yac_idOrQuotedLiteral "]") | (SP "[" "repeat" yac_idOrQuotedLiteral plusOrStar? "]") | (SP "[" "list" yac_idOrQuotedLiteral plusOrStar? "]") ;
endSection ::= "%%" NL NL ;
barLiteralsAndTypes ::= ("|" SP literalsAndTypes NL) | (SP bar_yac_literals NL) ;
quotedLiteral ::= SP "'" unquotedLiteral SP ;
bar_yac_literals ::= "|" SP yac_literal* NL ;
dot_id ::= "." id ;
Ccode ::= "{" Ccode_or_token* "}" ;
--------------------metasyntax::xsd-tennison.bgf--------------------
complexTypeModel ::= simpleContent | ((mixed::("true" | "false"))? complexContent | (typeDefParticle? attrDecls)) ;
whiteSpace ::= whiteSpace::(facet value::("preserve" | "replace" | "collapse")) ;
element ::= annotated fixedOrDefault ((nillable::("true" | "false")) | (block::blockSet))* ε | (type::string()) | localSimpleType | localComplexType identityConstraint* ;
topLevelComplexType ::= complexType::(complexType name::string() ((abstract::("true" | "false")) | (block::derivationSet) | (final::derivationSet))*) ;
rangeFacet ::= facet value::(integer() | string() | "UNKNOWN data") ;
wildcard ::= annotated ((namespace::("##any" | "##other" | ((string() | "##targetNamespace" | "##local")*))) | (processContents::("lax" | "skip" | "strict")))* ;
simpleDerivationSet ::= "#all" | (("list" | "union" | "restriction")*) ;
facet ::= annotated (fixed::("true" | "false"))? ;
blockSet ::= "#all" | (("extension" | "restriction" | "substitution")*) ;
localAttribute ::= attribute::(annotated (use::("optional" | "prohibited" | "required"))? fixedOrDefault (ref::string()) | (name::string() (form::formChoice)? attributeType)) ;
simpleRestrictionModel ::= (base::"xs:anySimpleType" rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:string" lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:normalizedString" lengthFacets whiteSpaceReplaceOrCollapse? enumeration* pattern*) | (base::("xs:token" | "xs:language" | "xs:Name" | "xs:NCName" | "xs:ID" | "xs:IDREF" | "xs:IDREFS" | "xs:NMTOKEN" | "xs:NMTOKENS" | "xs:ENTITY" | "xs:ENTITIES" | "xs:hexBinary" | "xs:base64Binary" | "xs:anyURI" | "xs:QName" | "xs:NOTATION") lengthFacets commonFacets) | (base::"xs:boolean" whiteSpaceCollapse? pattern*) | (base::("xs:decimal" | "xs:integer" | "xs:nonPositiveInteger" | "xs:nonNegativeInteger" | "xs:positiveInteger" | "xs:negativeInteger" | "xs:unsignedLong" | "xs:unsignedInt" | "xs:unsignedShort" | "xs:unsignedByte" | "xs:long" | "xs:int" | "xs:short" | "xs:byte") digitFacets rangeFacets commonFacets) | (base::("xs:float" | "xs:double" | "xs:duration" | "xs:dateTime" | "xs:time" | "xs:date" | "xs:gYearMonth" | "xs:gYear" | "xs:gMonthDay" | "xs:gMonth" | "xs:gDay") rangeFacets commonFacets) | ((base::string()) | localSimpleType rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) ;
topLevelElement ::= element::(element name::string() ((substitutionGroup::string()) | (abstract::("true" | "false")) | (final::derivationSet))*) ;
derivationSet ::= "#all" | reducedDerivationControl ;
whiteSpaceCollapse ::= whiteSpace::(facet value::"collapse") ;
complexContent ::= complexContent::(annotated (mixed::("true" | "false"))? complexRestriction | complexExtension) ;
allModel ::= annotated (element::(((minOccurs::("0" | "1")) | (maxOccurs::("0" | "1")))* (ref::string()) | (element name::string() (form::formChoice)?)))* ;
allNNI ::= integer() | "unbounded" ;
reducedDerivationControl ::= ("extension" | "restriction")* ;
whiteSpaceReplaceOrCollapse ::= whiteSpace::(facet value::("replace" | "collapse")) ;
formChoice ::= "qualified" | "unqualified" ;
all ::= all::(allModel ((minOccurs::("0" | "1")) | (maxOccurs::"1"))*) ;
--------------------metasyntax::aterms-rascal.bgf--------------------
Annotation ::= [Default] "{" {ATerm ","}+ "}" ;
ATerm ::= [Appl] AFun "(" {ATerm ","}+ ")" ;
 ATerm ::= [Real] RealCon ;
 ATerm ::= [List] "[" {ATerm ","}* "]" ;
 ATerm ::= [Annotated] ATerm Annotation ;
 ATerm ::= [Placeholder] "<" ATerm ">" ;
 ATerm ::= [Int] IntCon ;
 ATerm ::= [Fun] AFun ;
OptExp ::= [Present] "e" IntCon ;
 OptExp ::= [Absent] ε ;
RealCon ::= [RealCon] IntCon "." NatCon OptExp ;
IntCon ::= [Positive] "+" NatCon ;
 IntCon ::= [Natural] NatCon ;
 IntCon ::= [Negative] "-" NatCon ;
--------------------metasyntax::box-rascal.bgf--------------------
Context ::= "H" ;
 Context ::= "V" ;
BoxOperator ::= "HOV" options::(SpaceOption*) ;
 BoxOperator ::= "WD" ;
 BoxOperator ::= "A" alignments::AlignmentOptions options::(SpaceOption*) ;
 BoxOperator ::= "HV" options::(SpaceOption*) ;
 BoxOperator ::= "R" ;
 BoxOperator ::= "H" options::(SpaceOption*) ;
 BoxOperator ::= "I" options::(SpaceOption*) ;
 BoxOperator ::= "V" options::(SpaceOption*) ;
SpaceSymbol ::= "vs" ;
 SpaceSymbol ::= "ts" ;
 SpaceSymbol ::= "hs" ;
 SpaceSymbol ::= "is" ;
Boxx ::= "REF" "[" StrCon "," Boxx "]" ;
 Boxx ::= "LBL" "[" StrCon "," Boxx "]" ;
 Boxx ::= operator::BoxOperator "[" list::(Boxx*) "]" ;
 Boxx ::= StrCon ;
 Boxx ::= "CNT" "[" StrCon "," StrCon "]" ;
 Boxx ::= operator::FontOperator "[" list::(Boxx*) "]" ;
AlignmentOptions ::= "(" {AlignmentOption ","}* ")" ;
SpaceOption ::= SpaceSymbol "=" NatCon ;
AlignmentOption ::= "r" options::(SpaceOption*) ;
 AlignmentOption ::= "l" options::(SpaceOption*) ;
 AlignmentOption ::= "c" options::(SpaceOption*) ;
GroupOption ::= "gs" "=" NatCon ;
 GroupOption ::= "op" "=" BoxOperator ;
FontOperator ::= "VAR" ;
 FontOperator ::= "MATH" ;
 FontOperator ::= "COMM" ;
 FontOperator ::= "KW" ;
 FontOperator ::= "NUM" ;
 FontOperator ::= "ESC" ;
 FontOperator ::= "STRING" ;
--------------------metasyntax::sdf-rascal.bgf--------------------
Group ::= [NonTransitive] Group "." ;
 Group ::= [AssocGroup] "{" Assoc ":" Prods "}" ;
 Group ::= [WithArguments] Group ArgumentIndicator ;
 Group ::= [SimpleGroup] Prod ;
 Group ::= [ProdsGroup] "{" Prods "}" ;
Range ::= [Range] Character "-" Character ;
 Range ::= Character ;
Attribute ::= [Term] ATermAttribute ;
 Attribute ::= [Assoc] Assoc ;
 Attribute ::= [Bracket] "bracket" ;
 Attribute ::= [Id] "id" "(" ModuleName ")" ;
 Attribute ::= [Avoid] "avoid" ;
 Attribute ::= [Prefer] "prefer" ;
 Attribute ::= [Reject] "reject" ;
Renaming ::= [production] Prod "=>" Prod ;
 Renaming ::= [Sym] Sym "=>" Sym ;
ImpSection ::= [Imports] "imports" Imports ;
Renamings ::= [Renamings] "[" Renaming* "]" ;
Class ::= [SimpleCharClass] "[" Range* "]" ;
 Class ::= [Bracket] "(" Class ")" ;
 Class ::= [Comp] "~" Class ;
 Class ::= [Diff] Class "/" Class ;
 Class ::= [ISect] Class "/\" Class ;
 Class ::= [Union] Class "\/" Class ;
ModuleName ::= [Parameterized] id::ModuleId "[" actuals::Syms "]" ;
 ModuleName ::= [Unparameterized] ε ;
Prod ::= [Prod] Syms "->" Sym Attrs ;
Assoc ::= [NonAssoc] "non-assoc" ;
 Assoc ::= [Assoc] "assoc" ;
 Assoc ::= [Left] "left" ;
 Assoc ::= [Right] "right" ;
SDF ::= [Definition] "definition" def::Definition ;
IntCon ::= [Negative] "-" NatCon ;
 IntCon ::= [Natural] NatCon ;
 IntCon ::= [Positive] "+" NatCon ;
ArgumentIndicator ::= [Default] "<" {NatCon ","}+ ">" ;
Lookaheads ::= [Single] Lookahead ;
 Lookaheads ::= [Alt] Lookaheads "|" Lookaheads ;
 Lookaheads ::= [List] "[[" {Lookahead ","}* "]]" ;
 Lookaheads ::= [Bracket] "(" Lookaheads ")" ;
Alias ::= [Alias] Sym "->" Sym ;
Annotation ::= [Default] "{" {ATerm ","}+ "}" ;
ATerm ::= [Real] RealCon ;
 ATerm ::= [Appl] AFun "(" {ATerm ","}+ ")" ;
 ATerm ::= [Annotated] ATerm Annotation ;
 ATerm ::= [Placeholder] "<" ATerm ">" ;
 ATerm ::= [Int] IntCon ;
 ATerm ::= [Fun] AFun ;
 ATerm ::= [List] "[" {ATerm ","}* "]" ;
Restriction ::= [Follow] Syms "-/-" Lookaheads ;
Module ::= [Module] "module" ModuleName ImpSection* Sections ;
OptExp ::= [Present] "e" IntCon ;
 OptExp ::= [Absent] ε ;
Character ::= [eof] "\EOF" ;
 Character ::= [short] ShortChar ;
 Character ::= [Numeric] NumChar ;
 Character ::= [top] "\TOP" ;
 Character ::= [label_start] "\LABEL_START" ;
 Character ::= [bot] "\BOT" ;
Sym ::= [Empty] "(" ")" ;
 Sym ::= [Lit] StrCon ;
 Sym ::= [Opt] Sym "?" ;
 Sym ::= [Seq] "(" Sym Sym+ ")" ;
 Sym ::= [Bracket] "(" Sym ")" ;
 Sym ::= [CILit] SingleQuotedStrCon ;
 Sym ::= [Varsym] "<" Sym "-VAR" ">" ;
 Sym ::= [Sort] Sort ;
 Sym ::= [Lex] "<" Sym "-LEX" ">" ;
 Sym ::= [Layout] "LAYOUT" ;
 Sym ::= [CF] "<" Sym "-CF" ">" ;
 Sym ::= [ParameterizedSort] Sort "[[" {Sym ","}+ "]]" ;
 Sym ::= [IterStar] Sym "*" ;
 Sym ::= [IterStarSep] "{" Sym Sym "}" "*" ;
 Sym ::= [Iter] Sym "+" ;
 Sym ::= [Class] Class ;
 Sym ::= [IterSep] "{" Sym Sym "}" "+" ;
 Sym ::= [Alt] Sym "|" Sym ;
 Sym ::= [Label] Label ":" Sym ;
Grammar ::= [ContextFreePriorities] "context-free" "priorities" Priorities ;
 Grammar ::= [ImpSection] ImpSection ;
 Grammar ::= [KernalStartSyms] "start-symbols" Syms ;
 Grammar ::= [Aliases] "aliases" Aliases ;
 Grammar ::= [Variables] "variables" Prods ;
 Grammar ::= [ContextFreeSyntax] "context-free" "syntax" Prods ;
 Grammar ::= [LexicalRestrictions] "lexical" "restrictions" Restrictions ;
 Grammar ::= [Sorts] "sorts" Syms ;
 Grammar ::= [ContextFreeStartSyms] "context-free" "start-symbols" Syms ;
 Grammar ::= [Syntax] "syntax" Prods ;
 Grammar ::= [Restrictions] "restrictions" Restrictions ;
 Grammar ::= [Priorities] "priorities" Priorities ;
 Grammar ::= [LexicalStartSyms] "lexical" "start-symbols" Syms ;
 Grammar ::= [LexicalVariables] "lexical" "variables" Prods ;
 Grammar ::= [ContextFreeRestrictions] "context-free" "restrictions" Restrictions ;
 Grammar ::= [LexicalPriorities] "lexical" "priorities" Priorities ;
 Grammar ::= [LexicalSyntax] "lexical" "syntax" Prods ;
Import ::= [Bracket] "(" Import ")" ;
 Import ::= [Module] ModuleName ;
 Import ::= [RenamedModule] ModuleName Renamings ;
Section ::= [Exports] "exports" Grammar* ;
 Section ::= [Hiddens] "hiddens" Grammar* ;
RealCon ::= [RealCon] IntCon "." NatCon OptExp ;
Priority ::= [Chain] {Group ">"}+ ;
 Priority ::= [Assoc] Group Assoc Group ;
Priorities ::= {Priority ","}* ;
Lookahead ::= [Class] class::Class ;
 Lookahead ::= [Seq] class::Class "." las::Lookaheads ;
Attrs ::= [Attrs] "{" {Attribute ","}* "}" ;
 Attrs ::= [NoAttrs] ε ;
--------------------tescol::00000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
EQUALS ::= "==" ;
SKIP ::= "skip" ;
LTE ::= "<=" ;
ELSE ::= "else" ;
GTE ::= ">=" ;
LPAR ::= "(" ;
COMMA ::= "," ;
DOUWORD ::= "double" ;
CONJUNCT ::= "/\\" ;
EXPO ::= "**" ;
DIV ::= "/" ;
RPAR ::= ")" ;
ASSIGN ::= COLON "=" ;
SEMI ::= ";" ;
GT ::= ">" ;
DISJUNCT ::= "\\/" ;
SUB ::= "-" ;
NOTEQ ::= "!=" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
QMARK ::= "?" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTWORD ::= "int" ;
MULTI ::= "*" ;
PROC ::= "proc" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
WHILE ::= "while" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DO ::= "do" ;
LT ::= "<" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
ADD ::= "+" ;
RBRACE ::= "}" ;
--------------------tescol::00001.bgf--------------------
SKIP ::= "skip" ;
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
LTE ::= "<=" ;
EXP ::= "**" ;
NEQ ::= "!=" ;
MIXFIX ::= "?" ;
ELSE ::= "else" ;
GTE ::= ">=" ;
DIV ::= "/" ;
SEMI ::= ";" ;
OCB ::= "{" ;
GT ::= ">" ;
EQ ::= "==" ;
CONJ ::= "/\\" ;
CCB ::= "}" ;
COM ::= "," ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CPAR ::= ")" ;
IF ::= "if" ;
THEN ::= "then" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DISJ ::= "\\/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
PLUS ::= "+" ;
MULTI ::= "*" ;
INTG ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
PROC ::= "proc" ;
OPAR ::= "(" ;
WHILE ::= "while" ;
DOUBLE ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTG)? ;
MINUS ::= "-" ;
TYPEI ::= "int" ;
DO ::= "do" ;
TYPED ::= "double" ;
LT ::= "<" ;
ASSI ::= ":=" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
--------------------tescol::00010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
CONDITION ::= "?" ;
DIVIDE ::= "/" ;
ELSE ::= "else" ;
EXPONENTIATE ::= "**" ;
AND ::= "/\\" ;
LPAR ::= "(" ;
COMMA ::= "," ;
GREATER_EQUAL ::= ">=" ;
RPAR ::= ")" ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
INT_TYPE ::= "int" ;
DOUBLE_TYPE ::= "double" ;
MULTIPLY ::= "*" ;
OR ::= "\\/" ;
CONTAINS ::= "contains" ;
IF ::= "if" ;
THEN ::= "then" ;
WS ::= (" " | "\t" | "\r" | "\n" | "\u000C")+ ;
GREATER ::= ">" ;
PLUS ::= "+" ;
LESS ::= "<" ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | DIGIT | "_")* ;
PROC ::= "proc" ;
EQUAL ::= "==" ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | DIGIT | "_")* ;
DOUBLE ::= DIGIT* "." DIGIT* EXPONENT? ;
WHILE ::= "while" ;
MINUS ::= "-" ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
DO ::= "do" ;
NOT_EQUAL ::= "!=" ;
DEFINED_AS ::= ":=" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
RCURLYPAR ::= "}" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
LCURLYPAR ::= "{" ;
--------------------tescol::00011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
OPARAN ::= "(" ;
COLON ::= ":" ;
EXP ::= "**" ;
ADDITION ::= "+" ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
CBRACE ::= "}" ;
ASSIGN ::= ":=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
MULTIPLY ::= "*" ;
OBRACE ::= "{" ;
MOREEQUAL ::= ">=" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LESSEQUAL ::= "<=" ;
LESS ::= "<" ;
PROC ::= "proc" ;
MORE ::= ">" ;
SUBTRACT ::= "-" ;
EQUAL ::= "==" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT)? ;
WHILE ::= "while" ;
INT ::= ("+" | "-")? "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ;
DOUBLETYPE ::= "double" ;
DO ::= "do" ;
CPARAN ::= ")" ;
INTTYPE ::= "int" ;
VAR ::= "var" ;
NONEQUAL ::= "!=" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
--------------------tescol::00100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
sign ::= ("+" | negation)? atom ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
QUESTION ::= "?" ;
negation ::= "-" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
IF ::= "if" ;
THEN ::= "then" ;
WS ::= (" " | "\t" | "\r" | "\n" | "\f")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::00101.bgf--------------------
SKIP ::= "skip" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
AND ::= "/\\" ;
OPENPAR ::= "(" ;
OPENCURL ::= "{" ;
COMMA ::= "," ;
L_THAN ::= "<" ;
COMMENT_BLOCK ::= "/*" α* "*/" ;
DIVISION ::= "/" ;
CLOSEPAR ::= ")" ;
LE_THAN ::= "<=" ;
EXPONENTIAL ::= "**" ;
OR ::= "\\/" ;
GE_THAN ::= ">=" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTEGER ::= "int" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DEFINEDAS ::= ":=" ;
G_THAN ::= ">" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE_VAL ::= INT_VAL? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? INT_VAL)? ;
INT_VAL ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
SEMICOLON ::= ";" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
CLOSECURL ::= "}" ;
CONST ::= "const" ;
DONE ::= "done" ;
--------------------tescol::00110.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
Q_MARK ::= "?" ;
EQUALITY ::= "==" ;
TYPE ::= "int" | "double" ;
ELSE ::= "else" ;
DEFINE_AS ::= ":=" ;
EXPR ::= "expr" ;
COMMA ::= "," ;
LEFT_PAREN ::= "(" ;
GREATER_THAN_OR_EQUAL ::= ">=" ;
VARDECL ::= "vardecl" ;
DIV ::= "/" ;
LESS_THAN_OR_EQUAL ::= "<=" ;
MULT ::= "*" ;
TESCO ::= "tesco" ;
SEMI ::= ";" ;
CONSTDECL ::= "constdecl" ;
PARAM ::= "param" ;
PROCAPP ::= "procApp" ;
CONJ ::= "/\\" ;
RIGHT_PAREN ::= ")" ;
DISJUNCT ::= "\\/" ;
GREATER_THAN ::= ">" ;
COND ::= "cond" ;
BODY ::= "body" ;
CONTAINS ::= "contains" ;
INTEGER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= " " | "\t" | "\f" | "\r\n" | "\r" | "\n" ;
EXPON ::= "**" ;
PLUS ::= "+" ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
PROC ::= "proc" ;
IFELSE ::= "ifelse" ;
EQUAL ::= "=" ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DOUBLE ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTEGER)? ;
WHILE ::= "while" ;
LEFT_BRACKET ::= "{" ;
MINUS ::= "-" ;
DO ::= "do" ;
NOT_EQUAL ::= "!=" ;
LESS_THAN ::= "<" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
RIGHT_BRACKET ::= "}" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
PROCDECL ::= "procdecl" ;
--------------------tescol::00111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("-" | "+")? INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
NEWLINE ::= "\r"? "\n" ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= " " | "\r" | "\t" | "\u000C" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::01000.bgf--------------------
SKIP ::= "skip" ;
COMMENT ::= "/*" α* "*/" ;
LTE ::= "<=" ;
EXP ::= "**" ;
NEQ ::= "!=" ;
ELSE ::= "else" ;
GTE ::= ">=" ;
INTNUM ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
COMMA ::= "," ;
DIV ::= "/" ;
MULT ::= "*" ;
SEMI ::= ";" ;
GT ::= ">" ;
EQ ::= "==" ;
CONJ ::= "/\\" ;
DEF ::= ":=" ;
VARID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
COL ::= ":" ;
SUB ::= "-" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
DISJ ::= "\\/" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
PROC ::= "proc" ;
QUES ::= "?" ;
WHILE ::= "while" ;
DOUBLE ::= "double" ;
INT ::= "int" ;
DOUBNUM ::= INTNUM? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTNUM)? ;
LBRACK ::= "(" ;
DO ::= "do" ;
LT ::= "<" ;
RCBRACK ::= "}" ;
RBRACK ::= ")" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
LCBRACK ::= "{" ;
DONE ::= "done" ;
ADD ::= "+" ;
--------------------tescol::01001.bgf--------------------
SKIP ::= "skip" ;
COLON ::= ":" ;
EXP ::= "**" ;
NEQ ::= "!=" ;
ELSE ::= "else" ;
GRTEQ ::= ">=" ;
COMMA ::= "," ;
DIV ::= "/" ;
MULT ::= "*" ;
SEMI ::= ";" ;
EQ ::= "==" ;
CONJ ::= "/\\" ;
DOUBLE_T ::= INT_T? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_T)? ;
DEF ::= ":=" ;
INT_T ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
COM ::= "/*" α* "*/" ;
CONTAINS ::= "contains" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DISJ ::= "\\/" ;
PLUS ::= "+" ;
LESS ::= "<" ;
CLOSE ::= ")" ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
PROC ::= "proc" ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
MINUS ::= "-" ;
INT ::= "int" ;
DO ::= "do" ;
OPEN ::= "(" ;
GRT ::= ">" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
LESSEQ ::= "<=" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
QUEST ::= "?" ;
STST ::= "{" ;
DONE ::= "done" ;
STED ::= "}" ;
--------------------tescol::01010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
RCURL ::= "}" ;
INUM ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
EXP ::= "**" ;
ADDITION ::= "+" " " | "\t" | "\r" | "\n" | COMMENT ;
ELSE ::= "else" ;
POSITIVE ::= "+" ;
LCURL ::= "{" ;
LSTE ::= "<=" ;
AND ::= "/\\" ;
NEGATIVE ::= "-" ;
COMMA ::= "," ;
RPARA ::= ")" ;
DIV ::= "/" ;
ASSIGN ::= ":=" ;
SEMI ::= ";" ;
LST ::= "<" ;
LPARA ::= "(" ;
NUM ::= INUM? "." INUM? ("e" | "E" (POSITIVE | NEGATIVE)? INUM)? ;
MUL ::= "*" ;
OR ::= "\\/" ;
EQL ::= "==" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
GRTE ::= ">=" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" " " | "\t" | "\r" | "\n" | COMMENT ;
NEQL ::= "!=" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
DO ::= "do" ;
GRT ::= ">" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
QUEST ::= "?" ;
--------------------tescol::01011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
skip ::= "skip" SEMI ;
proceduredecl ::= "proc" ID LBRACK parameter (COMMA parameter)* RBRACK COLON INT | DOUBLE ASSIGN statement ;
VARIABLE ::= "var" ;
variable ::= "var" ID COLON INT | DOUBLE SEMI ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
COMMA ::= "," ;
PROCEDURE ::= "proc" ;
EXPO ::= "**" ;
ASSIGN ::= ":=" ;
MTHAN ::= ">" ;
SEMI ::= ";" ;
procedureapp ::= ID "(" (expression (COMMA expression)*)? ")" SEMI? ;
LTHAN ::= "<" ;
term ::= procedureapp | ID | ("(" expression ")") | INUMB | DNUMB ;
CONJ ::= "/\\" ;
MEQUAL ::= ">=" ;
INUMB ::= ("+" | "-")? "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
negation ::= "-" ;
CONSTANT ::= "const" ;
constant ::= "const" ID COLON INT | DOUBLE ASSIGN expression SEMI ;
ret ::= "currentProc" ASSIGN expression SEMI ;
DNUMB ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? ;
CONTAINS ::= "contains" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DISJ ::= "\\/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DIVIS ::= "/" ;
PLUS ::= "+" ;
MULTI ::= "*" ;
expression ::= disj ("\?" disj COLON disj)? ;
WHILE ::= "while" ;
DOUBLE ::= "double" ;
MINUS ::= "-" ;
INT ::= "int" ;
LBRACK ::= "(" ;
DO ::= "do" ;
LEQUAL ::= "<=" ;
LBRACE ::= "{" ;
RBRACK ::= ")" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
DONE ::= "done" ;
RBRACE ::= "}" ;
NOTEQUAL ::= "!=" ;
--------------------tescol::01100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
DEFINE ::= ":=" ;
SKIPTOKEN ::= "skip" ;
EQUALITY ::= "==" ;
RIGHTPARENTHESIS ::= ")" ;
ELSE ::= "else" ;
CONJUNCTION ::= "/\\" ;
PROCEDURE ::= "proc" ;
QUESTIONMARK ::= "?" ;
RIGHTCURLY ::= "}" ;
EXPONENT ::= "**" ;
DIVISION ::= "/" ;
NONEQUALITY ::= "!=" ;
SUBSTRACTION ::= "-" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DIFFERENTOREQUAL ::= "<=" | ">=" ;
TYPEINT ::= "int" ;
WHILE ::= "while" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("E" | "e" (ADDITION | SUBSTRACTION)? INT)? ;
SEMICOLON ::= ";" ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
LEFTPARENTHESIS ::= "(" ;
TYPEDOUBLE ::= "double" ;
DO ::= "do" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
LEFTCURLY ::= "{" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
STRICTLYDIFFERENT ::= "<" | ">" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
COMA ::= "," ;
--------------------tescol::01101.bgf--------------------
SKIP ::= "skip" ;
COLON ::= ":" ;
OPENBRACKET ::= "{" ;
EXP ::= "**" ;
EQUALITY ::= "==" ;
TYPE ::= "int" | "double" ;
ELSE ::= "else" ;
CONJUNCTION ::= "/\\" ;
LESSTHEN ::= "<" ;
COMMA ::= "," ;
PROCEDURE ::= "proc" ;
MORETHEN ::= ">" ;
MIX_FIX ::= "?" ;
DIV ::= "/" ;
SEMI ::= ";" ;
OPENPARENTHESIS ::= "(" ;
BECOMES ::= ":=" ;
TROLLY ::= "trolly" ;
NONEQUALITY ::= "!=" ;
ENDCOMMENT ::= "*/" ;
MUL ::= "*" ;
CONSTANT ::= "const" ;
SUB ::= "-" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
CLOSEDBRACKET ::= "}" ;
MOREOREQUAL ::= ">=" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LESSOREQUAL ::= "<=" ;
BEGINCOMMENT ::= "/*" ;
WHILE ::= "while" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" (ADD | SUB)? INT)? ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DO ::= "do" ;
CLOSEDPARENTHESIS ::= ")" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
DISJUNCTION ::= "\\/" ;
DONE ::= "done" ;
ADD ::= "+" ;
--------------------tescol::01110.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
COLON_EQUALS ::= ":=" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
GREATER_EQUAL ::= ">=" ;
unary ::= ("+" | negation)* atom ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
QUESTION ::= "?" ;
negation ::= "-" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::01111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
GREATERTHAN ::= ">" ;
LESSTHAN ::= "<" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
UNDER ::= "_" ;
CONJUNCTION ::= "/\\" ;
GREATERTHANOREQUAL ::= ">=" ;
LPAR ::= "{" ;
COMMA ::= "," ;
RPAR ::= "}" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
NONEQUALITY ::= "!=" ;
QUESTION ::= "?" ;
INTVALUE ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DOUBLEVALUE ::= INTVALUE? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? INTVALUE)? ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CPAR ::= ")" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= ("\t" | "|" | "\n" | "\r" | " " | "\f")+ ;
DEFINEDAS ::= ":=" ;
INTKEYWORD ::= "int" ;
EXPONENTION ::= "**" ;
DOUBLEKEYWORD ::= "double" ;
LESSTHANOREQUAL ::= "<=" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
OPAR ::= "(" ;
WHILE ::= "while" ;
atom ::= CONSTID | VARANDPROCID | (("+" | "-")? INTVALUE) | (("+" | "-")? DOUBLEVALUE) | applyProc | (OPAR arithmeticExpression CPAR) ;
DO ::= "do" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DISJUNCTION ::= "\\/" ;
DONE ::= "done" ;
VARANDPROCID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
--------------------tescol::10000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
NEWLINE ::= "\r"? "\n" ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::10001.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
PROCBODY ::= "procbody" ;
DOUBLE_NUMBER ::= INT_NUMBER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
GREATER_EQUAL ::= ">=" ;
SEMI ::= ";" ;
LESS_EQUAL ::= "<=" ;
CIDENT ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DIVISION ::= "/" ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
LPAREN ::= "(" ;
CALL ::= "call" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
EXPONENTIATION ::= "**" ;
ID ::= "id" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
ARGLIST ::= "arglist" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::10010.bgf--------------------
COLON ::= ":" ;
SKIP ::= "skip" ;
LESSTHAN ::= "<" ;
DIVIDE ::= "/" ;
ELSE ::= "else" ;
MORETHAN ::= ">" ;
COMMA ::= "," ;
DISJUNC ::= "\\/" ;
SEMI ::= ";" ;
CMT ::= "/*" α* "*/" ;
QUESTION ::= "?" ;
DEF ::= ":=" ;
MULTIPLY ::= "*" ;
CONJUNC ::= "/\\" ;
CLPAREN ::= "{" ;
CONTAINS ::= "contains" ;
MORETHANEQUAL ::= ">=" ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
EXPON ::= "**" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CRPAREN ::= "}" ;
LESSTHANEQUAL ::= "<=" ;
INTKEYWORD ::= "int" ;
RPAREN ::= ")" ;
DOUBLEKEYWORD ::= "double" ;
PROC ::= "proc" ;
EQUAL ::= "==" ;
SUBTRACT ::= "-" ;
DOUBLE ::= INT? "." (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) | ("e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) ;
WHILE ::= "while" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DO ::= "do" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
NOTEQUAL ::= "!=" ;
ADD ::= "+" ;
--------------------tescol::10011.bgf--------------------
COLON ::= ":" ;
SKIP ::= "skip" ;
VARIABLE ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
NEQ ::= "!=" ;
ELSE ::= "else" ;
DISJUN ::= "\\/" ;
COMMA ::= "," ;
LPAR ::= "(" ;
DIV ::= "/" ;
RCPAR ::= "}" ;
MULT ::= "*" ;
RPAR ::= ")" ;
SEMI ::= ";" ;
EQ ::= "==" ;
LCPAR ::= "{" ;
CONSTANT ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CONTAINS ::= "contains" ;
INTEGER ::= "int" ;
THEN ::= "then" ;
IF ::= "if" ;
EXPON ::= "**" ;
QM ::= "?" ;
PLUS ::= "+" ;
LESS ::= "<" ;
DEFAS ::= ":=" ;
PROC ::= "proc" ;
MORE ::= ">" ;
WHILE ::= "while" ;
DUB ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
DOUBLE ::= "double" ;
MINUS ::= "-" ;
INT ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ;
DO ::= "do" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
LESSEQ ::= "<=" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
CONJUN ::= "/\\" ;
MOREEQ ::= ">=" ;
--------------------tescol::10100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
NEWLINE ::= "\r"? "\n" ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::10101.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
CONSTANTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
SKIP ::= "skip" ;
COLON ::= ":" ;
VARIABLE ::= "var" ;
FLOAT ::= "double" ;
ADDITION ::= "+" ;
GREATEREQUAL ::= ">=" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
PARENOPEN ::= "(" ;
PROCEDURE ::= "proc" ;
DECIMAL ::= "." ;
ASSIGN ::= ":=" ;
PARENCLOSE ::= ")" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
FLOATINGPOINT ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("e" | "E" (ADDITION | SUBTRACTION)* INTEGER)? ;
STATEMENTCLOSE ::= "}" ;
NONEQUALITY ::= "!=" ;
CONSTANT ::= "const" ;
CONTAINS ::= "contains" ;
INTEGER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LESSEQUAL ::= "<=" ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
STATEMENTOPEN ::= "{" ;
SUBTRACTION ::= "-" ;
WHILE ::= "while" ;
INT ::= "int" ;
DO ::= "do" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
--------------------tescol::10110.bgf--------------------
COLON ::= ":" ;
SKIP ::= "skip" ;
COMMENT ::= "/*" α* "*/" ;
type ::= "int" | "double" ;
CURLY_L ::= "{" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
DIVIDE ::= "/" ;
LPAR ::= "(" ;
COMMA ::= "," ;
RPAR ::= ")" ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
SEMI ::= ";" ;
CONJ ::= "/\\" ;
var ::= "var" identifier COLON type SEMI ;
QUESTION ::= "?" ;
GREATER_THAN ::= ">" ;
negation ::= "-" ;
GREATER_THAN_EQ ::= ">=" ;
constant ::= "const" cidentifier COLON type DEFINED_AS expr SEMI ;
MULTIPLY ::= "*" ;
LESS_THAN_EQ ::= "<=" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n" | "\f")+ ;
DISJ ::= "\\/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= MULTIPLY "*" ;
proc ::= "proc" identifier "(" identifier COLON type (COMMA identifier COLON type)* ")" COLON type DEFINED_AS statement* SEMI ;
PROC ::= "proc" ;
EQUAL ::= "=" ;
SUBTRACT ::= "-" ;
KEY_DOUBLE ::= "double" ;
WHILE ::= "while" ;
DOUBLE ::= (INT "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT?) | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT?) | (INT EXPONENT) | "." ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
KEY_INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
DEFINED_AS ::= ":=" ;
VAR ::= "var" ;
LESS_THAN ::= "<" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
ADD ::= "+" ;
CURLY_R ::= "}" ;
--------------------tescol::10111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
KW_DO ::= "do" ;
KW_WHILE ::= "while" ;
KW_TYPE_INT ::= "int" ;
SYM_OR ::= "\\/" ;
ID_VARPROC ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
KW_CHECKOUT ::= "checkout" ;
SYM_OPEN_BRACE ::= "{" ;
KW_DONE ::= "done" ;
SYM_QM ::= "?" ;
KW_VAR ::= "var" ;
KW_TROLLEY ::= "trolley" ;
KW_SKIP ::= "skip" ;
KW_CONST ::= "const" ;
EXPONENT ::= "e" | "E" (SYM_ADD | SYM_SUB)? INT ;
KW_ELSE ::= "else" ;
SYM_CLOSE_PAREN ::= ")" ;
SYM_NS_LT ::= "<=" ;
SYM_INEQ ::= "!=" ;
SYM_ADD ::= "+" ;
SYM_COLON ::= ":" ;
SYM_EXP ::= "**" ;
ID_GENERAL ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
KW_TYPE_DOUBLE ::= "double" ;
SYM_LT ::= "<" ;
SYM_AND ::= "/\\" ;
SYM_COMMA ::= "," ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
SYM_DIV ::= "/" ;
SYM_CLOSE_BRACE ::= "}" ;
KW_CONTAINS ::= "contains" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
KW_THEN ::= "then" ;
KW_IF ::= "if" ;
SYM_NS_GT ::= ">=" ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
SYM_OPEN_PAREN ::= "(" ;
SYM_ASS ::= ":=" ;
KW_PROC ::= "proc" ;
SYM_MULT ::= "*" ;
SYM_SUB ::= "-" ;
SYM_SEMI ::= ";" ;
SYM_GT ::= ">" ;
SYM_EQ ::= "==" ;
--------------------tescol::11000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
VARIABLE ::= "var" ;
GREATERTHAN ::= ">" ;
DEFINE ::= ":=" ;
LESSTHAN ::= "<" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
GREATEROREQUAL ::= ">=" ;
AND ::= "/\\" ;
COMMA ::= "," ;
CURLYLEFT ::= "{" ;
PROCEDURE ::= "proc" ;
EXPONENT ::= "e" | "E" "+" | "-" INT ;
CURLYRIGHT ::= "}" ;
SEMI ::= ";" ;
DIVISION ::= "\\" ;
DOU ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
NONEQUALITY ::= "!=" ;
QUESTION ::= "?" ;
CONSTANT ::= "const" ;
OR ::= "\\/" ;
LEFTBRACKET ::= "(" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTEGER ::= "int" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
LESSOREQUAL ::= "<=" ;
SUBTRACTION ::= "-" ;
WHILE ::= "while" ;
DOUBLE ::= "double" ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
RIGHTBRACKET ::= ")" ;
DO ::= "do" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
DONE ::= "done" ;
--------------------tescol::11001.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
EQUALS ::= "=" ;
COLON ::= ":" ;
EXP ::= "**" ;
FLOAT ::= INT? "." UINT? EXPONENT? ;
TINT ::= "int" ;
ELSE ::= "else" ;
BANG ::= "!" ;
AND ::= "/\\" ;
COMMA ::= "," ;
EXPONENT ::= "e" | "E" INT ;
SEMI ::= ";" ;
LANGLE ::= "<" ;
QUESTION ::= "?" ;
TDOUBLE ::= "double" ;
MUL ::= "*" ;
OR ::= "\\/" ;
VARID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
RANGLE ::= ">" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
IF ::= "if" ;
THEN ::= "then" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
UINT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
PLUS ::= "+" ;
RPAREN ::= ")" ;
FSLASH ::= "/" ;
PROC ::= "proc" ;
WHILE ::= "while" ;
MINUS ::= "-" ;
INT ::= ("+" | "-")? UINT ;
DO ::= "do" ;
VAR ::= "var" ;
LBRACE ::= "{" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
RBRACE ::= "}" ;
--------------------tescol::11010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
EQUALITY ::= "==" ;
LESSTHAN ::= "<" ;
ELSE ::= "else" ;
DIVIDE ::= "/" ;
CONJUNCTION ::= "/\\" ;
MORETHAN ::= ">" ;
COMMA ::= "," ;
EXPONENT ::= "e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
SEMI ::= ";" ;
LEFTBRACE ::= "{" ;
QUESTION ::= "?" ;
MULTIPLY ::= "*" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
MORETHANEQUAL ::= ">=" ;
INTEGER ::= "int" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
DEFINEDAS ::= ":=" ;
LESSTHANEQUAL ::= "<=" ;
PLUS ::= "+" ;
LEFTPAR ::= "(" ;
RIGHTBRACE ::= "}" ;
PROC ::= "proc" ;
WHILE ::= "while" ;
DOUBLE ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
MINUS ::= "-" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
FLOATDOUBLE ::= "double" ;
DO ::= "do" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
RIGHTPAR ::= ")" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DISJUNCTION ::= "\\/" ;
DONE ::= "done" ;
NOTEQUAL ::= "!=" ;
--------------------tescol::11011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
SKIP ::= "skip" ;
COND_COMP_GREAT ::= "<" ;
ELSE ::= "else" ;
COND_EQUAL ::= "==" ;
TYPE_DOUBLE ::= "double" ;
LPAR ::= "(" ;
COMMA ::= "," ;
RCB ::= "}" ;
RPAR ::= ")" ;
ARITH_ADD ::= "+" ;
SEMI ::= ";" ;
COND_COMP_LESS ::= ">" ;
LCB ::= "{" ;
ARITH_EXP ::= "**" ;
CONJ ::= "/\\" ;
CONTAINS ::= "contains" ;
ARITH_DIV ::= "/" ;
QMARK ::= "?" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DISJ ::= "\\/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
COND_COMP_LESSE ::= ">=" ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
DEFAS ::= ":=" ;
PROC ::= "proc" ;
ARITH_MUL ::= "*" ;
DOUBLE ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
WHILE ::= "while" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ARITH_SUB ::= "-" ;
COND_COMP_GREATE ::= "<=" ;
DO ::= "do" ;
TYPE_INT ::= "int" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
COND_NONEQUAL ::= "!=" ;
CONST ::= "const" ;
DONE ::= "done" ;
--------------------tescol::11100.bgf--------------------
SKIP ::= "skip" ;
COLON ::= ":" ;
COMMENT ::= "/*" α* "*/" ;
ELSE ::= "else" ;
COMMA ::= "," ;
SEMI ::= ";" ;
LEFTBRACE ::= "{" ;
LEFTBRACKET ::= "(" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
QMARK ::= "?" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
PLUS ::= "+" ;
RIGHTBRACE ::= "}" ;
PROC ::= "proc" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
WHILE ::= "while" ;
MINUS ::= "-" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
BOOLOPERATOR ::= "/\\" | "\\/" ;
TRUE ::= "true" ;
ASSIGNMENT ::= ":=" ;
RIGHTBRACKET ::= ")" ;
DOUBLETYPE ::= "double" ;
DO ::= "do" ;
COMPARISON ::= "==" | "!=" | "<=" | ">=" | "<" | ">" ;
INTTYPE ::= "int" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
FALSE ::= "false" ;
CONST ::= "const" ;
DONE ::= "done" ;
MULTIPLIER ::= "**" | "/" | "*" ;
--------------------tescol::11101.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
ELSE ::= "else" ;
VARPROCID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DBLE ::= "double" ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
ROP ::= "==" | "!=" | "<" | "<=" | ">=" | ">" ;
EXPONENT ::= "e" | "E" INTEGER ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
DEFINED ::= ":=" ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTEGER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
PARENTHESISR ::= ")" ;
EXPONENTIATION ::= "**" ;
PARENTHESISL ::= "(" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
WHILE ::= "while" ;
INT ::= "int" ;
DO ::= "do" ;
BRACKETR ::= "}" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
BRACKETL ::= "{" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
--------------------tescol::11110.bgf--------------------
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
FLOAT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
listofStatement ::= "{" singleStatement (SEMI s::singleStatement)+ "}" ;
ELSE ::= "else" ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
COMMENTS ::= "/*" α* "*/" ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
parameterList ::= parameterElement ("," parameterElement)* ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
INTEGER ::= ("+" | "-")? "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\n" | "\r")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
expressionList ::= arithmeticExpr ("," arithmeticExpr)* ;
SUBTRACTION ::= "-" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
atom ::= INTEGER | FLOAT | CONSTID | ("(" conditionalExpr ")") | applyProcedure | ID ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
unaryExpr ::= ("-" atom) | atom ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::11111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
DOUBLE_NUMBER ::= (("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? "." (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ("e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
NEWLINE ::= "\r"? "\n" ;
ASSIGN ::= ":=" ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
VARID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
EQUAL ::= "==" ;
SUBTRACTION ::= "-" ;
WHILE ::= "while" ;
DOUBLE ::= "double" ;
INT ::= "int" ;
DO ::= "do" ;
VAR ::= "var" ;
NONEQUAL ::= "!=" ;
LBRACE ::= "{" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::reference.bgf--------------------
COLON ::= ":" ;
SKIP ::= "skip" ;
LTE ::= "<=" ;
EXP ::= "**" ;
NET ::= "!=" ;
ELSE ::= "else" ;
GTE ::= ">=" ;
LPAR ::= "(" ;
COMMA ::= "," ;
TE ::= "?" ;
DIV ::= "/" ;
MULT ::= "*" ;
RPAR ::= ")" ;
ET ::= "==" ;
DISJUNC ::= "/\\" ;
SEMI ::= ";" ;
GT ::= ">" ;
CONJUNC ::= "\\/" ;
LOWER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
SUB ::= "-" ;
CONTAINS ::= "contains" ;
CONSTID ::= UPPER (UPPER | DIGIT | "_")* ;
INTEGER ::= ("+" | "-")? DIGIT+ ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= UPPER | LOWER (UPPER | LOWER | DIGIT | "_")* ;
DOUB ::= "double" ;
DEFAS ::= ":=" ;
PROC ::= "proc" ;
DOUBLE ::= INTEGER? "." DIGIT* ("e" | "E" INTEGER)? ;
WHILE ::= "while" ;
INT ::= "int" ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
DO ::= "do" ;
LT ::= "<" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
UPPER ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
DONE ::= "done" ;
ADD ::= "+" ;
RBRACE ::= "}" ;
--------------------hats::abs.bgf--------------------
EffExp ::= AsyncCall ;
 EffExp ::= NewlocExp "/"* Component* "/" ;
 EffExp ::= NewExp ;
 EffExp ::= IncompleteExp ;
 EffExp ::= SyncCall ;
 EffExp ::= SQL LPAREN e::SqlExp RPAREN ;
 EffExp ::= OriginalCall ;
 EffExp ::= p::PureExpPrefix DOT GET ;
AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER IN LBRACKET b1::BoundaryInt UNTIL b2::BoundaryInt RBRACKET SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER SEMICOLON "/"* Constraints* "/" ;
 AttributeConstraintList ::= acl::AttributeConstraintList EXCLUDE COLON f::Featvar SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER IN LBRACE il::IntList RBRACE SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER LBRACKET b1::BoundaryInt UNTIL b2::BoundaryInt RBRACKET id::IDENTIFIER SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList e::Mexp SEMICOLON ;
 AttributeConstraintList ::= "/"* Attributes* "/" ;
 AttributeConstraintList ::= acl::AttributeConstraintList REQUIRE COLON f::Featvar SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList IFIN COLON e::Mexp SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList IFOUT COLON e::Mexp SEMICOLON ;
PureExp ::= FatherExp "/"* Component* "/" ;
 PureExp ::= LocationExp "/"* Component* "/" ;
 PureExp ::= IfExp ;
 PureExp ::= PureExpNoIf ;
--------------------metamodels::ACG.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::ACME.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::ASM.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::ATL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::AWKPrograms.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Agate.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Amble.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::AnyLogic.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Architectural_Description.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::AsmL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::BMM.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::BPMN.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Book.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Bossa.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::BusinessEntityModel.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::BusinessProcessModel.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CDE.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CFG.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::COBOL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CORBAComponent.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CPL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CPR.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CSM.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CWMCore.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CWMRelationalData.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Class.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::ChocoModel.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Cocus.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::DSL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::CompanyStructure.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::ComponentUML.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Conference.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Contact.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::ControllerUML.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Cristal.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::DSLModel.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::DSLtools.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::DTD.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::DTMP.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::DeploymentReport.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::DiagramInterchange.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::DotNET_SystemReflection.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::EG.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::EQN.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::EXPRESS.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::EXPRESSb.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::EclipseLaunchConfigurations.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::FeatureDiagrams.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::GUI.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Gantt.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::GenericEditor.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::GenericOutline.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::GeoTrans.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Grafcet.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::HAL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::HPROF.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::HierarchicalStateMachine.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::HybridAutomata.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::IRL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::IMSTransactionMessage.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::M.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Jess.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::KDM.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::KDMSimplified.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::KM3.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Klaper.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::LQN.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Marte.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::METAH.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MICRO.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLBasicDef.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLPrintingSetup.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLSimplified.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLStyles.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorkbookProp.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorksheetOpt.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeWord_WordprocessingMLBasicDef.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeWord_WordprocessingMLSimplified.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeWord_WordprocessingMLStyles.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSOfficeWord_WordprocessingMLTableElts.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MTRANS.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSVisio_DatadiagramMLBasicDef.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSVisio_DatadiagramMLSimplified.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSVisio_DatadiagramMLTextFormat.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MSVisio_DatadiagramMLXForm.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Mantis.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Measure.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Metrics.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MoMM.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MiningMart_ViewCaseRepresentation.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MiningMart_ViewDataRepresentation.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MonitorProgram.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MySQL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::News.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::OWL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::OpenConf.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::PCS.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::PDG.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::PRR.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Perceptory.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Person.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::PluginEclipse.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::ProMarte.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Program.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Promenade.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::PtolemyII.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Publication.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::QVT.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::QoS.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::QoS_Characteristic.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::RDFS.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::QoS_Profile.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::QoS_Statement.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Relational.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::RelationalDBContent.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::RelationalDBSchema.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Repository.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SBVRvoc.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SCADE.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SDM.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SEE_Design.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SPEM.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SPL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SQLDDL.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SQLDML.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SecureUML.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SeminarSchedulingSystem.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SimpleAirlineDomain.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SysML.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SoftwareQualityControl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::SyncCharts.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::TextualPathExp.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::Trace.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::USECASE1.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::USECASE2.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::UnifiedOntologyLanguage.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::UsiXML-task.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::WSLink.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::WTIP_SimpleClass.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::WebApplications_AbstractModel.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::WebApplications_ConceptualModel.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::WorkDefinitions.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::XAML-Perspective.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::XAML-ResourceDictionary.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::XMorphLanguage_abstractSyntax.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::XPDL-1.14.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::XUL-Interactorl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::cmt.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::confOf.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::confious.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::crs_dr.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::edas.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::ekaw.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::iasted.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::paperdyne.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::sbvrEclipse.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::sbvrOMG.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::sigkdd.owl.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::MiningMart.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------metamodels::logic-concrete.bgf--------------------
True ::= "(" True ")" ;
 True ::= "true" ;
 True ::= "not" f::False ;
 True ::= lt::True "and" rt::True ;
 True ::= lt::True "or" rt::True ;
 True ::= lt::True "or" rf::False ;
 True ::= lf::False "or" rt::True ;
Formula ::= [not] "!" arg::Formula ;
 Formula ::= [true] "true" ;
 Formula ::= [false] "false" ;
 Formula ::= [and] lhs::Formula "&" rhs::Formula ;
 Formula ::= [or] lhs::Formula "|" rhs::Formula ;
 Formula ::= [fi] lhs::Formula "<=" rhs::Formula ;
 Formula ::= [if] lhs::Formula "=>" rhs::Formula ;
 Formula ::= [iff] lhs::Formula "<=>" rhs::Formula ;
 Formula ::= [id] ε ;
False ::= "false" ;
 False ::= "not" t::True ;
 False ::= "(" False ")" ;
 False ::= lf::False "and" rt::True ;
 False ::= lf::False "and" rf::False ;
 False ::= lt::True "and" rf::False ;
 False ::= lf::False "or" rf::False ;
--------------------ocl::expressions.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------ocl::operations.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------ocl::types.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------ocl::uml.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------ocl::values.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------develop::make.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------develop::bugzilla.bgf--------------------
Boolean ::= "true" | "false" ;
--------------------pico::rascal.bgf--------------------
Statement ::= [cond] "if" cond::Expression "then" thenPart::({Statement ";"}*) "else" elsePart::({Statement ";"}*) "fi" ;
 Statement ::= [assign] var::Id ":=" val::Expression ;
 Statement ::= [cond] "if" cond::Expression "then" thenPart::({Statement ";"}*) "fi" ;
 Statement ::= [loop] "while" cond::Expression "do" body::({Statement ";"}*) "od" ;
Type ::= [string] "string" ;
 Type ::= [natural] "natural" ;
 Type ::= [nil] "nil-type" ;
Declarations ::= "declare" decls::({IdType ","}*) ";" ;
Expression ::= "(" e::Expression ")" ;
 Expression ::= [natcon] natcon::Natural ;
 Expression ::= [id] name::Id ;
 Expression ::= [strcon] string::String ;
 Expression ::= [concat] lhs::Expression "||" rhs::Expression ;
 Expression ::= [add] lhs::Expression "+" rhs::Expression ;
 Expression ::= [min] lhs::Expression "-" rhs::Expression ;
IdType ::= [idtype] id::Id ":" t::Type ;
Program ::= [program] "begin" decls::Declarations body::({Statement ";"}*) "end" ;
--------------------pico::sdf.bgf--------------------
STATEMENT ::= (PICO-ID ":=" EXP) | ("if" EXP "then" (STATEMENT (";" STATEMENT)*)? "else" (STATEMENT (";" STATEMENT)*)? "fi") | ("while" EXP "do" (STATEMENT (";" STATEMENT)*)? "od") ;
EXP ::= PICO-ID | NatCon | StrCon | (EXP "+" EXP) | (EXP "-" EXP) | (EXP "||" EXP) | ("(" EXP ")") ;
ID-TYPE ::= PICO-ID ":" TYPE ;
TYPE ::= "natural" | "string" | "nil-type" ;
DECLS ::= "declare" (ID-TYPE ("," ID-TYPE)*)? ";" ;
PROGRAM ::= "begin" DECLS (STATEMENT (";" STATEMENT)*)? "end" ;
--------------------saf::concrete.bgf--------------------
Fighter ::= [fighter] name::Id "{" specs::(Spec*) "}" ;
Spec ::= [behavior] cond::Cond "[" move::Action fight::Action "]" ;
 Spec ::= [attribute] name::Id "=" strength::Number ;
Action ::= [action] Id ;
 Action ::= [choose] "choose" "(" actions::(Id*) ")" ;
Cond ::= [and] lhs::Cond "and" rhs::Cond ;
 Cond ::= [const] Id ;
 Cond ::= [or] lhs::Cond "or" rhs::Cond ;
