--------------------ada::kellogg.bgf--------------------
component_items ::= (pragma | comp_decl)+ ;
relation ::= simple_expression ((IN range_or_mark) | (n::NOT IN range_or_mark) | (EQ simple_expression) | (NE simple_expression) | (LT_ simple_expression) | (LE simple_expression) | (GT simple_expression) | (GE simple_expression))? ;
package_body ::= p::PACKAGE body_is pkg_body_part end_id_opt SEMI ;
discriminant_constraint ::= p::LPAREN discriminant_association (COMMA discriminant_association)* RPAREN ;
prot_op_bodies_opt ::= (entry_body | subprog_decl_or_body | pragma)* ;
derived_or_private_or_record ::= (abstract_opt NEW subtype_ind WITH) | (NEW subtype_ind) | (abstract_tagged_limited_opt PRIVATE | record_definition) ;
private_opt ::= PRIVATE? ;
accept_alternative ::= accept_stmt stmts_opt ;
label_name ::= IDENTIFIER ;
c_name_list ::= compound_name (COMMA compound_name)* ;
renames ::= RENAMES name | (dummy::definable_operator_symbol) ;
pragma_args_opt ::= (LPAREN pragma_arg (COMMA pragma_arg)* RPAREN)? ;
delay_alternative ::= delay_stmt stmts_opt ;
discriminant_specifications ::= discriminant_specification (SEMI discriminant_specification)* ;
parameter_specification ::= def_ids_colon mode_opt subtype_mark init_opt ;
defining_identifier_list ::= IDENTIFIER (COMMA IDENTIFIER)* ;
selector_name ::= IDENTIFIER ;
select_alternative ::= accept_alternative | delay_alternative | (t::TERMINATE SEMI) ;
entry_barrier ::= WHEN condition ;
declarative_item ::= (pkg::PACKAGE (body_is separate | (pkg_body_part end_id_opt) SEMI) | (def_id spec_decl_part)) | (tsk::TASK (body_is separate | body_part SEMI) | task_type_or_single_decl) | (pro::PROTECTED (body_is separate | (prot_op_bodies_opt end_id_opt)) | prot_type_or_single_decl SEMI) | subprog_decl_or_rename_or_inst_or_body | decl_common ;
aliased_constant_opt ::= ALIASED? CONSTANT? ;
body_is ::= BODY def_id IS ;
statements ::= (pragma | statement)+ ;
spec_decl_part ::= (IS generic_inst | pkg_spec_part) | renames SEMI ;
empty_discrim_opt ::= ε ;
separate_or_abstract ::= SEPARATE | ABSTRACT ;
range_attrib_ref ::= prefix TIC r::RANGE (LPAREN expression RPAREN)? ;
association_head ::= selector_name (PIPE selector_name)* RIGHT_SHAFT ;
selector_names_opt ::= association_head | ε ;
comp_decl ::= def_ids_colon component_subtype_def init_opt SEMI ;
discriminable_type_definition ::= (abstract_opt NEW subtype_ind WITH) | (NEW subtype_ind) | (abstract_tagged_limited_opt PRIVATE) ;
reverse_opt ::= REVERSE? ;
digits_constraint ::= d::DIGITS expression range_constraint_opt ;
rep_spec_part ::= (RECORD align_opt comp_loc_s END RECORD) | (AT expression) | expression ;
pragma_arg ::= (IDENTIFIER RIGHT_SHAFT)? expression ;
task_type_or_single_decl ::= (TYPE def_id discrim_part_opt task_definition_opt) | (def_id task_definition_opt) ;
enum_id_s ::= enumeration_literal_specification (COMMA enumeration_literal_specification)* ;
or_select_opt ::= (OR guard_opt select_alternative)* ;
declarative_part ::= (pragma | declarative_item)* ;
enumeration_aggregate ::= parenth_values ;
subunit ::= sep::SEPARATE LPAREN compound_name RPAREN subprogram_body | package_body | task_body | protected_body ;
delta_constraint ::= d::DELTA expression range_constraint_opt ;
discriminant_direct_name ::= IDENTIFIER ;
generic_formal_parameter ::= (t::TYPE def_id (IS (LPAREN BOX RPAREN) | (RANGE BOX) | (MOD BOX) | (DELTA BOX (DIGITS BOX) | ε) | (DIGITS BOX) | array_type_definition | access_type_definition | (empty_discrim_opt discriminable_type_definition)) | (discrim_part IS discriminable_type_definition)) | (w::WITH (PROCEDURE def_id formal_part_opt subprogram_default_opt) | (FUNCTION def_designator function_tail subprogram_default_opt) | (PACKAGE def_id IS NEW compound_name formal_package_actual_part_opt)) | parameter_specification SEMI ;
task_definition_opt ::= (IS task_items_opt private_task_items_opt end_id_opt SEMI) | SEMI ;
elsifs_opt ::= (ELSIF cond_clause)* ;
subprogram_body ::= (p::PROCEDURE def_id formal_part_opt IS body_part SEMI) | (f::FUNCTION function_tail IS body_part SEMI) ;
identifier_colon_opt ::= (IDENTIFIER COLON)? ;
pkg_body_part ::= declarative_part block_body_opt ;
except_choice_s ::= exception_choice (PIPE exception_choice)* ;
iteration_scheme_opt ::= ((WHILE condition) | (FOR IDENTIFIER IN reverse_opt discrete_subtype_definition))? ;
basic_declarative_items ::= (basic_decl_item | pragma)+ ;
formal_part_opt ::= (LPAREN parameter_specification (SEMI parameter_specification)* RPAREN)? ;
basic_decl_item ::= (pkg::PACKAGE def_id spec_decl_part) | (tsk::TASK task_type_or_single_decl) | (pro::PROTECTED prot_type_or_single_decl SEMI) | subprog_decl | decl_common ;
operator_call_tail ::= LPAREN value_s RPAREN ;
private_task_items_opt ::= (PRIVATE pragma* entrydecls_repspecs_opt)? ;
extension_opt ::= (WITH (NuLL RECORD) | value_s)? ;
prot_type_or_single_decl ::= (TYPE def_id discrim_part_opt protected_definition) | (def_id protected_definition) ;
in_access_opt ::= (IN | ACCESS)? ;
signed_term ::= (p::PLUS term) | (m::MINUS term) | term ;
formal_package_actual_part_opt ::= (LPAREN BOX | defining_identifier_list RPAREN)? ;
basic_declarative_items_opt ::= (basic_decl_item | pragma)* ;
generic_inst ::= NEW compound_name (LPAREN value_s RPAREN)? ;
else_opt ::= (ELSE statements)? ;
if_stmt ::= s::IF cond_clause elsifs_opt else_opt END IF SEMI ;
requeue_stmt ::= r::REQUEUE name (WITH ABORT)? SEMI ;
range_or_mark ::= range | subtype_mark ;
protected_opt ::= PROTECTED? ;
choice ::= OTHERS | discrete_with_range | expression ;
component_list ::= (NuLL SEMI) | (component_items variant_part?) | (empty_component_items variant_part) ;
accept_stmt ::= a::ACCEPT def_id entry_index_opt formal_part_opt (DO handled_stmt_s end_id_opt SEMI) | SEMI ;
compound_name ::= IDENTIFIER (DOT IDENTIFIER)* ;
attribute_id ::= RANGE | DIGITS | DELTA | ACCESS | IDENTIFIER ;
access_type_definition ::= ACCESS (protected_opt (PROCEDURE formal_part_opt) | (FUNCTION func_formal_part_opt RETURN subtype_mark)) | (constant_all_opt subtype_ind) ;
discrim_part_text ::= LPAREN BOX | discriminant_specifications RPAREN ;
subtype_ind ::= subtype_mark constraint_opt ;
index_or_discrete_range_s ::= index_or_discrete_range (COMMA index_or_discrete_range)* ;
expression ::= relation ((a::AND THEN? relation) | (o::OR ELSE? relation) | (XOR relation))* ;
definable_operator_symbol ::= op::CHAR_STRING ;
def_id ::= (cn::compound_name) | (n::IDENTIFIER) ;
protected_body ::= p::PROTECTED body_is prot_op_bodies_opt end_id_opt SEMI ;
range_constraint_opt ::= range_constraint? ;
array_type_definition ::= ARRAY LPAREN index_or_discrete_range_s RPAREN OF component_subtype_def ;
prefix ::= IDENTIFIER ((DOT ALL | IDENTIFIER) | (p::LPAREN value_s RPAREN))* ;
exception_choice ::= compound_name | OTHERS ;
id_opt ::= (endid::definable_operator_symbol) | (n::compound_name) | ε ;
def_designator ::= (n::compound_name) | (d::designator) ;
block ::= declare_opt block_body ;
known_discrim_part ::= LPAREN discriminant_specifications RPAREN ;
generic_subp_inst ::= IS generic_inst SEMI ;
prot_member_decl_s ::= (prot_op_decl | comp_decl)* ;
name ::= IDENTIFIER ((DOT ALL | IDENTIFIER | CHARACTER_LITERAL | (dummy::is_operator)) | (p::LPAREN value_s RPAREN) | (TIC attribute_id))* ;
discrete_with_range ::= mark_with_constraint | range ;
abortable_part ::= stmts_opt ;
call_or_assignment ::= name (ASSIGN expression) | ε SEMI ;
variant ::= w::WHEN choice_s RIGHT_SHAFT component_list ;
discrim_part_opt ::= discrim_part_text? ;
protected_definition ::= IS prot_op_decl_s (PRIVATE prot_member_decl_s)? end_id_opt ;
mark_with_constraint ::= subtype_mark range_constraint ;
loop_stmt ::= iteration_scheme_opt LOOP statements END LOOP ;
parenth_values ::= LPAREN value (COMMA value)* RPAREN ;
null_stmt ::= s::NuLL SEMI ;
type_def ::= (LPAREN enum_id_s RPAREN) | (RANGE range) | (MOD expression) | (DIGITS expression range_constraint_opt) | (DELTA expression (RANGE range) | (DIGITS expression range_constraint_opt)) | array_type_definition | access_type_definition | (empty_discrim_opt derived_or_private_or_record) ;
compilation_unit ::= context_items_opt library_item | subunit pragma* ;
parenthesized_primary ::= pp::LPAREN (NuLL RECORD) | (value_s extension_opt) RPAREN ;
component_subtype_def ::= aliased_opt subtype_ind ;
entry_call_stmt ::= name SEMI ;
enumeration_literal_specification ::= IDENTIFIER | CHARACTER_LITERAL ;
constant_all_opt ::= (CONSTANT | ALL)? ;
task_items_opt ::= pragma* entrydecls_repspecs_opt ;
entry_call_alternative ::= entry_call_stmt stmts_opt ;
statement_identifier ::= n::IDENTIFIER COLON ;
align_opt ::= (AT MOD expression SEMI)? ;
abstract_tagged_limited_opt ::= ((ABSTRACT TAGGED) | TAGGED)? LIMITED? ;
abort_stmt ::= a::ABORT name (COMMA name)* SEMI ;
return_stmt ::= s::RETURN expression? SEMI ;
case_stmt ::= s::CASE expression IS alternative_s END CASE SEMI ;
entrydecls_repspecs_opt ::= (entry_declaration (pragma | rep_spec)*)* ;
discrete_range ::= range | subtype_ind ;
name_or_qualified ::= IDENTIFIER ((DOT ALL | IDENTIFIER | CHARACTER_LITERAL | (dummy::is_operator)) | (p::LPAREN value_s RPAREN) | (TIC parenthesized_primary | attribute_id))* ;
end_id_opt ::= END id_opt ;
subtype_mark ::= compound_name (TIC attribute_id)? ;
value ::= (OTHERS RIGHT_SHAFT expression) | (ranged_expr_s (RIGHT_SHAFT expression)?) ;
body_part ::= declarative_part block_body end_id_opt ;
prot_op_decl ::= entry_declaration | (p::PROCEDURE def_id formal_part_opt SEMI) | (f::FUNCTION def_designator function_tail SEMI) | rep_spec | pragma ;
statement ::= def_label_opt null_stmt | exit_stmt | return_stmt | goto_stmt | delay_stmt | abort_stmt | raise_stmt | requeue_stmt | accept_stmt | select_stmt | if_stmt | case_stmt | (loop_stmt SEMI) | (block END SEMI) | (statement_identifier (loop_stmt id_opt SEMI) | (block end_id_opt SEMI)) | call_or_assignment ;
subprog_decl_or_body ::= (p::PROCEDURE def_id formal_part_opt (IS body_part) | ε SEMI) | (f::FUNCTION def_designator function_tail (IS body_part) | ε SEMI) ;
discrete_subtype_def_opt ::= (LPAREN discrete_subtype_definition) | ε ;
ranged_expr ::= expression ((DOT_DOT simple_expression) | (RANGE range))? ;
variant_part ::= c::CASE discriminant_direct_name IS variant_s END CASE SEMI ;
term ::= factor ((STAR factor) | (DIV factor) | (MOD factor) | (REM factor))* ;
index_constraint ::= p::LPAREN discrete_range (COMMA discrete_range)* RPAREN ;
entry_index_spec_opt ::= (LPAREN FOR def_id IN discrete_subtype_definition) | ε ;
prot_op_decl_s ::= prot_op_decl* ;
aliased_opt ::= ALIASED? ;
alternative_s ::= case_statement_alternative+ ;
declare_opt ::= (DECLARE declarative_part)? ;
def_ids_colon ::= defining_identifier_list COLON ;
exception_handler ::= w::WHEN identifier_colon_opt except_choice_s RIGHT_SHAFT statements ;
access_opt ::= ACCESS? ;
function_tail ::= func_formal_part_opt RETURN subtype_mark ;
choice_s ::= choice (PIPE choice)* ;
entry_body_formal_part ::= entry_index_spec_opt formal_part_opt ;
until_opt ::= UNTIL? ;
func_param ::= def_ids_colon in_access_opt subtype_mark init_opt ;
constraint_opt ::= (range_constraint | digits_constraint | delta_constraint | index_constraint | discriminant_constraint)? ;
factor ::= (NOT primary) | (ABS primary) | (primary (EXPON primary)?) ;
entry_body ::= e::ENTRY def_id entry_body_formal_part entry_barrier IS body_part SEMI ;
generic_formal_part_opt ::= (use_clause | pragma | generic_formal_parameter)* ;
selective_accept ::= guard_opt select_alternative or_select_opt else_opt ;
exit_stmt ::= s::EXIT label_name? (WHEN condition)? SEMI ;
simple_expression ::= signed_term ((PLUS signed_term) | (MINUS signed_term) | (CONCAT signed_term))* ;
pkg_spec_part ::= basic_declarative_items_opt (PRIVATE basic_declarative_items_opt)? end_id_opt ;
discrete_subtype_definition ::= range | subtype_ind ;
range ::= range_dots | range_attrib_ref ;
func_formal_part_opt ::= (LPAREN func_param (SEMI func_param)* RPAREN)? ;
pragma ::= PRAGMA IDENTIFIER pragma_args_opt SEMI ;
raise_stmt ::= r::RAISE compound_name? SEMI ;
subprogram_default_opt ::= (IS BOX | name)? ;
entry_index_opt ::= (LPAREN expression) | ε ;
variant_s ::= variant+ ;
local_enum_name ::= IDENTIFIER ;
subprog_decl ::= (p::PROCEDURE def_id generic_subp_inst | (formal_part_opt renames | is_separate_or_abstract_or_decl SEMI)) | (f::FUNCTION def_designator generic_subp_inst | (function_tail renames | is_separate_or_abstract_or_decl SEMI)) ;
def_label_opt ::= (LT_LT IDENTIFIER GT_GT)? ;
entry_declaration ::= e::ENTRY IDENTIFIER discrete_subtype_def_opt formal_part_opt SEMI ;
cond_clause ::= condition c::THEN statements ;
subprog_decl_or_rename_or_inst_or_body ::= (p::PROCEDURE def_id generic_subp_inst | (formal_part_opt renames | (IS separate_or_abstract | body_part) | ε SEMI)) | (f::FUNCTION def_designator generic_subp_inst | (function_tail renames | (IS separate_or_abstract | body_part) | ε SEMI)) ;
select_stmt ::= s::SELECT (triggering_alternative THEN ABORT) | selective_accept | (entry_call_alternative (OR delay_alternative) | (ELSE statements)) END SELECT SEMI ;
use_clause ::= u::USE (TYPE subtype_mark (COMMA subtype_mark)*) | c_name_list SEMI ;
index_or_discrete_range ::= simple_expression ((DOT_DOT simple_expression) | (RANGE BOX | range))? ;
value_s ::= value (COMMA value)* ;
discriminant_specification ::= def_ids_colon access_opt subtype_mark init_opt ;
goto_stmt ::= s::GOTO label_name SEMI ;
context_items_opt ::= pragma* (with_clause (use_clause | pragma)*)* ;
separate ::= SEPARATE ;
discriminant_association ::= selector_names_opt expression ;
except_handler_part_opt ::= (EXCEPTION exception_handler+)? ;
ranged_expr_s ::= ranged_expr (PIPE ranged_expr)* ;
decl_common ::= (t::TYPE IDENTIFIER (IS type_def) | (discrim_part (IS derived_or_private_or_record) | ε) | empty_discrim_opt SEMI) | (s::SUBTYPE IDENTIFIER IS subtype_ind SEMI) | generic_decl | use_clause | (r::FOR (local_enum_name USE) | (subtype_mark USE rep_spec_part) SEMI) | (IDENTIFIER erd::COLON EXCEPTION RENAMES compound_name) | (IDENTIFIER ord::COLON subtype_mark RENAMES name) | (defining_identifier_list od::COLON EXCEPTION | (CONSTANT ASSIGN) | (aliased_constant_opt (array_type_definition init_opt) | (subtype_ind init_opt)) SEMI) ;
stmts_opt ::= (pragma | statement)* ;
handled_stmt_s ::= statements except_handler_part_opt ;
range_constraint ::= RANGE range ;
is_separate_or_abstract_or_decl ::= (IS separate_or_abstract) | ε ;
rep_spec ::= r::FOR subtype_mark USE rep_spec_part SEMI ;
task_body ::= t::TASK body_is body_part SEMI ;
condition ::= expression ;
operator_call ::= cs::CHAR_STRING operator_call_tail ;
guard_opt ::= (WHEN condition RIGHT_SHAFT pragma*)? ;
is_operator ::= op::CHAR_STRING ;
triggering_alternative ::= delay_stmt | entry_call_stmt stmts_opt ;
library_item ::= private_opt lib_pkg_spec_or_body | subprog_decl_or_rename_or_inst_or_body | generic_decl ;
mode_opt ::= ((IN OUT?) | OUT | ACCESS)? ;
abstract_opt ::= ABSTRACT? ;
block_body ::= b::BEGIN handled_stmt_s ;
designator ::= (op::definable_operator_symbol) | (n::IDENTIFIER) ;
generic_decl ::= g::GENERIC generic_formal_part_opt (PACKAGE def_id renames | (IS pkg_spec_part)) | (PROCEDURE def_id formal_part_opt renames | ε) | (FUNCTION def_designator function_tail renames | ε) SEMI ;
discrim_part ::= discrim_part_text ;
case_statement_alternative ::= s::WHEN choice_s RIGHT_SHAFT statements ;
empty_component_items ::= ε ;
range_dots ::= simple_expression DOT_DOT simple_expression ;
allocator ::= n::NEW name_or_qualified ;
block_body_opt ::= (BEGIN handled_stmt_s)? ;
with_clause ::= w::WITH c_name_list SEMI ;
lib_pkg_spec_or_body ::= pkg::PACKAGE (BODY def_id IS pkg_body_part end_id_opt SEMI) | (def_id spec_decl_part) ;
delay_stmt ::= d::DELAY until_opt expression SEMI ;
comp_loc_s ::= (pragma | (subtype_mark AT expression RANGE range SEMI))* ;
init_opt ::= (ASSIGN expression)? ;
primary ::= name_or_qualified | parenthesized_primary | allocator | NuLL | NUMERIC_LIT | CHARACTER_LITERAL | (cs::CHAR_STRING operator_call_tail?) ;
record_definition ::= (RECORD component_list END RECORD) | (NuLL RECORD) ;
--------------------ada::kempe.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
general_access_modifier ::= "all" | "constant" ;
delay_relative_statement ::= "delay" delay_expression ";" ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
declarative_item ::= basic_declarative_item | body ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
last_bit ::= static_simple_expression ;
constraint ::= scalar_constraint | composite_constraint ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | accept_statement | select_statement ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
protected_body_stub ::= "protected" body defining_identifier "is" "separate" ";" ;
basic_declarative_item ::= basic_declaration | representation_clause | use_clause ;
component_definition ::= "aliased"? subtype_indication ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
letter_or_digit ::= identifier_letter | digit ;
default_name ::= name ;
enumeration_aggregate ::= array_aggregate ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
compilation ::= compilation_unit* ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
discrete_choice ::= expression | discrete_range | "others" ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
context_item ::= with_clause | use_clause ;
mode ::= ("in"?) | ("in" "out") | "out" ;
body ::= proper_body | body_stub ;
record_extension_part ::= "with" record_definition ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | representation_clause ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
character_literal ::= "'" graphic_character "'" ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" label_name ";" ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
slice ::= prefix "(" discrete_range ")" ;
exception_choice ::= exception_name | "others" ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
defining_identifier ::= identifier ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
task_item ::= entry_declaration | representation_clause ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
numeric_literal ::= decimal_literal | based_literal ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
statement ::= (label* simple_statement) | (label* compound_statement) ;
variant_part ::= "case" discriminant_direct_name "is" variant variant* "end" "case" ";" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= "(<>)" | (generic_actual_part?) ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
position ::= static_expression ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
character ::= graphic_character | format_effector | other_control_function ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
simple_statement ::= null_statement | assignment_statement | exit_statement | goto_statement | procedure_call_statement | return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
representation_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
return_statement ::= "return" expression? ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
condition ::= boolean_expression ;
component_item ::= component_declaration | representation_clause ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
parent_unit_name ::= name ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
package_declaration ::= package_specification ";" ;
first_bit ::= static_simple_expression ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" label_statement_identifier ">>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" body defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
explicit_actual_parameter ::= expression | variable_name ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
ancestor_part ::= expression | subtype_mark ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(<>)" ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" static_expression range_constraint? ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | representation_clause ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
base ::= numeral ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
declarative_part ::= declarative_item* ;
entry_index ::= expression ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
null_statement ::= "null" ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
identifier ::= identifier_letter (underline? letter_or_digit)* ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
guard ::= "when" condition "=>" ;
formal_signed_integer_type_definition ::= "range" "<>" ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
triggering_statement ::= entry_call_statement | delay_statement ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
expression ::= (relation ("and" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" relation)*) | (relation ("or" "else" relation)*) | (relation ("xor" relation)*) ;
composite_constraint ::= index_constraint | discriminant_constraint ;
prefix ::= name | implicit_dereference ;
graphic_character ::= identifier_letter | digit | space_character | special_character ;
implicit_dereference ::= name ;
name ::= direct_name | explicit_dereference | indexed_component | slice | selected_component | attribute_reference | type_conversion | function_call | character_literal ;
abortable_part ::= sequence_of_statements ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
assignment_statement ::= variable_name ":=" expression ";" ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= "package" body defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
subtype_mark ::= subtype_name ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
term ::= factor (multiplying_operator factor)* ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
explicit_dereference ::= name "." "all" ;
comment ::= "-" "-" non_end_of_line_character* ;
selected_component ::= prefix "." selector_name ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
discrete_subtype_definition ::= discrete_subtype_indication | "range" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
formal_floating_point_definition ::= "digits" "<>" ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
range_constraint ::= "range" range ;
numeral ::= digit (underline? digit)* ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= "package" defining_program_unit_name renamespackage_name ";" ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::laemmel-verhoef.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range_definition) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
general_access_modifier ::= "all" | "constant" ;
delay_relative_statement ::= "delay" delay_expression ";" ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
declarative_item ::= basic_declarative_item | body ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
last_bit ::= static_simple_expression ;
constraint ::= scalar_constraint | composite_constraint ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | accept_statement | select_statement ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
protected_body_stub ::= "protected" body defining_identifier "is" "separate" ";" ;
basic_declarative_item ::= basic_declaration | representation_clause | use_clause ;
component_definition ::= "aliased"? subtype_indication ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
default_name ::= name ;
enumeration_aggregate ::= array_aggregate ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
compilation ::= compilation_unit* ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
discrete_choice ::= expression | discrete_range | "others" ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
context_item ::= with_clause | use_clause ;
mode ::= ("in"?) | ("in" "out") | "out" ;
body ::= proper_body | body_stub ;
record_extension_part ::= "with" record_definition ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | representation_clause ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
range_definition ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
exception_choice ::= exception_name | "others" ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
defining_identifier ::= identifier ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
task_item ::= entry_declaration | representation_clause ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
statement ::= (label* simple_statement) | (label* compound_statement) ;
variant_part ::= "case" discriminant_direct_name "is" variant variant* "end" "case" ";" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= ("(" "<>" ")") | (generic_actual_part?) ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
position ::= static_expression ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
simple_statement ::= null_statement | assignment_statement | exit_statement | goto_statement | procedure_call_statement | return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
representation_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
return_statement ::= "return" expression? ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
condition ::= boolean_expression ;
component_item ::= component_declaration | representation_clause ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
parent_unit_name ::= name ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
package_declaration ::= package_specification ";" ;
first_bit ::= static_simple_expression ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" label_statement_identifier ">>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" body defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
formal_access_type_definition ::= access_type_definition ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
explicit_actual_parameter ::= expression | variable_name ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
ancestor_part ::= expression | subtype_mark ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(" "<>" ")" ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" static_expression range_constraint? ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | representation_clause ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
terminate_alternative ::= "terminate" ";" ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
declarative_part ::= declarative_item* ;
entry_index ::= expression ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
null_statement ::= "null" ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
guard ::= "when" condition "=>" ;
formal_signed_integer_type_definition ::= "range" "<>" ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
triggering_statement ::= entry_call_statement | delay_statement ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
expression ::= (relation ("and" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" relation)*) | (relation ("or" "else" relation)*) | (relation ("xor" relation)*) ;
composite_constraint ::= index_constraint | discriminant_constraint ;
prefix ::= name | implicit_dereference ;
implicit_dereference ::= name ;
name ::= direct_name | explicit_dereference | indexed_component | slice | selected_component | attribute_reference | type_conversion | function_call | character_literal ;
abortable_part ::= sequence_of_statements ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
formal_discrete_type_definition ::= "(" "<>" ")" ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
assignment_statement ::= variable_name ":=" expression ";" ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
discrete_range ::= discrete_subtype_indication | range_definition ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= "package" body defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
subtype_mark ::= subtype_name ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
term ::= factor (multiplying_operator factor)* ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
explicit_dereference ::= name "." "all" ;
selected_component ::= prefix "." selector_name ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
choice_parameter_specification ::= defining_identifier ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
discrete_subtype_definition ::= discrete_subtype_indication | "range" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
formal_floating_point_definition ::= "digits" "<>" ;
range_constraint ::= "range" range_definition ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'" "(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= "package" defining_program_unit_name renamespackage_name ";" ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::lncs-2219.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
general_access_modifier ::= "all" | "constant" ;
delay_relative_statement ::= "delay" delay_expression ";" ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
declarative_item ::= basic_declarative_item | body ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
last_bit ::= static_simple_expression ;
constraint ::= scalar_constraint | composite_constraint ;
compound_statement ::= if_statement | loop_statement | accept_statement | case_statement | block_statement | select_statement ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" ";" ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
component_definition ::= "aliased"? subtype_indication ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
letter_or_digit ::= identifier_letter | digit ;
default_name ::= name ;
enumeration_aggregate ::= array_aggregate ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
compilation ::= compilation_unit* ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
discrete_choice ::= expression | discrete_range | "others" ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
context_item ::= with_clause | use_clause ;
mode ::= ("in"?) | ("in" "out") | "out" ;
body ::= proper_body | body_stub ;
record_extension_part ::= "with" record_definition ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
character_literal ::= "'" graphic_character "'" ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" label_name ";" ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
slice ::= prefix "(" discrete_range ")" ;
exception_choice ::= exception_name | "others" ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
defining_identifier ::= identifier ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
task_item ::= entry_declaration | aspect_clause ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
numeric_literal ::= decimal_literal | based_literal ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | real_type_definition | record_type_definition | derived_type_definition | integer_type_definition | array_type_definition | access_type_definition ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
statement ::= (label* simple_statement) | (label* compound_statement) ;
variant_part ::= "case" discriminant_direct_name "is" variant+ "end" "case" ";" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= "(<>)" | (generic_actual_part?) ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
position ::= static_expression ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
character ::= graphic_character | format_effector | other_control_function ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
simple_statement ::= null_statement | assignment_statement | goto_statement | return_statement | requeue_statement | abort_statement | code_statement | exit_statement | procedure_call_statement | entry_call_statement | delay_statement | raise_statement ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
return_statement ::= "return" expression? ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
condition ::= boolean_expression ;
component_item ::= component_declaration | aspect_clause ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
parent_unit_name ::= name ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
package_declaration ::= package_specification ";" ;
first_bit ::= static_simple_expression ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" label_statement_identifier ">>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | object_declaration | subprogram_declaration | package_declaration | exception_declaration | generic_instantiation | subtype_declaration | number_declaration | abstract_subprogram_declaration | renaming_declaration | generic_declaration ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
explicit_actual_parameter ::= expression | variable_name ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
ancestor_part ::= expression | subtype_mark ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(<>)" ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" static_expression range_constraint? ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
base ::= numeral ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
declarative_part ::= declarative_item* ;
entry_index ::= expression ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
null_statement ::= "null" ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
identifier ::= identifier_letter (underline? letter_or_digit)* ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
guard ::= "when" condition "=>" ;
formal_signed_integer_type_definition ::= "range" "<>" ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
triggering_statement ::= entry_call_statement | delay_statement ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
expression ::= (relation ("and" relation)*) | (relation ("or" relation)*) | (relation ("xor" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" "else" relation)*) ;
composite_constraint ::= index_constraint | discriminant_constraint ;
prefix ::= name | implicit_dereference ;
graphic_character ::= identifier_letter | digit | space_character | special_character ;
implicit_dereference ::= name ;
name ::= direct_name | indexed_component | selected_component | type_conversion | character_literal | explicit_dereference | slice | attribute_reference | function_call ;
abortable_part ::= sequence_of_statements ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
assignment_statement ::= variable_name ":=" expression ";" ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= "package" "body" defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
subtype_mark ::= subtype_name ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
term ::= factor (multiplying_operator factor)* ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
explicit_dereference ::= name "." "all" ;
comment ::= "-" "-" non_end_of_line_character* ;
selected_component ::= prefix "." selector_name ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
discrete_subtype_definition ::= discrete_subtype_indication | range ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
formal_floating_point_definition ::= "digits" "<>" ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
range_constraint ::= "range" range ;
numeral ::= digit (underline? digit)* ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= "package" defining_program_unit_name "renames" package_name ";" ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::lncs-4348.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= overriding_indicator? subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
general_access_modifier ::= "all" | "constant" ;
delay_relative_statement ::= "delay" delay_expression ";" ;
nonlimited_with_clause ::= "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
generic_formal_parameter_selector_name ::= selector_name ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
block_statement_identifier ::= statement_identifier ;
pragma_argument_identifier ::= identifier ;
declarative_item ::= basic_declarative_item | body ;
restriction_parameter_argument ::= name | expression ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
label_statement_identifier ::= statement_identifier ;
last_bit ::= static_simple_expression ;
interface_list ::= interface_subtype_mark ("and" interface_subtype_mark)* ;
limited_with_clause ::= "limited" "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
library_unit_name ::= name ;
generic_procedure_name ::= name ;
constraint ::= scalar_constraint | composite_constraint ;
compound_statement ::= if_statement | loop_statement | extended_return_statement | accept_statement | case_statement | block_statement | select_statement ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
protected_identifier ::= identifier ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" ";" ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" restriction_parameter_argument) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
default_name ::= name ;
enumeration_aggregate ::= array_aggregate ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
discriminant_direct_name ::= direct_name ;
compilation ::= compilation_unit* ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? ("limited" | "synchronized")? "new" ancestor_subtype_indication ("and" interface_list)? "with" "private" ";" ;
package_instance_name ::= name ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
interface_subtype_mark ::= subtype_mark ;
formal_package_association ::= generic_association | (generic_formal_parameter_selector_name "=><>") ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
static_simple_expression ::= simple_expression ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" ("new" interface_list "with")? protected_definition ";" ;
non_end_of_line_character ::= "character" ;
discrete_choice ::= expression | discrete_range | "others" ;
subprogram_name ::= name ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
task_identifier ::= identifier ;
context_item ::= with_clause | use_clause ;
mode ::= ("in"?) | ("in" "out") | "out" ;
body ::= proper_body | body_stub ;
record_extension_part ::= "with" record_definition ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
block_identifier ::= identifier ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
character_literal ::= "'" graphic_character "'" ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" label_name ";" ;
restriction_parameter_identifier ::= identifier ;
slice ::= prefix "(" discrete_range ")" ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
exception_choice ::= exception_name | "others" ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
defining_identifier ::= identifier ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
task_item ::= entry_declaration | aspect_clause ;
object_name ::= name ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
string_expression ::= expression ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
procedure_prefix ::= prefix ;
numeric_literal ::= decimal_literal | based_literal ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
procedure_or_entry_call ::= procedure_call_statement | entry_call_statement ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | real_type_definition | record_type_definition | derived_type_definition | integer_type_definition | array_type_definition | access_type_definition | interface_type_definition ;
identifier_extend ::= mark_non_spacing | mark_spacing_combining | number_decimal | punctuation_connector | other_format ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" ("new" interface_list "with")? task_definition)? ";" ;
statement ::= (label* simple_statement) | (label* compound_statement) ;
variant_part ::= "case" discriminant_direct_name "is" variant+ "end" "case" ";" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
extended_return_statement ::= "return" defining_identifier ":" "aliased"? return_subtype_indication (":=" expression)? ("do" handled_sequence_of_statements "end" "return")? ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
component_local_name ::= local_name ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" ";" ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "limited"? "new" parent_subtype_indication (("and" interface_list)? record_extension_part)? ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
identifier_start ::= letter_uppercase | letter_lowercase | letter_titlecase | letter_modifier | letter_other | number_letter ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
loop_name ::= name ;
subprogram_default ::= default_name | "<>" | "null" ;
parameter_and_result_profile ::= (formal_part? "return" null_exclusion? subtype_mark) | (formal_part? "return" access_definition) ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= ("(" ("others" "=>")? "<>)") | (generic_actual_part?) | ("(" formal_package_association ("," formal_package_association)* ("," "others" "=><>")? ")") ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
ancestor_subtype_indication ::= subtype_indication ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
component_selector_name ::= selector_name ;
position ::= static_expression ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition | formal_interface_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification ::= (defining_identifier_list ":" null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
loop_identifier ::= identifier ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
simple_statement ::= null_statement | assignment_statement | goto_statement | simple_return_statement | requeue_statement | abort_statement | code_statement | exit_statement | procedure_call_statement | entry_call_statement | delay_statement | raise_statement ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
condition ::= boolean_expression ;
null_exclusion ::= "not" "null" ;
component_item ::= component_declaration | aspect_clause ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
parent_unit_name ::= name ;
boolean_expression ::= expression ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
discriminant_selector_name ::= selector_name ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
static_expression ::= expression ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= limited_with_clause | nonlimited_with_clause ;
formal_derived_type_definition ::= "abstract"? ("limited" | "synchronized")? "new" subtype_mark (("and" interface_list)? "with" "private")? ;
task_name ::= name ;
package_declaration ::= package_specification ";" ;
first_bit ::= static_simple_expression ;
restriction_identifier ::= identifier ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
label_name ::= name ;
parent_subtype_indication ::= subtype_indication ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" label_statement_identifier ">>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" ";" ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= (defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | object_declaration | subprogram_declaration | null_procedure_declaration | renaming_declaration | generic_declaration | subtype_declaration | number_declaration | abstract_subprogram_declaration | package_declaration | exception_declaration | generic_instantiation ;
non_quotation_mark_graphic_character ::= graphic_character ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | (overriding_indicator? "procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | (overriding_indicator? "function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
package_name ::= name ;
explicit_actual_parameter ::= expression | variable_name ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
ancestor_part ::= expression | subtype_mark ;
raise_statement ::= ("raise" ";") | ("raise" exception_name ("with" string_expression)? ";") ;
function_specification ::= "function" defining_designator parameter_and_result_profile ;
unknown_discriminant_part ::= "(<>)" ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
function_prefix ::= prefix ;
array_component_association ::= (discrete_choice_list "=>" expression) | (discrete_choice_list "=><>") ;
overriding_indicator ::= "not"? "overriding" ;
single_task_declaration ::= "task" defining_identifier ("is" ("new" interface_list "with")? task_definition)? ";" ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" static_expression range_constraint? ;
delay_expression ::= expression ;
entry_direct_name ::= direct_name ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= ((component_choice_list "=>")? expression) | (component_choice_list "=><>") ;
base ::= numeral ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
formal_object_declaration ::= defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)? ";" defining_identifier_list ":" mode access_definition (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
declarative_part ::= declarative_item* ;
entry_index ::= expression ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subprogram_body ::= overriding_indicator? subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
null_statement ::= "null" ";" ;
object_renaming_declaration ::= (defining_identifier ":" null_exclusion? subtype_mark "renames" object_name ";") | (defining_identifier ":" access_definition "renames" object_name ";") ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ("is" "tagged")? ";" ;
first_subtype_local_name ::= local_name ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
return_subtype_indication ::= subtype_indication | access_definition ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
identifier ::= identifier_start (identifier_start | identifier_extend)* ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
guard ::= "when" condition "=>" ;
formal_signed_integer_type_definition ::= "range" "<>" ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
access_type_definition ::= (null_exclusion? access_to_object_definition) | (null_exclusion? access_to_subprogram_definition) ;
triggering_statement ::= procedure_or_entry_call | delay_statement ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
expression ::= (relation ("and" relation)*) | (relation ("or" relation)*) | (relation ("xor" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" "else" relation)*) ;
procedure_specification ::= "procedure" defining_program_unit_name parameter_profile ;
entry_identifier ::= identifier ;
composite_constraint ::= index_constraint | discriminant_constraint ;
function_name ::= name ;
prefix ::= name | implicit_dereference ;
implicit_dereference ::= name ;
name ::= direct_name | indexed_component | selected_component | type_conversion | character_literal | explicit_dereference | slice | attribute_reference | function_call ;
abortable_part ::= sequence_of_statements ;
formal_parameter_selector_name ::= selector_name ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
assignment_statement ::= variable_name ":=" expression ";" ;
exception_name ::= name ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? access_definition (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
procedure_name ::= name ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= "package" "body" defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
interface_type_definition ::= ("limited" | "task" | "protected" | "synchronized")? "interface" ("and" interface_list)? ;
subtype_mark ::= subtype_name ;
variable_name ::= name ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
term ::= factor (multiplying_operator factor)* ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" ("new" interface_list "with")? protected_definition ";" ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
callable_entity_name ::= name ;
explicit_dereference ::= name "." "all" ;
comment ::= "-" "-" non_end_of_line_character* ;
selected_component ::= prefix "." selector_name ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
formal_subprogram_declaration ::= formal_concrete_subprogram_declaration | formal_abstract_subprogram_declaration ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
generic_package_name ::= name ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= procedure_specification | function_specification ;
discrete_subtype_indication ::= subtype_indication ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
discrete_subtype_definition ::= discrete_subtype_indication | range ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
entry_name ::= name ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
loop_statement_identifier ::= statement_identifier ;
subtype_name ::= name ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") | ("(" expression ("," expression)* "," "others" "=><>)") ;
formal_floating_point_definition ::= "digits" "<>" ;
generic_function_name ::= name ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
formal_interface_type_definition ::= interface_type_definition ;
range_constraint ::= "range" range ;
numeral ::= digit (underline? digit)* ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= "package" defining_program_unit_name "renames" package_name ";" ;
simple_return_statement ::= "return" expression? ";" ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::cordy-hyaric.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= overriding_indicator? subprogram_specification blocksemi ;
accept_statement_entry_index ::= "(" entry_index ")" ;
relation ::= (simple_expression relational_operator_simple_expression?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= NL "package" "body" defining_program_unit_name "is" IN blockeol declarative_part EX package_body_statements? "end" package_body_identifier? unitsemi ;
general_access_modifier ::= "all" | "constant" ;
delay_relative_statement ::= "delay" expression semi ;
nonlimited_with_clause ::= "private"? "with" {with_name ","}+ semi ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
formal_derived_type_definition_modifier ::= "limited" | "synchronized" ;
indexed_component_component ::= "(" {index_expression ","}+ ")" ;
defining_identifier_list ::= {defining_identifier ","}+ ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
subtype_access_or_array_type_definition ::= subtype_indication | access_definition | array_type_definition ;
declarative_item ::= basic_declarative_item | body ;
restriction_parameter_argument ::= expression ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
last_bit ::= simple_expression ;
interface_list ::= subtype_mark | (subtype_mark "and" interface_list) ;
limited_with_clause ::= "limited" "private"? "with" {with_name ","}+ semi ;
library_unit_name ::= name ;
constraint ::= scalar_constraint | composite_constraint ;
designator_parent_unit_name ::= parent_unit_name "." ;
generic_formal_part ::= "generic" generic_formal_parameter_declaration_or_use_clause* ;
raise_statement_expression ::= "with" expression ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | extended_return_statement | accept_statement | select_statement ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" blocksemi ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
and_or_xor_relation ::= and_or_xor relation ;
elsif_expression ::= "elsif" expression "then" expression ;
used_name ::= name ;
restriction ::= identifier arrow_restriction_parameter_argument? ;
formal_object_declaration_default ::= colon_equals default_expression ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
default_name ::= name ;
enumeration_aggregate ::= array_aggregate ;
selective_accept_or_alternative ::= EX "or" IN eol guard? select_alternative ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
compilation ::= compilation_unit* ;
constrained_array_definition ::= "array" "(" {discrete_subtype_definition ","}+ ")" "of" component_definition ;
record_type_definition_tagged ::= "abstract"? "tagged" ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol "abstract"? private_extension_declaration_modifier? "new" subtype_indication private_extension_declaration_interface_list? "with" "private" blocksemi ;
expression_or_null ::= expression | "<>" ;
single_task_declaration_definition ::= "is" IN blockeol single_task_declaration_definition_interface_list? EX task_definition ;
procedure_call_statement ::= prefix actual_parameter_part? semi ;
formal_package_association ::= generic_association | (selector_name arrow "<>") ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
used_subtype_mark ::= subtype_mark ;
record_representation_clause ::= "for" local_name "use" IN eol "record" mod_clause? IN eol component_clause* EX "end" "record" blocksemi EX ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" blockeol single_protected_declaration_interface_list? protected_definition unitsemi ;
package_body_statements ::= "begin" IN eol handled_sequence_of_statements EX ;
discrete_choice ::= expression | discrete_range | "others" ;
exception_renaming_declaration ::= defining_identifier colon "exception" "renames" name semi ;
defining_program_unit_name_parent ::= parent_unit_name "." ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition blocksemi) | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= defining_program_unit_name_parent? defining_identifier ;
context_item ::= with_clause | use_clause ;
function_call_component ::= actual_parameter_part ;
mode ::= ("in"?) | ("in" "out") | "out" ;
body ::= proper_body | body_stub ;
record_extension_part ::= "with" record_definition ;
code_statement ::= qualified_expression semi ;
generic_actual_part ::= "(" {generic_association ","}+ ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
actual_parameter_part ::= "(" {parameter_association ","}+ ")" ;
character_literal ::= charlit ;
attribute_designator ::= (identifier attribute_designator_expression?) | "access" | "delta" | "digits" ;
known_discriminant_part ::= "(" discriminant_specification_list ")" ;
wide_identifier ::= "[" stringlit "]" ;
loop_statement ::= loop_statement_identifier? iteration_scheme? "loop" IN eol sequence_of_statements EX "end" "loop" identifier? blocksemi ;
protected_body ::= "protected" "body" defining_identifier "is" IN blockeol protected_operation_item* EX "end" identifier? unitsemi ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" name semi ;
slice ::= prefix slice_component ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
exception_choice ::= name | "others" ;
task_definition_private ::= "private" IN eol task_item* EX ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
defining_identifier ::= identifier ;
or_selector_name ::= orbar selector_name ;
exit_statement ::= "exit" name? exit_statement_when_condition? semi ;
task_item ::= entry_declaration | aspect_clause | pragma ;
index_or_parameter_value ::= expression | discrete_range | parameter_association ;
exception_declaration ::= defining_identifier_list colon "exception" semi ;
parent_name_dot ::= parent_unit_name "." ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= record_type_definition_tagged? "limited"? record_definition ;
number_declaration ::= defining_identifier_list colon "constant" colon_equals expression semi ;
task_type_declaration_definition_interface_list ::= "new" interface_list "with" ;
enumeration_type_definition ::= "(" {enumeration_literal_specification ","}+ ")" ;
object_declaration_expression ::= colon_equals expression ;
numeric_literal ::= decimal_literal | based_literal ;
procedure_or_entry_call ::= procedure_call_statement | entry_call_statement ;
decimal_fixed_point_definition ::= "delta" expression "digits" expression real_range_specification? ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
blocksemi ::= ";" NL ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
statement_identifier ::= direct_name ;
discriminant_specification_list ::= discriminant_specification semi_discriminant_specification* ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition | interface_type_definition ;
comma_others_arrow_null ::= "," "others" arrow "<>" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? task_type_declaration_definition? blocksemi ;
statement ::= label* unlabeled_statement ;
semi ::= ";" NL ;
package_body_identifier ::= parent_name_dot? identifier ;
variant_part ::= "case" direct_name "is" IN blockeol variant+ EX "end" "case" blocksemi ;
if_statement_else ::= EX "else" IN eol sequence_of_statements ;
index_constraint ::= "(" {discrete_range ","}+ ")" ;
attribute_reference ::= prefix attribute_reference_component ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification blocksemi ;
and_or_xor ::= ("and" "then"?) | ("or" "else"?) | "xor" ;
extended_return_statement ::= "return" defining_identifier colon "aliased"? return_subtype_indication extended_return_statement_expression? extended_return_statement_do? unitsemi ;
range_attribute_reference ::= prefix SPOFF "'" range_attribute_designator ;
conditional_entry_call ::= "select" IN eol entry_call_alternative EX "else" IN eol sequence_of_statements EX "end" "select" unitsemi ;
real_range_specification ::= "range" simple_expression SP ".." SP simple_expression ;
colon ::= ":" ;
else_expression ::= "else" expression ;
use_type_clause ::= "use" "type" {used_subtype_mark ","}+ semi ;
exception_handler ::= "when" exception_handler_specification? exception_choice or_exception_choice* arrow sequence_of_statements ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
range_attribute_designator ::= "range" SPON range_attribute_designator_expression? ;
subtype_or_access_definition ::= (null_exclusion? subtype_mark) | access_definition ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" blocksemi ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "limited"? "new" subtype_indication interface_and_record_extension_specification? ;
blockeol ::= NL ;
entry_body_formal_part ::= entry_body_formal_part_specification? parameter_profile ;
record_aggregate ::= "(" record_component_association_list ")" ;
orbar ::= "|" | "!" ;
entry_body ::= NL "entry" defining_identifier entry_body_formal_part entry_barrier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
factor ::= (primary starstar_primary?) | ("abs" primary) | ("not" primary) ;
mod_clause ::= "at" "mod" expression semi ;
and_interface_list ::= "and" interface_list ;
record_component_association_list ::= ({record_component_association ","}+) | ("null" "record") ;
explicit_generic_actual_parameter ::= expression | name | subtype_mark ;
or_discrete_choice ::= orbar discrete_choice ;
unlabeled_statement ::= simple_statement | compound_statement ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" | "null" ;
generic_association_selector_name ::= selector_name arrow ;
parameter_and_result_profile ::= formal_part? "return" subtype_or_access_definition ;
simple_expression ::= unary_adding_operator? term binary_adding_operator_term* ;
binary_adding_operator ::= "+" | "-" | (IN NL "&" EX) ;
interface_and_record_extension_specification ::= ("and" interface_list record_extension_part?) | record_extension_part ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
use_package_clause ::= "use" {used_name ","}+ semi ;
range_attribute_designator_expression ::= "(" expression ")" ;
package_specification_identifier ::= parent_name_dot? identifier ;
range ::= range_attribute_reference | (simple_expression SP ".." SP simple_expression) ;
pragma ::= ("pragma" id blocksemi) | ("pragma" id pragma_arguments blocksemi) ;
formal_package_actual_part ::= ("(" others_arrow? "<>" ")") | (generic_actual_part?) | ("(" {formal_package_association ","}+ comma_others_arrow_null? ")") ;
type_conversion ::= subtype_mark "(" expression ")" ;
component_declaration ::= defining_identifier_list colon component_definition component_declaration_default? semi ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol private_type_declaration_tagged? "limited"? "private" blocksemi ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix indexed_component_component ;
requeue_statement ::= "requeue" name requeue_statement_with_abort? semi ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier entry_declaration_subtype? parameter_profile blocksemi ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
position ::= expression ;
enumeration_representation_clause ::= "for" local_name "use" enumeration_aggregate blocksemi ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition | formal_interface_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
exit_statement_when_condition ::= "when" condition ;
discriminant_specification_default ::= colon_equals default_expression ;
discriminant_specification ::= (defining_identifier_list colon null_exclusion? subtype_mark discriminant_specification_default?) | (defining_identifier_list colon access_definition discriminant_specification_default?) ;
discriminant_association ::= discriminant_selector_name_arrow? expression ;
simple_statement ::= null_statement | procedure_call_statement | assignment_statement | exit_statement | goto_statement | simple_return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement | pragma ;
pragma_argument_association ::= identifier_arrow? expression ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" {abort_name ","}+ semi ;
case_statement ::= "case" expression "is" IN blockeol case_statement_alternative+ EX "end" "case" blocksemi ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" name blocksemi) | ("generic" "procedure" defining_program_unit_name "renames" name blocksemi) | ("generic" "function" defining_program_unit_name "renames" name blocksemi) ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
explicit_dereference_component ::= "." "all" ;
semi_parameter_specification ::= ";" parameter_specification ;
selective_accept_else_alternative ::= "else" sequence_of_statements ;
condition ::= expression ;
entry_body_formal_part_specification ::= "(" entry_index_specification ")" ;
null_exclusion ::= "not" "null" ;
component_item ::= component_declaration | aspect_clause | pragma ;
parameter_type_specification ::= (mode null_exclusion? subtype_mark parameter_specification_default?) | (access_definition parameter_specification_default?) ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" expression semi ;
parent_unit_name ::= name ;
extended_return_statement_expression ::= colon_equals expression ;
package_specification_private ::= "private" IN eol basic_declarative_item* EX ;
case_statement_alternative ::= "when" discrete_choice_list arrow sequence_of_statements ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration | pragma ;
defining_operator_symbol ::= operator_symbol ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= limited_with_clause | nonlimited_with_clause ;
formal_derived_type_definition ::= "abstract"? formal_derived_type_definition_modifier? "new" subtype_mark formal_derived_type_definition_interface_list? ;
eol ::= NL ;
package_declaration ::= package_specification unitsemi ;
generic_formal_parameter_declaration_or_use_clause ::= generic_formal_parameter_declaration | use_clause | pragma ;
first_bit ::= simple_expression ;
declare_declarative_part ::= "declare" IN eol declarative_part EX ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression semi ;
discriminant_constraint ::= "(" {discriminant_association ","}* ")" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
if_expression ::= "if" expression "then" expression elsif_expression* else_expression? ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= "for" local_name SPOFF "'" attribute_designator SPON "use" expression blocksemi ;
accept_statement ::= "accept" direct_name accept_statement_entry_index? parameter_profile accept_statement_statements? unitsemi ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" statement_identifier ">>" ;
identifier_arrow ::= identifier arrow ;
unitsemi ::= ";" NL NL ;
component_clause ::= local_name "at" position "range" first_bit SP ".." SP last_bit semi ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" blocksemi ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" blocksemi ;
parameter_specification_default ::= colon_equals default_expression ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= defining_identifier_list colon parameter_type_specification ;
parameter_association ::= parameter_association_selector_name explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | null_procedure_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation | pragma ;
single_task_declaration_definition_interface_list ::= "new" interface_list "with" ;
attribute_reference_component ::= SPOFF "'" attribute_designator SPON ;
generic_instantiation ::= ("package" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "procedure" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "function" defining_designator "is" generic_instantiation_clause) ;
explicit_actual_parameter ::= expression ;
local_name ::= direct_name | (direct_name SPOFF "'" attribute_designator SPON) ;
ancestor_part ::= expression | subtype_mark ;
exception_handler_specification ::= choice_parameter_specification colon ;
protected_type_declaration_interface_list ::= "new" interface_list "with" ;
arrow_restriction_parameter_argument ::= arrow restriction_parameter_argument ;
raise_statement ::= ("raise" semi) | ("raise" name raise_statement_expression? semi) ;
function_specification ::= "function" defining_designator parameter_and_result_profile ;
unknown_discriminant_part ::= "(" "<>" ")" ;
unconstrained_array_definition ::= "array" "(" {index_subtype_definition ","}+ ")" "of" component_definition ;
array_component_association ::= discrete_choice_list arrow expression_or_null ;
overriding_indicator ::= "not"? "overriding" ;
single_task_declaration ::= "task" defining_identifier single_task_declaration_definition? unitsemi ;
if_statement_elsif ::= EX "elsif" condition "then" IN eol sequence_of_statements ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" expression range_constraint? ;
asynchronous_select ::= "select" IN eol triggering_alternative EX EX "then" "abort" IN eol abortable_part EX "end" "select" unitsemi ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause | pragma ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" name blocksemi ;
record_component_association ::= expression | (component_choice_list arrow expression_or_null) ;
terminate_alternative ::= "terminate" semi ;
if_statement ::= "if" condition "then" IN eol sequence_of_statements if_statement_elsif* if_statement_else? EX "end" "if" semi ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
formal_object_declaration ::= (defining_identifier_list colon mode null_exclusion? subtype_mark formal_object_declaration_default? semi) | (defining_identifier_list colon mode access_definition formal_object_declaration_default? semi) ;
package_specification ::= NL "package" defining_program_unit_name "is" IN blockeol basic_declarative_item* EX package_specification_private? "end" package_specification_identifier? ;
ordinary_fixed_point_definition ::= "delta" expression real_range_specification ;
protected_definition_private ::= EX "private" IN eol protected_element_declaration* ;
indexed_slice_type_conv_or_function_call_component ::= "(" {index_or_parameter_value ","}+ ")" ;
declarative_part ::= declarative_item* ;
entry_index ::= expression ;
delta_constraint ::= "delta" expression range_constraint? ;
subprogram_body ::= NL overriding_indicator? subprogram_specification "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" designator? unitsemi ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" blocksemi ;
null_statement ::= "null" semi ;
object_renaming_declaration ::= (defining_identifier colon null_exclusion? subtype_mark "renames" name semi) | (defining_identifier colon access_definition "renames" name semi) ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? incomplete_type_declaration_modifier? blocksemi ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" name formal_package_actual_part semi ;
handled_sequence_of_statements ::= sequence_of_statements handled_sequence_of_statements_exception? ;
return_subtype_indication ::= subtype_indication | access_definition ;
formal_concrete_subprogram_declaration_default ::= "is" subprogram_default ;
expression_or_aggregate ::= ("(" SPON expression ")") | (SPON aggregate) ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification formal_concrete_subprogram_declaration_default? semi ;
identifier ::= id | wide_identifier ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
guard ::= "when" condition arrow ;
formal_signed_integer_type_definition ::= "range" "<>" ;
component_list ::= (component_item+) | (component_item* variant_part) | ("null" semi) ;
formal_private_type_definition_tagged ::= "abstract"? "tagged" ;
colon_equals ::= ":=" ;
access_type_definition ::= (null_exclusion? access_to_object_definition) | (null_exclusion? access_to_subprogram_definition) ;
triggering_statement ::= procedure_or_entry_call | delay_statement ;
generic_package_declaration ::= generic_formal_part package_specification blocksemi ;
expression ::= relation and_or_xor_relation* ;
procedure_specification ::= "procedure" defining_program_unit_name parameter_profile ;
parameter_association_selector_name ::= selector_name arrow ;
selected_component_component ::= "." selector_name ;
semi_discriminant_specification ::= ";" discriminant_specification ;
composite_constraint ::= index_constraint | discriminant_constraint ;
prefix ::= name ;
slice_component ::= "(" discrete_range ")" ;
implicit_dereference ::= name ;
accept_statement_statements ::= "do" IN eol handled_sequence_of_statements EX "end" identifier? ;
name ::= (direct_name name_component*) | character_literal ;
abortable_part ::= sequence_of_statements ;
binary_adding_operator_term ::= binary_adding_operator term ;
private_extension_declaration_interface_list ::= "and" interface_list ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
variant ::= "when" discrete_choice_list arrow component_list ;
protected_definition ::= IN protected_operation_declaration* protected_definition_private? EX "end" identifier? ;
program ::= compilation ;
formal_discrete_type_definition ::= "(" "<>" ")" ;
relational_operator_simple_expression ::= relational_operator simple_expression ;
string_literal ::= stringlit ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) | pragma ;
assignment_statement ::= name colon_equals expression semi ;
floating_point_definition ::= "digits" expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list colon "aliased"? "constant"? subtype_access_or_array_type_definition object_declaration_expression? semi) | single_task_declaration | single_protected_declaration ;
discrete_range ::= subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= NL "package" "body" defining_identifier "is" "separate" blocksemi ;
unary_adding_operator ::= "+" | "-" ;
subtype_mark ::= name ;
interface_type_definition ::= interface_type_definition_modifier? "interface" interface_type_definition_list? ;
or_exception_choice ::= orbar exception_choice ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? semi ;
formal_private_type_definition ::= formal_private_type_definition_tagged? "limited"? "private" ;
term ::= factor multiplying_operator_factor* ;
entry_declaration_subtype ::= "(" discrete_subtype_definition ")" ;
starstar_primary ::= "**" primary ;
protected_type_declaration ::= NL "protected" "type" defining_identifier known_discriminant_part? "is" protected_type_declaration_interface_list? eol protected_definition unitsemi ;
function_call ::= prefix function_call_component ;
with_name ::= name ;
explicit_dereference ::= name explicit_dereference_component ;
selected_component ::= prefix selected_component_component ;
discriminant_selector_name_arrow ::= selector_name or_selector_name* arrow ;
signed_integer_type_definition ::= "range" simple_expression SP ".." SP simple_expression ;
named_array_aggregate ::= "(" {array_component_association ","}+ ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
formal_subprogram_declaration ::= formal_concrete_subprogram_declaration | formal_abstract_subprogram_declaration ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement+ ;
task_definition ::= IN task_item* task_definition_private? EX "end" identifier? ;
selective_accept ::= "select" IN eol guard? select_alternative selective_accept_or_alternative* selective_accept_else_alternative? EX "end" "select" unitsemi ;
interface_type_definition_list ::= "and" interface_list ;
multiplying_operator_factor ::= multiplying_operator factor ;
name_component ::= explicit_dereference_component | indexed_slice_type_conv_or_function_call_component | selected_component_component | attribute_reference_component ;
subprogram_specification ::= procedure_specification | function_specification ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition blocksemi ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation | pragma ;
modular_type_definition ::= "mod" expression ;
formal_part ::= "(" parameter_specification semi_parameter_specification* ")" ;
handled_sequence_of_statements_exception ::= "exception" IN eol exception_handler+ EX ;
attribute_designator_expression ::= "(" expression ")" ;
incomplete_type_declaration_modifier ::= "is" "tagged" ;
discrete_subtype_definition ::= subtype_indication | range ;
formal_derived_type_definition_interface_list ::= and_interface_list? "with" "private" ;
block_statement ::= block_statement_identifier_colon? declare_declarative_part? "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
entry_call_statement ::= name actual_parameter_part? semi ;
abort_name ::= name ;
private_type_declaration_tagged ::= "abstract"? "tagged" ;
component_choice_list ::= (selector_name or_selector_name*) | "others" ;
component_declaration_default ::= colon_equals default_expression ;
private_extension_declaration_modifier ::= "limited" | "synchronized" ;
discrete_choice_list ::= discrete_choice or_discrete_choice* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication semi ;
loop_statement_identifier ::= statement_identifier colon ;
positional_array_aggregate ::= "(" {index_expression ","}+ comma_others* ")" ;
others_arrow ::= "others" arrow ;
formal_floating_point_definition ::= "digits" "<>" ;
requeue_statement_with_abort ::= "with" "abort" ;
index_expression ::= expression ;
task_type_declaration_definition ::= "is" IN blockeol task_type_declaration_definition_interface_list? task_definition EX ;
formal_interface_type_definition ::= interface_type_definition ;
range_constraint ::= "range" range ;
task_body ::= NL "task" "body" defining_identifier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
qualified_expression ::= subtype_mark SPOFF "'" expression_or_aggregate ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= generic_association_selector_name? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= (designator_parent_unit_name? identifier) | operator_symbol ;
timed_entry_call ::= "select" IN eol entry_call_alternative EX "or" IN eol delay_alternative EX "end" "select" unitsemi ;
pragma_arguments ::= "(" {pragma_argument_association ","}+ ")" ;
single_protected_declaration_interface_list ::= "new" interface_list "with" ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= NL "package" defining_program_unit_name "renames" name blocksemi ;
simple_return_statement ::= "return" expression? semi ;
comma_others ::= "," "others" arrow expression_or_null ;
block_statement_identifier_colon ::= statement_identifier colon ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
generic_instantiation_clause ::= "new" name generic_actual_part? blocksemi ;
arrow ::= "=>" ;
extended_return_statement_do ::= "do" IN eol handled_sequence_of_statements EX "end" "return" ;
interface_type_definition_modifier ::= "limited" | "task" | "protected" | "synchronized" ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") | if_expression ;
record_definition ::= (IN eol "record" IN eol component_list EX "end" "record" EX) | ("null" "record") ;
--------------------c::iso-9899-1999.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
external-declaration ::= function-definition | declaration ;
designator-list ::= designator | (designator-list designator) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
declarator ::= pointer? direct-declarator ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | "_Imaginary" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
constant-expression ::= conditional-expression ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
struct-or-union ::= "struct" | "union" ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
block-item ::= declaration | statement ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
typedef-name ::= identifier ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::iso-9899-tc2.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
external-declaration ::= function-definition | declaration ;
designator-list ::= designator | (designator-list designator) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
declarator ::= pointer? direct-declarator ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
constant-expression ::= conditional-expression ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
struct-or-union ::= "struct" | "union" ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
block-item ::= declaration | statement ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
typedef-name ::= identifier ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::iso-9899-tc3.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
external-declaration ::= function-definition | declaration ;
designator-list ::= designator | (designator-list designator) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
declarator ::= pointer? direct-declarator ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
constant-expression ::= conditional-expression ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
struct-or-union ::= "struct" | "union" ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" type-qualifier-list? assignment-expression? "]") | (direct-abstract-declarator? "[" "static" type-qualifier-list? assignment-expression "]") | (direct-abstract-declarator? "[" type-qualifier-list "static" assignment-expression "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
block-item ::= declaration | statement ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
typedef-name ::= identifier ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::antoniol.bgf--------------------
long_comment ::= comment+ ;
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
not_newline ::= long_comment | (token) ;
ifdef ::= "//"? ifdef_line newline line* elsif_part* else_part? "//"? endifdef_line newline ;
any_other_line ::= not_newline* ;
line ::= ifdef | ("//"? other_preprocessor_line newline) | ("//"? any_other_line newline) ;
program ::= line* ;
ifdef_token ::= ifdef_line | elsedef_line | elsifdef_line | endifdef_line ;
--------------------c::malton-dahn.bgf--------------------
asm_spec ::= asm_or_cv+ "(" asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? ")" ;
attribute_format ::= "__format__" | "__format" | "format__" | "format" ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier ;
 type_specifier ::= typeof_expression | complex_specifier ;
bit_qualifier ::= "long" | "short" | "signed" | "unsigned" | "__signed__" | "__signed" ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
 argument_declaration ::= comment_NL* "..." ;
 argument_declaration ::= "..." comment_NL* ;
struct_or_union_designator ::= "."? id postfix_extension* ;
member_declarator ::= (declarator bitfieldsize?) | bitfieldsize ;
 member_declarator ::= (declarator bitfieldsize? attributes_or_asm*) | bitfieldsize ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
 postfix_extension ::= ("[" expression "]") | ("(" {argument_expression ","}* ")") | ("." id) | ("->" id) | "++" | "--" ;
attribute_far ::= "__far__" | "__far" | "far__" | "far" ;
label ::= (label_id ":") | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
 label ::= (label_id ":" attribute_spec*) | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "case" constant_expression SP "..." SP constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
designated_initializer ::= assignment_expression | (designator* designator_assignment? assignment_expression) | (designator* designator_assignment? NL "{" IN {designated_initializer ","}* ","? EX "}") ;
argument_declarator ::= declarator | abstract_declarator ;
conditional_expression ::= binary_expression conditional_operation? ;
 conditional_expression ::= binary_expression conditional_operation* ;
complex_specifier ::= "_Complex" simple_type_or_qualifier* ;
conditional_operation ::= "?" expression ":" conditional_expression ;
 conditional_operation ::= "?" expression? ":" binary_expression ;
attribute_alias ::= "alias" | "__alias__" | "__alias" | "alias__" ;
attribute_malloc ::= "malloc" | "__malloc__" | "__malloc" | "malloc__" ;
attribute_near ::= "__near__" | "__near" | "near__" | "near" ;
else_statement ::= "else" statement ;
restrict_qualifier ::= "__restrict" | "restrict__" | "restrict" | "__restrict__" ;
simple_type_or_qualifier ::= simple_type_name | type_qualifier ;
type_qualifier ::= "long" | "short" | "signed" | "unsigned" ;
 type_qualifier ::= bit_qualifier | inline_qualifier | cv_qualifier | restrict_qualifier ;
asm_input_operands ::= ":" {asm_operand ","}* ;
attribute_no_check_mem ::= "no_check_memory_usage" | "__no_check_memory_usage__" | "__no_check_memory_usage" | "no_check_memory_usage__" ;
initializer ::= expression | (NL "{" IN {initializer ","}* ","? EX "}") ;
 initializer ::= comment_NL* "..." ;
 initializer ::= assignment_expression | (NL "{" IN {designated_initializer ","}* ","? EX "}") ;
while_statement ::= "while" "(" expression ")" statement ;
nonreferential_primary ::= constant | string | ("(" expression ")") ;
 nonreferential_primary ::= constant | string | ("(" expression ")") | compound_statement_expression | compound_literal | (extension_specifier compound_statement_expression) | (extension_specifier "(" expression ")") ;
cv_qualifier ::= "const" | "volatile" ;
 cv_qualifier ::= "const" | "volatile" | "__const" | "__const__" | "const__" | "__volatile__" | "__volatile" | "volatile__" ;
attribute_regparm ::= "regparm" | "__regparm__" | "__regparm" | "regparm__" ;
attribute_noinline ::= "__noinline__" | "__noinline" | "noinline__" | "noinline" ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
 compound_statement ::= comment_NL* "..." ;
 compound_statement ::= "{" NL compound_statement_body* "}" ";"? NL ;
attribute_unused ::= "__unused__" | "__unused" | "unused__" | "unused" ;
designator_assignment ::= ":" | "=" ;
attribute_constructor ::= "constructor" | "__constructor__" | "__constructor" | "constructor__" ;
array_declarator_extension ::= "[" constant_expression? "]" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr_operator ::= "*" cv_qualifier* SPOFF ;
 ptr_operator ::= "*" ptr_qualifier* ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
 if_statement ::= "if" "(" expression ")" comment_NL* statement else_statement? ;
exception_function ::= (stringlit* stringlit) | tagged_attribute_id ;
attribute_model ::= "model" | "__model__" | "__model" | "model__" ;
attribute_short_call ::= "short_call" | "__short_call__" | "__short_call" | "short_call__" ;
enumerator ::= reference_id enumerator_value? ;
attribute_tiny ::= "tiny_data" | "__tiny_data__" | "__tiny_data" | "tiny_data__" ;
attribute_no_instrument ::= "no_instrument_function" | "__no_instrument_function__" | "__no_instrument_function" | "no_instrument_function__" ;
null_declaration ::= semi ;
attribute_aligned ::= "__aligned__" | "__aligned" | "aligned__" | "aligned" ;
init_declarator ::= declarator initialization? ;
 init_declarator ::= declarator initialization? attributes_or_asm* ;
tagged_attribute_number ::= number ;
asm_template ::= string ;
extension_specifier ::= "__extension__" ;
file_id ::= id | key ;
attribute_pure ::= "__pure__" | "__pure" | "pure__" | "pure" ;
do_statement ::= "do" statement "while" "(" expression ")" semi ;
array_designator ::= ("[" constant_expression "]" postfix_extension*) | ("[" constant_expression SP "..." SP constant_expression "]" postfix_extension*) ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
null_statement ::= semi ;
attribute_dllexport ::= "__dllexport__" | "__dllexport" | "dllexport__" | "dllexport" ;
unary_operator ::= "*" | "&" | "+" | "-" | "!" | "~" | "++" | "--" ;
 unary_operator ::= "&&" ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
asm_statement ::= asm_spec semi ;
attribute_signal ::= "signal" | "__signal__" | "__signal" | "signal__" ;
unary_expression ::= postfix_expression | (unary_operator SPOFF unary_expression SPON) | ("(" type_name ")" unary_expression) | sizeof_expression ;
 unary_expression ::= alignof_expression ;
attribute_dllimport ::= "dllimport" | "__dllimport__" | "__dllimport" | "dllimport__" ;
constant ::= number | float | hex | long | (SP dotfloat) | charlit | string ;
 constant ::= gnu_long_int | (gnu_long_int_string+) | hexfloat ;
postfix_expression ::= reference | nonreference ;
filepath ::= file_id slash_fileid* ;
initialization ::= ("=" initializer) | ("(" constant_expression ")") ;
 initialization ::= comment_NL* "..." ;
gnu_long_int_charlit ::= "L" SPOFF charlit SPON ;
attribute_funvector ::= "function_vector" | "__function_vector__" | "__function_vector" | "function_vector__" ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
 sizeof_expression ::= ("sizeof" unary_expression) | ("sizeof" "(" type_name ")") ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
 jump_statement ::= "goto" ptr_operator expression semi ;
struct_or_union ::= "struct" | "union" ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
 struct_or_union_specifier ::= (struct_or_union attribute_spec* tagged_reference_id? "{" IN NL member_declaration* EX "}" attribute_spec*) | (struct_or_union attribute_spec* tagged_reference_id) ;
type_specifiers ::= (type_qualifier+ type_specifier? type_qualifier*) | (type_specifier type_qualifier*) ;
 type_specifiers ::= (type_qualifier* type_specifier type_qualifier*) | (type_qualifier*) ;
ptr_qualifier ::= restrict_qualifier | cv_qualifier ;
slash_fileid ::= slash file_id ;
expression ::= assignment_expression+ ;
 expression ::= comment_NL* "..." ;
binary_expression ::= unary_expression | (binary_expression binary_operator unary_expression) ;
attribute_visibility ::= "__visibility__" | "__visibility" | "visibility__" | "visibility" ;
tagged_attribute_id ::= id ;
attribute_format_arg ::= "__format_arg__" | "__format_arg" | "format_arg__" | "format_arg" ;
typeof_specifier ::= "__typeof" | "typeof" | "__typeof__" | "typeof__" ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "typedef" ;
reference_id ::= id ;
bitfieldsize ::= ":" constant_expression ;
asm_or_cv ::= "__asm__" | "asm" | "asm__" | "__asm" | cv_qualifier ;
attribute_interrupt_handler ::= "interrupt_handler" | "__interrupt_handler__" | "__interrupt_handler" | "interrupt_handler__" ;
expression_statement ::= expression semi ;
compound_statement_body ::= (statement* EX) | (declaration compound_statement_body) ;
 compound_statement_body ::= (IN declaration EX) | (IN function_definition EX) | (IN statement EX) ;
argument_declaration_list ::= {argument_declaration ","}* ;
 argument_declaration_list ::= "..." comment_NL* ;
asm_output_operands ::= ":" {asm_operand ","}* ;
inline_qualifier ::= "__inline" | "__inline__" | "inline__" | "inline" ;
program ::= C_compilation_unit ;
tagged_reference_id ::= reference_id ;
attribute_interrupt ::= "interrupt" | "__interrupt__" | "__interrupt" | "interrupt__" ;
attribute_used ::= "__used__" | "__used" | "used__" | "used" ;
attribute_spec ::= "__attribute__" "('(" {attribute_extension ","}* ")')" ;
slash ::= "/" | "\" | "." | ":" ;
compound_statement_expression ::= "(" compound_statement ")" ;
attribute_destructor ::= "destructor" | "__destructor__" | "__destructor" | "destructor__" ;
compound_literal_array_declarator ::= (ptr_operator* array_declarator_extension*) | ("(" compound_literal_array_declarator ")" array_declarator_extension*) ;
attribute_packed ::= "__packed__" | "__packed" | "packed__" | "packed" ;
declaration ::= (declaration_body semi) | preprocessor ;
 declaration ::= comment_NL ;
 declaration ::= null_declaration | (declaration_body semi) | preprocessor ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
 for_statement ::= "for" "(" declaration_body ";" expression? ";" expression? ")" statement ;
assignment_operation ::= assignment_operator assignment_expression ;
attribute_noreturn ::= "__noreturn__" | "__noreturn" | "noreturn__" | "noreturn" ;
attribute_sp_switch ::= "sp_switch" | "__sp_switch__" | "__sp_switch" | "sp_switch__" ;
type_name ::= type_specifiers abstract_declarator? ;
statement ::= (label* unlabeled_statement) | preprocessor ;
 statement ::= comment_NL ;
 statement ::= label ;
abstract_declarator ::= (ptr_operator+ declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
 abstract_declarator ::= (ptr_operator+ declarator_extension*) | (array_declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
semi ::= ";" NL ;
attribute_exception ::= "exception" | "__exception__" | "__exception" | "exception__" ;
attribute_shared ::= "shared" | "__shared__" | "__shared" | "shared__" ;
exception_arg ::= (stringlit* stringlit) | tagged_attribute_id ;
attribute_mode ::= "__mode__" | "__mode" | "mode__" | "mode" ;
attribute_always_inline ::= "__always_inline__" | "__always_inline" | "always_inline__" | "always_inline" ;
unannotated_reference_base ::= reference_id | nonreferential_primary ;
attribute_model_name ::= "small" | "__small__" | "__small" | "small__" | "medium" | "__medium__" | "__medium" | "medium__" | "large" | "__large__" | "__large" | "large__" ;
attribute_eightbit ::= "eightbit_data" | "__eightbit_data__" | "__eightbit_data" | "eightbit_data__" ;
asm_clobbered_registers ::= ":" {string ","}* ;
base_declarator ::= reference_id | ("(" declarator ")") ;
 base_declarator ::= (attribute_spec* reference_id) | (attribute_spec* "(" declarator ")") ;
attribute_stdcall ::= "stdcall" | "__stdcall__" | "__stdcall" | "stdcall__" ;
attribute_long_call ::= "long_call" | "__long_call__" | "__long_call" | "long_call__" ;
gnu_long_int ::= gnu_long_int_string | gnu_long_int_charlit ;
attribute_extension ::= (attribute_alias "(" string ")") | attribute_aligned | (attribute_aligned "(" tagged_attribute_number ")") | (attribute_aligned "(" alignof_expression ")") | attribute_always_inline | attribute_cdecl | (attribute_cleanup "(" tagged_attribute_id ")") | attribute_const | attribute_constructor | attribute_deprecated | attribute_destructor | attribute_dllexport | attribute_dllimport | attribute_eightbit | (attribute_exception "(" exception_function {exception_arg ","}* ")") | attribute_far | attribute_funvector | (attribute_format "(" format_archetype "," tagged_attribute_number "," tagged_attribute_number ")") | (attribute_format_arg "(" tagged_attribute_number ")") | attribute_interrupt | (attribute_interrupt "(" string ")") | attribute_interrupt_handler | (attribute_interrupt_handler "(" string ")") | attribute_longcall | attribute_long_call | attribute_malloc | attribute_may_alias | (attribute_mode "(" tagged_attribute_id ")") | (attribute_model "(" attribute_model_name ")") | attribute_naked | attribute_near | attribute_no_check_mem | attribute_no_instrument | attribute_nocommon | attribute_noinline | attribute_nonnull | (attribute_nonnull "(" tagged_attribute_number+ ")") | attribute_noreturn | attribute_nothrow | attribute_packed | attribute_pure | (attribute_regparm "(" tagged_attribute_number ")") | (attribute_section "(" string ")") | attribute_shared | attribute_short_call | (attribute_signal "(" string ")") | (attribute_sp_switch "(" string ")") | attribute_stdcall | attribute_tiny | (attribute_tls_model "(" tls_model_type ")") | attribute_trans_union | (attribute_trap_exit "(" tagged_attribute_number ")") | attribute_used | attribute_unused | (attribute_vector_size "(" tagged_attribute_number ")") | (attribute_visibility "(" visibility_type ")") | attribute_weak ;
argument_expression ::= assignment_expression | type_name ;
attribute_vector_size ::= "__vector_size__" | "__vector_size" | "vector_size__" | "vector_size" ;
attribute_trans_union ::= "__transparent_union__" | "__transparent_union" | "transparent_union__" | "transparent_union" ;
member_declaration ::= (decl_specifiers member_declarator+ semi) | preprocessor ;
 member_declaration ::= comment_NL ;
 member_declaration ::= (decl_specifiers member_declarator+ semi) | (decl_qualifier* struct_or_union_specifier semi) | semi | preprocessor ;
decl_qualifier ::= sc_specifier | cv_qualifier | type_qualifier ;
 decl_qualifier ::= sc_specifier | type_qualifier | attribute_spec | extension_specifier ;
attribute_naked ::= "naked" | "__naked__" | "__naked" | "naked__" ;
tls_model_type ::= "global-dynamic" | "local-dynamic" | "initial-exec" | "local-exec" ;
preprocessor ::= ("#define" id "(" id+ ")" expression NL) | ("#define" id expression NL) | (EX "#else" IN NL) | (EX "#endif" NL NL) | (NL "#if" expression IN NL) | (NL "#ifdef" id IN NL) | (NL "#ifndef" id IN NL) | ("#ident" stringlit NL) | ("#include" stringlit NL) | ("#include" "<" SPOFF filepath ">" SPON NL) | ("#line" integernumber stringlit? NL) | ("#undef" id NL) | ("#LINK" stringlit NL) ;
 preprocessor ::= (EX "#endif" comment_NL? NL) | "..." ;
 preprocessor ::= "..." comment_NL? ;
 preprocessor ::= ("#" integernumber string integernumber* NL) | ("#pragma" SPON id* "(" {id ","}* ")" NL) ;
reference ::= reference_id | reference_expression ;
unlabeled_statement ::= expression_statement | if_statement | for_statement | while_statement | switch_statement | do_statement | null_statement | jump_statement | compound_statement ;
 unlabeled_statement ::= asm_statement ;
assignment_expression ::= conditional_expression assignment_operation? ;
 assignment_expression ::= conditional_expression | (conditional_expression assignment_operation) ;
visibility_type ::= "default" | "hidden" | "protected" | "internal" ;
declaration_body ::= (decl_specifiers init_declarator+) | enum_specifier | struct_or_union_specifier ;
 declaration_body ::= (decl_specifiers init_declarator+) | (decl_qualifier* struct_or_union_specifier) | (decl_qualifier* enum_specifier attribute_spec*) | (local_label declarator+) | asm_spec ;
label_id ::= id ;
attribute_section ::= "section" | "__section__" | "__section" | "section__" ;
format_archetype ::= "printf" | "__printf__" | "__printf" | "printf__" | "scanf" | "__scanf__" | "__scanf" | "scanf__" | "strftime" | "__strftime__" | "__strftime" | "strftime__" | "strfmon" | "__strfmon__" | "__strfmon" | "strfmon__" ;
type_id ::= reference_id ;
attribute_weak ::= "weak" | "__weak__" | "__weak" | "weak__" ;
attribute_deprecated ::= "__deprecated__" | "__deprecated" | "deprecated__" | "deprecated" ;
enumerator_value ::= "=" constant_expression ;
gnu_long_int_string ::= "L" SPOFF string SPON ;
declarator ::= ptr_operator* base_declarator SPON declarator_extension* ;
 declarator ::= attribute_spec* ptr_operator* base_declarator declarator_extension* attribute_spec* ;
attribute_nonnull ::= "__nonnull__" | "__nonnull" | "nonnull__" | "nonnull" ;
attribute_nocommon ::= "nocommon" | "__nocommon__" | "nocommon__" | "__nocommon" ;
attribute_cdecl ::= "cdecl" | "__cdecl__" | "__cdecl" | "cdecl__" ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
 decl_specifiers ::= (decl_qualifier* type_specifier decl_qualifier*) | (decl_qualifier*) ;
switch_statement ::= "switch" "(" expression ")" statement ;
 switch_statement ::= "switch" "(" expression ")" comment_NL* statement ;
declaration_or_function_definition ::= declaration | function_definition ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
attribute_nothrow ::= "__nothrow__" | "__nothrow" | "nothrow__" | "nothrow" ;
binary_operator ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "||" | "&&" | "|" | "^" | "&" | "<<" | ">>" ;
hexfloat ::= extension_specifier hex ;
local_label ::= "__label__" ;
nonreference ::= nonreferential_primary postfix_extension* ;
attribute_longcall ::= "longcall" | "__longcall__" | "__longcall" | "longcall__" ;
alignof_expression ::= ("__alignof__" "(" unary_expression ")") | ("__alignof" "(" unary_expression ")") | ("__alignof__" "(" type_name ")") | ("__alignof" "(" type_name ")") ;
compound_literal ::= ("(" struct_or_union_specifier ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal_array_type ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal ")") ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
designator ::= array_designator | struct_or_union_designator ;
attribute_may_alias ::= "__may_alias__" | "__may_alias" | "may_alias__" | "may_alias" ;
constant_expression ::= conditional_expression ;
 constant_expression ::= restrict_qualifier ;
string ::= stringlit+ ;
attribute_trap_exit ::= "trap_exit" | "__trap_exit__" | "__trap_exit" | "trap_exit__" ;
reference_expression ::= unannotated_reference_base postfix_extension* ;
attributes_or_asm ::= attribute_spec | asm_spec ;
typeof_expression ::= (typeof_specifier "(" simple_type_name ")") | (typeof_specifier "(" expression ")") ;
asm_operand ::= string "(" expression ")" ;
compound_literal_array_type ::= type_specifiers compound_literal_array_declarator ;
attribute_tls_model ::= "__tls_model__" | "__tls_model" | "tls_model__" | "tls_model" ;
attribute_cleanup ::= "__cleanup__" | "__cleanup" | "cleanup__" | "cleanup" ;
attribute_const ::= "__const__" | "__const" | "const__" | "const" ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
 enum_specifier ::= ("enum" tagged_reference_id) | ("enum" tagged_reference_id? "{" {enumerator ","}* ","? "}") ;
--------------------c::cordy-malton-dahn.bgf--------------------
asm_spec ::= (asm cv_qualifier* "(" IN asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? EX ")") | (asm cv_qualifier* "{" IN asm_instruction_semi* asm_instruction semi? EX "}") ;
comma_dotdotdot ::= "," SP "..." SP ;
constructor_expression ::= ("(" constructor_type ")" "{" {initializer ","}* ","? "}") | ("(" constructor_expression ")") ;
equality_expression ::= relational_expression equality_relational_expression* ;
colon_equals_or_equals ::= ":" | "=" | "|=" ;
assign_assignment_expression ::= assignment_operator assignment_expression ;
extern_langauge_declaration ::= "extern" stringlit "{" IN NL declaration* EX "}" ";"? NL ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier | typeof_expression | complex_specifier ;
error_statement ::= "error" ":"? id+ "+"? id* semi? ;
argument_declaration ::= (decl_specifiers argument_declarator?) | ("(" argument_declaration ")") ;
bit_qualifier ::= "long" | "short" | "signed" | "unsigned" | "__signed__" | "__signed" ;
simple_statement_opt_semi ::= simple_statement semi? ;
member_declarator ::= (declarator bitfieldsize? sub_member_declarators? attributes_or_asm*) | bitfieldsize ;
postfix_extension ::= ("[" SPON assignment_expression SPOFF "]") | (SP "(" SPON {argument_expression ","}* dotdot? SPOFF ")") | ("." id) | ("->" id macro_call?) | "++" | "--" ;
label ::= (EX label_id ":" IN NL) | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) | (EX SP SP "case" constant_expression SP "..." SP constant_expression ":" IN NL) ;
argument_declarator ::= (declarator attributes_or_asm*) | (abstract_declarator attributes_or_asm*) ;
string_unit ::= stringlit | pseudo_string | register_spec | preprocessor ;
macro_call ::= macro_name "(" macro_arguments ")" ;
conditional_expression ::= logical_OR_expression conditional_operation? ;
element_label ::= "."? element_name element_name_extension* ;
macro_type_argument ::= argument_expression ;
complex_specifier ::= complex simple_type_or_qualifier* ;
conditional_operation ::= "?" expression? ":" conditional_expression ;
acquires_releases ::= "__acquires" | "__releases" ;
element_name ::= id ;
additive_expression ::= multiplicative_expression add_subtract_multiplicative_expression* ;
else_statement ::= preprocessor* "else" else_sub_statement ;
dotdotdot ::= SP "..." SP ;
unknown_item ::= ("{" unknown_item* "}") | token | key ;
asm_register ::= string | pseudo_string ;
restrict_qualifier ::= "__restrict" | "restrict__" | "restrict" | "__restrict__" ;
simple_type_or_qualifier ::= simple_type_name | type_qualifier ;
expression_list ::= expression+ ;
type_qualifier ::= bit_qualifier | cv_qualifier | inline_qualifier | restrict_qualifier | init_qualifier | exit_qualifier | user_qualifier | force_qualifier | asmlinkage_qualifier | zexport_qualifier | attribute_spec ;
preprocessor_function_header ::= (NL preprocessor function_header) | (NL function_header) ;
asm_input_operands ::= ":" {asm_operand ","}* NL ;
nf_qualifier ::= "near" | "far" | "NEAR" | "FAR" ;
function_definition_or_declaration ::= function_definition | declaration | preprocessor | (compound_statement NL) | macro_declaration_or_statement | unknown_declaration_or_statement ;
initializer ::= (preprocessor* initializer_unit+) | (ε initializer_unit) ;
while_statement ::= ("while" "(" expression_list ")" sub_statement else_statement?) | (whileeachid "(" expression_list ")" sub_statement else_statement?) ;
gnu_statement ::= error_statement | else_statement ;
cv_qualifier ::= "const" | "volatile" | "CONST" | "__const" | "__const__" | "const__" | "__volatile__" | "__volatile" | "volatile__" | "__iomem" | initdata | "internal_function" | "yyconst" | "pascal" | upper_macro_name ;
upper_macro_name ::= upperlowerid ;
alignof_specifier ::= "__alignof__" | "__alignof" ;
compound_statement ::= "{" IN NL compound_statement_body EX "}" ";"? NL preprocessor* ;
attribute_specifier ::= "__attribute__" | "__attribute" ;
register_spec ::= ("%" SPOFF "%"? id SPON) | ("%" SPOFF "%"? integernumber id? SPON) ;
array_declarator_extension ::= "[" constant_expression? "]" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr_operator ::= (nf_qualifier? "*" SPOFF ptr_qualifier*) | (nf_qualifier? "(" "*" ")" SPOFF ptr_qualifier*) ;
function_header ::= (decl_specifiers? declarator function_declarator_extension attribute_spec*) | ("YY_DECL" NL) ;
macro_argument ::= ("(" macro_arguments ")") | token | key ;
if_statement ::= ("if" "(" expression_list preprocessor* ")" sub_statement else_statement?) | ("if" postfix_expression sub_statement else_statement?) ;
macro_declaration_or_statement ::= (reference_id_equals? macro_call equals_initializer? ";"? NL) | (upper_macro_name ";"? NL) ;
asm_instruction ::= asm_unit+ NL ;
exit_qualifier ::= "__exit" | "exit__" | "exit" | "__exit__" ;
asm_unit ::= token_or_key ;
sub_unary_expression ::= postfix_expression | (unary_operator SPOFF cast_expression SPON) | (SPON sizeof_expression) | (SPON alignof_expression) ;
enumerator ::= preprocessor* reference_id enumerator_value? ;
asm_instruction_semi ::= asm_unit+ ";" NL ;
null_declaration ::= semi ;
shift_operator ::= "<<" | ">>" ;
initializer_unit ::= assignment_expression | compound_initializer | (NL element_label colon_equals_or_equals? initializer ";"?) | (NL "[" constant_expression dotdotdot? constant_expression? "]" "="? initializer ";"?) | macro_call ;
init_declarator ::= declarator attributes_or_asm* initialization? ;
asm_template ::= string_unit_NL+ ;
extension_specifier ::= "__extension__" | "__extension" ;
relational_operator ::= "<" | ">" | "<=" | ">=" ;
do_statement ::= ("do" sub_statement "while" "(" expression_list ")" semi) | ("do" sub_statement "while" macro_call semi) | ("do" sub_statement whileeachid "(" expression_list ")" semi) ;
initdata ::= "__initdata" | "__devinitdata" | "__cpuinitdata" | "__read_mostly" | "__initmv" | "__initdata_or_module" | "__pminitdata" | "__cpuinit" | "__devinit" | "BDATA" | "compat_init_data" | "in2000__INITDATA" ;
declaration_or_statement ::= declaration | statement | preprocessor | function_definition | macro_declaration_or_statement | unknown_declaration_or_statement ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
additive_operator ::= "+" | "-" ;
null_statement ::= ε ;
weak_specifier ::= "__weak__" | "__weak" ;
machinestart_declaration ::= "MACHINE_START" "(" expression_list ")" IN {initializer ","}* ","? EX NL "MACHINE_END" ";"? NL ;
statement_declaration_or_end ::= declaration_or_statement | "}" ;
unary_operator ::= "&" | "*" | "+" | "-" | "~" | "!" | "&&" | "NOT" | "not" ;
pseudo_string ::= ps_name ps_arguments? ;
comma_expression_statement ::= "," expression_statement ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
preprocessor_list_initializer ::= preprocessor {initializer ","}* ","? ;
relational_expression ::= shift_expression relational_shift_expression* ;
complex ::= "__complex" | "__complex__" | "__Complex" ;
multipy_divide_cast_expression ::= multiplicative_operator cast_expression ;
shift_additive_expression ::= shift_operator additive_expression ;
asm_statement ::= asm_spec ;
else_sub_statement ::= if_statement | sub_statement ;
unary_expression ::= pre_increment_operator* sub_unary_expression SPON ;
ps_argument_list ::= {ps_argument ","}* ;
constant ::= number | float | hex | long | (SP dotfloat) | charlit | string | gnu_long_int | gnu_long_int_string | hexfloat ;
cast_operator ::= "(" type_name ")" ;
macro_arguments ::= macro_argument* ;
postfix_expression ::= primary SPOFF postfix_extension* SPON ;
initialization ::= (initdata? "=" initializer) | ("(" constant_expression ")") | macro_call ;
gnu_long_int_charlit ::= "L" SPOFF charlit SPON ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
jump_statement ::= ("goto" label_id) | "continue" | "break" | ("return" expression?) | ("goto" ptr_operator expression) | ("return" expression attribute_spec?) ;
struct_or_union ::= "struct" | "union" ;
sub_member_declarators ::= "(" {member_declarator ","}* ")" ;
struct_or_union_specifier ::= (struct_or_union attribute_spec* reference_id? struct_or_union_body attribute_spec*) | (struct_or_union attribute_spec* reference_id attribute_spec*) ;
type_specifiers ::= (type_qualifier* type_specifier type_qualifier*) | (type_qualifier+) ;
ptr_qualifier ::= (SPON cv_qualifier) | (SPON inline_qualifier) | (SPON restrict_qualifier) | (SPON init_qualifier) | (SPON exit_qualifier) | (SPON user_qualifier) | (SPON zexport_qualifier) ;
cast_expression ::= cast_operator* unary_expression ;
expression ::= assignment_expression ;
asmlinkage_qualifier ::= "asmlinkage" ;
pre_increment_operator ::= ("++" SPOFF) | ("--" SPOFF) ;
typeof_specifier ::= "__typeof" | "typeof" | "__typeof__" | "typeof__" ;
reference_id ::= id | foreachid | whileeachid ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "far" | "near" | "typedef" | "local" | "vector" | "const_debug" | "INIT" | "STATIC" | "NEAR" | "FAR" ;
bitfieldsize ::= ":" constant_expression ;
relational_shift_expression ::= relational_operator shift_expression ;
expression_statement ::= pre_increment_operator* assignment_expression assign_assignment_expression* comma_expression_statement? ;
compound_statement_body ::= declaration_or_statement* ;
argument_declaration_list ::= {argument_declaration ","}* comma_dotdotdot? ;
inline_qualifier ::= "__inline" | "__inline__" | "inline__" | "inline" | "SBA_INLINE" ;
asm_output_operands ::= ":" {asm_operand ","}* NL ;
program ::= compilation_unit ;
compilation_unit ::= function_definition_or_declaration* ;
attribute_spec ::= (attribute_specifier "('(" {attribute_extension ","}* ")')") | (IN NL acquires_releases "(" expression ")" EX) | upper_macro_name ;
compound_statement_expression ::= "(" compound_statement ")" ;
asm ::= "__asm__" | "asm" | "asm__" | "__asm" ;
declaration ::= (decl_specifiers {init_declarator ","}* semi) | (decl_specifiers declarator "=" compound_initializer NL) | extern_langauge_declaration | null_declaration | (local_label declarator+) | asm_spec | machinestart_declaration | preprocessor ;
ps_argument ::= constant_expression | register_spec ;
for_statement ::= ("for" "(" expression_list? ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" decl_specifiers init_declarator+ ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" expression_list? ";" expression_list? ")" sub_statement) | (foreachid "(" expression_list ")" sub_statement) ;
shift_expression ::= additive_expression shift_additive_expression* ;
attribute_arguments ::= "(" attribute_argument+ ")" ;
type_name ::= type_specifiers abstract_declarator* ;
reference_id_equals ::= reference_id "=" ;
statement ::= (preprocessor* label* unlabeled_statement) | label | preprocessor ;
abstract_declarator ::= (ptr_operator+ declarator_extension* SPON) | array_declarator_extension | ("(" abstract_declarator+ ")" declarator_extension*) | ("(" type_name+ ")") | "static" ;
c_unlabeled_statement ::= (simple_statement semi) | structured_statement ;
semi ::= ";" NL ;
multiplicative_operator ::= "*" | "/" | "%" | "DIV" | "MOD" ;
decl_qualifier_or_type_specifier ::= decl_qualifier | type_specifier | (macro_specifier nosemiNL?) ;
unary_expression_assign ::= unary_expression assignment_operator ;
macro_type_arguments ::= "(" {macro_type_argument ","}* ")" ;
declspec_specifier ::= "__declspec" "(" decl_specifiers ")" ;
equals_initializer ::= ("=" initializer) | initializer ;
dotdot ::= SP ".." SP ;
constructor_type ::= struct_or_union_specifier | (type_specifiers ptr_operator* array_declarator_extension*) ;
asm_clobbered_registers ::= ":" {asm_register ","}* NL ;
base_declarator ::= reference_id | (SPON "(" decl_specifiers? declarator ")") ;
gnu_long_int ::= gnu_long_int_string | gnu_long_int_charlit ;
attribute_extension ::= attribute_name attribute_arguments? ;
expression_or_type_name ::= type_name | expression ;
argument_expression ::= (preprocessor* id? assignment_expression id? colon_number? preprocessor*) | type_name | structured_statement | equality_operator | relational_operator | (assignment_operator assignment_expression) | "do" | "extern" | "continue" | ε ;
zexport_qualifier ::= "ZEXPORT" ;
force_qualifier ::= "__force" | "force__" | "force" | "__force__" ;
decl_qualifier ::= sc_specifier | type_qualifier | extension_specifier | weak_specifier | declspec_specifier ;
member_declaration ::= (decl_specifiers {member_declarator ","}* semi) | null_declaration | preprocessor ;
preprocessor ::= TAB_1 preprocessor_line NL ;
compound_initializer ::= ("{" "}") | ("{" IN {initializer ","}* ","? ";"? preprocessor_list_initializer* EX NL "}") ;
attribute_name ::= id | cv_qualifier ;
assignment_expression ::= conditional_expression | (unary_expression_assign assignment_expression) ;
unlabeled_statement ::= c_unlabeled_statement | gnu_statement ;
equality_operator ::= "==" | "!=" ;
ps_name ::= id ;
label_id ::= id ;
type_id ::= reference_id ;
init_qualifier ::= "__init" | "init__" | "init" | "__init__" ;
device_attr ::= "DEVICE_ATTR" | "SYSDEV_ATTR" | "DEFINE_TIMER" | "DECLARE_TASKLET" ;
user_qualifier ::= "__user" | "user__" | "user" | "__user__" ;
enumerator_value ::= "=" constant_expression ;
gnu_long_int_string ::= "L" SPOFF string SPON ;
declarator ::= attribute_spec* ptr_operator* base_declarator SPON declarator_extension* attribute_spec* ;
sub_statement ::= compound_statement | (IN NL statement EX) | (IN NL macro_declaration_or_statement EX) ;
element_name_extension ::= ("." element_name) | ("[" constant_expression "]") ;
equality_relational_expression ::= equality_operator relational_expression ;
decl_specifiers ::= decl_qualifier_or_type_specifier+ ;
colon_number ::= ":" number ;
switch_statement ::= ("switch" "(" expression_list ")" sub_statement) | ("switch" macro_call sub_statement) ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
simple_statement ::= jump_statement | null_statement | expression_statement ;
hexfloat ::= extension_specifier hex ;
multiplicative_expression ::= cast_expression multipy_divide_cast_expression* ;
local_label ::= "__label__" ;
macro_name ::= id ;
alignof_expression ::= alignof_specifier "(" expression_or_type_name ")" ;
ps_arguments ::= "(" ps_argument_list ")" ;
function_definition ::= NL function_header preprocessor_function_header* KR_parameter_decls? compound_statement NL ;
add_subtract_multiplicative_expression ::= additive_operator multiplicative_expression ;
constant_expression ::= conditional_expression ;
bracketed_id ::= "[" id "]" ;
string ::= (stringlit string_unit*) | (pseudo_string stringlit string_unit*) ;
unknown_declaration_or_statement ::= (unknown_item+ ";" NL) | (unknown_item+ NL) ;
macro_specifier ::= macro_call ;
token_or_key ::= token | key ;
attributes_or_asm ::= attribute_spec | asm_spec ;
typeof_expression ::= typeof_specifier "(" expression_or_type_name ")" ;
asm_operand ::= (bracketed_id? string "(" expression ")") | (pseudo_string "(" expression ")") ;
struct_or_union_body ::= "{" IN NL member_declaration* EX "}" ;
primary ::= reference_id | constant | string | ("(" SPON expression_list ","? ")") | ("{" SPON expression_list ","? "}") | (SPON extension_specifier "(" expression_list ")") | (SPON constructor_expression) | (SPON asm_spec) ;
structured_statement ::= if_statement | for_statement | while_statement | switch_statement | do_statement | compound_statement | asm_statement ;
attribute_argument ::= ("(" attribute_argument* ")") | token_or_key ;
enum_specifier ::= ("enum" reference_id) | ("enum" reference_id? "{" {enumerator ","}* ","? preprocessor* "}") ;
--------------------c::cordy-malton.bgf--------------------
slash ::= "/" | "\" | "." | ":" ;
declaration ::= (declaration_body semi) | preprocessor ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
member_declarator ::= (declarator bitfieldsize?) | bitfieldsize ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
assignment_operation ::= assignment_operator assignment_expression ;
label ::= (label_id ":") | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
argument_declarator ::= declarator | abstract_declarator ;
conditional_expression ::= binary_expression conditional_operation? ;
type_name ::= type_specifiers abstract_declarator? ;
statement ::= (label* unlabeled_statement) | preprocessor ;
semi ::= ";" NL ;
abstract_declarator ::= (ptr_operator+ declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
conditional_operation ::= "?" expression ":" conditional_expression ;
else_statement ::= "else" statement ;
type_qualifier ::= "long" | "short" | "signed" | "unsigned" ;
unannotated_reference_base ::= reference_id | nonreferential_primary ;
initializer ::= expression | (NL "{" IN {initializer ","}* ","? EX "}") ;
while_statement ::= "while" "(" expression ")" statement ;
nonreferential_primary ::= constant | string | ("(" expression ")") ;
base_declarator ::= reference_id | ("(" declarator ")") ;
cv_qualifier ::= "const" | "volatile" ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
array_declarator_extension ::= "[" constant_expression? "]" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr_operator ::= "*" cv_qualifier* SPOFF ;
member_declaration ::= (decl_specifiers member_declarator+ semi) | preprocessor ;
decl_qualifier ::= sc_specifier | cv_qualifier | type_qualifier ;
preprocessor ::= ("#define" id "(" id+ ")" expression NL) | ("#define" id expression NL) | (EX "#else" IN NL) | (EX "#endif" NL NL) | (NL "#if" expression IN NL) | (NL "#ifdef" id IN NL) | (NL "#ifndef" id IN NL) | ("#ident" stringlit NL) | ("#include" stringlit NL) | ("#include" "<" SPOFF filepath ">" SPON NL) | ("#line" integernumber stringlit? NL) | ("#undef" id NL) | ("#LINK" stringlit NL) ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
reference ::= reference_id | reference_expression ;
unlabeled_statement ::= expression_statement | if_statement | for_statement | while_statement | switch_statement | do_statement | null_statement | jump_statement | compound_statement ;
assignment_expression ::= conditional_expression assignment_operation? ;
declaration_body ::= (decl_specifiers init_declarator+) | enum_specifier | struct_or_union_specifier ;
label_id ::= id ;
enumerator ::= reference_id enumerator_value? ;
init_declarator ::= declarator initialization? ;
type_id ::= reference_id ;
file_id ::= id | key ;
do_statement ::= "do" statement "while" "(" expression ")" semi ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
null_statement ::= semi ;
enumerator_value ::= "=" constant_expression ;
unary_operator ::= "*" | "&" | "+" | "-" | "!" | "~" | "++" | "--" ;
declarator ::= ptr_operator* base_declarator SPON declarator_extension* ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
unary_expression ::= postfix_expression | (unary_operator SPOFF unary_expression SPON) | ("(" type_name ")" unary_expression) | sizeof_expression ;
switch_statement ::= "switch" "(" expression ")" statement ;
constant ::= number | float | hex | long | (SP dotfloat) | charlit | string ;
declaration_or_function_definition ::= declaration | function_definition ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
postfix_expression ::= reference | nonreference ;
binary_operator ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "||" | "&&" | "|" | "^" | "&" | "<<" | ">>" ;
filepath ::= file_id slash_fileid* ;
initialization ::= ("=" initializer) | ("(" constant_expression ")") ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
nonreference ::= nonreferential_primary postfix_extension* ;
struct_or_union ::= "struct" | "union" ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
type_specifiers ::= (type_qualifier+ type_specifier? type_qualifier*) | (type_specifier type_qualifier*) ;
slash_fileid ::= slash file_id ;
expression ::= assignment_expression+ ;
binary_expression ::= unary_expression | (binary_expression binary_operator unary_expression) ;
constant_expression ::= conditional_expression ;
string ::= stringlit+ ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "typedef" ;
reference_id ::= id ;
bitfieldsize ::= ":" constant_expression ;
reference_expression ::= unannotated_reference_base postfix_extension* ;
expression_statement ::= expression semi ;
compound_statement_body ::= (statement* EX) | (declaration compound_statement_body) ;
argument_declaration_list ::= {argument_declaration ","}* ;
program ::= C_compilation_unit ;
tagged_reference_id ::= reference_id ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
--------------------cpp::iso-n2723.bgf--------------------
braced-init-list ::= ("{" initializer-list ","? "}") | ("{" "}") ;
template-name ::= identifier ;
logical-or-expression ::= logical-and-expression | (logical-or-expression "||" logical-and-expression) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
enumerator-definition ::= enumerator | (enumerator "=" constant-expression) ;
exception-declaration ::= (type-specifier-seq declarator) | (type-specifier-seq abstract-declarator) | type-specifier-seq | "..." ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
try-block ::= "try" compound-statement handler-seq ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
conversion-function-id ::= "operator" conversion-type-id ;
lambda-introducer ::= "[" lambda-capture? "]" ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression | ("++" cast-expression) | ("--" cast-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-id ")") | ("sizeof" "..." "(" identifier ")") | ("alignof" "(" type-id ")") | new-expression | delete-expression ;
template-parameter-list ::= template-parameter | (template-parameter-list "," template-parameter) ;
enum-specifier ::= (enum-key identifier? enum-base? "{" enumerator-list? "}") | (enum-key identifier? enum-base? "{" enumerator-list "," "}") ;
ref-qualifier ::= "&" | "&&" ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "[" braced-init-list "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | (typename-specifier "(" expression-list? ")") | (simple-type-specifier braced-init-list) | (typename-specifier braced-init-list) | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
base-clause ::= ":" base-specifier-list ;
type-specifier ::= simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | typename-specifier | cv-qualifier ;
mem-initializer ::= (mem-initializer-id "(" expression-list? ")") | (mem-initializer-id braced-init-list) ;
cast-expression ::= unary-expression | ("(" type-id ")" cast-expression) ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
static_assert-declaration ::= "static_assert" "(" constant-expression "," string-literal ")" ";" ;
initializer ::= ("=" initializer-clause) | ("(" expression-list ")") | braced-init-list ;
direct-new-declarator ::= ("[" expression "]") | (direct-new-declarator "[" constant-expression "]") ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
declaration-statement ::= block-declaration ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
enum-name ::= identifier ;
type-parameter ::= ("class" "..."? identifier?) | ("class" identifier? "=" type-id) | ("typename" "..."? identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" "..."? identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
namespace-body ::= declaration-seq? ;
extension-namespace-definition ::= "inline"? "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" simple-template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
lambda-parameter-declaration ::= "(" lambda-parameter-declaration-list? ")" "mutable"? exception-specification? lambda-return-type-clause? ;
cv-qualifier ::= "const" | "volatile" ;
compound-statement ::= "{" statement-seq? "}" ;
base-specifier-list ::= (base-specifier "..."?) | (base-specifier-list "," base-specifier "..."?) ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | static_assert-declaration | template-declaration ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
capture-list ::= capture | (capture-list "," capture) ;
enumerator ::= identifier ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
class-name ::= identifier | simple-template-id ;
namespace-name ::= original-namespace-name | namespace-alias ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator | "..." ;
initializer-clause ::= assignment-expression | braced-init-list ;
capture-default ::= "&" | "=" ;
typename-specifier ::= ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? simple-template-id) ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
parameter-declaration-list ::= parameter-declaration | (parameter-declaration-list "," parameter-declaration) ;
expression-list ::= initializer-list ;
simple-template-id ::= template-name "<" template-argument-list? ">" ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
template-argument ::= constant-expression | type-id | id-expression ;
ctor-initializer ::= ":" mem-initializer-list ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= (initializer-clause "..."?) | (initializer-list "," initializer-clause "..."?) ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
operator ::= "new" | "delete" | ("new" "[" "]") | ("delete" "[" "]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | "(" | ")" | "[" | "]" ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | "&&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
mem-initializer-list ::= (mem-initializer "..."?) | (mem-initializer "," mem-initializer-list "..."?) ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
template-argument-list ::= (template-argument "..."?) | (template-argument-list "," template-argument "..."?) ;
assignment-expression ::= conditional-expression | (logical-or-expression assignment-operator initializer-clause) | throw-expression ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
access-specifier ::= "private" | "protected" | "public" ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
enum-key ::= "enum" | ("enum" "class") | ("enum" "struct") ;
logical-and-expression ::= inclusive-or-expression | (logical-and-expression "&&" inclusive-or-expression) ;
nested-name-specifier ::= (type-name "::") | (namespace-name "::") | (nested-name-specifier identifier "::") | (nested-name-specifier "template"? simple-template-id "::") ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("return" braced-init-list ";") | ("goto" identifier ";") ;
type-id ::= type-specifier-seq abstract-declarator? ;
typedef-name ::= identifier ;
declaration-seq ::= declaration | (declaration-seq declaration) ;
class-key ::= "class" | "struct" | "union" ;
id-expression ::= unqualified-id | qualified-id ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
operator-function-id ::= "operator" operator ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "inline"? "namespace" identifier "{" namespace-body "}" ;
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
new-declarator ::= (ptr-operator new-declarator?) | direct-new-declarator ;
alias-declaration ::= "using" identifier "=" type-id ";" ;
type-id-list ::= (type-id "..."?) | (type-id-list "," type-id "..."?) ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
lambda-parameter-declaration-list ::= lambda-parameter | (lambda-parameter "," lambda-parameter-declaration-list) ;
expression-statement ::= expression? ";" ;
declaration ::= block-declaration | function-definition | template-declaration | explicit-instantiation | explicit-specialization | linkage-specification | namespace-definition ;
function-body ::= (ctor-initializer? compound-statement) | function-try-block ;
for-init-statement ::= expression-statement | simple-declaration ;
explicit-instantiation ::= "extern"? "template" declaration ;
unnamed-namespace-definition ::= "inline"? "namespace" "{" namespace-body "}" ;
statement ::= labeled-statement | expression-statement | compound-statement | selection-statement | iteration-statement | jump-statement | declaration-statement | try-block ;
multiplicative-expression ::= pm-expression | (multiplicative-expression "*" pm-expression) | (multiplicative-expression "/" pm-expression) | (multiplicative-expression "%" pm-expression) ;
selection-statement ::= ("if" "(" condition ")" statement) | ("if" "(" condition ")" statement "else" statement) | ("switch" "(" condition ")" statement) ;
function-definition ::= (decl-specifier-seq? declarator function-body) | (decl-specifier-seq? declarator "=" "default" ";") | (decl-specifier-seq? declarator "=" "delete" ";") ;
pm-expression ::= cast-expression | (pm-expression ".*" cast-expression) | (pm-expression "->*" cast-expression) ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" simple-template-id) | "char" | "char16_t" | "char32_t" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | "auto" | ("decltype" "(" expression ")") ;
new-type-id ::= type-specifier-seq new-declarator? ;
constant-expression ::= conditional-expression ;
namespace-alias ::= identifier ;
lambda-expression ::= lambda-introducer lambda-parameter-declaration? compound-statement ;
handler-seq ::= handler handler-seq? ;
decl-specifier ::= storage-class-specifier | type-specifier | function-specifier | "friend" | "typedef" | "constexpr" | alignment-specifier ;
storage-class-specifier ::= "register" | "static" | "thread_local" | "extern" | "mutable" ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
alignment-specifier ::= ("alignas" "(" constant-expression ")") | ("alignas" "(" type-id ")") ;
template-id ::= simple-template-id | (operator-function-id "<" template-argument-list? ">") ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? compound-statement handler-seq ;
capture ::= identifier | ("&" identifier) | "this" ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
primary-expression ::= literal | "this" | ("(" expression ")") | id-expression | lambda-expression ;
lambda-capture ::= capture-default | capture-list | (capture-default "," capture-list) ;
conditional-expression ::= logical-or-expression | (logical-or-expression "?" expression ":" assignment-expression) ;
type-name ::= class-name | enum-name | typedef-name ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | (class-key "::"? nested-name-specifier? "template"? simple-template-id) | (enum-key "::"? nested-name-specifier? identifier) ;
block-declaration ::= simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive | static_assert-declaration | alias-declaration ;
constant-initializer ::= "=" constant-expression ;
original-namespace-name ::= identifier ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
declarator-id ::= ("..."? id-expression) | ("::"? nested-name-specifier? class-name) ;
new-initializer ::= ("(" expression-list? ")") | braced-init-list ;
declarator ::= direct-declarator | (ptr-operator declarator) ;
pure-specifier ::= "=" "0" ;
lambda-parameter ::= decl-specifier-seq declarator ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
translation-unit ::= declaration-seq? ;
enum-base ::= ":" type-specifier-seq ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
condition ::= expression | (type-specifier-seq declarator "=" initializer-clause) | (type-specifier-seq declarator braced-init-list) ;
named-namespace-definition ::= original-namespace-definition | extension-namespace-definition ;
template-parameter ::= type-parameter | parameter-declaration ;
class-head ::= (class-key identifier? base-clause?) | (class-key nested-name-specifier identifier base-clause?) | (class-key nested-name-specifier? simple-template-id base-clause?) ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
init-declarator ::= declarator initializer? ;
lambda-return-type-clause ::= "->" type-id ;
function-specifier ::= "inline" | "virtual" | "explicit" ;
enumerator-list ::= enumerator-definition | (enumerator-list "," enumerator-definition) ;
namespace-definition ::= named-namespace-definition | unnamed-namespace-definition ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier | operator-function-id | conversion-function-id | ("~" class-name) | template-id ;
statement-seq ::= statement | (statement-seq statement) ;
--------------------cpp::elges-cordy.bgf--------------------
comma_dotdotdot ::= ","? "..." ;
elaborated_type_specifier ::= (class_key "::"? nested_name_spec? class_name) | ("enum" "::"? nested_name_spec? id) ;
character_constant ::= charlit ;
type_specifier ::= simple_type_name | class_specifier | enum_specifier | elaborated_type_specifier | const_volatile_qualifier ;
function_declarator ::= pointer_operator* declared_item declarator_extension+ ;
declared_item ::= declared_name | ("(" declarator ")") ;
class_component ::= class_name | ("~" SPOFF class_name SPON) | operator_function_name | conversion_function_name | qualified_name ;
non_gt_binary_expression ::= cast_expression non_gt_binary_operation* ;
member_declarator ::= (declarator initializer?) | (id? SPOFF ":" SPON constant_expression) ;
primary_expression ::= literal | "this" | ("::" id) | ("::" operator_function_name) | ("(" expression ")") | name ;
postfix_extension ::= ("[" expression? "]") | ("(" expression_list? ")") | ("." name) | ("->" name) | "++" | "--" ;
label ::= (id SPOFF ":" SPON) | (EX "case" constant_expression SPOFF ":" SPON NL IN) | (EX "default" SPOFF ":" SPON NL IN) ;
storage_class_specifier ::= "auto" | "register" | "static" | "extern" ;
class_name ::= id template_arguments? ;
conditional_expression ::= binary_expression conditional_operation? ;
allocation_declarator ::= allocation_array_declarator | ("*" const_volatile_qualifier_list? allocation_declarator?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list? allocation_declarator?) | (qualified_name "::" "*" const_volatile_qualifier_list? allocation_declarator?) ;
namespace_name ::= id ;
conditional_operation ::= "?" expression ":" conditional_expression ;
declarator_list ::= init_declarator+ ;
declaration_statement ::= declaration ;
else_statement ::= "else" statement ;
expression_list ::= assignment_expression+ ;
placement ::= "(" expression_list ")" ;
parameter_declaration ::= decl_specifiers parameter_declarator equal_expression? ;
type_parameter ::= "class" id ;
template_argument ::= type_name | non_gt_binary_expression ;
initializer ::= ("=" initial_value) | ("(" expression_list? ")") ;
dot_slash_identifier ::= "."? "/"? file_identifier ;
compound_statement ::= "{" NL IN statement_list? EX "}" NL ;
template_argument_list ::= template_argument | (template_argument_list "," template_argument) ;
initializer_list ::= initializer_element+ ;
number_constant ::= ("-"? number) | hexnumber ;
template_parameter_list ::= template_parameter | (template_parameter_list "," template_parameter) ;
template_class_name ::= id template_arguments ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
allocation_type_name ::= (type_specifiers allocation_declarator?) | ("(" type_name ")" allocation_declarator?) ;
template_arguments ::= "<" template_argument_list ">" ;
base_specifier ::= ("::"? nested_name_spec? class_name) | ("virtual" access_specifier? "::"? nested_name_spec? class_name) | (access_specifier "virtual"? "::"? nested_name_spec? class_name) ;
enumerator ::= id equal_constant_expression? ;
class_or_namespace_name ::= class_name | namespace_name ;
access_specifier_colon ::= EX_2 NL access_specifier SPOFF ":" SPON IN_2 NL ;
init_declarator ::= declarator initializer? ;
namespace_definition ::= ("namespace" id? "{" NL IN declaration_list? EX "}" NL NL) | ("namespace" id "=" qualified_namespace_spec) ;
null_statement ::= ";" NL ;
class_specifier ::= class_head "{" NL IN member* EX "}" ;
initial_value ::= assignment_expression | ("{" IN initializer_list ","? EX "}") ;
asm_declaration ::= "asm" "(" string_constant ")" ";" NL ;
unary_operator ::= "**" | "*" | "&" | "+" | "-" | "!" | "~" ;
declarator_extension ::= (parenthesized_parameter_declaration_list const_volatile_qualifier_list?) | ("[" constant_expression? "]") ;
literal ::= number_constant | character_constant | string_constant ;
binary_operation ::= binary_operator cast_expression ;
function_body ::= (NL compound_statement ";"? NL) | ("try" ctor_initializer? NL compound_statement ";"? NL handler_list) ;
unary_expression ::= postfix_expression | ("++" unary_expression) | ("--" unary_expression) | (unary_operator cast_expression) | ("sizeof" unary_expression) | ("sizeof" "(" type_name ")") | allocation_expression | deallocation_expression | throw_expression ;
nested_name_spec ::= class_or_namespace_name "::" nested_name_spec? ;
operator ::= "new" | "delete" | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "-+" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | ("(" type_specifier? ")") | ("[" "]") ;
access_specifier ::= "private" | "protected" | "public" ;
postfix_expression ::= (primary_expression postfix_extension*) | (simple_type_name "(" expression_list? ")" postfix_extension*) ;
initializer_element ::= assignment_expression | (NL "{" IN initializer_list ","? EX "}") ;
jump_statement ::= ("break" ";" NL) | ("continue" ";" NL) | ("return" expression? ";" NL) | ("goto" id ";" NL) ;
member ::= access_specifier_colon? member_declaration ;
type_specifiers ::= type_specifier+ ;
expression ::= assignment_expression | (expression "," assignment_expression) ;
cast_expression ::= unary_expression | ("(" type_name ")" cast_expression) ;
binary_expression ::= cast_expression binary_operation* ;
throw_expression ::= "throw" assignment_expression? ;
iteration_statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";" NL) | ("for" "(" for_init_statement expression? ";" expression? ")" for_body) ;
name ::= id | template_class_name | qualified_name | operator_function_name | conversion_function_name ;
exception_declaration ::= (type_specifiers exception_declarator?) | "..." ;
expression_statement ::= expression ";" NL ;
equal_constant_expression ::= "=" constant_expression ;
conversion_type_name ::= type_specifiers pointer_operator? ;
parameter_declarator ::= declarator | (abstract_declarator?) ;
program ::= declaration_list ;
type_list ::= type_name | (type_list "," type_name) ;
equal_expression ::= "=" expression ;
non_gt_binary_operator ::= "||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | "<=" | ">=" | "<<" | ">>" | "+" | "-" | "*" | "/" | "%" | ".*" | "->*" ;
selection_statement ::= ("if" "(" expression ")" statement else_statement?) | ("switch" "(" expression ")" statement) ;
parenthesized_parameter_declaration_list ::= ("(" parameter_declaration_list ")") | ("(" parenthesized_parameter_declaration_list ")") ;
class_definition ::= NL storage_class_specifier* class_specifier declarator_list? ";" NL NL ;
declaration ::= asm_declaration | class_definition | function_definition | namespace_definition | template_declaration | linkage_specification | exception_specification | using_declaration | (decl_specifiers? declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
mem_initializer ::= "::"? nested_name_spec? class_name "(" expression_list? ")" ;
deallocation_expression ::= ("::"? "delete" cast_expression) | ("::"? "delete" "[" expression? "]" cast_expression) ;
handler_list ::= handler handler_list? ;
type_name ::= type_specifiers abstract_declarator? ;
declared_name ::= (nested_name_spec? name) | ("~" SPOFF id SPON) ;
statement ::= label* unlabeled_statement ;
statement_list ::= statement+ ;
abstract_declarator ::= (abstract_extension+) | ("(" abstract_declarator ")" abstract_extension*) ;
decl_specifier ::= storage_class_specifier | type_specifier | function_specifier | "friend" | "typedef" ;
base_spec ::= ":" base_list ;
pointer_operator ::= (stars const_volatile_qualifier_list?) | ("&" const_volatile_qualifier_list?) | (id "::" stars const_volatile_qualifier_list?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list) ;
abstract_extension ::= ("(" parameter_declaration_list ")" const_volatile_qualifier_list?) | ("[" constant_expression? "]") | pointer_operator | ("(" abstract_declarator ")") ;
stars ::= "*" | "**" ;
for_body ::= compound_statement | (IN NL statement EX) ;
allocation_expression ::= "::"? "new" placement? allocation_type_name initializer? ;
allocation_array_declarator ::= ("[" expression? "]") | (allocation_array_declarator "[" expression? "]") ;
member_declaration ::= (function_definition ";"?) | (qualified_name ";" NL) | using_declaration | (decl_specifiers? member_declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
preprocessor ::= ("#define" id "(" id+ ")" expression) | ("#define" id expression) | (EX "#else" IN) | (EX "#endif" NL) | (NL "#if" expression IN) | (NL "#ifdef" id IN) | (NL "#ifndef" id IN) | ("#ident" stringlit) | ("#include" stringlit) | ("#include" "<" SPOFF filename ">" SPON) | ("#line" integernumber stringlit?) | ("#undef" id) | ("#LINK" stringlit) ;
qualified_name ::= class_name "::" class_component ;
file_identifier ::= id | key ;
base_list ::= base_specifier ","? {base_specifier ","}* ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
handler ::= "catch" "(" exception_declaration ")" compound_statement ;
unlabeled_statement ::= null_statement | expression_statement | compound_statement | selection_statement | iteration_statement | jump_statement | declaration_statement | try_block ;
non_gt_binary_operation ::= non_gt_binary_operator cast_expression ;
class_head ::= (class_key id? base_spec?) | (class_key nested_name_spec id base_spec?) | (class_key class_name base_spec?) ;
member_declarator_list ::= member_declarator+ ;
declaration_list ::= declaration* ;
using_declaration ::= ("using" "::"? nested_name_spec? name ";") | ("using" "namespace" "::"? nested_name_spec? id ";") ;
const_volatile_qualifier_list ::= const_volatile_qualifier+ ;
ctor_initializer ::= SPOFF ":" SPON mem_initializer_list ;
operator_function_name ::= "operator" operator ;
for_init_statement ::= (expression ";") | (decl_specifiers? declarator_list ";") | (decl_specifiers ";") | ";" ;
template_declaration ::= "template" "<" template_parameter_list ">" declaration ;
declarator ::= pointer_operator* declared_item declarator_extension* ;
decl_specifiers ::= decl_specifier+ ;
conversion_function_name ::= "operator" conversion_type_name ;
template_parameter ::= type_parameter | parameter_declaration ;
const_volatile_qualifier ::= "const" | "volatile" ;
simple_type_name ::= "char" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | ("::"? nested_name_spec? id) | ("::"? nested_name_spec? template_class_name) ;
binary_operator ::= "||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "<<" | ">>" | "+" | "-" | "*" | "/" | "%" | ".*" | "->*" ;
qualified_namespace_spec ::= "::"? nested_name_spec? class_or_namespace_name ;
exception_declarator ::= declarator | abstract_declarator ;
enum_list ::= enumerator+ ","? ;
function_definition ::= NL decl_specifiers? function_declarator ctor_initializer? exception_specification? function_body ;
parameter_declaration_list ::= {parameter_declaration ","}* comma_dotdotdot? ;
class_key ::= "class" | "struct" | "union" ;
function_specifier ::= "inline" | "virtual" ;
constant_expression ::= conditional_expression ;
exception_specification ::= "throw" "(" type_list? ")" ;
string_constant ::= stringlit IN NL_stringlit* EX ;
try_block ::= "try" compound_statement handler_list ;
linkage_specification ::= (NL "extern" stringlit "{" NL IN declaration_list EX "}" ";"? NL NL) | ("extern" stringlit declaration) ;
filename ::= file_identifier dot_slash_identifier* ;
mem_initializer_list ::= mem_initializer+ ;
enum_specifier ::= "enum" id? "{" enum_list? "}" ;
--------------------cpp::iso-14882-1998.bgf--------------------
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-or-expression ::= logical-and-expression | (logical-or-expression "||" logical-and-expression) ;
template-name ::= identifier ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
enumerator-definition ::= enumerator | (enumerator "=" constant-expression) ;
exception-declaration ::= (type-specifier-seq declarator) | (type-specifier-seq abstract-declarator) | type-specifier-seq | "..." ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
try-block ::= "try" compound-statement handler-seq ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
conversion-function-id ::= "operator" conversion-type-id ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression | ("++" cast-expression) | ("--" cast-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-id ")") | new-expression | delete-expression ;
template-parameter-list ::= template-parameter | (template-parameter-list "," template-parameter) ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier identifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")") | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
base-clause ::= ":" base-specifier-list ;
type-specifier ::= simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | cv-qualifier ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
cast-expression ::= unary-expression | ("(" type-id ")" cast-expression) ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
initializer ::= ("=" initializer-clause) | ("(" expression-list ")") ;
direct-new-declarator ::= ("[" expression "]") | (direct-new-declarator "[" constant-expression "]") ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
declaration-statement ::= block-declaration ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
enum-name ::= identifier ;
type-parameter ::= ("class" identifier?) | ("class" identifier? "=" type-id) | ("typename" identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
namespace-body ::= declaration-seq? ;
extension-namespace-definition ::= "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
class-or-namespace-name ::= class-name | namespace-name ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
cv-qualifier ::= "const" | "volatile" ;
compound-statement ::= "{" statement-seq? "}" ;
base-specifier-list ::= base-specifier | (base-specifier-list "," base-specifier) ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | template-declaration ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
enumerator ::= identifier ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
class-name ::= identifier | template-id ;
namespace-name ::= original-namespace-name | namespace-alias ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator ;
initializer-clause ::= assignment-expression | ("{" initializer-list ","? "}") | ("{" "}") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
parameter-declaration-list ::= parameter-declaration | (parameter-declaration-list "," parameter-declaration) ;
expression-list ::= assignment-expression | (expression-list "," assignment-expression) ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
template-argument ::= assignment-expression | type-id | id-expression ;
ctor-initializer ::= ":" mem-initializer-list ;
initializer-list ::= initializer-clause | (initializer-list "," initializer-clause) ;
class-specifier ::= class-head "{" member-specification? "}" ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
operator ::= "new" | "delete" | ("new" "[" "]") | ("delete" "[" "]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | ("(" ")") | ("[" "]") ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
mem-initializer-list ::= mem-initializer | (mem-initializer "," mem-initializer-list) ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
template-argument-list ::= template-argument | (template-argument-list "," template-argument) ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
assignment-expression ::= conditional-expression | (logical-or-expression assignment-operator assignment-expression) | throw-expression ;
access-specifier ::= "private" | "protected" | "public" ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
logical-and-expression ::= inclusive-or-expression | (logical-and-expression "&&" inclusive-or-expression) ;
nested-name-specifier ::= (class-or-namespace-name "::" nested-name-specifier?) | (class-or-namespace-name "::" "template" nested-name-specifier) ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("goto" identifier ";") ;
type-id ::= type-specifier-seq abstract-declarator? ;
typedef-name ::= identifier ;
declaration-seq ::= declaration | (declaration-seq declaration) ;
class-key ::= "class" | "struct" | "union" ;
id-expression ::= unqualified-id | qualified-id ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
operator-function-id ::= "operator" operator ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "namespace" identifier "{" namespace-body "}" ;
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
new-declarator ::= (ptr-operator new-declarator?) | direct-new-declarator ;
type-id-list ::= type-id | (type-id-list "," type-id) ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
expression-statement ::= expression? ";" ;
declaration ::= block-declaration | function-definition | template-declaration | explicit-instantiation | explicit-specialization | linkage-specification | namespace-definition ;
function-body ::= compound-statement ;
for-init-statement ::= expression-statement | simple-declaration ;
explicit-instantiation ::= "template" declaration ;
unnamed-namespace-definition ::= "namespace" "{" namespace-body "}" ;
statement ::= labeled-statement | expression-statement | compound-statement | selection-statement | iteration-statement | jump-statement | declaration-statement | try-block ;
multiplicative-expression ::= pm-expression | (multiplicative-expression "*" pm-expression) | (multiplicative-expression "/" pm-expression) | (multiplicative-expression "%" pm-expression) ;
selection-statement ::= ("if" "(" condition ")" statement) | ("if" "(" condition ")" statement "else" statement) | ("switch" "(" condition ")" statement) ;
function-definition ::= (decl-specifier-seq? declarator ctor-initializer? function-body) | (decl-specifier-seq? declarator function-try-block) ;
pm-expression ::= cast-expression | (pm-expression ".*" cast-expression) | (pm-expression "->*" cast-expression) ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" template-id) | "char" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" ;
new-type-id ::= type-specifier-seq new-declarator? ;
constant-expression ::= conditional-expression ;
namespace-alias ::= identifier ;
handler-seq ::= handler handler-seq? ;
decl-specifier ::= storage-class-specifier | type-specifier | function-specifier | "friend" | "typedef" ;
storage-class-specifier ::= "auto" | "register" | "static" | "extern" | "mutable" ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
template-id ::= template-name "<" template-argument-list? ">" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
primary-expression ::= literal | "this" | ("(" expression ")") | id-expression ;
conditional-expression ::= logical-or-expression | (logical-or-expression "?" expression ":" assignment-expression) ;
type-name ::= class-name | enum-name | typedef-name ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | ("enum" "::"? nested-name-specifier? identifier) | ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? template-id) ;
block-declaration ::= simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive ;
constant-initializer ::= "=" constant-expression ;
original-namespace-name ::= identifier ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
declarator-id ::= id-expression | ("::"? nested-name-specifier? type-name) ;
new-initializer ::= "(" expression-list? ")" ;
declarator ::= direct-declarator | (ptr-operator declarator) ;
pure-specifier ::= "=" "0" ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
translation-unit ::= declaration-seq? ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
condition ::= expression | (type-specifier-seq declarator "=" assignment-expression) ;
named-namespace-definition ::= original-namespace-definition | extension-namespace-definition ;
template-parameter ::= type-parameter | parameter-declaration ;
class-head ::= (class-key identifier? base-clause?) | (class-key nested-name-specifier identifier base-clause?) | (class-key nested-name-specifier? template-id base-clause?) ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
init-declarator ::= declarator initializer? ;
function-specifier ::= "inline" | "virtual" | "explicit" ;
enumerator-list ::= enumerator-definition | (enumerator-list "," enumerator-definition) ;
namespace-definition ::= named-namespace-definition | unnamed-namespace-definition ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier | operator-function-id | conversion-function-id | ("~" class-name) | template-id ;
statement-seq ::= statement | (statement-seq statement) ;
--------------------cs::csharp-ecma-334-2.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
attribute-argument-expression ::= expression ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "while" | "assembly" | "remove" | "get" | "set" | "field" | "method" | "module" | "param" | "property" | "add" | "volatile" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= "assembly" ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
expression ::= conditional-expression | assignment ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
enum-type ::= type-name ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
selection-statement ::= if-statement | switch-statement ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
resource-acquisition ::= local-variable-declaration | expression ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
interface-type ::= type-name ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
statement-list ::= statement | (statement-list statement) ;
variable-reference ::= expression ;
type ::= value-type | reference-type ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-ecma-334-3.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while" | "get" | "set" | "yield" | "add" | "remove" | "alias" | "partial" | "where" ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= identifier | keyword ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
operator-modifier ::= "public" | "static" | "extern" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
finalizer-body ::= block | ";" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
interface-body ::= "{" interface-member-declarations? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
type-parameter-list ::= "<" type-parameters ">" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= identifier | keyword ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
expression ::= conditional-expression | assignment ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
constant-expression ::= expression ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
type-argument-list ::= "<" type-arguments ">" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-ecma-334-4.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while" | "get" | "set" | "yield" | "add" | "remove" | "alias" | "partial" | "where" ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= identifier | keyword ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
operator-modifier ::= "public" | "static" | "extern" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
finalizer-body ::= block | ";" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
interface-body ::= "{" interface-member-declarations? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
right-shift ::= ">>" ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= identifier | keyword ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
expression ::= conditional-expression | assignment ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
constant-expression ::= expression ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-iso-23270-2003.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
attribute-argument-expression ::= expression ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | ("*" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | "type" ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= "assembly" ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
expression ::= conditional-expression | assignment ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
enum-type ::= type-name ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
selection-statement ::= if-statement | switch-statement ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
boolean-expression ::= expression ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
resource-acquisition ::= local-variable-declaration | expression ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
interface-type ::= type-name ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
statement-list ::= statement | (statement-list statement) ;
variable-reference ::= expression ;
type ::= value-type | reference-type ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
non-array-type ::= type ;
array-type ::= non-array-type rank-specifiers ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-iso-23270-2006.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
keyword ::= "abstract" | "as" | "base" | "bool" | "break" | "byte" | "case" | "catch" | "char" | "checked" | "class" | "const" | "continue" | "decimal" | "default" | "delegate" | "do" | "double" | "else" | "enum" | "event" | "explicit" | "extern" | "false" | "finally" | "fixed" | "float" | "for" | "foreach" | "goto" | "if" | "implicit" | "in" | "int" | "interface" | "internal" | "is" | "lock" | "long" | "namespace" | "new" | "null" | "object" | "operator" | "out" | "override" | "params" | "private" | "protected" | "public" | "readonly" | "ref" | "return" | "sbyte" | "sealed" | "short" | "sizeof" | "stackalloc" | "static" | "string" | "struct" | "switch" | "this" | "throw" | "true" | "try" | "typeof" | "uint" | "ulong" | "unchecked" | "unsafe" | "ushort" | "using" | "virtual" | "void" | "volatile" | "while" | "yield" | "partial" | "add" | "remove" | "get" | "set" | "where" | "alias" ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= identifier | keyword ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
operator-modifier ::= "public" | "static" | "extern" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
finalizer-body ::= block | ";" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
interface-body ::= "{" interface-member-declarations? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
type-parameter-list ::= "<" type-parameters ">" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= identifier | keyword ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
expression ::= conditional-expression | assignment ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
constant-expression ::= expression ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
type-argument-list ::= "<" type-arguments ">" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-msft-ls-1.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
finally-clause ::= "finally" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
attribute-argument-expression ::= expression ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= "assembly" | "module" ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
switch-block ::= "{" switch-sections? "}" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
expression ::= conditional-expression | assignment ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
enum-type ::= type-name ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
statement-list ::= statement | (statement-list statement) ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
type ::= value-type | reference-type ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-msft-ls-1.2.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
finally-clause ::= "finally" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
attribute-argument-expression ::= expression ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= "assembly" | "module" ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
switch-block ::= "{" switch-sections? "}" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
expression ::= conditional-expression | assignment ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
enum-type ::= type-name ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
statement-list ::= statement | (statement-list statement) ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
type ::= value-type | reference-type ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-msft-ls-3.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
ordering ::= expression ordering-direction? ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
right-shift ::= ">>" ;
element-initializer ::= non-assignment-expression | ("{" expression-list "}") ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | (implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter) ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
member-initializer-list ::= member-initializer | (member-initializer-list "," member-initializer) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
let-clause ::= "let" identifier "=" expression ;
select-clause ::= "select" expression ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
element-initializer-list ::= element-initializer | (element-initializer-list "," element-initializer) ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
attributes ::= attribute-sections ;
select-or-group-clause ::= select-clause | group-clause ;
positional-argument ::= attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
interface-type ::= type-name ;
compilation-unit ::= (extern-alias-directives? using-directives? global-attributes?) | (namespace-member-declarations?) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
member-declarator ::= simple-name | member-access | (identifier "=" expression) ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
anonymous-function-parameter-modifier ::= "ref" | "out" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
orderings ::= ordering | (orderings "," ordering) ;
post-decrement-expression ::= primary-expression "--" ;
query-continuation ::= "into" identifier query-body ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
anonymous-function-body ::= expression | block ;
for-condition ::= boolean-expression ;
where-clause ::= "where" boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
local-variable-type ::= type | "var" ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
non-nullable-value-type ::= type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
destructor-body ::= block | ";" ;
from-clause ::= "from" type? identifier "in" expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list?) | (interface-base? type-parameter-constraints-clauses? interface-body ";"?) ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= "assembly" | "module" ;
local-variable-declaration ::= local-variable-type local-variable-declarators ;
checked-statement ::= "checked" block ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
ordering-direction ::= "ascending" | "descending" ;
initializer-value ::= expression | object-or-collection-initializer ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
query-expression ::= from-clause query-body ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
query-body-clauses ::= query-body-clause | (query-body-clauses query-body-clause) ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression ;
expression ::= non-assignment-expression | assignment ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
group-clause ::= "group" expression "by" expression ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" | "this" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature ;
constant-expression ::= expression ;
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
object-or-collection-initializer ::= object-initializer | collection-initializer ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
implicit-anonymous-function-parameter ::= identifier ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
collection-initializer ::= ("{" element-initializer-list "}") | ("{" element-initializer-list "," "}") ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
member-initializer ::= identifier "=" initializer-value ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | (explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter) ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
anonymous-object-creation-expression ::= "new" anonymous-object-initializer ;
orderby-clause ::= "orderby" orderings ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-msft-ls-4.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
variant-type-parameter-list ::= "<" variant-type-parameters ">" ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" argument-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
ordering ::= expression ordering-direction? ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
argument-name ::= identifier ":" ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
right-shift ::= ">>" ;
element-initializer ::= non-assignment-expression | ("{" expression-list "}") ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | (implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter) ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
member-initializer-list ::= member-initializer | (member-initializer-list "," member-initializer) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
let-clause ::= "let" identifier "=" expression ;
select-clause ::= "select" expression ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
element-initializer-list ::= element-initializer | (element-initializer-list "," element-initializer) ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
attributes ::= attribute-sections ;
select-or-group-clause ::= select-clause | group-clause ;
positional-argument ::= argument-name? attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" argument-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
interface-type ::= type-name ;
compilation-unit ::= (extern-alias-directives? using-directives? global-attributes?) | (namespace-member-declarations?) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
member-declarator ::= simple-name | member-access | (identifier "=" expression) ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type) | (identifier variant-type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
anonymous-function-parameter-modifier ::= "ref" | "out" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
orderings ::= ordering | (orderings "," ordering) ;
post-decrement-expression ::= primary-expression "--" ;
query-continuation ::= "into" identifier query-body ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
anonymous-function-body ::= expression | block ;
for-condition ::= boolean-expression ;
variant-type-parameters ::= (attributes? variance-annotation? type-parameter) | (variant-type-parameters "," attributes? variance-annotation? type-parameter) ;
where-clause ::= "where" boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
local-variable-type ::= type | "var" ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
non-nullable-value-type ::= type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
destructor-body ::= block | ";" ;
from-clause ::= "from" type? identifier "in" expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface") | (identifier variant-type-parameter-list? interface-base?) | (type-parameter-constraints-clauses? interface-body ";"?) ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= "assembly" | "module" ;
local-variable-declaration ::= local-variable-type local-variable-declarators ;
checked-statement ::= "checked" block ;
default-argument ::= "=" expression ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
ordering-direction ::= "ascending" | "descending" ;
initializer-value ::= expression | object-or-collection-initializer ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
argument ::= argument-name? argument-value ;
query-expression ::= from-clause query-body ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
query-body-clauses ::= query-body-clause | (query-body-clauses query-body-clause) ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression ;
expression ::= non-assignment-expression | assignment ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier default-argument? ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
group-clause ::= "group" expression "by" expression ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" | "this" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "dynamic" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature ;
constant-expression ::= expression ;
argument-value ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
object-or-collection-initializer ::= object-initializer | collection-initializer ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
implicit-anonymous-function-parameter ::= identifier ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
local-variable-initializer ::= expression | array-initializer ;
collection-initializer ::= ("{" element-initializer-list "}") | ("{" element-initializer-list "," "}") ;
struct-type ::= type-name | simple-type | nullable-type ;
member-initializer ::= identifier "=" initializer-value ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | (explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter) ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
anonymous-object-creation-expression ::= "new" anonymous-object-initializer ;
orderby-clause ::= "orderby" orderings ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
variance-annotation ::= "in" | "out" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-zaytsev.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
constant-declarator ::= lex-csharp/identifier "=" expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= attributes method-modifier* type-or-void qualified-identifier "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
unary-expression ::= (expression-unary-operator unary-expression) | ("(" type ")" unary-expression) | primary-expression ;
local-constant-declaration ::= "const" type {constant-declarator ","}+ ;
enum-body ::= ("{" "}") | ("{" {enum-member-declaration ","}+ ","? "}") ;
embedded-statement ::= maybe-empty-block | (statement-expression ";") | selection-statement | iteration-statement | jump-statement | try-statement | ("checked" block) | ("unchecked" block) | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
conversion-kind ::= "implicit" | "explicit" ;
interface-declaration ::= attributes interface-modifier* "interface" lex-csharp/identifier (":" qualified-identifier-list)? interface-body ";"? ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= lex-csharp/identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= {fixed-parameter ","}+ ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | "type" ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
ref-or-out ::= "ref" | "out" ;
try-statement ::= ("try" block catch-clauses finally-clause?) | ("try" block finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
class-body ::= "{" class-member-declaration* "}" ;
expression-relational-operator ::= lex-csharp-extra/less-than | lex-csharp-extra/greater-than | "<=" | ">=" | "is" | "as" ;
namespace-body ::= "{" using-directive* namespace-member-declaration* "}" ;
while-statement ::= "while" "(" expression ")" embedded-statement ;
catch-clauses ::= (specific-catch-clause+ general-catch-clause?) | (specific-catch-clause* general-catch-clause) ;
operator-declaration ::= attributes operator-modifier+ operator-declarator maybe-empty-block ;
constant-declaration ::= attributes constant-modifier* "const" type {constant-declarator ","}+ ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
local-variable-declaration ::= type {variable-declarator ","}+ ;
continue-statement ::= "continue" ";" ;
static-constructor-declaration ::= attributes static-constructor-modifiers lex-csharp/identifier "(" ")" maybe-empty-block ;
event-declaration ::= (attributes event-modifier* "event" type {variable-declarator ","}+ ";") | (attributes event-modifier* "event" type qualified-identifier "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= conversion-kind "operator" type "(" type lex-csharp/identifier ")" ;
global-attributes ::= global-attribute-section* ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type qualified-identifier "." "this" "[" formal-parameter-list "]") ;
if-statement ::= "if" "(" expression ")" embedded-statement else-part? ;
argument ::= ref-or-out? expression ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
interface-body ::= "{" interface-member-declaration* "}" ;
statement-expression ::= (primary-expression "(" argument-list ")") | ("new" type "(" argument-list ")") | (unary-expression assignment-operator expression) | (primary-expression increment-decrement) | (increment-decrement primary-expression) ;
labeled-statement ::= lex-csharp/identifier ":" statement ;
increment-decrement ::= "++" | "--" ;
attribute-section ::= "[" (attribute-target ":")? attribute-list ","? "]" ;
expression-list ::= {expression ","}+ ;
enum-declaration ::= attributes enum-modifier* "enum" lex-csharp/identifier (":" integral-type)? enum-body ";"? ;
argument-list ::= {argument ","}* ;
do-statement ::= "do" embedded-statement "while" "(" expression ")" ";" ;
indexer-declaration ::= attributes indexer-modifier* indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type lex-csharp/identifier "in" expression ")" embedded-statement ;
type-or-void ::= type | "void" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes "extern"? "~" lex-csharp/identifier "(" ")" maybe-empty-block ;
class-declaration ::= attributes class-modifier* "class" lex-csharp/identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes "new"? type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes "add" block ;
remove-accessor-declaration ::= attributes "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declaration* "}" ;
expression ::= (expression "?" expression ":" expression) | (expression "||" expression) | (expression "&&" expression) | (expression lex-csharp-extra/bar expression) | (expression "^" expression) | (expression lex-csharp-extra/ampersand expression) | (expression expression-equality-operator expression) | (expression expression-relational-operator expression) | (expression "is" built-in-type) | (expression expression-shift-operator expression) | (expression lex-csharp-extra/plus expression) | (expression lex-csharp-extra/minus expression) | (expression "*" expression) | (expression "/" expression) | (expression "%" expression) | unary-expression | (unary-expression assignment-operator expression) ;
interface-property-declaration ::= attributes "new"? type lex-csharp/identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
built-in-type ::= integral-type | built-in-class-type | "bool" | "decimal" | "float" | "double" ;
fixed-parameter ::= attributes parameter-modifier? type lex-csharp/identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
constructor-initializer ::= (":" "base" "(" argument-list ")") | (":" "this" "(" argument-list ")") ;
method-declaration ::= method-header maybe-empty-block ;
block ::= "{" statement* "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" lex-csharp/identifier ";") | ("goto" "case" expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes struct-modifier* "struct" lex-csharp/identifier (":" qualified-identifier-list)? struct-body ";"? ;
property-declaration ::= attributes property-modifier* type qualified-identifier "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes "set" maybe-empty-block ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
specific-catch-clause ::= ("catch" "(" built-in-class-type lex-csharp/identifier? ")" block) | ("catch" "(" qualified-identifier lex-csharp/identifier? ")" block) ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= {lex-csharp/identifier "."}+ ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes "get" ";" (attributes "set" ";")?) | (attributes "set" ";" (attributes "get" ";")?) ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
array-initializer ::= ("{" "}") | ("{" {variable-initializer ","}+ ","? "}") ;
selection-statement ::= if-statement | switch-statement ;
for-statement ::= "for" "(" for-initializer? ";" expression? ";" statement-expression-list? ")" embedded-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= "(" expression-list? ")" ;
expression-shift-operator ::= "<<" | ">>" ;
rank-specifier ::= "[" ","* "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type lex-csharp/identifier ")" ;
overloadable-unary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | increment-decrement | "!" | "~" | "true" | "false" ;
attributes ::= attribute-section* ;
expression-unary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | increment-decrement | "!" | "~" | "*" ;
statement-expression-list ::= {statement-expression ","}+ ;
resource-acquisition ::= local-variable-declaration | expression ;
compilation-unit ::= using-directive* global-attributes namespace-member-declaration* ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-label+ statement+ ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern") ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= "using" (lex-csharp/identifier "=")? qualified-identifier ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifier* array-initializer?) | ("new" array-type array-initializer) | lex-csharp/literal | lex-csharp/identifier | ("(" expression ")") | (primary-expression "." lex-csharp/identifier) | (predefined-type "." lex-csharp/identifier) | (primary-expression "(" argument-list ")") | (primary-expression "[" expression-list "]") | "this" | ("base" "." lex-csharp/identifier) | ("base" "[" expression-list "]") | (primary-expression increment-decrement) | ("new" type "(" argument-list ")") | ("typeof" "(" type-or-void ")") | ("checked" "(" expression ")") | ("unchecked" "(" expression ")") ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
type ::= non-array-type rank-specifier* ;
overloadable-binary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | "*" | "/" | "%" | lex-csharp-extra/ampersand | lex-csharp-extra/bar | "^" | "<<" | ">>" | "==" | "!=" | lex-csharp-extra/greater-than | lex-csharp-extra/less-than | ">=" | "<=" ;
parameter-array ::= attributes "params" array-type lex-csharp/identifier ;
interface-event-declaration ::= attributes "new"? "event" type lex-csharp/identifier ";" ;
delegate-declaration ::= attributes delegate-modifier* "delegate" type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= {attribute ","}+ ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type lex-csharp/identifier "," type lex-csharp/identifier ")" ;
array-type ::= non-array-type rank-specifier+ ;
non-array-type ::= qualified-identifier | built-in-type ;
maybe-empty-block ::= ("{" statement* "}") | ";" ;
constructor-declaration ::= attributes constructor-modifier* constructor-declarator maybe-empty-block ;
field-declaration ::= attributes field-modifier* type {variable-declarator ","}+ ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= lex-csharp/identifier | (lex-csharp/identifier "=" variable-initializer) ;
expression-equality-operator ::= "==" | "!=" ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
attribute-name ::= qualified-identifier ;
switch-label ::= ("case" expression ":") | ("default" ":") ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" "{" switch-section* "}" ;
enum-member-declaration ::= attributes lex-csharp/identifier ("=" expression)? ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
qualified-identifier-list ::= {qualified-identifier ","}+ ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes "get" maybe-empty-block ;
global-attribute-section ::= "[" "assembly" ":" attribute-list ","? "]" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
built-in-class-type ::= "object" | "string" ;
else-part ::= "else" embedded-statement ;
class-base ::= (":" qualified-identifier-list) | (":" built-in-class-type ("," qualified-identifier-list)?) ;
--------------------cs::csharp-antoniol.bgf--------------------
long_comment ::= comment+ ;
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
not_newline ::= long_comment | (token) ;
ifdef ::= "//"? ifdef_line newline line* elsif_part* else_part? "//"? endifdef_line newline ;
any_other_line ::= not_newline* ;
line ::= ifdef | ("//"? other_preprocessor_line newline) | ("//"? any_other_line newline) ;
program ::= line* ;
ifdef_token ::= ifdef_line | elsedef_line | elsifdef_line | endifdef_line ;
--------------------cs::csharp-cordy.bgf--------------------
struct_member_declaration ::= constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration ;
pointer_type ::= (unmanaged_type "*"*) | ("void" "*" "*"*) ;
array_initializer ::= "{" variable_initializer_list? ","? "}" ;
embedded_statement ::= block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement ;
 embedded_statement ::= unsafe_statement ;
 embedded_statement ::= fixed_statement ;
null_literal ::= "null" ;
type_declaration ::= class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration ;
local_variable_initializer ::= expression | array_initializer ;
 local_variable_initializer ::= expression | array_initializer | stackalloc_initializer ;
conditional_expression ::= null_coalescing_expression | (null_coalescing_expression "?" expression ":" expression) ;
global_attribute_target_specifier ::= global_attribute_target ":" ;
integral_type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
try_statement ::= "try" block NL catch_clauses? finally_clause? ;
expression_list ::= expression+ ;
static_constructor_declaration ::= attributes? static_constructor_modifiers id "(" ")" NL static_constructor_body NL ;
interface_method_declaration ::= attributes? "new"? return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
object_initializer ::= "{" member_initializer_list? ","? "}" ;
while_statement ::= "while" "(" boolean_expression ")" nested_statement NL ;
pre_decrement_expression ::= "--" unary_expression ;
element_access_operator ::= "[" expression+ "]" ;
pointer_element_access_operator ::= "[" expression "]" ;
continue_statement ::= "continue" ";" NL ;
assignment_operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
key_expr ::= expression ;
variable_declarator ::= id equals_variable_initializer? ;
attribute_target_specifier ::= attribute_target ":" ;
predefined_type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
dot_id ::= "." id ;
interface_event_declaration ::= attributes? "new"? "event" type id ";" NL ;
accessor_modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
finalizer_declaration ::= attributes? "extern"? "~" id "(" ")" finalizer_body ;
 finalizer_declaration ::= (attributes? "extern"? "unsafe"? "~" id "(" ")" NL finalizer_body NL) | (attributes? "unsafe"? "extern"? "~" id "(" ")" NL finalizer_body NL) ;
member_name_equals ::= simple_name "=" ;
struct_body ::= "{" NL IN struct_member_declarations? EX "}" ";"? NL ;
where_clause ::= "where" pred_expr ;
formal_parameter_list ::= fixed_parameters comma_parameter_array? ;
switch_block ::= "{" NL IN switch_sections EX "}" NL ;
delegate_declaration ::= attributes? delegate_modifiers? "delegate" return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
class_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
 class_modifier ::= "unsafe" ;
generic_dimension_specifier ::= "<" ","* ">" ;
pointer_member_access_operator ::= "->" id type_argument_list? ;
foreach_statement ::= "foreach" "(" type id "in" expression ")" nested_statement NL ;
interface_member_declarations ::= interface_member_declaration+ ;
enum_type ::= type_name ;
field_declaration ::= attributes? field_modifiers? type variable_declarators ";" NL ;
query_body_clause ::= (NL from_clause) | (NL join_clause) | (NL let_clause) | (NL where_clause) | (NL orderby_clause) ;
delegate_type ::= type_name ;
local_constant_declaration ::= "const" type constant_declarators ;
global_attribute_target ::= id | key ;
reference_type ::= class_type | interface_type | array_type | delegate_type ;
constant_declarator ::= id "=" constant_expression ;
method_header ::= attributes? method_modifiers? return_type member_name type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ;
finally_clause ::= "finally" block NL ;
unary_expression ::= primary_expression | ("+" unary_expression) | ("-" unary_expression) | ("!" unary_expression) | ("~" unary_expression) | pre_increment_expression | pre_decrement_expression | cast_expression ;
 unary_expression ::= pointer_indirection_expression | addressof_expression ;
simple_type ::= numeric_type | "bool" ;
from_clause ::= "from" item_name "in" src_expr ;
constant_modifiers ::= constant_modifier+ ;
class_type ::= type_name | "object" | "string" ;
sizeof_expression ::= "sizeof" "(" unmanaged_type ")" ;
variable_initializer ::= expression | array_initializer ;
unary_operator_declarator ::= type "operator" overloadable_unary_operator "(" type id ")" ;
character_literal ::= charlit ;
cast_expression ::= "(" type ")" unary_expression ;
boolean_literal ::= "true" | "false" ;
constructor_declarator ::= id "(" formal_parameter_list? ")" constructor_initializer? ;
fixed_parameters ::= fixed_parameter+ ;
equals_constant_expression ::= "=" constant_expression ;
goto_statement ::= ("goto" id ";" NL) | ("goto" "case" constant_expression ";" NL) | ("goto" "default" ";" NL) ;
secondary_constraint ::= interface_type | type_parameter ;
positional_argument ::= attribute_argument_expression ;
interface_accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
pre_increment_expression ::= "++" unary_expression ;
enum_member_declarations ::= enum_member_declaration+ ;
input_parameters ::= input_parameter | ("(" {input_parameter ","}* ")") ;
class_member_declaration ::= constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | finalizer_declaration | static_constructor_declaration | type_declaration ;
constructor_modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
 constructor_modifier ::= "unsafe" ;
member_access_operator ::= "." id type_argument_list? ;
for_statement ::= "for" "(" for_initializer? ";" for_condition? ";" for_iterator? ")" nested_statement NL ;
namespace_or_type_name ::= "this"? id colon_colon_id? dot_id* type_argument_list? ;
field_modifiers ::= field_modifier+ ;
interface_declaration ::= attributes? interface_modifiers? "partial"? "interface" id type_parameter_list? interface_base? type_parameter_constraints_clauses? NL interface_body NL ;
input_parameter ::= type? id ;
using_statement ::= "using" "(" resource_acquisition ")" NL embedded_statement ;
attribute_arguments ::= "(" attribute_argument_list ")" ;
global_attributes ::= global_attribute_sections ;
local_variable_declarators ::= local_variable_declarator+ ;
post_increment_operator ::= "++" ;
invocation_operator ::= "(" {argument ","}* ")" ;
 invocation_operator ::= "((" argument_list_or_key* "))" ;
indexer_declarator ::= type interface_type_dot? "this" "[" formal_parameter_list "]" ;
src_expr ::= expression ;
statement ::= labeled_statement | declaration_statement | embedded_statement ;
binary_operator_declarator ::= type "operator" overloadable_binary_operator "(" type id ")" ;
statement_list ::= statement+ ;
rank_specifier ::= "[" ","* "]" ;
general_catch_clause ::= "catch" block NL ;
switch_labels ::= switch_label+ ;
statement_expression ::= primary_no_array_creation_expression | object_creation_expression | assignment | pre_increment_expression | pre_decrement_expression ;
static_constructor_modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
 static_constructor_modifiers ::= ("extern"? "unsafe"? "static") | ("unsafe"? "extern"? "static") | ("extern"? "static" "unsafe"?) | ("unsafe"? "static" "extern"?) | ("static" "extern"? "unsafe"?) | ("static" "unsafe"? "extern"?) ;
using_alias_directive ::= "using" id "=" namespace_or_type_name ";" NL ;
anonymous_method_expression ::= "delegate" anonymous_method_signature? block ;
object_formals ::= "(" formal_parameter_list? ")" ;
struct_type ::= type_name | simple_type | nullable_type ;
inclusive_or_expression ::= exclusive_or_expression | (inclusive_or_expression "|" exclusive_or_expression) ;
specific_catch_clause ::= "catch" "(" class_type id? ")" block NL ;
catch_clauses ::= specific_catch_clauses? general_catch_clause? ;
array_type ::= non_array_type rank_specifiers ;
constant_declaration ::= attributes? constant_modifiers? "const" type constant_declarators ";" NL ;
unchecked_statement ::= "unchecked" block NL ;
anonymous_method_parameter ::= parameter_modifier? type id ;
type_parameter_constraints ::= {type_parameter_constraint ","}* ;
lock_statement ::= "lock" "(" expression ")" NL embedded_statement ;
nullable_type ::= non_nullable_value_type "?" ;
attributes ::= attribute_sections ;
interface_property_declaration ::= attributes? "new"? type id NL "{" NL IN interface_accessors EX "}" NL ;
throw_statement ::= "throw" expression? ";" NL ;
event_declaration ::= (attributes? event_modifiers? "event" type variable_declarators ";" NL) | (attributes? event_modifiers? "event" type member_name "{" NL IN event_accessor_declarations EX "}" NL EX) ;
class_or_interface_type ::= class_type | interface_type ;
enum_member_declaration ::= attributes? id equals_constant_expression? ;
pred_expr ::= expression ;
stackalloc_initializer ::= "stackalloc" unmanaged_type "[" expression "]" ;
enum_base ::= ":" integral_type ;
event_accessor_declarations ::= (add_accessor_declaration remove_accessor_declaration) | (remove_accessor_declaration add_accessor_declaration) ;
else_if_clause ::= "else" "if" "(" boolean_expression ")" nested_statement ;
variable_reference ::= expression ;
value_type ::= struct_type | enum_type ;
constructor_constraint ::= "new" "(" ")" ;
overloadable_unary_operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
set_accessor_declaration ::= attributes? accessor_modifier? "set" accessor_body ;
variable_initializer_list ::= variable_initializer+ ;
yield_statement ::= ("yield" "return" expression ";" NL) | ("yield" "break" ";" NL) ;
enum_declaration ::= attributes? enum_modifiers? "enum" id enum_base? enum_body NL ;
indexer_modifiers ::= indexer_modifier+ ;
type ::= value_type | reference_type | type_parameter ;
 type ::= pointer_type ;
class_base ::= ":" class_and_interface_type_ist ;
attribute_argument_expression ::= expression ;
unbound_type_name ::= id colon_colon_id? generic_dimension_specifier? dot_id_generic_dimension_specifier* ;
else_clause ::= "else" nested_statement ;
class_declaration ::= attributes? class_modifiers? "partial"? "class" id type_parameter_list? class_base? type_parameter_constraints_clauses? NL class_body ;
accessor_declarations ::= (get_accessor_declaration set_accessor_declaration?) | (set_accessor_declaration get_accessor_declaration?) ;
primary_no_array_creation_expression ::= simple_primary_expression primary_expression_modifier* ;
 primary_no_array_creation_expression ::= sizeof_expression ;
numeric_type ::= integral_type | floating_point_type | "decimal" ;
for_condition ::= boolean_expression ;
for_iterator ::= statement_expression_list ;
return_statement ::= "return" expression? ";" NL ;
variable_declarators ::= variable_declarator+ ;
interface_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
 interface_modifier ::= "unsafe" ;
method_declaration ::= method_header NL method_body NL ;
type_parameter_list ::= "<" type_parameters ">" ;
into_item_name ::= "into" item_name ;
event_modifiers ::= event_modifier+ ;
statement_expression_list ::= statement_expression+ ;
object_initializer_expression ::= "new" array_type? object_formals? rank_specifiers? object_initializer ;
specific_catch_clauses ::= specific_catch_clause+ ;
array_creation_expression ::= ("new" non_array_type "[" expression_list "]" rank_specifiers? array_initializer?) | ("new" array_type array_initializer) ;
constant_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
member_name ::= interface_type_dot? id ;
boolean_expression ::= expression ;
interface_type_dot ::= interface_type "." ;
typeof_expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound_type_name ")") | ("typeof" "(" "void" ")") | ("typeof" "(" ")") ;
struct_interfaces ::= ":" interface_type_list ;
named_argument ::= id "=" attribute_argument_expression ;
attribute_argument ::= positional_argument | named_argument ;
local_variable_declarator ::= id equals_local_variable_initializer? ;
interface_type_list ::= interface_type+ ;
empty_statement ::= ";" ;
equality_expression ::= relational_expression | (equality_expression "==" relational_expression) | (equality_expression "!=" relational_expression) ;
parenthesized_expression ::= "(" expression ")" ;
object_creation_expression ::= "new" type "(" argument_list? ")" ;
simple_name ::= id type_argument_list? ;
overloadable_binary_operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
interface_modifiers ::= interface_modifier* ;
primary_expression ::= array_creation_expression | primary_no_array_creation_expression | object_initializer_expression ;
unmanaged_type ::= value_type | reference_type | type_parameter ;
final_query_clause ::= (NL select_clause) | (NL groupby_clause) ;
namespace_name ::= namespace_or_type_name ;
finalizer_body ::= (block NL) | (";" NL) ;
additive_expression ::= multiplicative_expression | (additive_expression "+" multiplicative_expression) | (additive_expression "-" multiplicative_expression) ;
declaration_statement ::= (local_variable_declaration ";" NL) | (local_constant_declaration ";" NL) ;
return_type ::= type | "void" ;
key_expr_ascending_descending ::= key_expr ascending_descending? ;
interface_body ::= "{" NL IN interface_member_declarations? EX "}" ";"? NL ;
type_parameter ::= id ;
primary_expression_modifier ::= member_access_operator | invocation_operator | element_access_operator | post_increment_operator | post_decrement_operator ;
 primary_expression_modifier ::= pointer_member_access_operator | pointer_element_access_operator ;
member_initializer_list ::= member_initializer+ ;
argument_list ::= {argument ","}* ;
resource_acquisition ::= local_variable_declaration | expression ;
event_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 event_modifier ::= "unsafe" ;
colon_colon_id ::= "::" id ;
namespace_member_declarations ::= namespace_member_declaration+ ;
switch_section ::= switch_labels NL IN statement_list EX ;
comma_parameter_array ::= "," parameter_array ;
switch_sections ::= switch_section+ ;
conditional_and_expression ::= inclusive_or_expression | (conditional_and_expression "&&" inclusive_or_expression) ;
checked_statement ::= "checked" block NL ;
type_parameter_constraints_clause ::= "where" type_parameter ":" type_parameter_constraints ;
post_decrement_operator ::= "--" ;
if_statement ::= "if" "(" boolean_expression ")" nested_statement else_if_clause* else_clause? NL ;
assignment ::= unary_expression assignment_operator expression ;
attributes_type_parameter ::= attributes? type_parameter ;
get_accessor_declaration ::= attributes? accessor_modifier? "get" accessor_body ;
orderby_clause ::= "orderby" {key_expr_ascending_descending ","}* ;
constructor_body ::= (block NL) | (";" NL) ;
labeled_statement ::= id ":" statement ;
ascending_descending ::= "ascending" | "descending" ;
enum_modifiers ::= enum_modifier+ ;
member_initializer ::= (member_name_equals? expression) | (member_name_equals? array_initializer) ;
argument ::= expression | ("ref" variable_reference) | ("out" variable_reference) ;
do_statement ::= "do" NL IN embedded_statement EX "while" "(" boolean_expression ")" ";" NL ;
sel_expr ::= expression ;
namespace_member_declaration ::= (namespace_declaration NL) | (type_declaration NL) ;
query_body ::= query_body_clause* final_query_clause query_continuation? ;
groupby_clause ::= "group" sel_expr "by" key_expr ;
constructor_declaration ::= attributes? constructor_modifiers? constructor_declarator NL constructor_body NL ;
relational_expression ::= shift_expression | (relational_expression "<" shift_expression) | (relational_expression ">" shift_expression) | (relational_expression "<=" shift_expression) | (relational_expression ">=" shift_expression) | (relational_expression "is" type) | (relational_expression "as" type) ;
literal ::= boolean_literal | integer_literal | real_literal | character_literal | string_literal | null_literal ;
integer_literal ::= decimal_integer_literal | hexadecimal_integer_literal ;
parameter_modifier ::= "ref" | "out" ;
operator_declarator ::= unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator ;
global_attribute_section ::= "[" global_attribute_target_specifier attribute_list ","? "]" ;
simple_primary_expression ::= literal | simple_name | parenthesized_expression | this_access | base_access | object_or_delegate_creation_expression | typeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression | (predefined_type member_access_operator) | (qualified_alias_member member_access_operator) ;
operator_modifiers ::= operator_modifier+ ;
using_directives ::= using_directive+ NL ;
fixed_parameter ::= (attributes? parameter_modifier? type id) | parameter_array ;
method_modifiers ::= method_modifier+ ;
jump_statement ::= break_statement | continue_statement | goto_statement | return_statement | throw_statement ;
attribute ::= attribute_name attribute_arguments? ;
type_argument_list ::= "<" type_argument+ ">" ;
accessor_body ::= (block NL) | (";" NL) ;
expression ::= conditional_expression | assignment | query_expression | lambda_expression ;
namespace_declaration ::= "namespace" qualified_identifier NL namespace_body ;
fixed_pointer_initializer ::= ("&" variable_reference) | expression ;
attribute_target ::= id | key ;
exclusive_or_expression ::= and_expression | (exclusive_or_expression "^" and_expression) ;
struct_modifiers ::= struct_modifier+ ;
property_modifiers ::= property_modifier+ ;
base_access ::= ("base" "." id type_argument_list?) | ("base" "[" expression+ "]") ;
global_attribute_sections ::= global_attribute_section+ ;
iteration_statement ::= while_statement | do_statement | for_statement | foreach_statement ;
block ::= "{" NL IN statement_list? EX "}" ";"? ;
addressof_expression ::= "&" unary_expression ;
local_variable_declaration ::= type local_variable_declarators ;
unchecked_expression ::= "unchecked" "(" expression ")" ;
expression_statement ::= statement_expression ";" NL ;
program ::= compilation_unit ;
extern_alias_directive ::= "extern" id id ";" NL ;
string_literal ::= stringlit ;
interface_type ::= type_name ;
compilation_unit ::= extern_alias_directives? using_directives? global_attributes? namespace_member_declarations? ;
attribute_argument_list ::= {attribute_argument ","}* ;
field_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
 field_modifier ::= "unsafe" ;
selection_statement ::= if_statement | switch_statement ;
conditional_or_expression ::= conditional_and_expression | (conditional_or_expression "||" conditional_and_expression) ;
static_constructor_body ::= (block NL) | (";" NL) ;
constructor_modifiers ::= constructor_modifier+ ;
class_member_declarations ::= class_member_declaration+ ;
method_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" | "partial" ;
 method_modifier ::= "unsafe" ;
class_modifiers ::= class_modifier+ ;
shift_expression ::= additive_expression | (shift_expression "<<" additive_expression) | (shift_expression ">>" additive_expression) ;
non_nullable_value_type ::= enum_type | type_name | simple_type ;
equals_local_variable_initializer ::= "=" local_variable_initializer ;
attribute_sections ::= attribute_section+ ;
type_name ::= namespace_or_type_name ;
query_expression ::= from_clause IN query_body EX ;
for_initializer ::= local_variable_declaration | statement_expression_list ;
anonymous_method_signature ::= "(" anonymous_method_parameter_list? ")" ;
rank_specifiers ::= rank_specifier* ;
fixed_statement ::= "fixed" "(" pointer_type fixed_pointer_declarators ")" embedded_statement ;
default_value_expression ::= "default" "(" type ")" ;
floating_point_type ::= "float" | "double" ;
attribute_list ::= attribute+ ;
add_accessor_declaration ::= attributes? "add" block NL ;
operator_declaration ::= attributes? operator_modifiers? operator_declarator operator_body ;
remove_accessor_declaration ::= attributes? "remove" block NL ;
operator_body ::= (block NL) | (";" NL) ;
null_coalescing_expression ::= conditional_or_expression | (conditional_or_expression "??" null_coalescing_expression) ;
class_and_interface_type_ist ::= class_or_interface_type+ ;
enum_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
struct_member_declarations ::= struct_member_declaration+ ;
using_directive ::= using_alias_directive | using_namespace_directive ;
delegate_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
 delegate_modifier ::= "unsafe" ;
dot_id_generic_dimension_specifier ::= "." id generic_dimension_specifier? ;
attribute_name ::= type_name ;
query_continuation ::= "into" item_name query_body ;
constant_declarators ::= constant_declarator+ ;
parameter_array ::= attributes? "params" array_type id ;
argument_list_or_key ::= argument_list | "in" ;
attribute_section ::= "[" attribute_target_specifier? attribute_list ","? "]" ;
delegate_modifiers ::= delegate_modifier+ ;
method_body ::= (block NL) | (";" NL) ;
anonymous_method_parameter_list ::= anonymous_method_parameter+ ;
pointer_indirection_expression ::= "*" unary_expression ;
primary_constraint ::= class_type | "class" | "struct" ;
indexer_declaration ::= attributes? indexer_modifiers? indexer_declarator "{" NL IN accessor_declarations EX "}" NL ;
item_name ::= type? simple_name ;
interface_indexer_declaration ::= attributes? "new"? type "this" "[" formal_parameter_list "]" "{" NL IN interface_accessors EX "}" NL ;
using_namespace_directive ::= "using" namespace_name ";" NL ;
checked_expression ::= "checked" "(" expression ")" ;
break_statement ::= "break" ";" NL ;
qualified_identifier ::= id dot_id* ;
qualified_alias_member ::= id "::" id type_argument_list? ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
nested_statement ::= block | (IN NL embedded_statement EX) ;
this_access ::= "this" ;
switch_statement ::= "switch" "(" expression ")" switch_block ;
join_clause ::= "join" item_name "in" src_expr "on" key_expr "equals" key_expr into_item_name? ;
type_argument ::= type ;
multiplicative_expression ::= unary_expression | (multiplicative_expression "*" unary_expression) | (multiplicative_expression "/" unary_expression) | (multiplicative_expression "%" unary_expression) ;
enum_body ::= "{" NL IN enum_member_declarations? ","? EX "}" ";"? NL ;
equals_variable_initializer ::= "=" variable_initializer ;
fixed_pointer_declarator ::= id "=" fixed_pointer_initializer ;
constructor_initializer ::= (":" "base" "(" argument_list? ")") | (":" "this" "(" argument_list? ")") ;
interface_member_declaration ::= interface_method_declaration | interface_property_declaration | interface_event_declaration | interface_indexer_declaration ;
object_or_delegate_creation_expression ::= "new" type "(" argument_list? ")" ;
type_parameter_constraint ::= primary_constraint | secondary_constraint | constructor_constraint ;
interface_base ::= ":" interface_type_list ;
indexer_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 indexer_modifier ::= "unsafe" ;
unsafe_statement ::= "unsafe" block ;
fixed_pointer_declarators ::= fixed_pointer_declarator+ ;
constant_expression ::= expression ;
let_clause ::= "let" item_name "=" sel_expr ;
extern_alias_directives ::= extern_alias_directive+ NL ;
operator_modifier ::= "public" | "static" | "extern" ;
 operator_modifier ::= "unsafe" ;
select_clause ::= "select" sel_expr ;
non_array_type ::= value_type | class_type | interface_type | delegate_type | type_parameter ;
property_declaration ::= NL attributes? property_modifiers? type member_name "{" NL IN accessor_declarations EX "}" NL ;
struct_declaration ::= attributes? struct_modifiers? "partial"? "struct" id type_parameter_list? struct_interfaces? type_parameter_constraints_clauses? NL struct_body NL ;
lambda_expression ::= (input_parameters "=>" expression) | (input_parameters "=>" block) ;
type_parameters ::= attributes_type_parameter+ ;
class_body ::= "{" NL IN class_member_declarations? EX "}" ";"? NL ;
namespace_body ::= "{" NL IN extern_alias_directives? using_directives? namespace_member_declarations? EX "}" ";"? NL ;
conversion_operator_declarator ::= ("implicit" "operator" type "(" type id ")") | ("explicit" "operator" type "(" type id ")") ;
struct_modifier ::= "new" | "public" | "proctected" | "internal" | "private" ;
 struct_modifier ::= "unsafe" ;
property_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 property_modifier ::= "unsafe" ;
type_parameter_constraints_clauses ::= type_parameter_constraints_clause+ ;
and_expression ::= equality_expression | (and_expression "&" equality_expression) ;
--------------------cs::csharp-ecma-334-1.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
attribute-argument-expression ::= expression ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | ("*" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= "assembly" ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations) | "}" ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
expression ::= conditional-expression | assignment ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
enum-type ::= type-name ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
selection-statement ::= if-statement | switch-statement ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
resource-acquisition ::= local-variable-declaration | expression ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
interface-type ::= type-name ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
statement-list ::= statement | (statement-list statement) ;
variable-reference ::= expression ;
type ::= value-type | reference-type ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------dart::spec-0.01.bgf--------------------
selector ::= assignableSelector | arguments ;
superclass ::= "extends" type ;
qualified ::= identifier ("." identifier)? ;
type ::= qualified typeArguments? ;
interfaces ::= "implements" typeList ;
declaration ::= (constantConstructorSignature (redirection | initializers)?) | (constructorSignature (redirection | initializers)?) | (functionSignature redirection) | (namedConstructorSignature redirection) | ("abstract" getterSignature) | ("abstract" setterSignature) | ("abstract" operatorSignature) | ("abstract" functionSignature) | ("static" "final" type? staticFinalDeclarationList) | ("static"? initializedVariableDeclaration) ;
expression ::= (assignableExpression assignmentOperator expression) | conditionalExpression ;
arguments ::= "(" argumentList? ")" ;
superinterfaces ::= "extends" typeList ;
label ::= identifier ":" ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
statement ::= label* nonLabelledStatement ;
literal ::= nullLiteral | booleanLiteral | numericLiteral | stringLiteral | mapLiteral | listLiteral ;
resource ::= "#" "resource" "(" stringLiteral ")" ";" ;
block ::= "{" statements "}" ;
redirection ::= ":" "this" ("." identifier)? arguments ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | BUILT_IN_IDENTIFIER ;
include ::= "#" "source" "(" stringLiteral ")" ";" ;
statements ::= statement* ;
operator ::= unaryOperator | binaryOperator | "[]" | "[]=" | "negate" ;
primary ::= thisExpression | ("super" assignableSelector) | functionExpression | literal | identifier | (newExpression constantObjectExpression) | ("(" expression ")") ;
--------------------dart::google.bgf--------------------
selector ::= assignableSelector | arguments ;
superclass ::= EXTENDS type ;
qualified ::= identifier ("." identifier)? ;
declaration ::= (constantConstructorDeclaration (redirection | initializers)?) | (functionDeclaration redirection) | (namedConstructorDeclaration redirection) | (ABSTRACT specialSignatureDefinition) | (ABSTRACT functionDeclaration) | (STATIC FINAL type? staticFinalDeclarationList) | (STATIC? constInitializedVariableDeclaration) ;
interfaces ::= IMPLEMENTS typeList ;
type ::= qualified typeArguments? ;
expression ::= (assignableExpression assignmentOperator expression) | conditionalExpression ;
arguments ::= "(" argumentList? ")" ;
superinterfaces ::= EXTENDS typeList ;
label ::= identifier ":" ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
statement ::= label* nonLabelledStatement ;
literal ::= NULL | TRUE | FALSE | HEX_NUMBER | NUMBER | STRING ;
directive ::= "#" identifier arguments ";" ;
block ::= "{" statements "}" ;
redirection ::= ":" THIS ("." identifier)? arguments ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | ABSTRACT | ASSERT | CLASS | EXTENDS | FACTORY | GET | IMPLEMENTS | IMPORT | INTERFACE | IS | LIBRARY | NATIVE | NEGATE | OPERATOR | SET | SOURCE | STATIC | TYPEDEF ;
statements ::= statement* ;
primary ::= primaryNoFE | primaryFE ;
--------------------dart::spec-0.05.bgf--------------------
selector ::= assignableSelector | arguments ;
superclass ::= "extends" type ;
qualified ::= identifier ("." identifier)? ;
type ::= qualified typeArguments? ;
interfaces ::= "implements" typeList ;
declaration ::= (constantConstructorSignature (redirection | initializers)?) | (functionSignature redirection) | (namedConstructorSignature redirection) | ("abstract" getterSignature) | ("abstract" setterSignature) | ("abstract" operatorSignature) | ("abstract" functionSignature) | ("static" "final" type? staticFinalDeclarationList) | ("static"? initializedVariableDeclaration) ;
expression ::= (assignableExpression assignmentOperator expression) | conditionalExpression ;
arguments ::= "(" argumentList? ")" ;
superinterfaces ::= "extends" typeList ;
label ::= identifier ":" ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
statement ::= label* nonLabelledStatement ;
literal ::= nullLiteral | booleanLiteral | numericLiteral | stringLiteral | mapLiteral | listLiteral ;
resource ::= "#" "resource" "(" stringLiteral ")" ";" ;
block ::= "{" statements "}" ;
redirection ::= ":" "this" ("." identifier)? arguments ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | BUILT_IN_IDENTIFIER ;
include ::= "#" "source" "(" stringLiteral ")" ";" ;
import ::= "#" "import" "(" stringLiteral ("," "prefix:" stringLiteral)? ")" ";" ;
statements ::= statement* ;
operator ::= unaryOperator | binaryOperator | ("[" "]") | ("[" "]" "=") | "negate" ;
primary ::= thisExpression | ("super" assignableSelector) | functionExpression | literal | identifier | newExpression | constantObjectExpression | ("(" expression ")") ;
--------------------eiffel::cordy.bgf--------------------
program ::= Class_declaration* ;
--------------------fortran::waite-cordy.bgf--------------------
program ::= IN_6 CommentOrNewline* ExecutableProgram CommentOrNewline* EX_6 ;
--------------------java::java-5-habelitz.bgf--------------------
statement ::= block | (ASSERT expr1::expression (COLON expr2::expression SEMI) | SEMI) | (IF parenthesizedExpression ifStat::statement (ELSE elseStat::statement) | ε) | (FOR LPAREN (forInit SEMI forCondition SEMI forUpdater RPAREN statement) | (localModifierList type IDENT COLON expression RPAREN statement)) | (WHILE parenthesizedExpression statement) | (DO statement WHILE parenthesizedExpression SEMI) | (TRY block (catches finallyClause?) | finallyClause) | (SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY) | (SYNCHRONIZED parenthesizedExpression block) | (RETURN expression? SEMI) | (THROW expression SEMI) | (BREAK IDENT? SEMI) | (CONTINUE IDENT? SEMI) | (IDENT COLON statement) | (expression SEMI) | SEMI ;
literal ::= HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL ;
annotation ::= AT qualifiedIdentifier annotationInit? ;
bound ::= EXTENDS type (AND type)* ;
block ::= LCURLY blockStatement* RCURLY ;
type ::= simpleType | objectType ;
catches ::= catchClause+ ;
expression ::= assignmentExpression ;
modifier ::= PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier ;
arguments ::= LPAREN expressionList? RPAREN ;
--------------------java::java-5-parr.bgf--------------------
selector ::= ("." Identifier arguments?) | ("." "this") | ("." "super" superSuffix) | ("." "new" innerCreator) | ("[" expression "]") ;
literal ::= integerLiteral | FloatingPointLiteral | CharacterLiteral | StringLiteral | booleanLiteral | "null" ;
statement ::= block | (ASSERT expression (":" expression)? ";") | ("if" parExpression statement ("else" statement)?) | ("for" "(" forControl ")" statement) | ("while" parExpression statement) | ("do" statement "while" parExpression ";") | ("try" block (catches "finally" block) | catches | ("finally" block)) | ("switch" parExpression "{" switchBlockStatementGroups "}") | ("synchronized" parExpression block) | ("return" expression? ";") | ("throw" expression ";") | ("break" Identifier? ";") | ("continue" Identifier? ";") | ";" | (statementExpression ";") | (Identifier ":" statement) ;
annotation ::= "@" annotationName ("(" (elementValuePairs | elementValue)? ")")? ;
block ::= "{" blockStatement* "}" ;
creator ::= (nonWildcardTypeArguments createdName classCreatorRest) | (createdName arrayCreatorRest | classCreatorRest) ;
modifiers ::= modifier* ;
type ::= (classOrInterfaceType ("[" "]")*) | (primitiveType ("[" "]")*) ;
catches ::= catchClause catchClause* ;
expression ::= conditionalExpression (assignmentOperator expression)? ;
modifier ::= annotation | "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "transient" | "volatile" | "strictfp" ;
arguments ::= "(" expressionList? ")" ;
annotations ::= annotation+ ;
primary ::= parExpression | ("this" ("." Identifier)* identifierSuffix?) | ("super" superSuffix) | literal | ("new" creator) | (Identifier ("." Identifier)* identifierSuffix?) | (primitiveType ("[" "]")* "." "class") | ("void" "." "class") ;
--------------------java::java-5-stahl.bgf--------------------
statement ::= compoundStatement | (declaration SEMI) | (expression SEMI) | (m::modifiers enumDefinition | classDefinition) | (IDENT c::COLON statement) | ("if" LPAREN expression RPAREN statement ("else" statement)?) | ("for" LPAREN (parameterDeclaration COLON expression) | (forInit SEMI forCond SEMI forIter) RPAREN statement) | ("while" LPAREN expression RPAREN statement) | ("do" statement "while" LPAREN expression RPAREN SEMI) | ("break" IDENT? SEMI) | ("continue" IDENT? SEMI) | ("return" expression? SEMI) | ("switch" LPAREN expression RPAREN LCURLY casesGroup* RCURLY) | tryBlock | ("throw" expression SEMI) | ("synchronized" LPAREN expression RPAREN compoundStatement) | (ASSERT expression (COLON expression)? SEMI) | (s::SEMI) ;
annotation ::= AT identifier annotationInit ;
modifiers ::= (modifier | annotation)* ;
handler ::= "catch" LPAREN parameterDeclaration RPAREN compoundStatement ;
declaration ::= m::modifiers t::typeSpec v::variableDefinitions ;
type ::= classOrInterfaceType | builtInType ;
identifier ::= IDENT (DOT IDENT)* ;
expression ::= assignmentExpression ;
modifier ::= "private" | "public" | "protected" | "static" | "transient" | "final" | "abstract" | "native" | "threadsafe" | "synchronized" | "volatile" | "strictfp" ;
constant ::= NUM_INT | CHAR_LITERAL | STRING_LITERAL | NUM_FLOAT | NUM_LONG | NUM_DOUBLE ;
annotations ::= annotation* ;
initializer ::= expression | arrayInitializer ;
--------------------java::java-5-studman.bgf--------------------
statement ::= compoundStatement | (declaration SEMI) | (expression SEMI) | (m::modifiers classDefinition) | (IDENT c::COLON statement) | ("if" LPAREN expression RPAREN statement ("else" statement)?) | forStatement | ("while" LPAREN expression RPAREN statement) | ("do" statement "while" LPAREN expression RPAREN SEMI) | ("break" IDENT? SEMI) | ("continue" IDENT? SEMI) | ("return" expression? SEMI) | ("switch" LPAREN expression RPAREN LCURLY casesGroup* RCURLY) | tryBlock | ("throw" expression SEMI) | ("synchronized" LPAREN expression RPAREN compoundStatement) | ("assert" expression (COLON expression)? SEMI) | (s::SEMI) ;
annotation ::= AT i::identifier (LPAREN (args::annotationArguments)? RPAREN)? ;
modifiers ::= (modifier | annotation)* ;
handler ::= "catch" LPAREN parameterDeclaration RPAREN compoundStatement ;
declaration ::= m::modifiers t::typeSpec v::variableDefinitions ;
type ::= classOrInterfaceType | builtInType ;
identifier ::= IDENT (DOT IDENT)* ;
expression ::= assignmentExpression ;
modifier ::= "private" | "public" | "protected" | "static" | "transient" | "final" | "abstract" | "native" | "threadsafe" | "synchronized" | "volatile" | "strictfp" ;
constant ::= NUM_INT | CHAR_LITERAL | STRING_LITERAL | NUM_FLOAT | NUM_LONG | NUM_DOUBLE ;
annotations ::= annotation* ;
initializer ::= expression | arrayInitializer ;
--------------------java::java-1-cordy-guo.bgf--------------------
for_update ::= {expression ","}* ;
component ::= dot_id | method_argument | subscript ;
equality_expression ::= relational_expression equality_op_relational_expression* ;
empty_statement ::= ";" NL ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
relational_op_shift_expression ::= (relational_op shift_expression) | ("instanceof" type_specifier) ;
and_inclusive_or_expression ::= "&&" inclusive_or_expression ;
relational_op ::= "<" | ">" | "<=" | ">=" ;
type_specifier ::= type_name | array_type_specifier ;
null_literal ::= "null" ;
label_name ::= reference ;
type_declaration ::= (class_declaration NL NL) | (interface_declaration NL NL) ;
class_name ::= declared_name ;
unary_op ::= "+" | "-" | "~" | "!" ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
additive_expression ::= multiplicative_expression add_op_multiplicative_expression* ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
interface_body ::= class_or_interface_body ;
imported_name ::= package_or_type_name dot_star? ;
label_statement ::= label_name ":" NL ;
package_name ::= qualified_name ;
while_statement ::= "while" "(" expression ")" statement NL ;
import_declaration ::= "import" imported_name ";" NL NL ;
implements_clause ::= "implements" qualified_name+ ;
or_and_expression ::= "^" and_expression ;
conditional_and_expression ::= inclusive_or_expression and_inclusive_or_expression* ;
continue_statement ::= "continue" label_name? ";" NL ;
modifier ::= "abstract" | "final" | "public" | "protected" | "private" | "static" | "transient" | "volatile" | "native" | "synchronized" | "strictfp" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" ;
extends_clause ::= "extends" type_name+ ;
variable_declarator ::= variable_name equals_variable_initializer? ;
dot_id ::= "." id ;
interface_name ::= declared_name ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
constructor_body ::= block NL ;
for_init ::= ({expression ","}* ";") | local_variable_declaration ;
switch_block ::= "{" IN NL switch_alternative* EX "}" ;
shift_op ::= "<<" | ">>" | ">>>" ;
argument ::= expression ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
do_statement ::= "do" statement "while" "(" expression ")" ";" NL ;
declaration_or_statement ::= local_variable_declaration | class_declaration | statement ;
mult_op_unary_expression ::= mult_op unary_expression ;
constructor_declaration ::= NL modifier* constructor_declarator throws? constructor_body NL NL ;
field_declaration ::= variable_declaration ;
or_conditional_and_expression ::= "||" conditional_and_expression ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
formal_parameter_name ::= variable_name ;
relational_expression ::= shift_expression relational_op_shift_expression* ;
literal ::= numeric_literal | character_literal | string_literal | boolean_literal | null_literal ;
shift_additive_expression ::= shift_op additive_expression ;
finally_clause ::= "finally" block ;
unary_expression ::= (pre_inc_dec unary_expression) | (unary_op unary_expression) | postfix_expression | cast_expression ;
class_or_interface_name ::= qualified_name ;
package_header ::= "package" package_name ";" NL NL ;
postfix_expression ::= primary post_inc_dec* ;
variable_initializer ::= expression | array_initializer ;
array_type_specifier ::= type_name dimension+ ;
character_literal ::= charlit ;
boolean_literal ::= "true" | "false" ;
cast_expression ::= "(" type_specifier ")" unary_expression ;
expression ::= assignment_expression ;
constructor_declarator ::= class_name "(" {formal_parameter ","}* ")" ;
and_equality_expression ::= "&" equality_expression ;
exclusive_or_expression ::= and_expression or_and_expression* ;
primitive_type ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | "void" ;
static_initializer ::= NL "static" block NL NL ;
block ::= "{" NL IN declaration_or_statement* EX "}" ;
local_variable_declaration ::= variable_declaration ;
expression_statement ::= expression ";" NL ;
empty_declaration ::= ";" NL ;
dot_star ::= "." "*" ;
pre_inc_dec ::= "++" | "--" ;
program ::= package_declaration ;
post_inc_dec ::= "++" | "--" ;
string_literal ::= stringlit ;
numeric_literal ::= number ;
conditional_or_expression ::= conditional_and_expression or_conditional_and_expression* ;
conditional_choice ::= "?" expression ":" conditional_expression ;
for_statement ::= "for" "(" for_init for_expression for_update ")" statement NL ;
equality_op_relational_expression ::= equality_op relational_expression ;
method_or_constructor_declaration ::= method_declaration | constructor_declaration ;
shift_expression ::= additive_expression shift_additive_expression* ;
interface_declaration ::= interface_header interface_body ;
catch_clause ::= "catch" "(" type_specifier variable_name ")" block ;
type_name ::= primitive_type | qualified_name ;
declared_name ::= reference ;
statement ::= label_statement | empty_statement | expression_statement | if_statement | switch_statement | while_statement | do_statement | for_statement | break_statement | continue_statement | return_statement | throw_statement | synchronized_statement | try_statement | block ;
variable_name ::= declared_name dimension* ;
package_or_type_name ::= qualified_name ;
dimension ::= "[" expression? "]" ;
inclusive_or_expression ::= exclusive_or_expression or_exclusive_or_expression* ;
method_argument ::= "(" {argument ","}* ")" ;
formal_parameter ::= "final"? type_specifier formal_parameter_name ;
throw_statement ::= "throw" expression ";" NL ;
member_declaration ::= method_or_constructor_declaration | type_declaration ;
interface_header ::= modifier* "interface" interface_name extends_clause? implements_clause? ;
mult_op ::= "*" | "/" | "%" ;
method_declarator ::= method_name "(" {formal_parameter ","}* ")" dimension* ;
qualified_name ::= reference ;
throws ::= "throws" qualified_name+ ;
reference ::= id component* ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
equality_op ::= "==" | "!=" ;
class_body_declaration ::= empty_declaration | member_declaration | instance_initializer | static_initializer | field_declaration ;
method_body ::= (block NL NL) | (";" NL NL) ;
add_op ::= "+" | "-" ;
instance_initializer ::= NL block NL NL ;
or_exclusive_or_expression ::= "|" exclusive_or_expression ;
variable_declaration ::= modifier* type_specifier variable_declarators ";" NL ;
else_clause ::= "else" statement ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
class_declaration ::= class_header class_body ;
break_statement ::= "break" label_name? ";" NL ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
method_name ::= declared_name ;
switch_statement ::= "switch" "(" expression ")" switch_block NL ;
switch_alternative ::= switch_label IN NL declaration_or_statement* EX ;
multiplicative_expression ::= unary_expression mult_op_unary_expression* ;
add_op_multiplicative_expression ::= add_op multiplicative_expression ;
return_statement ::= "return" expression? ";" NL ;
equals_variable_initializer ::= "=" variable_initializer ;
variable_declarators ::= variable_declarator+ ;
method_declaration ::= NL modifier* type_specifier method_declarator throws? method_body ;
constant_expression ::= expression ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
subscript ::= "[" expression "]" ;
class_body ::= class_or_interface_body ;
synchronized_statement ::= "synchronized" "(" expression ")" statement NL ;
primary ::= literal | reference | ("(" expression ")" component*) | class_instance_creation_expression | array_creation_expression ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
and_expression ::= equality_expression and_equality_expression* ;
--------------------java::java-5-cordy-guo-dean.bgf--------------------
for_update ::= {expression ","}* ;
component ::= dot_id | method_argument | subscript | (generic_argument) | (class_instance_creation_expression) | (dimension) ;
equality_expression ::= relational_expression equality_op_relational_expression* ;
empty_statement ::= ";" NL ;
var_arg_specifier ::= "..." ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
relational_op_shift_expression ::= (relational_op shift_expression) | ("instanceof" type_specifier) ;
and_inclusive_or_expression ::= "&&" inclusive_or_expression ;
relational_op ::= "<" | ">" | "<=" | ">=" ;
type_specifier ::= type_name | array_type_specifier ;
null_literal ::= "null" ;
label_name ::= reference ;
type_declaration ::= (class_declaration NL NL) | (interface_declaration NL NL) | (enum_declaration NL) ;
class_name ::= declared_name ;
unary_op ::= "+" | "-" | "~" | "!" ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
additive_expression ::= multiplicative_expression add_op_multiplicative_expression* ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
interface_body ::= class_or_interface_body ;
imported_name ::= package_or_type_name dot_star? ;
type_parameter ::= declared_name type_bound_clause? ;
label_statement ::= label_name ":" statement ;
package_name ::= qualified_name ;
while_statement ::= "while" "(" expression ")" statement NL ;
import_declaration ::= ("import" "static"? imported_name ";" NL NL) | (";" NL) ;
implements_clause ::= "implements" qualified_name+ ;
or_and_expression ::= "^" and_expression ;
annotation_value_spec ::= "(" annotation_value_list ")" ;
conditional_and_expression ::= inclusive_or_expression and_inclusive_or_expression* ;
continue_statement ::= "continue" label_name? ";" NL ;
modifier ::= "abstract" | "final" | "public" | "protected" | "private" | "static" | "transient" | "volatile" | "native" | "synchronized" | ("strictfp") | (annotation) ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | (SPOFF ">" ">=" SPON) | (SPOFF ">" ">" ">=" SPON) | "&=" | "^=" | "|=" ;
extends_clause ::= "extends" type_name+ ;
variable_declarator ::= variable_name equals_variable_initializer? ;
dot_id ::= ("." generic_argument? id) | ("." "class") | ("." class_instance_declaration) ;
interface_name ::= declared_name ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
constructor_body ::= block NL ;
for_init ::= ({expression ","}* ";") | local_variable_declaration ;
class_or_interface_component ::= (dot_id) | generic_argument ;
switch_block ::= "{" IN NL switch_alternative* EX "}" ;
wildcard_type_bound ::= ("extends" type_specifier) | ("super" type_specifier) ;
shift_op ::= "<<" | (SPOFF ">" ">" SPON) | (SPOFF ">" ">" ">" SPON) ;
enum_element ::= NL id method_argument? ;
argument ::= expression | type_specifier ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
annotation_value_list ::= (single_annotation_value) | ({keyed_annotation_value ","}*) ;
do_statement ::= "do" statement "while" "(" expression ")" ";" NL ;
declaration_or_statement ::= declaration | statement ;
mult_op_unary_expression ::= mult_op unary_expression ;
assert_statement ::= "assert" expression assert_error_code? ";" NL ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
or_conditional_and_expression ::= "||" conditional_and_expression ;
constructor_declaration ::= NL modifier* generic_parameter? constructor_declarator throws? constructor_body NL NL ;
field_declaration ::= variable_declaration ;
formal_parameter_name ::= variable_name ;
relational_expression ::= shift_expression relational_op_shift_expression* ;
literal ::= numeric_literal | character_literal | string_literal | boolean_literal | null_literal ;
shift_additive_expression ::= shift_op additive_expression ;
finally_clause ::= "finally" block ;
unary_expression ::= (pre_inc_dec unary_expression) | (unary_op unary_expression) | postfix_expression | cast_expression ;
class_or_interface_name ::= id class_or_interface_component* ;
package_header ::= annotation* "package" package_name ";" NL NL ;
postfix_expression ::= primary post_inc_dec* ;
variable_initializer ::= expression | array_initializer ;
array_type_specifier ::= type_name dimension+ ;
character_literal ::= charlit ;
boolean_literal ::= "true" | "false" ;
cast_expression ::= "(" type_specifier ")" unary_expression ;
expression ::= assignment_expression ;
constructor_declarator ::= class_name "(" {formal_parameter ","}* ")" ;
and_equality_expression ::= "&" equality_expression ;
exclusive_or_expression ::= and_expression or_and_expression* ;
primitive_type ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | "void" ;
static_initializer ::= NL "static" block NL NL ;
block ::= "{" NL IN declaration_or_statement* EX "}" ;
for_in_statement ::= "for" "(" for_in_init ":" expression ")" statement NL ;
local_variable_declaration ::= variable_declaration ;
enum_header ::= modifier* id? "enum" declared_name? implements_clause? ;
expression_statement ::= expression ";" NL ;
empty_declaration ::= ";" NL ;
dot_star ::= "." "*" ;
pre_inc_dec ::= "++" | "--" ;
program ::= package_declaration ;
post_inc_dec ::= "++" | "--" ;
string_literal ::= stringlit ;
wildcard_type ::= ("?" wildcard_type_bound?) | (id wildcard_type_bound?) ;
numeric_literal ::= number ;
conditional_or_expression ::= conditional_and_expression or_conditional_and_expression* ;
conditional_choice ::= "?" expression ":" conditional_expression ;
declaration ::= local_variable_declaration | class_declaration ;
for_statement ::= "for" "(" for_init for_expression for_update ")" statement NL ;
single_annotation_value ::= (expression) | nested_annotation | ("{" {expression_or_nested_annotation ","}* "}") ;
equality_op_relational_expression ::= equality_op relational_expression ;
nested_annotation ::= annotation ;
method_or_constructor_declaration ::= method_declaration | constructor_declaration ;
shift_expression ::= additive_expression shift_additive_expression* ;
for_in_init ::= modifier* type_specifier variable_name ;
interface_declaration ::= interface_header interface_body ;
catch_clause ::= "catch" "(" modifier* type_specifier variable_name ")" block ;
type_name ::= primitive_type | qualified_name ;
declared_name ::= id generic_parameter? ;
statement ::= label_statement | empty_statement | expression_statement | if_statement | switch_statement | while_statement | do_statement | for_statement | (for_in_statement) | break_statement | continue_statement | return_statement | throw_statement | synchronized_statement | try_statement | (assert_statement) | block ;
variable_name ::= declared_name dimension* ;
package_or_type_name ::= qualified_name ;
dimension ::= "[" expression? "]" ;
expression_or_nested_annotation ::= expression | nested_annotation ;
inclusive_or_expression ::= exclusive_or_expression or_exclusive_or_expression* ;
assert_error_code ::= ":" expression ;
method_argument ::= "(" {argument ","}* ")" ;
formal_parameter ::= annotation* "final"? type_specifier var_arg_specifier? formal_parameter_name ;
throw_statement ::= "throw" expression ";" NL ;
member_declaration ::= method_or_constructor_declaration | (type_declaration) ;
interface_header ::= modifier* annot_marker? "interface" interface_name extends_clause? implements_clause? ;
mult_op ::= "*" | "/" | "%" ;
method_declarator ::= method_name "(" {formal_parameter ","}* ")" dimension* ;
qualified_name ::= reference ;
throws ::= "throws" qualified_name+ ;
reference ::= (id component*) | (primitive_type component*) ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
equality_op ::= "==" | "!=" ;
class_body_declaration ::= empty_declaration | member_declaration | instance_initializer | static_initializer | field_declaration ;
keyed_annotation_value ::= id "=" single_annotation_value ;
generic_parameter ::= "<" {type_parameter ","}* ">" ;
method_body ::= (block NL NL) | (annotation_default? ";" NL NL) ;
add_op ::= "+" | "-" ;
enum_declaration ::= enum_header enum_body ;
type_bound ::= type_specifier and_type_spec* ;
and_type_spec ::= "&" type_specifier ;
instance_initializer ::= NL block NL NL ;
class_instance_declaration ::= class_instance_creation_expression | "class" ;
or_exclusive_or_expression ::= "|" exclusive_or_expression ;
variable_declaration ::= modifier* type_specifier variable_declarators ";" NL ;
type_bound_clause ::= "extends" type_bound ;
else_clause ::= "else" statement ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
class_declaration ::= class_header class_body ;
annotation_default ::= ("default" expression) | ("default" array_initializer) ;
break_statement ::= "break" label_name? ";" NL ;
annotation ::= SPOFF "@" reference "@"? SPON annotation_value_spec? NL ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
method_name ::= declared_name ;
generic_argument ::= "<" {type_argument ","}* ">" ;
switch_statement ::= "switch" "(" expression ")" switch_block NL ;
type_argument ::= type_specifier | wildcard_type ;
switch_alternative ::= switch_label IN NL declaration_or_statement* EX ;
multiplicative_expression ::= unary_expression mult_op_unary_expression* ;
add_op_multiplicative_expression ::= add_op multiplicative_expression ;
return_statement ::= "return" expression? ";" NL ;
enum_body ::= "{" IN {enum_element ","}* ","? class_body_declaration* EX "}" ";"? NL NL ;
equals_variable_initializer ::= "=" variable_initializer ;
variable_declarators ::= variable_declarator+ ;
method_declaration ::= NL modifier* generic_parameter? type_specifier method_declarator throws? method_body ;
constant_expression ::= expression ;
annot_marker ::= "@" ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
subscript ::= "[" expression "]" ;
class_body ::= class_or_interface_body ;
synchronized_statement ::= "synchronized" "(" expression ")" statement NL ;
primary ::= (literal component*) | reference | ("(" expression ")" component*) | (class_instance_creation_expression component*) | (array_creation_expression component*) ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
and_expression ::= equality_expression and_equality_expression* ;
--------------------modula::dagenais-cordy.bgf--------------------
program ::= Interface | Module | GInterface | GModule | IInterface | IModule ;
--------------------assembly::delphi.bgf--------------------
asm_opcode_prefix ::= "lock" space? ;
asm_primary ::= ("[" asm_expr "]") | ("(" asm_expr ")") | asm_register | id | anynumber | charlit | stringlit | asmhex | (SP asmlabel) ;
segmt_overr ::= SPOFF ":" asm_expr SPON ;
asm_expr ::= asm_term asm_infix_expr* ;
asmlabel ::= (SPOFF asmid+ SPON) | label_id ;
asmlabel_colon ::= asmlabel colon ;
asm_prefixop ::= "high" | "low" | "offset" | "dmtindex" | "vmtoffset" | "type" | "not" | "&" | sign | "@" ;
asm_unlabeledstm_semi ::= asm_unlabeledstm ";"? NL ;
asm_unlabeledstm ::= (asm_directive {asm_directive_arg ","}*) | (asm_opcode_prefix? asm_opcode {asm_expr ","}*) ;
asmid ::= ("@"* asmlbl) | ("@+"* id) | ("@+"* anynumber) | ("@+"* key) ;
asm_postfixop ::= ("[" asm_expr "]") | ("." asm_expr) ;
asm_opcode ::= "adc" | "add" | "and" | "bswap" | "bt" | "btr" | "bts" | "call" | "cdq" | "cld" | "cmp" | "dec" | "div" | "f2xm1" | "fabs" | "fadd" | "faddp" | "fbstp" | "fchs" | "fclex" | "fcom" | "fcomp" | "fcos" | "fdiv" | "fdivp" | "fdivrp" | "ffree" | "fiadd" | "fidiv" | "fild" | "fimul" | "fistp" | "fld" | "fld1" | "fldcw" | "fldl2e" | "fldlg2" | "fldln2" | "fldz" | "fmul" | "fmulp" | "fnclex" | "fninit" | "fnstcw" | "fnstsw" | "fpatan" | "fprem" | "fptan" | "frndint" | "fscale" | "fsin" | "fsincos" | "fsqrt" | "fstcw" | "fstp" | "fstsw" | "fsub" | "fsubp" | "fsubr" | "fwait" | "fxch" | "fxtract" | "fyl2x" | "fyl2xp1" | "imul" | "inc" | "int" | "ja" | "jae" | "jb" | "jbe" | "jc" | "je" | "jecxz" | "jg" | "jge" | "jl" | "jle" | "jmp" | "jnc" | "jne" | "jnl" | "jns" | "jnz" | "jo" | "jp" | "js" | "jz" | "lea" | "leave" | "lodsb" | "lodsw" | "loop" | "mov" | "movsb" | "movsx" | "movzx" | "mul" | "neg" | "not" | "or" | "pop" | "popfd" | "push" | "pushfd" | "rcl" | "rcr" | "rep" | "repe" | "repne" | "ret" | "rol" | "ror" | "sahf" | "sar" | "sbb" | "seto" | "shl" | "shld" | "shr" | "shrd" | "std" | "stosb" | "stosd" | "stosw" | "sub" | "test" | "wait" | "xadd" | "xchg" | "xor" ;
asm_term ::= asm_prefixop* asm_primary asm_postfixop* ;
procedure_body ::= asm_stmtblock ;
asm_infixop ::= "." | "+" | "-" | "*" | "/" | "ptr" | "mod" | "xor" | "and" | "or" | "shr" | "shl" ;
asm_directive ::= "DB" | "DW" | "DD" | "DQ" ;
asm_infix_expr ::= asm_infixop asm_term ;
asm_stm ::= asmlabel_colon? asm_unlabeledstm_semi? ;
unlabeled_stm ::= asm_stmtblock ;
asm_register ::= ("ST" "(" integernumber ")") | ("ST") | "FS" | ("GS") | "EAX" | "EBX" | "ECX" | ("EDX") | "ESP" | "EBP" | "ESI" | ("EDI") | "AX" | "BX" | "CX" | ("DX") | "SP" | "BP" | "SI" | ("DI") | "AL" | "BL" | "CL" | ("DL") | "CS" | "DS" | "SS" | ("ES") | "AH" | "BH" | "CH" | ("DH") | ("CS" segmt_overr?) | ("DS" segmt_overr?) | ("SS" segmt_overr?) | ("FS" segmt_overr?) | ("GS" segmt_overr?) | ("ES" segmt_overr?) ;
asm_directive_arg ::= charlit | (sign? anynumber) | asm_expr ;
asm_stmtblock ::= "asm" asm_stm* end_struct ;
asmhex ::= number SPOFF id SPON ;
--------------------basic::vb6-cordy.bgf--------------------
subprogram_declaration ::= access_modifier? "static"? sub_or_function id lib_description? subprogram_argument_description? as_type? eol IN sub_scope EX "end" sub_or_function ;
short_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? colon_declaration_or_statement* ":" "next" id? ;
event_argument_list ::= "(" event_argument+ ")" ;
error_statement ::= "error" expn ;
chdir_statement ::= "chdir" filepath ;
property_argument_list ::= "(" {property_argument ","}* ")" ;
deletesetting_statement ::= "deletesetting" expn+ ;
chdrive_statement ::= "chdrive" drive ;
type_declaration ::= access_modifier? "type" id eol IN type_member_definition* EX "end" "type" ;
short_else_clause ::= "else" single_declaration_or_statement ;
expn ::= primary operator_primary* ;
line_input_statement ::= "line" "input" filenumber "," reference ;
single_var_description ::= id initial_value? as_type? ;
optional_subscript ::= (expn to_expn?) | (SP ε) ;
close_statement ::= "close" {filenumber ","}* ;
property_argument ::= "optional"? byref_or_byval? "paramarray"? id parens? as_type? equals_expn? ;
for_each_statement ::= full_for_each_statement | short_for_each_statement ;
lset_statement ::= "lset" reference "=" expn ;
label_statement ::= EX id ":" IN ;
rmdir_statement ::= "rmdir" filepath ;
while_statement ::= "while" expn eol IN sub_scope EX "wend" ;
component_selector ::= ("." id) | ("." key) | subscript ;
op ::= "^" | "*" | "/" | "\" | "mod" | "+" | "-" | "&" | "=" | "<>" | "<=" | ">=" | ":=" | ">" | "<" | "!" | "is" | "not" | "and" | "or" | "xor" | "eqv" | "imp" | "like" ;
constant_description ::= id as_type? initial_value ;
variable_declaration_keyword ::= "dim" | "redim" | access_modifier ;
subroutine_bracketless_params ::= expn {optional_expn ","}* ;
resume_statement ::= ("resume" "next") | ("resume" number?) ;
letterrange ::= id SPOFF "-" id SPON ;
attribute_definition ::= reference "=" expn+ ;
set_statement ::= "set" reference "=" set_object_expn ;
single_declaration_or_statement ::= (declaration colon_declaration_or_statement*) | (statement colon_declaration_or_statement*) ;
call_statement ::= "call"? reference subroutine_bracketless_params? ;
kill_statement ::= "kill" filepath ;
star_size ::= "*" expn ;
if_statement ::= full_if_statement | short_if_statement ;
get_statement ::= "get" filenumber comma_recordnumber? "," reference ;
filenumber ::= "#" primary ;
select_case_statement ::= "select" "case" expn eol IN case_alternative* last_case_alternative? EX "end" "select" ;
event_argument ::= byref_or_byval? id parens? as_type? ;
preprocessor_if_statement ::= "#if" expn "then" eol IN sub_scope EX preprocessor_elsif_clause* preprocessor_else_clause? "#end" "if" ;
compare_mode ::= "binary" | "text" | "database" ;
do_statement ::= "do" while_or_until_clause? eol IN sub_scope EX "loop" while_or_until_clause? ;
name_statement ::= "name" filepath "as" filepath ;
open_statement ::= "open" filepath "for" mode access_spec? lock? "as" filenumber length_spec? ;
variable_description ::= array_description | single_var_description ;
declaration_or_statement ::= (declaration eol) | (statement eol) | eol ;
access_spec ::= "access" access_mode ;
initial_value ::= "=" expn ;
to_or_downto ::= "to" | "downto" ;
short_if_statement ::= "if" expn "then" single_declaration_or_statement short_else_clause? ;
def_keyword ::= "defbool" | "defbyte" | "defcur" | "defdate" | "defdbl" | "defdec" | "defint" | "deflng" | "defobj" | "defsng" | "defstr" | "defvar" ;
prefix_op ::= "+" | "-" | "not" | "typeof" | "addressof" ;
on_error_action ::= ("resume" "next") | ("goto" expn) ;
parens ::= "(" ")" ;
last_case_alternative ::= eol* "case" "else" eol IN sub_scope EX ;
defletter_declaration ::= def_keyword letterrange+ ;
elsif_clause ::= "elseif" expn "then" eol IN sub_scope EX ;
subscript_expn ::= expn to_expn? ;
mode ::= "append" | "binary" | "input" | "output" | "random" ;
filecopy_statement ::= "filecopy" filepath "," filepath ;
filepath ::= (drive? id slash_id*) | stringlit ;
case_expn ::= expn to_expn? ;
rset_statement ::= "rset" reference "=" expn ;
access_mode ::= "read" | "write" | ("read" "write") ;
beep_statement ::= "beep" ;
on_error_statement ::= "on" "local"? "error" on_error_action ;
colon_declaration_or_statement ::= ":" declaration_or_statement? ;
full_for_each_statement ::= "for" "each" id "in" expn eol IN sub_scope EX "next" id? ;
preprocessor_elsif_clause ::= "#elseif" expn "then" eol IN sub_scope EX ;
exit_what_indicator ::= "do" | "for" | "function" | "property" | "sub" ;
sub_scope ::= declaration_or_statement* ;
subprogram_argument_description ::= "(" {subprogram_argument ","}* ")" ;
set_object_expn ::= ("new"? expn) | "nothing" ;
goto_statement ::= on_expn? "goto" expn ;
savepicture_statement ::= "savepicture" expn "," expn ;
exit_statement ::= "exit" exit_what_indicator ;
to_number ::= "to" number ;
alias_description ::= "alias" stringlit ;
attribute_statement ::= "attribute" attribute_definition+ ;
short_for_each_statement ::= "for" "each" id "in" expn eol colon_declaration_or_statement* ":" "next" id? ;
drive ::= id ":" ;
property_statement ::= access_modifier? "static"? "property" get_let_set id property_argument_list? as_type? eol IN sub_scope EX "end" "property" ;
program ::= class_file_header? declaration_or_statement* ;
setattr_statement ::= "setattr" filepath "," expn ;
reset_statement ::= "reset" ;
full_if_statement ::= "if" expn "then" eol IN sub_scope EX elsif_clause* else_clause? "end" "if" ;
time_statement ::= "time" "=" expn ;
assignment_statement ::= "let"? reference "=" expn ;
spc_tab ::= ("spc" "(" expn? ")") | ("tab" "(" expn? ")") ;
declaration ::= variable_declaration | implements_declaration | subprogram_declaration | constant_declaration | class_declaration | declare_subprogram_declaration | defletter_declaration | enum_declaration | type_declaration ;
length_spec ::= "len" "=" expn ;
declare_subprogram_declaration ::= access_modifier? "declare" sub_or_function id lib_description alias_description? subprogram_argument_description? as_type? ;
stop_statement ::= "stop" ;
equals_expn ::= "=" expn ;
optional_expn ::= expn | (ε SP) ;
until_clause ::= "until" expn ;
statement ::= label_statement | assignment_statement | app_activate_statement | attribute_statement | beep_statement | call_statement | chdir_statement | chdrive_statement | close_statement | date_statement | deletesetting_statement | do_statement | end_statement | erase_statement | error_statement | event_statement | exit_statement | filecopy_statement | for_each_statement | for_next_statement | get_statement | gosub_statement | return_statement | goto_statement | if_statement | input_statement | kill_statement | line_input_statement | load_statement | lock_statement | lset_statement | mid_statement | mkdir_statement | name_statement | on_error_statement | open_statement | option_statement | preprocessor_if_statement | print_statement | property_statement | put_statement | randomize_statement | reset_statement | resume_statement | rmdir_statement | rset_statement | savepicture_statement | savesetting_statement | select_case_statement | set_statement | stop_statement | time_statement | unload_statement | unlock_statement | while_statement | with_statement | width_statement | write_statement ;
implements_declaration ::= "implements" id ;
class_file_header ::= "version" number "class" eol+ class_begin_block ;
seek_statement ::= "seek" filenumber "," expn ;
operator_primary ::= op primary ;
print_item ::= (spc_tab? expn charpos?) | spc_tab ;
savesetting_statement ::= "savesetting" {expn ","}* ;
randomize_statement ::= "randomize" number? ;
mkdir_statement ::= "mkdir" filepath ;
constant_declaration ::= access_modifier? "const" constant_description ;
print_statement ::= "print" filenumber "," {print_item ","}* ;
lock_statement ::= "lock" filenumber comma_recordrange? ;
enum_member_definition ::= (id "=" expn eol) | eol ;
for_next_statement ::= full_for_next_statement | short_for_next_statement ;
subprogram_argument ::= "optional"? byref_or_byval? id? parens? as_type? equals_expn? ;
load_statement ::= "load" expn ;
get_let_set ::= "get" | "let" | "set" ;
type_member_definition ::= (id parens? as_type? eol) | eol ;
access_modifier ::= "public" | "private" | "friend" | "static" ;
on_expn ::= "on" expn ;
reference ::= ("."? "!"? id component_selector*) | ("." key component_selector*) ;
gosub_statement ::= on_expn? "gosub" expn ;
preprocessor_else_clause ::= "#else" eol IN sub_scope EX ;
step_clause ::= "step" expn ;
lib_description ::= "lib" stringlit ;
put_statement ::= "put" filenumber comma_expn? "," reference ;
while_or_until_clause ::= while_clause | until_clause ;
charpos ::= expn | ";" ;
while_clause ::= "while" expn ;
enum_declaration ::= access_modifier? "enum" id eol IN enum_member_definition* EX "end" "enum" ;
input_statement ::= "input" filenumber "," {reference ","}* ;
mid_statement ::= "mid" reference "=" stringlit ;
variable_declaration ::= variable_declaration_keyword variable_description+ ;
with_statement ::= "with" reference eol IN sub_scope EX "end" "with" ;
width_statement ::= "width" filenumber "," expn ;
to_expn ::= "to" expn ;
else_clause ::= "else" eol IN sub_scope EX ;
sub_or_function ::= "sub" | "function" ;
unlock_statement ::= "unlock" filenumber comma_recordrange? ;
class_declaration ::= "class" id eol IN sub_scope EX "end" "class" ;
class_begin_block ::= "begin" reference? IN class_begin_item* EX "end" ;
unload_statement ::= "unload" expn ;
lock ::= "shared" | ("lock" "read") | ("lock" "write") | ("lock" "read" "write") ;
as_type ::= "as" "new"? reference star_size? ;
option_statement ::= ("option" "base" number) | ("option" "compare" compare_mode) | ("option" "explicit") | ("option" "private" "module") ;
comma_recordrange ::= "," number to_number? ;
return_statement ::= "return" ;
date_statement ::= "date" "=" expn ;
case_alternative ::= eol* "case" is_operator? case_expn+ eol IN sub_scope EX ;
slash_id ::= ("\" id) | ("/" id) ;
comma_expn ::= "," expn ;
is_operator ::= "is" op? ;
erase_statement ::= "erase" {id ","}* ;
array_description ::= "withevents"? "preserve"? id "(" {subscript_expn ","}* ")" as_type? ;
byref_or_byval ::= "byref" | "byval" ;
class_begin_item ::= assignment_statement | class_begin_block | eol ;
write_statement ::= "write" filenumber "," {print_item ","}* ;
end_statement ::= "end" ;
subscript ::= "(" {optional_subscript ","}* ")" ;
event_statement ::= "public"? "event" id event_argument_list? ;
full_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? eol IN sub_scope EX "next" id? ;
tab_vbcomment ::= TAB vbcomment ;
comma_recordnumber ::= "," expn ;
eol ::= (tab_vbcomment? newline) | ":" ;
primary ::= reference | stringlit | number | hexnumber | octnumber | datelit | returncode | filenumber | (prefix_op primary) | ("(" {expn ","}* ")") ;
app_activate_statement ::= "appactivate" expn comma_expn? ;
--------------------html::clark-basic.bgf--------------------
tr ::= tr::(tr.attlist (th | td)+) ;
dfn.attlist ::= Common.attrib ;
li ::= li::(li.attlist Flow.model) ;
id.attrib ::= (id::ID.datatype)? ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
select ::= select::(select.attlist option+) ;
link ::= link::link.attlist ;
profile.attlist ::= (profile::URI.datatype)? ;
em.attlist ::= Common.attrib ;
var.attlist ::= Common.attrib ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
address ::= address::(address.attlist Inline.model) ;
th ::= th::(th.attlist Flow.model) ;
label ::= label::(label.attlist Inline.model) ;
body.attlist ::= Common.attrib ;
samp ::= samp::(samp.attlist Inline.model) ;
q ::= q::(q.attlist Inline.model) ;
p ::= p::(p.attlist Inline.model) ;
td ::= td::(td.attlist Flow.model) ;
kbd ::= kbd::(kbd.attlist Inline.model) ;
code ::= code::(code.attlist Inline.model) ;
head.content ::= base? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= title ;
strong.attlist ::= Common.attrib ;
ul.attlist ::= Common.attrib ;
caption ::= caption::(caption.attlist Inline.model) ;
div.attlist ::= Common.attrib ;
dt.attlist ::= Common.attrib ;
a ::= a::(a.attlist Inline.model) ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
head ::= head::(head.attlist head.content) ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
ol ::= ol::(ol.attlist li+) ;
dl.attlist ::= Common.attrib ;
title ::= title::(title.attlist string()) ;
cite ::= cite::(cite.attlist Inline.model) ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
dd.attlist ::= Common.attrib ;
base ::= base::base.attlist ;
br ::= br::br.attlist ;
tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
table ::= table::(table.attlist caption? tr+) ;
li.attlist ::= Common.attrib ;
h5 ::= h5::(Heading.attrib Heading.content) ;
select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h4 ::= h4::(Heading.attrib Heading.content) ;
h3 ::= h3::(Heading.attrib Heading.content) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
h2 ::= h2::(Heading.attrib Heading.content) ;
span ::= span::(span.attlist Inline.model) ;
input ::= input::input.attlist ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
h1 ::= h1::(Heading.attrib Heading.content) ;
address.attlist ::= Common.attrib ;
th.attlist ::= Cell.attrib ;
label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
form ::= form::(form.attlist Block.class+) ;
acronym ::= acronym::(acronym.attlist Inline.model) ;
img ::= img::img.attlist ;
samp.attlist ::= Common.attrib ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
p.attlist ::= Common.attrib ;
td.attlist ::= Cell.attrib ;
object ::= object::(object.attlist param* Flow.model) ;
kbd.attlist ::= Common.attrib ;
code.attlist ::= Common.attrib ;
textarea ::= textarea::textarea.attlist ;
caption.attlist ::= Common.attrib ;
a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
abbr ::= abbr::(abbr.attlist Inline.model) ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= Common.attrib ;
dfn ::= dfn::(dfn.attlist Inline.model) ;
html ::= html::(html.attlist head body) ;
title.attlist ::= I18n.attrib ;
em ::= em::(em.attlist Inline.model) ;
cite.attlist ::= Common.attrib ;
var ::= var::(var.attlist Inline.model) ;
scope.attrib ::= (scope::("row" | "col"))? ;
pre ::= pre::(pre.attlist Inline.model) ;
body ::= body::(body.attlist Block.model) ;
base.attlist ::= href::URI.datatype ;
br.attlist ::= Core.attrib ;
title.attrib ::= (title::Text.datatype)? ;
table.attlist ::= Common.attrib (summary::Text.datatype)? ;
span.attlist ::= Common.attrib ;
input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
strong ::= strong::(strong.attlist Inline.model) ;
ul ::= ul::(ul.attlist li+) ;
form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
acronym.attlist ::= Common.attrib ;
img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
div ::= div::(div.attlist Flow.model) ;
object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
dt ::= dt::(dt.attlist Inline.model) ;
blockquote ::= blockquote::(blockquote.attlist Block.model) ;
param ::= param::param.attlist ;
textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
dl ::= dl::(dl.attlist (dt | dd)+) ;
meta ::= meta::meta.attlist ;
abbr.attlist ::= Common.attrib ;
dd ::= dd::(dd.attlist Flow.model) ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------html::clark.bgf--------------------
colgroup ::= colgroup::(colgroup.attlist col*) ;
dfn.attlist ::= Common.attrib ;
id.attrib ::= (id::ID.datatype)? ;
select ::= select::(select.attlist (option | optgroup)+) ;
 select ::= select::(select.attlist option+) ;
li.noblock ::= li::(li.attlist Inline.model) ;
link ::= link::link.attlist ;
fieldset.attlist ::= Common.attrib ;
var.attlist ::= Common.attrib ;
address ::= address::(address.attlist Inline.model) ;
label ::= label::(label.attlist Inline.model) ;
ins ::= ins::(ins.attlist Inline.model) ;
kbd ::= kbd::(kbd.attlist Inline.model) ;
code ::= code::(code.attlist Inline.model) ;
isindex ::= isindex::isindex.attlist ;
tbody.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
caption ::= caption::(caption.attlist Inline.model) ;
tfoot ::= tfoot::(tfoot.attlist tr+) ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
head ::= head::(head.attlist head.content) ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
 legend.attlist ::= (align::("top" | "bottom" | "left" | "right"))? ;
ol ::= ol::(ol.attlist li+) ;
del.attlist ::= Edit.attrib ;
hr.attlist ::= (align::("left" | "center" | "right"))? (noshade::"noshade")? (size::Pixels.datatype)? (width::Pixels.datatype)? ;
 hr.attlist ::= Common.attrib ;
small.attlist ::= Common.attrib ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
frameset ::= frameset::(frameset.attlist (frameset | frame)+ noframes?) ;
 frameset ::= body ;
align.attrib ::= (align::("left" | "all" | "right" | "none"))? ;
big.attlist ::= Common.attrib ;
base ::= base::base.attlist ;
colgroup.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
table ::= table::(table.attlist caption? (col*) | (colgroup*) (thead? tfoot? tbody+) | (tr+)) ;
 table ::= table::(table.attlist caption? tr+) ;
h5 ::= h5::(Heading.attrib Heading.content) ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h4 ::= h4::(Heading.attrib Heading.content) ;
noscript ::= noscript::(noscript.attlist Block.model) ;
h3 ::= h3::(Heading.attrib Heading.content) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
script ::= script::(script.attlist string()) ;
h2 ::= h2::(Heading.attrib Heading.content) ;
input ::= input::input.attlist ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
 lang.attrib ::= (lang::LanguageCode.datatype)? ;
h1 ::= h1::(Heading.attrib Heading.content) ;
target.attrib ::= (target::string())? ;
address.attlist ::= Common.attrib ;
label.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
form ::= form::(form.attlist Block.class+) ;
acronym ::= acronym::(acronym.attlist Inline.model) ;
img ::= img::img.attlist ;
ins.attlist ::= Edit.attrib ;
kbd.attlist ::= Common.attrib ;
code.attlist ::= Common.attrib ;
isindex.attlist ::= Core.attrib I18n.attrib (prompt::Text.datatype)? ;
caption.attlist ::= align.attrib ;
 caption.attlist ::= Common.attrib ;
shape.attrib ::= (shape::("rect" | "circle" | "poly" | "default"))? ;
tfoot.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
strike ::= strike::(strike.attlist Inline.model) ;
style ::= style::(style.attlist string()) ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= (type::string())? (compact::"compact")? (start::string())? ;
 ol.attlist ::= Common.attrib ;
optgroup ::= optgroup::(optgroup.attlist option+) ;
html ::= html::(html.attlist head frameset) ;
 html ::= html::(html.attlist head body) ;
em ::= em::(em.attlist Inline.model) ;
noframes ::= noframes::(noframes.attlist body) ;
frameset.attlist ::= Core.attrib (cols::MultiLength.datatype)? (rows::MultiLength.datatype)? ;
scope.attrib ::= (scope::("row" | "col" | "rowgroup" | "colgroup"))? ;
 scope.attrib ::= (scope::("row" | "col"))? ;
iframe ::= iframe::(iframe.attlist Flow.model) ;
pre ::= pre::(pre.attlist Inline.model) ;
body ::= body::(body.attlist Block.model) ;
base.attlist ::= href::URI.datatype ;
 base.attlist ::= target.attrib ;
rules.attrib ::= (rules::("none" | "groups" | "rows" | "cols" | "all"))? ;
basefont ::= basefont::basefont.attlist ;
table.attlist ::= align.attrib (bgcolor::Color.datatype)? ;
 table.attlist ::= (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)? ;
 table.attlist ::= Common.attrib (summary::Text.datatype)? ;
noscript.attlist ::= Common.attrib ;
script.attlist ::= (language::ContentType.datatype)? ;
 script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
 input.attlist ::= align.attrib ;
coords.attrib ::= (coords::string())? ;
strong ::= strong::(strong.attlist Inline.model) ;
ul ::= ul::(ul.attlist li+) ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
acronym.attlist ::= Common.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
div ::= div::(div.attlist Flow.model) ;
dt ::= dt::(dt.attlist Inline.model) ;
area ::= area::area.attlist ;
dir ::= dir::(dir.attlist li.noblock+) ;
param ::= param::param.attlist ;
dl ::= dl::(dl.attlist (dt | dd)+) ;
strike.attlist ::= Common.attrib ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
col ::= col::col.attlist ;
dd ::= dd::(dd.attlist Flow.model) ;
tt ::= tt::(tt.attlist Inline.model) ;
tr ::= tr::(tr.attlist (th | td)+) ;
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
li ::= li::(li.attlist Flow.model) ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
profile.attlist ::= (profile::URI.datatype)? ;
em.attlist ::= Common.attrib ;
noframes.attlist ::= Common.attrib ;
u ::= u::(u.attlist Inline.model) ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
th ::= th::(th.attlist Flow.model) ;
pre.attlist ::= (width::Length.datatype)? ;
 pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
s ::= s::(s.attlist Inline.model) ;
body.attlist ::= (onload::Script.datatype)? (onunload::Script.datatype)? ;
 body.attlist ::= (background::URI.datatype)? (bgcolor::Color.datatype)? (text::Color.datatype)? (link::Color.datatype)? (vlink::Color.datatype)? (alink::Color.datatype)? ;
 body.attlist ::= Common.attrib ;
samp ::= samp::(samp.attlist Inline.model) ;
q ::= q::(q.attlist Inline.model) ;
basefont.attlist ::= id.attrib Font.attrib ;
p ::= p::(p.attlist Inline.model) ;
td ::= td::(td.attlist Flow.model) ;
bdo ::= bdo::(bdo.attlist Inline.model) ;
frame ::= frame::frame.attlist ;
frame.attrib ::= name.attlist ;
 frame.attrib ::= (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))? ;
head.content ::= base? ;
 head.content ::= isindex? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= script* ;
 head.content ::= title ;
 head.content ::= style* ;
i ::= i::(i.attlist Inline.model) ;
strong.attlist ::= Common.attrib ;
ul.attlist ::= (type::string())? (compact::"compact")? ;
 ul.attlist ::= Common.attrib ;
b ::= b::(b.attlist Inline.model) ;
div.attlist ::= align.attrib ;
 div.attlist ::= Common.attrib ;
dt.attlist ::= Common.attrib ;
a ::= a::(a.attlist Inline.model) ;
menu ::= menu::(menu.attlist li.noblock+) ;
dir.attlist ::= Common.attrib (compact::"compact")? ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
name.attlist ::= (name::string())? ;
map ::= map::(map.attlist (Block.class | area)+) ;
applet ::= applet::(applet.attlist param* Flow.model) ;
dl.attlist ::= (compact::"compact")? ;
 dl.attlist ::= Common.attrib ;
title ::= title::(title.attlist string()) ;
cite ::= cite::(cite.attlist Inline.model) ;
center ::= center::(center.attlist Flow.model) ;
thead ::= thead::(thead.attlist tr+) ;
col.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
dd.attlist ::= Common.attrib ;
tt.attlist ::= Common.attrib ;
br ::= br::br.attlist ;
tr.attlist ::= (bgcolor::Color.datatype)? ;
 tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
font ::= font::(font.attlist Inline.model) ;
sup ::= sup::(sup.attlist Inline.model) ;
li.attlist ::= (type::string())? (value::string())? ;
 li.attlist ::= Common.attrib ;
dir.attrib ::= dir::("ltr" | "rtl") ;
span ::= span::(span.attlist Inline.model) ;
u.attlist ::= Common.attrib ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
usemap.attlist ::= (usemap::IDREF.datatype)? ;
th.attlist ::= Cell.attrib ;
s.attlist ::= Common.attrib ;
samp.attlist ::= Common.attrib ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
td.attlist ::= Cell.attrib ;
p.attlist ::= align.attrib ;
 p.attlist ::= Common.attrib ;
sub ::= sub::(sub.attlist Inline.model) ;
object ::= object::(object.attlist param* Flow.model) ;
link.attrib ::= target.attrib ;
frame.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (noresize::"noresize")? (scrolling::("yes" | "no" | "auto"))? ;
bdo.attlist ::= Core.attrib lang.attrib dir.attrib ;
i.attlist ::= Common.attrib ;
textarea ::= textarea::textarea.attlist ;
b.attlist ::= Common.attrib ;
button ::= button::(button.attlist Flow.model) ;
a.attlist ::= shape.attrib coords.attrib ;
 a.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
 a.attlist ::= name.attlist ;
 a.attlist ::= target.attrib ;
abbr ::= abbr::(abbr.attlist Inline.model) ;
menu.attlist ::= Common.attrib (compact::"compact")? ;
map.attlist ::= CommonIdRequired.attrib ;
 map.attlist ::= name.attlist ;
dfn ::= dfn::(dfn.attlist Inline.model) ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 applet.attlist ::= name.attlist ;
title.attlist ::= I18n.attrib ;
cite.attlist ::= Common.attrib ;
fieldset ::= fieldset::(fieldset.attlist legend Flow.model) ;
var ::= var::(var.attlist Inline.model) ;
center.attlist ::= Common.attrib ;
thead.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
br.attlist ::= (clear::("left" | "all" | "right" | "none"))? ;
 br.attlist ::= Core.attrib ;
font.attlist ::= Core.attrib I18n.attrib Font.attrib ;
title.attrib ::= (title::Text.datatype)? ;
sup.attlist ::= Common.attrib ;
span.attlist ::= Common.attrib ;
tbody ::= tbody::(tbody.attlist tr+) ;
sub.attlist ::= Common.attrib ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
blockquote ::= blockquote::(blockquote.attlist Block.model) ;
legend ::= legend::(legend.attlist Inline.model) ;
del ::= del::(del.attlist Inline.model) ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
hr ::= hr::hr.attlist ;
small ::= small::(small.attlist Inline.model) ;
meta ::= meta::meta.attlist ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
abbr.attlist ::= Common.attrib ;
big ::= big::(big.attlist Inline.model) ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------html::cordy.bgf--------------------
tag_beg ::= "<" id attributes ">" NL ;
attribute_id ::= id | x_id ;
attribute ::= SP attribute_id equals_attribute_value? ;
tag_elements ::= element* ;
element ::= singleton_tag | tag | text | comment_tag | tag_beg | tag_end ;
comment_tag ::= "<!" comment_text* ">" NL ;
tag ::= "<" id attributes ">" NL IN tag_elements EX "</" id ">" NL ;
attributes ::= SPOFF attribute* SPON ;
text_unit ::= (punctuation SP) | (")" SP) | (SP "(") | token | ("<" number) ;
tag_end ::= "</" id ">" NL ;
singleton_id ::= "br" | "hr" | ("|" "img") | "meta" | "base" | "basefont" | x_id | "dt" ;
equals_attribute_value ::= "=" attribute_value ;
attribute_value ::= stringlit | number | id | url | fileref ;
text ::= text_unit+ NL ;
comment_text ::= (punctuation SP) | token ;
singleton_tag ::= ("<" singleton_id attributes ">" singleton_tag_end? NL) | ("<" id attributes "/>" NL) ;
program ::= element* ;
singleton_tag_end ::= "</" singleton_id ">" ;
--------------------html::guyard.bgf--------------------
block ::= Heading ;
 block ::= Lists ;
 block ::= Blocktext ;
 block ::= Fieldset ;
inline ::= Special ;
 inline ::= Fontstyle ;
 inline ::= Phrase ;
 inline ::= Inlineforms ;
--------------------html::clark-strict.bgf--------------------
colgroup ::= colgroup::(colgroup.attlist col*) ;
dfn.attlist ::= Common.attrib ;
id.attrib ::= (id::ID.datatype)? ;
select ::= select::(select.attlist (option | optgroup)+) ;
 select ::= select::(select.attlist option+) ;
link ::= link::link.attlist ;
fieldset.attlist ::= Common.attrib ;
var.attlist ::= Common.attrib ;
address ::= address::(address.attlist Inline.model) ;
label ::= label::(label.attlist Inline.model) ;
ins ::= ins::(ins.attlist Inline.model) ;
kbd ::= kbd::(kbd.attlist Inline.model) ;
code ::= code::(code.attlist Inline.model) ;
tbody.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
caption ::= caption::(caption.attlist Inline.model) ;
tfoot ::= tfoot::(tfoot.attlist tr+) ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
head ::= head::(head.attlist head.content) ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
ol ::= ol::(ol.attlist li+) ;
del.attlist ::= Edit.attrib ;
hr.attlist ::= Common.attrib ;
small.attlist ::= Common.attrib ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
big.attlist ::= Common.attrib ;
base ::= base::base.attlist ;
colgroup.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
table ::= table::(table.attlist caption? (col*) | (colgroup*) (thead? tfoot? tbody+) | (tr+)) ;
 table ::= table::(table.attlist caption? tr+) ;
h5 ::= h5::(Heading.attrib Heading.content) ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h4 ::= h4::(Heading.attrib Heading.content) ;
noscript ::= noscript::(noscript.attlist Block.model) ;
h3 ::= h3::(Heading.attrib Heading.content) ;
script ::= script::(script.attlist string()) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
h2 ::= h2::(Heading.attrib Heading.content) ;
input ::= input::input.attlist ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
h1 ::= h1::(Heading.attrib Heading.content) ;
target.attrib ::= (target::string())? ;
address.attlist ::= Common.attrib ;
label.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
form ::= form::(form.attlist Block.class+) ;
acronym ::= acronym::(acronym.attlist Inline.model) ;
img ::= img::img.attlist ;
ins.attlist ::= Edit.attrib ;
kbd.attlist ::= Common.attrib ;
code.attlist ::= Common.attrib ;
caption.attlist ::= Common.attrib ;
shape.attrib ::= (shape::("rect" | "circle" | "poly" | "default"))? ;
tfoot.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
style ::= style::(style.attlist string()) ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= Common.attrib ;
optgroup ::= optgroup::(optgroup.attlist option+) ;
html ::= html::(html.attlist head body) ;
em ::= em::(em.attlist Inline.model) ;
scope.attrib ::= (scope::("row" | "col" | "rowgroup" | "colgroup"))? ;
 scope.attrib ::= (scope::("row" | "col"))? ;
iframe ::= iframe::(iframe.attlist Flow.model) ;
pre ::= pre::(pre.attlist Inline.model) ;
body ::= body::(body.attlist Block.model) ;
base.attlist ::= href::URI.datatype ;
 base.attlist ::= target.attrib ;
rules.attrib ::= (rules::("none" | "groups" | "rows" | "cols" | "all"))? ;
table.attlist ::= (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)? ;
 table.attlist ::= Common.attrib (summary::Text.datatype)? ;
noscript.attlist ::= Common.attrib ;
script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
coords.attrib ::= (coords::string())? ;
strong ::= strong::(strong.attlist Inline.model) ;
ul ::= ul::(ul.attlist li+) ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
acronym.attlist ::= Common.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
div ::= div::(div.attlist Flow.model) ;
dt ::= dt::(dt.attlist Inline.model) ;
area ::= area::area.attlist ;
param ::= param::param.attlist ;
dl ::= dl::(dl.attlist (dt | dd)+) ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
dd ::= dd::(dd.attlist Flow.model) ;
tt ::= tt::(tt.attlist Inline.model) ;
col ::= col::col.attlist ;
tr ::= tr::(tr.attlist (th | td)+) ;
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
li ::= li::(li.attlist Flow.model) ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
profile.attlist ::= (profile::URI.datatype)? ;
em.attlist ::= Common.attrib ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
th ::= th::(th.attlist Flow.model) ;
body.attlist ::= (onload::Script.datatype)? (onunload::Script.datatype)? ;
 body.attlist ::= Common.attrib ;
samp ::= samp::(samp.attlist Inline.model) ;
q ::= q::(q.attlist Inline.model) ;
p ::= p::(p.attlist Inline.model) ;
td ::= td::(td.attlist Flow.model) ;
bdo ::= bdo::(bdo.attlist Inline.model) ;
frame.attrib ::= name.attlist ;
 frame.attrib ::= (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))? ;
head.content ::= base? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= script* ;
 head.content ::= title ;
 head.content ::= style* ;
i ::= i::(i.attlist Inline.model) ;
strong.attlist ::= Common.attrib ;
ul.attlist ::= Common.attrib ;
div.attlist ::= Common.attrib ;
b ::= b::(b.attlist Inline.model) ;
dt.attlist ::= Common.attrib ;
a ::= a::(a.attlist Inline.model) ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
name.attlist ::= (name::string())? ;
map ::= map::(map.attlist (Block.class | area)+) ;
applet ::= applet::(applet.attlist param* Flow.model) ;
dl.attlist ::= Common.attrib ;
title ::= title::(title.attlist string()) ;
cite ::= cite::(cite.attlist Inline.model) ;
thead ::= thead::(thead.attlist tr+) ;
dd.attlist ::= Common.attrib ;
tt.attlist ::= Common.attrib ;
col.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
br ::= br::br.attlist ;
tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
sup ::= sup::(sup.attlist Inline.model) ;
li.attlist ::= Common.attrib ;
dir.attrib ::= dir::("ltr" | "rtl") ;
span ::= span::(span.attlist Inline.model) ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
usemap.attlist ::= (usemap::IDREF.datatype)? ;
th.attlist ::= Cell.attrib ;
samp.attlist ::= Common.attrib ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
p.attlist ::= Common.attrib ;
td.attlist ::= Cell.attrib ;
sub ::= sub::(sub.attlist Inline.model) ;
object ::= object::(object.attlist param* Flow.model) ;
link.attrib ::= target.attrib ;
bdo.attlist ::= Core.attrib lang.attrib dir.attrib ;
i.attlist ::= Common.attrib ;
textarea ::= textarea::textarea.attlist ;
b.attlist ::= Common.attrib ;
button ::= button::(button.attlist Flow.model) ;
a.attlist ::= shape.attrib coords.attrib ;
 a.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
 a.attlist ::= name.attlist ;
 a.attlist ::= target.attrib ;
abbr ::= abbr::(abbr.attlist Inline.model) ;
map.attlist ::= CommonIdRequired.attrib ;
 map.attlist ::= name.attlist ;
dfn ::= dfn::(dfn.attlist Inline.model) ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= name.attlist ;
title.attlist ::= I18n.attrib ;
cite.attlist ::= Common.attrib ;
fieldset ::= fieldset::(fieldset.attlist legend Flow.model) ;
var ::= var::(var.attlist Inline.model) ;
thead.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
br.attlist ::= Core.attrib ;
title.attrib ::= (title::Text.datatype)? ;
sup.attlist ::= Common.attrib ;
span.attlist ::= Common.attrib ;
tbody ::= tbody::(tbody.attlist tr+) ;
sub.attlist ::= Common.attrib ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
blockquote ::= blockquote::(blockquote.attlist Block.model) ;
legend ::= legend::(legend.attlist Inline.model) ;
del ::= del::(del.attlist Inline.model) ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
hr ::= hr::hr.attlist ;
small ::= small::(small.attlist Inline.model) ;
meta ::= meta::meta.attlist ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
abbr.attlist ::= Common.attrib ;
big ::= big::(big.attlist Inline.model) ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------javascript::synytskyy-cordy.bgf--------------------
js_logical_or_logical_and_expn ::= "||" js_logical_and_expn ;
js_subscripts ::= "[" js_expn "]" ;
js_conditional_clause ::= "?" js_assignment_expn ":" js_assignment_expn ;
js_label ::= id ":" ;
js_bitwise_or_bitwise_xor_expn ::= "|" js_bitwise_xor_expn ;
js_statement ::= (js_compound_statement ";"?) | (js_expression_statement ";"?) | (js_if_statement ";"?) | (js_for_statement ";"?) | (js_while_statement ";"?) | (js_break_statement ";"?) | (js_continue_statement ";"?) | (js_return_statement ";"?) | (js_with_statement ";"?) | (js_switch_statement ";"?) | (js_do_statement ";"?) | (js_try_catch_statement ";"?) | (js_throw_statement ";"?) | (js_debugger_statement ";"?) | js_empty_statement ;
js_shift_op_additive_expn ::= js_shift_op js_additive_expn ;
js_multiplicative_op ::= "*" | "/" | "%" ;
js_shift_op ::= "<<" | ">>" | ">>>" ;
js_try_catch_statement ::= "try" js_compound_statement js_catch_clause? js_finally_clause? ;
js_do_statement ::= "do" js_statement "while" "(" js_expn ")" ;
assign_js_conditional_expn ::= js_assignment_op js_conditional_expn ;
js_variable_description ::= id js_variable_initialization? ;
js_declaration_or_statement ::= (js_declaration NL) | (js_label? js_statement NL) | (comment NL) ;
js_variable_declaration ::= "var" {js_variable_description ","}* ;
js_with_statement ::= "with" "(" js_expn ")" js_statement ;
js_while_statement ::= "while" "(" js_expn ")" js_statement ;
js_declaration_or_statement_no_nl ::= (js_declaration) | js_statement ;
js_case_clause ::= js_case_clause_value NL IN js_subscope EX ;
js_object_literal ::= "{" {js_property_assignment ","}* ","? "}" ;
js_finally_clause ::= NL "finally" js_compound_statement ;
js_throw_statement ::= "throw" js_expn ;
js_arguments ::= "(" {js_assignment_expn ","}* ")" ;
js_bitwise_and_expn ::= js_equality_expn js_bitwise_and_equality_expn* ;
js_case_clause_value ::= ("case" js_expn ":") | ("default" ":") ;
js_switch_statement ::= "switch" "(" js_expn ")" "{" NL js_case_clause* "}" ;
js_regular_expn_literal ::= js_regexp ;
js_bitwise_xor_expn ::= js_bitwise_and_expn js_bitwise_xor_bitwise_and_expn* ;
js_property_set_parameter ::= id ;
js_return_statement ::= "return" js_expn? ;
js_array_literal ::= "[" {js_array_element ","}* "]" ;
js_equality_op ::= "==" | "!=" | "===" | "!==" | "in" | "instanceof" ;
js_variable_initialization ::= "=" js_assignment_expn ;
js_relational_op_shift_expn ::= js_relational_op js_shift_expn ;
js_subscope ::= js_declaration_or_statement* ;
js_bitwise_or_expn ::= js_bitwise_xor_expn js_bitwise_or_bitwise_xor_expn* ;
js_function_declaration ::= NL "function" id "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" NL ;
js_shift_expn ::= js_additive_expn js_shift_op_additive_expn* ;
js_multiplicative_expn ::= js_unary_expn js_multiplicative_op_unary_expn* ;
js_primary_expn ::= "this" | "class" | id | js_literal | js_array_literal | js_object_literal | js_function_expn | ("(" js_expn ")") ;
js_conditional_expn ::= js_logical_or_expn js_conditional_clause? ;
js_else_clause ::= "else" js_declaration_or_statement ;
js_property_name ::= id | js_string_literal | number ;
js_expression_statement ::= js_expn ;
js_additive_op ::= "+" | "-" ;
js_field_selector ::= "." id ;
js_break_statement ::= "break" id? ;
js_additive_op_multiplicative_expn ::= js_additive_op js_multiplicative_expn ;
js_literal ::= "null" | "true" | "false" | js_numeric_literal | js_string_literal | js_regular_expn_literal ;
js_string_literal ::= stringlit | charlit ;
js_unary_expn ::= js_unary_op* js_postfix_expn ;
js_postfix_expn ::= js_lefthand_side_expn js_postfix_op? ;
js_assignment_expn ::= js_conditional_expn assign_js_conditional_expn* ;
js_multiplicative_op_unary_expn ::= js_multiplicative_op js_unary_expn ;
js_logical_and_bitwise_or_expn ::= "&&" js_bitwise_or_expn ;
js_bitwise_and_equality_expn ::= "&" js_equality_expn ;
js_catch_clause ::= NL "catch" "(" id ")" js_compound_statement ;
js_unary_op ::= "delete" | "void" | "typeof" | "++" | "--" | "+" | "-" | "~" | "!" ;
js_expn ::= js_assignment_expn+ ;
js_postfix_op ::= "++" | "--" ;
js_logical_or_expn ::= js_logical_and_expn js_logical_or_logical_and_expn* ;
js_array_element ::= js_assignment_expn? ;
js_equality_expn ::= js_relational_expn js_equality_op_relational_expn* ;
js_assignment_op ::= "=" | "*=" | ("/" SPOFF "=" SPON) | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" ;
js_equality_op_relational_expn ::= js_equality_op js_relational_expn ;
js_constant_description ::= id js_variable_initialization ;
js_selector ::= js_arguments | js_subscripts | js_field_selector ;
js_constant_declaration ::= "const" {js_constant_description ","}* ;
js_relational_expn ::= js_shift_expn js_relational_op_shift_expn* ;
js_compound_statement ::= "{" NL IN js_subscope EX "}" ;
js_formal_parameter ::= id ;
js_bitwise_xor_bitwise_and_expn ::= "^" js_bitwise_and_expn ;
js_additive_expn ::= js_multiplicative_expn js_additive_op_multiplicative_expn* ;
js_program ::= js_declaration_or_statement* ;
js_continue_statement ::= "continue" id? ;
js_debugger_statement ::= "debugger" ;
js_empty_statement ::= ";" ;
js_numeric_literal ::= number | js_hex_number ;
js_lefthand_side_expn ::= "new"? js_member_expn ;
js_logical_and_expn ::= js_bitwise_or_expn js_logical_and_bitwise_or_expn* ;
js_declaration ::= (js_variable_declaration ";"?) | (js_constant_declaration ";"?) | (js_function_declaration ";"?) ;
program ::= js_program ;
js_for_statement ::= ("for" "(" {js_declaration_or_statement_no_nl ","}* ";" js_expn? ";" js_expn? ")" js_statement) | ("for" "each"? "(" js_declaration_or_statement_no_nl "in" js_expn ")" js_statement) ;
js_if_statement ::= "if" "(" js_expn ")" js_declaration_or_statement js_else_clause? ;
js_relational_op ::= "<" | ">" | "<=" | ">=" ;
js_function_expn ::= "function" id? "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" ;
js_property_assignment ::= (js_property_name ":" js_expn) | ("get" js_property_name "(" ")" "{" js_subscope "}") | ("set" js_property_name "(" js_property_set_parameter ")" "{" js_subscope "}") ;
js_member_expn ::= js_primary_expn js_selector* ;
--------------------occam::mu-mitchell.bgf--------------------
relational-expression ::= shift-expression relational-expression "<" shift-expression relational-expression ">" shift-expression relational-expression "<=" shift-expression relational-expression ">=" shift-expression ;
logical-or-expression ::= logical-and-expression logical-or-expression "||" logical-and-expression ;
template-name ::= identifier ;
init-declarator-list ::= init-declarator init-declarator-list "," init-declarator ;
exception-declaration ::= type-specifier-seq declarator type-specifier-seq abstract-declarator type-specifier-seq "..." ;
enumerator-definition ::= enumerator enumerator "=" constant-expression ;
try-block ::= "try" compound-statement handler-seq ;
linkage-specification ::= "extern" string-literal "{" declaration-seq? "}" "extern" string-literal declaration ;
delete-expression ::= "::"? "delete" cast-expression "::"? "delete" "[" "]" cast-expression ;
conversion-function-id ::= "operator" conversion-type-id ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression "++" cast-expression "--" cast-expression unary-operator cast-expression "sizeof" unary-expression "sizeof" "(" type-id ")" new-expression delete-expression ;
template-parameter-list ::= template-parameter template-parameter-list "," template-parameter ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
postfix-expression ::= primary-expression postfix-expression "[" expression "]" postfix-expression "(" expression-list? ")" simple-type-specifier "(" expression-list? ")" "typename" "::"? nested-name-specifier identifier "(" expression-list? ")" "typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")" postfix-expression "." "template"? id-expression postfix-expression "->" "template"? id-expression postfix-expression "." pseudo-destructor-name postfix-expression "->" pseudo-destructor-name postfix-expression "++" postfix-expression "--" "dynamic_cast" "<" type-id ">" "(" expression ")" "static_cast" "<" type-id ">" "(" expression ")" "reinterpret_cast" "<" type-id ">" "(" expression ")" "const_cast" "<" type-id ">" "(" expression ")" "typeid" "(" expression ")" "typeid" "(" type-id ")" ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= "::"? nested-name-specifier "template"? unqualified-id "::" identifier "::" operator-function-id "::" template-id ;
base-clause ::= ":" base-specifier-list ;
type-specifier ::= simple-type-specifier class-specifier enum-specifier elaborated-type-specifier cv-qualifier ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
cast-expression ::= unary-expression "(" type-id ")" cast-expression ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= "::"? "new" new-placement? new-type-id new-initializer? "::"? "new" new-placement? "(" type-id ")" new-initializer? ;
initializer ::= "=" initializer-clause "(" expression-list ")" ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
direct-new-declarator ::= "[" expression "]" direct-new-declarator "[" constant-expression "]" ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= "::"? nested-name-specifier? class-name identifier ;
declaration-statement ::= block-declaration ;
direct-abstract-declarator ::= direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-abstract-declarator? "[" constant-expression? "]" "(" abstract-declarator ")" ;
enum-name ::= identifier ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
type-parameter ::= "class" identifier? "class" identifier? "=" type-id "typename" identifier? "typename" identifier? "=" type-id "template" "<" template-parameter-list ">" "class" identifier? "template" "<" template-parameter-list ">" "class" identifier? "=" id-expression ;
namespace-body ::= declaration-seq? ;
extension-namespace-definition ::= "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression exclusive-or-expression "^" and-expression ;
class-or-namespace-name ::= class-name namespace-name ;
cv-qualifier ::= "const" "volatile" ;
pseudo-destructor-name ::= "::"? nested-name-specifier? type-name "::" "~" type-name "::"? nested-name-specifier "template" template-id "::" "~" type-name "::"? nested-name-specifier? "~" type-name ;
compound-statement ::= "{" statement-seq? "}" ;
base-specifier-list ::= base-specifier base-specifier-list "," base-specifier ;
member-declaration ::= decl-specifier-seq? member-declarator-list? ";" function-definition ";"? "::"? nested-name-specifier "template"? unqualified-id ";" using-declaration template-declaration ;
parameter-declaration-clause ::= parameter-declaration-list? "..."? parameter-declaration-list "," "..." ;
enumerator ::= identifier ;
shift-expression ::= additive-expression shift-expression "<<" additive-expression shift-expression ">>" additive-expression ;
base-specifier ::= "::"? nested-name-specifier? class-name "virtual" access-specifier? "::"? nested-name-specifier? class-name access-specifier "virtual"? "::"? nested-name-specifier? class-name ;
class-name ::= identifier template-id ;
namespace-name ::= original-namespace-name namespace-alias ;
abstract-declarator ::= ptr-operator abstract-declarator? direct-abstract-declarator ;
initializer-clause ::= assignment-expression "{" initializer-list ","? "}" "{" "}" ;
labeled-statement ::= identifier ":" statement "case" constant-expression ":" statement "default" ":" statement ;
parameter-declaration-list ::= parameter-declaration parameter-declaration-list "," parameter-declaration ;
expression-list ::= assignment-expression expression-list "," assignment-expression ;
using-declaration ::= "using" "typename"? "::"? nested-name-specifier unqualified-id ";" "using" "::" unqualified-id ";" ;
template-argument ::= assignment-expression type-id id-expression ;
ctor-initializer ::= ":" mem-initializer-list ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= initializer-clause initializer-list "," initializer-clause ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
operator ::= "new" | "delete" | ("new" "[]") | ("delete" "[]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | "()" | "[]" ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr-operator ::= "*" cv-qualifier-seq? "&" "::"? nested-name-specifier "*" cv-qualifier-seq? ;
mem-initializer-list ::= mem-initializer mem-initializer "," mem-initializer-list ;
inclusive-or-expression ::= exclusive-or-expression inclusive-or-expression "|" exclusive-or-expression ;
template-argument-list ::= template-argument template-argument-list "," template-argument ;
expression ::= assignment-expression expression "," assignment-expression ;
assignment-expression ::= conditional-expression logical-or-expression assignment-operator assignment-expression throw-expression ;
access-specifier ::= "private" "protected" "public" ;
direct-declarator ::= declarator-id direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-declarator "[" constant-expression? "]" "(" declarator ")" ;
logical-and-expression ::= inclusive-or-expression logical-and-expression "&&" inclusive-or-expression ;
nested-name-specifier ::= class-or-namespace-name "::" nested-name-specifier? class-or-namespace-name "::" "template" nested-name-specifier ;
jump-statement ::= "break" ";" "continue" ";" "return" expression? ";" "goto" identifier ";" ;
type-id ::= type-specifier-seq abstract-declarator? ;
typedef-name ::= identifier ;
declaration-seq ::= declaration declaration-seq declaration ;
class-key ::= "class" "struct" "union" ;
id-expression ::= unqualified-id qualified-id ;
member-declarator-list ::= member-declarator member-declarator-list "," member-declarator ;
operator-function-id ::= "operator" operator ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "namespace" identifier "{" namespace-body "}" ;
iteration-statement ::= "while" "(" condition ")" statement "do" statement "while" "(" expression ")" ";" "for" "(" for-init-statement condition? ";" expression? ")" statement ;
new-declarator ::= ptr-operator new-declarator? direct-new-declarator ;
type-id-list ::= type-id type-id-list "," type-id ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
expression-statement ::= expression? ";" ;
declaration ::= block-declaration function-definition template-declaration explicit-instantiation explicit-specialization linkage-specification namespace-definition ;
function-body ::= compound-statement ;
for-init-statement ::= expression-statement simple-declaration ;
explicit-instantiation ::= "template" declaration ;
unnamed-namespace-definition ::= "namespace" "{" namespace-body "}" ;
statement ::= labeled-statement expression-statement compound-statement selection-statement iteration-statement jump-statement declaration-statement try-block ;
multiplicative-expression ::= pm-expression multiplicative-expression "*" pm-expression multiplicative-expression "/" pm-expression multiplicative-expression "%" pm-expression ;
selection-statement ::= "if" "(" condition ")" statement "if" "(" condition ")" statement "else" statement "switch" "(" condition ")" statement ;
function-definition ::= decl-specifier-seq? declarator ctor-initializer? function-body decl-specifier-seq? declarator function-try-block ;
pm-expression ::= cast-expression pm-expression ".*" cast-expression pm-expression "->*" cast-expression ;
simple-type-specifier ::= "::"? nested-name-specifier? type-name "::"? nested-name-specifier "template" template-id "char" "wchar_t" "bool" "short" "int" "long" "signed" "unsigned" "float" "double" "void" ;
constant-expression ::= conditional-expression ;
new-type-id ::= type-specifier-seq new-declarator? ;
namespace-alias ::= identifier ;
handler-seq ::= handler handler-seq? ;
decl-specifier ::= storage-class-specifier type-specifier function-specifier "friend" "typedef" ;
storage-class-specifier ::= "auto" "register" "static" "extern" "mutable" ;
parameter-declaration ::= decl-specifier-seq declarator decl-specifier-seq declarator "=" assignment-expression decl-specifier-seq abstract-declarator? decl-specifier-seq abstract-declarator? "=" assignment-expression ;
template-id ::= template-name "<" template-argument-list? ">" ;
and-expression ::= equality-expression and-expression "&" equality-expression ;
equality-expression ::= relational-expression equality-expression "==" relational-expression equality-expression "!=" relational-expression ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= declarator pure-specifier? declarator constant-initializer? identifier? ":" constant-expression ;
primary-expression ::= literal "this" "(" expression ")" id-expression ;
conditional-expression ::= logical-or-expression logical-or-expression "?" expression ":" assignment-expression ;
type-name ::= class-name enum-name typedef-name ;
elaborated-type-specifier ::= class-key "::"? nested-name-specifier? identifier "enum" "::"? nested-name-specifier? identifier "typename" "::"? nested-name-specifier identifier "typename" "::"? nested-name-specifier "template"? template-id ;
block-declaration ::= simple-declaration asm-definition namespace-alias-definition using-declaration using-directive ;
constant-initializer ::= "=" constant-expression ;
original-namespace-name ::= identifier ;
additive-expression ::= multiplicative-expression additive-expression "+" multiplicative-expression additive-expression "-" multiplicative-expression ;
declarator-id ::= id-expression "::"? nested-name-specifier? type-name ;
new-initializer ::= "(" expression-list? ")" ;
declarator ::= direct-declarator ptr-operator declarator ;
pure-specifier ::= "=" "0" ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
translation-unit ::= declaration-seq? ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
condition ::= expression type-specifier-seq declarator "=" assignment-expression ;
named-namespace-definition ::= original-namespace-definition extension-namespace-definition ;
template-parameter ::= type-parameter parameter-declaration ;
class-head ::= class-key identifier? base-clause? class-key nested-name-specifier identifier base-clause? class-key nested-name-specifier? template-id base-clause? ;
member-specification ::= member-declaration member-specification? access-specifier ":" member-specification? ;
init-declarator ::= declarator initializer? ;
function-specifier ::= "inline" "virtual" "explicit" ;
enumerator-list ::= enumerator-definition enumerator-list "," enumerator-definition ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
namespace-definition ::= named-namespace-definition unnamed-namespace-definition ;
unqualified-id ::= identifier operator-function-id conversion-function-id "~" class-name template-id ;
statement-seq ::= statement statement-seq statement ;
--------------------odf::opendoc-1.0-manifest.bgf--------------------
algorithm ::= manifest:algorithm::algorithm-attlist ;
manifest ::= manifest:manifest::(file-entry+) ;
key-derivation-attlist ::= manifest:key-derivation-name::string() ;
 key-derivation-attlist ::= manifest:salt::string() ;
 key-derivation-attlist ::= manifest:iteration-count::integer() ;
encryption-data-attlist ::= manifest:checksum-type::string() ;
 encryption-data-attlist ::= manifest:checksum::string() ;
key-derivation ::= manifest:key-derivation::key-derivation-attlist ;
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm key-derivation) ;
file-entry-attlist ::= manifest:full-path::string() ;
 file-entry-attlist ::= (manifest:size::integer())? ;
 file-entry-attlist ::= manifest:media-type::string() ;
algorithm-attlist ::= manifest:algorithm-name::string() ;
 algorithm-attlist ::= manifest:initialisation-vector::string() ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.0-strict.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
distance ::= length ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string())? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
number-text-content ::= number:text-content::ε ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string ;
 table-database-source-query-attlist ::= table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::(table-table-row+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
chart-grid ::= chart:grid::chart-grid-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
double ::= string() ;
table-shapes ::= table:shapes::(shape+) ;
style-graphic-properties-elements ::= ε ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-outline-style ::= text:outline-style::(text-outline-level-style+) ;
draw-control-attlist ::= draw:control::IDREF ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
style-list-level-properties-elements ::= ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content ;
date ::= string() ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
index-content-main ::= text-content | text-index-title ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyURI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
number-hours ::= number:hours::number-hours-attlist ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
draw-layer ::= draw:layer::draw-layer-attlist ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | ε))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
style-properties-content ::= anyAttListOrElements ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
color ::= string() ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content ;
style-section-properties-content ::= style-section-properties-content-strict ;
 style-section-properties-content ::= style-properties-content ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
style-data-style-attlist ::= (style:display-name::string)? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
language ::= string() ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image ;
 style-section-properties-elements ::= style-columns ;
 style-section-properties-elements ::= text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
meta-date-string ::= meta:date-string::string ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-name ::= text:index-name::string ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
style-header-footer-properties-elements ::= style-background-image ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
style-page-layout-properties-content ::= style-page-layout-properties-content-strict ;
 style-page-layout-properties-content ::= style-properties-content ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
style-paragraph-properties-content ::= style-paragraph-properties-content-strict ;
 style-paragraph-properties-content ::= style-properties-content ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
character ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
change-mark-attr ::= text:change-id::IDREF ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "rigth" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
chart-data-point ::= chart:data-point::chart-data-point-attlist ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
style-column ::= style:column::style-column-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= text:id::ID ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
table-last-column ::= table:last-column::common-table-template-attlist ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
office-script-attlist ::= script:language::string ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
length ::= string() ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
config-config-item-map-named-attlist ::= config:name::string ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-table-properties-content-strict ;
 style-table-properties-content ::= style-properties-content ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist) ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
draw-handle ::= draw:handle::draw-handle-attlist ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
time ::= string() ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
draw-param ::= draw:param::draw-param-attlist ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
style-section-properties ::= style:section-properties::style-section-properties-content ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls ;
 controls ::= form:password::(form-password-attlist common-form-control-content) ;
 controls ::= form:file::(form-file-attlist common-form-control-content) ;
 controls ::= form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content) ;
 controls ::= form:fixed-text::(form-fixed-text-attlist common-form-control-content) ;
 controls ::= form:button::(form-button-attlist common-form-control-content) ;
 controls ::= form:image::(form-image-attlist common-form-control-content) ;
 controls ::= form:radio::(form-radio-attlist common-form-control-content) ;
 controls ::= form:frame::(form-frame-attlist common-form-control-content) ;
 controls ::= form:image-frame::(form-image-frame-attlist common-form-control-content) ;
 controls ::= form:hidden::(form-hidden-attlist common-form-control-content) ;
 controls ::= form:grid::(form-grid-attlist common-form-control-content form-column*) ;
 controls ::= form:value-range::(form-value-range-attlist common-form-control-content) ;
 controls ::= form:generic-control::(form-generic-control-attlist common-form-control-content) ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
anin-iterate-attlist ::= (smil:targetElement::IDREF)? ;
 anin-iterate-attlist ::= (anim:iterate-type::string)? ;
 anin-iterate-attlist ::= (anim:iterate-interval::duration)? ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-table-template-attlist ::= text:style-name::styleNameRef ;
math-math ::= math:math::mathMarkup ;
common-current-value-attlist ::= (form:current-value::string)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
office-spreadsheet-content-epilogue ::= table-functions ;
selected ::= (form:selected::boolean)? ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
style-graphic-properties-content ::= style-graphic-properties-content-strict ;
 style-graphic-properties-content ::= style-properties-content ;
office-chart-attlist ::= ε ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
form-item ::= form:item::(form-item-attlist string()) ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
office-meta ::= (office:meta::office-meta-content)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::chart-regression-curve-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-content ::= style-text-properties-content-strict ;
 style-text-properties-content ::= style-properties-content ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
number-minutes ::= number:minutes::number-minutes-attlist ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
style-region-center ::= style:region-center::region-content ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
table-operation ::= table:operation::table-operation-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist office-event-listeners? draw-glue-point* shape*) ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
navigation ::= "none" | "current" | "parent" ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
presentation-play ::= presentation:play::presentation-play-attlist ;
states ::= "unchecked" | "checked" | "unknown" ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
text-list-header ::= text:list-header::text-list-item-content ;
style-list-level-properties-content ::= style-list-level-properties-content-strict ;
 style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist draw-glue-point*) ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
text-id ::= text:id::string ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content ;
draw-equation ::= draw:equation::draw-equation-attlist ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-repeat-timing-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-fill-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist) ;
 animation-element ::= anim:iterate::(common-anim-attlist anin-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
table-label-range ::= table:label-range::table-label-range-attlist ;
number-boolean ::= number:boolean::ε ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
common-control-id-attlist ::= form:id::ID ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
office-text-content-epilogue ::= table-functions ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
duration ::= string() ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
office-chart-content-epilogue ::= table-functions ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
office-presentation-attlist ::= ε ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
coordinate ::= length ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= text:name::string ;
 table-table-template-attlist ::= text:first-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:first-row-end-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
formula ::= string() ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::(table-table-row+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
integer ::= integer() ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types ;
 text-bibliography-entry-template-attrs ::= text:style-name::styleNameRef ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
style-table-properties ::= style:table-properties::style-table-properties-content ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::table-filter-condition-attlist ;
style-region-left ::= style:region-left::region-content ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right") ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
style-drawing-page-properties-content ::= style-drawing-page-properties-content-strict ;
 style-drawing-page-properties-content ::= style-properties-content ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger ;
 text-user-index-entry-template-attrs ::= text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table ;
 text-database-display-attlist ::= common-field-data-style-name-attlist ;
 text-database-display-attlist ::= text:column-name::string ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string ;
 table-insertion-cut-off-attlist ::= table:position::integer ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
button-type ::= (form:button-type::types)? ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value-type::date)?) ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
points ::= string() ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
table-database-source-table-attlist ::= table:database-name::string ;
 table-database-source-table-attlist ::= table:database-table-name::string ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist dr3d-light* shapes3d*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
image-data ::= (form:image-data::anyURI)? ;
chart-legend ::= chart:legend::chart-legend-attlist ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
style-chart-properties-content ::= style-properties-content ;
for ::= (form:for::string)? ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
style-header-footer-attlist ::= (style:dynamic-spacing::boolean)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
style-header-footer-properties-content ::= style-header-footer-properties-content-strict ;
 style-header-footer-properties-content ::= style-properties-content ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
presentation-header-decl-attlist ::= presentation:name::string ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
text-section-source ::= text:section-source::text-section-source-attr ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
office-document-attrs ::= office:mimetype::string ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
common-draw-points-attlist ::= draw:points::points ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
presentation-decls ::= presentation-decl* ;
style-ruby-properties-content ::= style-ruby-properties-content-strict ;
 style-ruby-properties-content ::= style-properties-content ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
xforms-model ::= xforms:model::anyAttListOrElements ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
types ::= "submit" | "reset" | "push" | "url" ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | (table-table-row+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
target-location ::= (xlink:href::anyURI)? ;
office-image-content-main ::= draw-frame ;
current-selected ::= (form:current-selected::boolean)? ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
office-binary-data ::= office:binary-data::base64Binary ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
presentation-footer-decl-attlist ::= presentation:name::string ;
style-table-column-properties-content ::= style-table-column-properties-content-strict ;
 style-table-column-properties-content ::= style-properties-content ;
svg-desc ::= svg:desc::string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::positiveInteger)? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string smil:repeatCount::nonNegativeInteger)? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF ;
 presentation-dim-attlist ::= draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
percent ::= string() ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
table-body ::= table:body::common-table-template-attlist ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
dc-date ::= dc:date::dateTime ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
style-table-row-properties-content ::= style-table-row-properties-content-strict ;
 style-table-row-properties-content ::= style-properties-content ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
boolean ::= "true" | "false" ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::formula)? ;
office-meta-content ::= office-meta-content-strict ;
 office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
draw-text ::= (text-p | text-list)* ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger ;
 text-table-of-content-entry-template-attlist ::= text:style-name::styleNameRef ;
string ::= string() ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
style-table-cell-properties-content ::= style-table-cell-properties-content-strict ;
 style-table-cell-properties-content ::= style-properties-content ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
size ::= (form:size::nonNegativeInteger)? ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.0.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
distance ::= length ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string())? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
number-text-content ::= number:text-content::ε ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string ;
 table-database-source-query-attlist ::= table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::(table-table-row+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
chart-grid ::= chart:grid::chart-grid-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
double ::= string() ;
table-shapes ::= table:shapes::(shape+) ;
style-graphic-properties-elements ::= ε ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-outline-style ::= text:outline-style::(text-outline-level-style+) ;
draw-control-attlist ::= draw:control::IDREF ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
style-list-level-properties-elements ::= ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content ;
date ::= string() ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
index-content-main ::= text-content | text-index-title ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyURI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
number-hours ::= number:hours::number-hours-attlist ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
draw-layer ::= draw:layer::draw-layer-attlist ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | ε))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
style-properties-content ::= anyAttListOrElements ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
color ::= string() ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content ;
style-section-properties-content ::= style-properties-content ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
style-data-style-attlist ::= (style:display-name::string)? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
language ::= string() ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image ;
 style-section-properties-elements ::= style-columns ;
 style-section-properties-elements ::= text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
meta-date-string ::= meta:date-string::string ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-name ::= text:index-name::string ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
style-header-footer-properties-elements ::= style-background-image ;
style-page-layout-properties-content ::= style-properties-content ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
style-paragraph-properties-content ::= style-properties-content ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
character ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
change-mark-attr ::= text:change-id::IDREF ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "rigth" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
chart-data-point ::= chart:data-point::chart-data-point-attlist ;
office-image-attlist ::= ε ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
style-column ::= style:column::style-column-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= text:id::ID ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
table-last-column ::= table:last-column::common-table-template-attlist ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
office-script-attlist ::= script:language::string ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
length ::= string() ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
config-config-item-map-named-attlist ::= config:name::string ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-properties-content ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist) ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
draw-handle ::= draw:handle::draw-handle-attlist ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
time ::= string() ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
draw-param ::= draw:param::draw-param-attlist ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
style-section-properties ::= style:section-properties::style-section-properties-content ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls ;
 controls ::= form:password::(form-password-attlist common-form-control-content) ;
 controls ::= form:file::(form-file-attlist common-form-control-content) ;
 controls ::= form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content) ;
 controls ::= form:fixed-text::(form-fixed-text-attlist common-form-control-content) ;
 controls ::= form:button::(form-button-attlist common-form-control-content) ;
 controls ::= form:image::(form-image-attlist common-form-control-content) ;
 controls ::= form:radio::(form-radio-attlist common-form-control-content) ;
 controls ::= form:frame::(form-frame-attlist common-form-control-content) ;
 controls ::= form:image-frame::(form-image-frame-attlist common-form-control-content) ;
 controls ::= form:hidden::(form-hidden-attlist common-form-control-content) ;
 controls ::= form:grid::(form-grid-attlist common-form-control-content form-column*) ;
 controls ::= form:value-range::(form-value-range-attlist common-form-control-content) ;
 controls ::= form:generic-control::(form-generic-control-attlist common-form-control-content) ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
anin-iterate-attlist ::= (smil:targetElement::IDREF)? ;
 anin-iterate-attlist ::= (anim:iterate-type::string)? ;
 anin-iterate-attlist ::= (anim:iterate-interval::duration)? ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-table-template-attlist ::= text:style-name::styleNameRef ;
math-math ::= math:math::mathMarkup ;
common-current-value-attlist ::= (form:current-value::string)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
office-spreadsheet-content-epilogue ::= table-functions ;
selected ::= (form:selected::boolean)? ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
style-graphic-properties-content ::= style-properties-content ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
office-chart-attlist ::= ε ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
form-item ::= form:item::(form-item-attlist string()) ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
office-meta ::= (office:meta::office-meta-content)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::chart-regression-curve-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-content ::= style-properties-content ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
number-minutes ::= number:minutes::number-minutes-attlist ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
style-region-center ::= style:region-center::region-content ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
table-operation ::= table:operation::table-operation-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist office-event-listeners? draw-glue-point* shape*) ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
navigation ::= "none" | "current" | "parent" ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
presentation-play ::= presentation:play::presentation-play-attlist ;
states ::= "unchecked" | "checked" | "unknown" ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
text-list-header ::= text:list-header::text-list-item-content ;
style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist draw-glue-point*) ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
text-id ::= text:id::string ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content ;
draw-equation ::= draw:equation::draw-equation-attlist ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-repeat-timing-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-fill-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist) ;
 animation-element ::= anim:iterate::(common-anim-attlist anin-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
table-label-range ::= table:label-range::table-label-range-attlist ;
number-boolean ::= number:boolean::ε ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
common-control-id-attlist ::= form:id::ID ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
office-text-content-epilogue ::= table-functions ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
duration ::= string() ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
office-chart-content-epilogue ::= table-functions ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
office-presentation-attlist ::= ε ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
coordinate ::= length ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= text:name::string ;
 table-table-template-attlist ::= text:first-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:first-row-end-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
formula ::= string() ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::(table-table-row+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
integer ::= integer() ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types ;
 text-bibliography-entry-template-attrs ::= text:style-name::styleNameRef ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
style-table-properties ::= style:table-properties::style-table-properties-content ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::table-filter-condition-attlist ;
style-region-left ::= style:region-left::region-content ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right") ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
style-drawing-page-properties-content ::= style-properties-content ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger ;
 text-user-index-entry-template-attrs ::= text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table ;
 text-database-display-attlist ::= common-field-data-style-name-attlist ;
 text-database-display-attlist ::= text:column-name::string ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string ;
 table-insertion-cut-off-attlist ::= table:position::integer ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
button-type ::= (form:button-type::types)? ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value-type::date)?) ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
points ::= string() ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
table-database-source-table-attlist ::= table:database-name::string ;
 table-database-source-table-attlist ::= table:database-table-name::string ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist dr3d-light* shapes3d*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
image-data ::= (form:image-data::anyURI)? ;
chart-legend ::= chart:legend::chart-legend-attlist ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
style-chart-properties-content ::= style-properties-content ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
for ::= (form:for::string)? ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
style-header-footer-attlist ::= (style:dynamic-spacing::boolean)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
style-header-footer-properties-content ::= style-properties-content ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
presentation-header-decl-attlist ::= presentation:name::string ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
text-section-source ::= text:section-source::text-section-source-attr ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-document-attrs ::= office:mimetype::string ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
common-draw-points-attlist ::= draw:points::points ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
style-ruby-properties-content ::= style-properties-content ;
presentation-decls ::= presentation-decl* ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
xforms-model ::= xforms:model::anyAttListOrElements ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
types ::= "submit" | "reset" | "push" | "url" ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | (table-table-row+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
target-location ::= (xlink:href::anyURI)? ;
office-image-content-main ::= draw-frame ;
current-selected ::= (form:current-selected::boolean)? ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
office-binary-data ::= office:binary-data::base64Binary ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
style-table-column-properties-content ::= style-properties-content ;
presentation-footer-decl-attlist ::= presentation:name::string ;
svg-desc ::= svg:desc::string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::positiveInteger)? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string smil:repeatCount::nonNegativeInteger)? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF ;
 presentation-dim-attlist ::= draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
percent ::= string() ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
table-body ::= table:body::common-table-template-attlist ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
dc-date ::= dc:date::dateTime ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
style-table-row-properties-content ::= style-properties-content ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
boolean ::= "true" | "false" ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::formula)? ;
office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
draw-text ::= (text-p | text-list)* ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger ;
 text-table-of-content-entry-template-attlist ::= text:style-name::styleNameRef ;
string ::= string() ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
style-table-cell-properties-content ::= style-properties-content ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
size ::= (form:size::nonNegativeInteger)? ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.1-manifest.bgf--------------------
algorithm ::= manifest:algorithm::algorithm-attlist ;
manifest ::= manifest:manifest::(file-entry+) ;
key-derivation-attlist ::= manifest:key-derivation-name::string() ;
 key-derivation-attlist ::= manifest:salt::string() ;
 key-derivation-attlist ::= manifest:iteration-count::integer() ;
encryption-data-attlist ::= manifest:checksum-type::string() ;
 encryption-data-attlist ::= manifest:checksum::string() ;
key-derivation ::= manifest:key-derivation::key-derivation-attlist ;
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm key-derivation) ;
file-entry-attlist ::= manifest:full-path::string() ;
 file-entry-attlist ::= (manifest:size::integer())? ;
 file-entry-attlist ::= manifest:media-type::string() ;
algorithm-attlist ::= manifest:algorithm-name::string() ;
 algorithm-attlist ::= manifest:initialisation-vector::string() ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.1-strict.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
distance ::= length ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string())? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
number-text-content ::= number:text-content::ε ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string ;
 table-database-source-query-attlist ::= table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
chart-grid ::= chart:grid::chart-grid-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
double ::= string() ;
table-shapes ::= table:shapes::(shape+) ;
style-graphic-properties-elements ::= ε ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-outline-style ::= text:outline-style::(text-outline-level-style+) ;
draw-control-attlist ::= draw:control::IDREF ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
style-list-level-properties-elements ::= ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content ;
date ::= string() ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
index-content-main ::= text-content | text-index-title ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyURI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
number-hours ::= number:hours::number-hours-attlist ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | ε))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
style-properties-content ::= anyAttListOrElements ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
 draw-page-attlist ::= (draw:nav-order::IDREFS)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
color ::= string() ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content ;
style-section-properties-content ::= style-section-properties-content-strict ;
 style-section-properties-content ::= style-properties-content ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
style-data-style-attlist ::= (style:display-name::string)? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
language ::= string() ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::color)? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image ;
 style-section-properties-elements ::= style-columns ;
 style-section-properties-elements ::= text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
meta-date-string ::= meta:date-string::string ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-name ::= text:index-name::string ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
style-header-footer-properties-elements ::= style-background-image ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
style-page-layout-properties-content ::= style-page-layout-properties-content-strict ;
 style-page-layout-properties-content ::= style-properties-content ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
style-paragraph-properties-content ::= style-paragraph-properties-content-strict ;
 style-paragraph-properties-content ::= style-properties-content ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
character ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
change-mark-attr ::= text:change-id::IDREF ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "right" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
chart-data-point ::= chart:data-point::chart-data-point-attlist ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
 style-header-footer-properties-attlist ::= (style:dynamic-spacing::boolean)? ;
style-column ::= style:column::style-column-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= text:id::ID ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
table-last-column ::= table:last-column::common-table-template-attlist ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
office-script-attlist ::= script:language::string ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
length ::= string() ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
config-config-item-map-named-attlist ::= config:name::string ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-table-properties-content-strict ;
 style-table-properties-content ::= style-properties-content ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
draw-handle ::= draw:handle::draw-handle-attlist ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
time ::= string() ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
draw-param ::= draw:param::draw-param-attlist ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
style-section-properties ::= style:section-properties::style-section-properties-content ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls ;
 controls ::= form:password::(form-password-attlist common-form-control-content) ;
 controls ::= form:file::(form-file-attlist common-form-control-content) ;
 controls ::= form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content) ;
 controls ::= form:fixed-text::(form-fixed-text-attlist common-form-control-content) ;
 controls ::= form:button::(form-button-attlist common-form-control-content) ;
 controls ::= form:image::(form-image-attlist common-form-control-content) ;
 controls ::= form:radio::(form-radio-attlist common-form-control-content) ;
 controls ::= form:frame::(form-frame-attlist common-form-control-content) ;
 controls ::= form:image-frame::(form-image-frame-attlist common-form-control-content) ;
 controls ::= form:hidden::(form-hidden-attlist common-form-control-content) ;
 controls ::= form:grid::(form-grid-attlist common-form-control-content form-column*) ;
 controls ::= form:value-range::(form-value-range-attlist common-form-control-content) ;
 controls ::= form:generic-control::(form-generic-control-attlist common-form-control-content) ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-table-template-attlist ::= text:style-name::styleNameRef text:paragraph-style-name::(styleNameRef?) ;
math-math ::= math:math::mathMarkup ;
common-current-value-attlist ::= (form:current-value::string)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
office-spreadsheet-content-epilogue ::= table-functions ;
selected ::= (form:selected::boolean)? ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
style-graphic-properties-content ::= style-graphic-properties-content-strict ;
 style-graphic-properties-content ::= style-properties-content ;
office-chart-attlist ::= ε ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
form-item ::= form:item::(form-item-attlist string()) ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
office-meta ::= (office:meta::office-meta-content)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::chart-regression-curve-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-content ::= style-text-properties-content-strict ;
 style-text-properties-content ::= style-properties-content ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
number-minutes ::= number:minutes::number-minutes-attlist ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
style-region-center ::= style:region-center::region-content ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
table-operation ::= table:operation::table-operation-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
navigation ::= "none" | "current" | "parent" ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
presentation-play ::= presentation:play::presentation-play-attlist ;
states ::= "unchecked" | "checked" | "unknown" ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
text-list-header ::= text:list-header::text-list-item-content ;
style-list-level-properties-content ::= style-list-level-properties-content-strict ;
 style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
text-id ::= text:id::string ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content ;
draw-equation ::= draw:equation::draw-equation-attlist ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*) ;
 animation-element ::= anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
svg-title ::= svg:title::string() ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
table-label-range ::= table:label-range::table-label-range-attlist ;
number-boolean ::= number:boolean::ε ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
common-control-id-attlist ::= form:id::ID ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
office-text-content-epilogue ::= table-functions ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
duration ::= string() ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? ;
 office-text-attlist ::= (text:use-soft-page-breaks::boolean)? ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
office-chart-content-epilogue ::= table-functions ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 draw-text-box-attlist ::= text-id? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
office-presentation-attlist ::= ε ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
coordinate ::= length ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= text:name::string ;
 table-table-template-attlist ::= text:first-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:first-row-end-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
 presentation-settings-attlist ::= (presentation:show-end-of-presentation-slide::boolean)? ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
formula ::= string() ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
integer ::= integer() ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types ;
 text-bibliography-entry-template-attrs ::= text:style-name::styleNameRef ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
style-table-properties ::= style:table-properties::style-table-properties-content ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::table-filter-condition-attlist ;
style-region-left ::= style:region-left::region-content ;
text-soft-page-break ::= text:soft-page-break::ε ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
style-drawing-page-properties-content ::= style-drawing-page-properties-content-strict ;
 style-drawing-page-properties-content ::= style-properties-content ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger ;
 text-user-index-entry-template-attrs ::= text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table ;
 text-database-display-attlist ::= common-field-data-style-name-attlist ;
 text-database-display-attlist ::= text:column-name::string ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string ;
 table-insertion-cut-off-attlist ::= table:position::integer ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
button-type ::= (form:button-type::types)? ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value::date)?) ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
points ::= string() ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
table-database-source-table-attlist ::= table:database-name::string ;
 table-database-source-table-attlist ::= table:database-table-name::string ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
image-data ::= (form:image-data::anyURI)? ;
chart-legend ::= chart:legend::chart-legend-attlist ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
style-chart-properties-content ::= style-chart-properties-content-strict ;
 style-chart-properties-content ::= style-properties-content ;
for ::= (form:for::string)? ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
anim-iterate-attlist ::= common-anim-target-attlist ;
 anim-iterate-attlist ::= (anim:iterate-type::string)? ;
 anim-iterate-attlist ::= (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
style-header-footer-properties-content ::= style-header-footer-properties-content-strict ;
 style-header-footer-properties-content ::= style-properties-content ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
presentation-header-decl-attlist ::= presentation:name::string ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
text-section-source ::= text:section-source::text-section-source-attr ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
office-document-attrs ::= office:mimetype::string ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
common-draw-points-attlist ::= draw:points::points ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
presentation-decls ::= presentation-decl* ;
style-ruby-properties-content ::= style-ruby-properties-content-strict ;
 style-ruby-properties-content ::= style-properties-content ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
xforms-model ::= xforms:model::anyAttListOrElements ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
types ::= "submit" | "reset" | "push" | "url" ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
target-location ::= (xlink:href::anyURI)? ;
office-image-content-main ::= draw-frame ;
current-selected ::= (form:current-selected::boolean)? ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
office-binary-data ::= office:binary-data::base64Binary ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
presentation-footer-decl-attlist ::= presentation:name::string ;
style-table-column-properties-content ::= style-table-column-properties-content-strict ;
 style-table-column-properties-content ::= style-properties-content ;
svg-desc ::= svg:desc::string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF ;
 presentation-dim-attlist ::= draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
percent ::= string() ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
table-body ::= table:body::common-table-template-attlist ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
dc-date ::= dc:date::dateTime ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
style-table-row-properties-content ::= style-table-row-properties-content-strict ;
 style-table-row-properties-content ::= style-properties-content ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
boolean ::= "true" | "false" ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::formula)? ;
office-meta-content ::= office-meta-content-strict ;
 office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
draw-text ::= (text-p | text-list)* ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger ;
 text-table-of-content-entry-template-attlist ::= text:style-name::styleNameRef ;
string ::= string() ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
style-table-cell-properties-content ::= style-table-cell-properties-content-strict ;
 style-table-cell-properties-content ::= style-properties-content ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
size ::= (form:size::nonNegativeInteger)? ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.1.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
distance ::= length ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string())? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
number-text-content ::= number:text-content::ε ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string ;
 table-database-source-query-attlist ::= table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
chart-grid ::= chart:grid::chart-grid-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
double ::= string() ;
table-shapes ::= table:shapes::(shape+) ;
style-graphic-properties-elements ::= ε ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-outline-style ::= text:outline-style::(text-outline-level-style+) ;
draw-control-attlist ::= draw:control::IDREF ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
style-list-level-properties-elements ::= ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content ;
date ::= string() ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
index-content-main ::= text-content | text-index-title ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyURI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
number-hours ::= number:hours::number-hours-attlist ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | ε))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
style-properties-content ::= anyAttListOrElements ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
 draw-page-attlist ::= (draw:nav-order::IDREFS)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
color ::= string() ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content ;
style-section-properties-content ::= style-properties-content ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
style-data-style-attlist ::= (style:display-name::string)? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
language ::= string() ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::color)? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image ;
 style-section-properties-elements ::= style-columns ;
 style-section-properties-elements ::= text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
meta-date-string ::= meta:date-string::string ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-name ::= text:index-name::string ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
style-header-footer-properties-elements ::= style-background-image ;
style-page-layout-properties-content ::= style-properties-content ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
style-paragraph-properties-content ::= style-properties-content ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
character ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
change-mark-attr ::= text:change-id::IDREF ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "right" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
chart-data-point ::= chart:data-point::chart-data-point-attlist ;
office-image-attlist ::= ε ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
 style-header-footer-properties-attlist ::= (style:dynamic-spacing::boolean)? ;
style-column ::= style:column::style-column-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= text:id::ID ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
table-last-column ::= table:last-column::common-table-template-attlist ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
office-script-attlist ::= script:language::string ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
length ::= string() ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
config-config-item-map-named-attlist ::= config:name::string ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-properties-content ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
draw-handle ::= draw:handle::draw-handle-attlist ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
time ::= string() ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
draw-param ::= draw:param::draw-param-attlist ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
style-section-properties ::= style:section-properties::style-section-properties-content ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls ;
 controls ::= form:password::(form-password-attlist common-form-control-content) ;
 controls ::= form:file::(form-file-attlist common-form-control-content) ;
 controls ::= form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content) ;
 controls ::= form:fixed-text::(form-fixed-text-attlist common-form-control-content) ;
 controls ::= form:button::(form-button-attlist common-form-control-content) ;
 controls ::= form:image::(form-image-attlist common-form-control-content) ;
 controls ::= form:radio::(form-radio-attlist common-form-control-content) ;
 controls ::= form:frame::(form-frame-attlist common-form-control-content) ;
 controls ::= form:image-frame::(form-image-frame-attlist common-form-control-content) ;
 controls ::= form:hidden::(form-hidden-attlist common-form-control-content) ;
 controls ::= form:grid::(form-grid-attlist common-form-control-content form-column*) ;
 controls ::= form:value-range::(form-value-range-attlist common-form-control-content) ;
 controls ::= form:generic-control::(form-generic-control-attlist common-form-control-content) ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-table-template-attlist ::= text:style-name::styleNameRef text:paragraph-style-name::(styleNameRef?) ;
math-math ::= math:math::mathMarkup ;
common-current-value-attlist ::= (form:current-value::string)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
office-spreadsheet-content-epilogue ::= table-functions ;
selected ::= (form:selected::boolean)? ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
style-graphic-properties-content ::= style-properties-content ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
office-chart-attlist ::= ε ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
form-item ::= form:item::(form-item-attlist string()) ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
office-meta ::= (office:meta::office-meta-content)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::chart-regression-curve-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-content ::= style-properties-content ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
number-minutes ::= number:minutes::number-minutes-attlist ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
style-region-center ::= style:region-center::region-content ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
table-operation ::= table:operation::table-operation-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
navigation ::= "none" | "current" | "parent" ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
presentation-play ::= presentation:play::presentation-play-attlist ;
states ::= "unchecked" | "checked" | "unknown" ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
text-list-header ::= text:list-header::text-list-item-content ;
style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
text-id ::= text:id::string ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content ;
draw-equation ::= draw:equation::draw-equation-attlist ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*) ;
 animation-element ::= anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
svg-title ::= svg:title::string() ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
table-label-range ::= table:label-range::table-label-range-attlist ;
number-boolean ::= number:boolean::ε ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
common-control-id-attlist ::= form:id::ID ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
office-text-content-epilogue ::= table-functions ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
duration ::= string() ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? ;
 office-text-attlist ::= (text:use-soft-page-breaks::boolean)? ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
office-chart-content-epilogue ::= table-functions ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 draw-text-box-attlist ::= text-id? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
office-presentation-attlist ::= ε ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
coordinate ::= length ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= text:name::string ;
 table-table-template-attlist ::= text:first-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:first-row-end-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
 presentation-settings-attlist ::= (presentation:show-end-of-presentation-slide::boolean)? ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
formula ::= string() ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
integer ::= integer() ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types ;
 text-bibliography-entry-template-attrs ::= text:style-name::styleNameRef ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
style-table-properties ::= style:table-properties::style-table-properties-content ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::table-filter-condition-attlist ;
style-region-left ::= style:region-left::region-content ;
text-soft-page-break ::= text:soft-page-break::ε ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
style-drawing-page-properties-content ::= style-properties-content ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger ;
 text-user-index-entry-template-attrs ::= text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table ;
 text-database-display-attlist ::= common-field-data-style-name-attlist ;
 text-database-display-attlist ::= text:column-name::string ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string ;
 table-insertion-cut-off-attlist ::= table:position::integer ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
button-type ::= (form:button-type::types)? ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value::date)?) ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
points ::= string() ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
table-database-source-table-attlist ::= table:database-name::string ;
 table-database-source-table-attlist ::= table:database-table-name::string ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
image-data ::= (form:image-data::anyURI)? ;
chart-legend ::= chart:legend::chart-legend-attlist ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
style-chart-properties-content ::= style-properties-content ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
for ::= (form:for::string)? ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
anim-iterate-attlist ::= common-anim-target-attlist ;
 anim-iterate-attlist ::= (anim:iterate-type::string)? ;
 anim-iterate-attlist ::= (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
style-header-footer-properties-content ::= style-properties-content ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
presentation-header-decl-attlist ::= presentation:name::string ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
text-section-source ::= text:section-source::text-section-source-attr ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-document-attrs ::= office:mimetype::string ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
common-draw-points-attlist ::= draw:points::points ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
style-ruby-properties-content ::= style-properties-content ;
presentation-decls ::= presentation-decl* ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
xforms-model ::= xforms:model::anyAttListOrElements ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
types ::= "submit" | "reset" | "push" | "url" ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
target-location ::= (xlink:href::anyURI)? ;
office-image-content-main ::= draw-frame ;
current-selected ::= (form:current-selected::boolean)? ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
office-binary-data ::= office:binary-data::base64Binary ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
style-table-column-properties-content ::= style-properties-content ;
presentation-footer-decl-attlist ::= presentation:name::string ;
svg-desc ::= svg:desc::string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF ;
 presentation-dim-attlist ::= draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
percent ::= string() ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
table-body ::= table:body::common-table-template-attlist ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
dc-date ::= dc:date::dateTime ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
style-table-row-properties-content ::= style-properties-content ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
boolean ::= "true" | "false" ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::formula)? ;
office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
draw-text ::= (text-p | text-list)* ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger ;
 text-table-of-content-entry-template-attlist ::= text:style-name::styleNameRef ;
string ::= string() ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
style-table-cell-properties-content ::= style-properties-content ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
size ::= (form:size::nonNegativeInteger)? ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.2-dsig.bgf--------------------
dsig-document-signatures-attlist ::= dsig:version::"1.2" ;
dsig-document-signatures ::= dsig:document-signatures::(dsig-document-signatures-attlist ds-signature+) ;
ds-signature ::= ds:Signature::dsMarkup ;
--------------------odf::opendoc-1.2-manifest.bgf--------------------
algorithm ::= manifest:algorithm::(algorithm-attlist anyElements) ;
manifest ::= manifest:manifest::(manifest-attlist file-entry+) ;
key-derivation-attlist ::= manifest:key-derivation-name::("PBKDF2" | anyURI) manifest:salt::base64Binary manifest:iteration-count::nonNegativeInteger (manifest:key-size::nonNegativeInteger)? ;
encryption-data-attlist ::= manifest:checksum-type::("SHA1/1K" | anyURI) manifest:checksum::base64Binary ;
key-derivation ::= manifest:key-derivation::key-derivation-attlist ;
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm start-key-generation? key-derivation) ;
start-key-generation-attlist ::= manifest:start-key-generation-name::("SHA1" | anyURI) (manifest:key-size::nonNegativeInteger)? ;
file-entry-attlist ::= manifest:full-path::string (manifest:size::nonNegativeInteger)? manifest:media-type::string (manifest:preferred-view-mode::("edit" | "presentation-slide-show" | "read-only" | namespacedToken))? (manifest:version::string)? ;
string ::= string() ;
start-key-generation ::= manifest:start-key-generation::start-key-generation-attlist ;
algorithm-attlist ::= manifest:algorithm-name::("Blowfish CFB" | anyURI) manifest:initialisation-vector::base64Binary ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
manifest-attlist ::= manifest:version::"1.2" ;
--------------------odf::opendoc-1.2.bgf--------------------
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
common-editable-attlist ::= (style:editable::boolean)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class (text:citation-style-name::styleNameRef)? (text:citation-body-style-name::styleNameRef)? (text:default-style-name::styleNameRef)? (text:master-page-name::styleNameRef)? (text:start-value::nonNegativeInteger)? common-num-format-prefix-suffix-attlist common-num-format-attlist? (text:start-numbering-at::("document" | "chapter" | "page"))? (text:footnotes-position::("text" | "page" | "section" | "document"))? (text:note-continuation-notice-forward::string())? (text:note-continuation-notice-backward::string())? ;
db-auto-increment-attlist ::= (db:additional-column-statement::string)? (db:row-retrieving-statement::string)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
table-data-pilot-table-attlist ::= table:name::string (table:application-data::string)? (table:grand-total::("none" | "row" | "column" | "both"))? (table:ignore-empty-rows::boolean)? (table:identify-categories::boolean)? table:target-range-address::cellRangeAddress (table:buttons::cellRangeAddressList)? (table:show-filter-button::boolean)? (table:drill-down-on-double-click::boolean)? ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
number-text-content ::= number:text-content::ε ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string table:query-name::string ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
chart-grid ::= chart:grid::chart-grid-attlist ;
draw-marker-attlist ::= draw:name::styleName (draw:display-name::string)? ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
table-shapes ::= table:shapes::(shape+) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:visibility::table-visibility-value)? (table:default-cell-style-name::styleNameRef)? xml-id? ;
text-meta-field-attlist ::= xml-id common-field-data-style-name-attlist ;
db-data-source-attlist ::= ε ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? (table:precision-as-shown::boolean)? (table:search-criteria-must-apply-to-whole-cell::boolean)? (table:automatic-find-labels::boolean)? (table:use-regular-expressions::boolean)? (table:use-wildcards::boolean)? (table:null-year::positiveInteger)? ;
common-repeat ::= (form:repeat::boolean)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
common-linked-cell ::= (form:linked-cell::(cellAddress | string))? ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content-strict ;
date ::= string() ;
style-list-level-label-alignment ::= (style:list-level-label-alignment::style-list-level-label-alignment-attlist)? ;
db-query-attlist ::= db:command::string (db:escape-processing::boolean)? ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
index-content-main ::= text-content | text-index-title ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? (presentation:preset-id::string)? (presentation:preset-sub-type::string)? (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? (presentation:master-element::IDREF)? (presentation:group-id::string)? (xml-id (anim:id::NCName)?)? ;
config-config-item-attlist ::= config:name::string config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin | table-table)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
db-character-set-attlist ::= (db:encoding::textEncoding)? ;
shape ::= shape-instance | draw-a ;
style-list-level-label-alignment-attlist ::= text:label-followed-by::("listtab" | "space" | "nothing") (text:list-tab-stop-position::length)? (fo:text-indent::length)? (fo:margin-left::length)? ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
table-title ::= table:title::string() ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-meta-attlist ::= common-in-content-meta-attlist? xml-id? ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content-strict ;
db-index-column-attlist ::= db:name::string (db:is-ascending::boolean)? ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? chart:dimension::chart-dimension ;
db-column-definition-attlist ::= db:name::string (db:data-type::db-data-types)? (db:type-name::string)? (db:precision::positiveInteger)? (db:scale::positiveInteger)? (db:is-nullable::("no-nulls" | "nullable"))? (db:is-empty-allowed::boolean)? (db:is-autoincrement::boolean)? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? (table:table-name::string)? ;
style-style-attlist ::= style:name::styleName (style:display-name::string)? (style:parent-style-name::styleNameRef)? (style:next-style-name::styleNameRef)? (style:list-level::(positiveInteger | ε))? (style:list-style-name::(styleName | ε))? (style:master-page-name::styleNameRef)? (style:auto-update::boolean)? (style:data-style-name::styleNameRef)? (style:percentage-data-style-name::styleNameRef)? (style:class::string)? (style:default-outline-level::(positiveInteger | ε))? ;
db-column ::= db:column::(db-column-attlist common-db-object-name common-db-object-title common-db-object-description common-db-default-value) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? (xml-id (text:id::NCName)?)? common-in-content-meta-attlist? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? xml-id? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= (presentation:header-decl::(presentation-header-decl-attlist string())) | (presentation:footer-decl::(presentation-footer-decl-attlist string())) | (presentation:date-time-decl::(presentation-date-time-decl-attlist string())) ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= (text:insertion::office-change-info) | (text:deletion::(office-change-info text-content*)) | (text:format-change::office-change-info) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body table-even-rows? table-odd-rows? table-even-columns? table-odd-columns? table-background?) ;
common-db-default-value ::= common-value-and-type-attlist? ;
db-delimiter ::= db:delimiter::db-delimiter-attlist ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-linked-cell (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) draw:corners::positiveInteger ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
common-office-annotation-name-attlist ::= office:name::string ;
draw-page-attlist ::= (draw:name::string)? (draw:style-name::styleNameRef)? draw:master-page-name::styleNameRef (presentation:presentation-page-layout-name::styleNameRef)? (xml-id (draw:id::NCName)?)? (draw:nav-order::IDREFS)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content-strict ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
color ::= string() ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content-strict ;
db-data-source-settings ::= db:data-source-settings::(db-data-source-settings-attlist db-data-source-setting+) ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
office-chart-content-prelude ::= text-decls table-decls ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? (presentation:transition-speed::presentationSpeeds)? (smil:type::string)? (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (presentation:duration::duration)? (presentation:visibility::("visible" | "hidden"))? (draw:background-size::("full" | "border"))? (presentation:background-objects-visible::boolean)? (presentation:background-visible::boolean)? (presentation:display-header::boolean)? (presentation:display-footer::boolean)? (presentation:display-page-number::boolean)? (presentation:display-date-time::boolean)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
common-db-object-title ::= (db:title::string)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? (svg:origin::string)? (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image style-columns text-notes-configuration* ;
column-controls ::= (form:text::(form-text-attlist common-form-control-content)) | (form:textarea::(form-textarea-attlist common-form-control-content text-p*)) | (form:formatted-text::(form-formatted-text-attlist common-form-control-content)) | (form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:combobox::(form-combobox-attlist common-form-control-content form-item*)) | (form:listbox::(form-listbox-attlist common-form-control-content form-option*)) | (form:checkbox::(form-checkbox-attlist common-form-control-content)) ;
chart-equation-attlist ::= (chart:automatic-content::boolean)? (chart:display-r-square::boolean)? (chart:display-equation::boolean)? common-draw-position-attlist (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
text-index-name ::= text:index-name::string ;
table-data-pilot-member-attlist ::= table:name::string (table:display::boolean)? (table:show-details::boolean)? ;
db-data-source-setting-attlist ::= (db:data-source-setting-is-list::boolean)? db:data-source-setting-name::string db:data-source-setting-type::db-data-source-setting-types ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
number-number-attlist ::= (number:decimal-replacement::string)? (number:display-factor::double)? ;
db-column-definitions ::= db:column-definitions::(db-column-definitions-attlist db-column-definition+) ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
text-list-header-attr ::= xml-id? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? (presentation:placeholder::boolean)? (presentation:user-transformed::boolean)? ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media" | IDREF))? ;
change-mark-attr ::= text:change-id::IDREF ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist common-draw-viewbox-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
chart-data-point ::= chart:data-point::(chart-data-point-attlist chart-data-label?) ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-background-color-attlist common-shadow-attlist (style:dynamic-spacing::boolean)? ;
style-column ::= style:column::style-column-attlist ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
text-changed-region-attr ::= xml-id (text:id::NCName)? ;
draw-stroke-dash-attlist ::= draw:name::styleName (draw:display-name::string)? (draw:style::("rect" | "round"))? (draw:dots1::integer)? (draw:dots1-length::(length | percent))? (draw:dots2::integer)? (draw:dots2-length::(length | percent))? (draw:distance::(length | percent))? ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
table-last-column ::= table:last-column::common-table-template-attlist ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name" | "plain-number" | "plain-number-and-name"))? (text:outline-level::positiveInteger)? ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
config-config-item-map-named-attlist ::= config:name::string ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content-strict ;
table-source-service-attlist ::= table:name::string table:source-name::string table:object-name::string (table:user-name::string)? (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
draw-handle ::= draw:handle::draw-handle-attlist ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
db-filter-statement ::= db:filter-statement::(db-command db-apply-command) ;
draw-param ::= draw:param::draw-param-attlist ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= (office:text::(office-text-attlist office-text-content-prelude office-text-content-main office-text-content-epilogue)) | (office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue)) | (office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue)) | (office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue)) | (office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue)) | (office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue)) | office-database ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls | (form:password::(form-password-attlist common-form-control-content)) | (form:file::(form-file-attlist common-form-control-content)) | (form:fixed-text::(form-fixed-text-attlist common-form-control-content)) | (form:button::(form-button-attlist common-form-control-content)) | (form:image::(form-image-attlist common-form-control-content)) | (form:radio::(form-radio-attlist common-form-control-content)) | (form:frame::(form-frame-attlist common-form-control-content)) | (form:image-frame::(form-image-frame-attlist common-form-control-content)) | (form:hidden::(form-hidden-attlist common-form-control-content)) | (form:grid::(form-grid-attlist common-form-control-content form-column*)) | (form:value-range::(form-value-range-attlist common-form-control-content)) | (form:generic-control::(form-generic-control-attlist common-form-control-content)) ;
text-illustration-index ::= text:illustration-index::(common-section-attlist text-illustration-index-source text-index-body) ;
math-math ::= math:math::mathMarkup ;
common-table-template-attlist ::= table:style-name::styleNameRef (table:paragraph-style-name::styleNameRef)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
text-conditional-text-attlist ::= text:condition::string text:string-value-if-true::string text:string-value-if-false::string (text:current-value::boolean)? ;
common-source-cell-range ::= (form:source-cell-range::(cellRangeAddress | string))? ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? (style:use-optimal-column-width::boolean)? common-break-attlist ;
common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? (draw:start-angle::angle)? (draw:end-angle::angle)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist (text:page-adjust::integer)? (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress table:data-cell-range-address::cellRangeAddress table:orientation::("column" | "row") ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? (svg:viewBox::(integer integer integer integer))? (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? (draw:text-rotate-angle::angle)? (draw:extrusion-allowed::boolean)? (draw:text-path-allowed::boolean)? (draw:concentric-gradient-fill-allowed::boolean)? (draw:extrusion::boolean)? (draw:extrusion-brightness::zeroToHundredPercent)? (draw:extrusion-depth::(length double))? (draw:extrusion-diffusion::percent)? (draw:extrusion-number-of-line-segments::integer)? (draw:extrusion-light-face::boolean)? (draw:extrusion-first-light-harsh::boolean)? (draw:extrusion-second-light-harsh::boolean)? (draw:extrusion-first-light-level::zeroToHundredPercent)? (draw:extrusion-second-light-level::zeroToHundredPercent)? (draw:extrusion-first-light-direction::vector3D)? (draw:extrusion-second-light-direction::vector3D)? (draw:extrusion-metal::boolean)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (draw:extrusion-rotation-angle::(angle angle))? (draw:extrusion-rotation-center::vector3D)? (draw:extrusion-shininess::zeroToHundredPercent)? (draw:extrusion-skew::(double angle))? (draw:extrusion-specularity::zeroToHundredPercent)? (dr3d:projection::("parallel" | "perspective"))? (draw:extrusion-viewpoint::point3D)? (draw:extrusion-origin::(extrusionOrigin extrusionOrigin))? (draw:extrusion-color::boolean)? (draw:enhanced-path::string)? (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? (draw:text-areas::string)? (draw:glue-points::string)? (draw:glue-point-type::("none" | "segments" | "rectangle"))? (draw:glue-point-leaving-directions::string)? (draw:text-path::boolean)? (draw:text-path-mode::("normal" | "path" | "shape"))? (draw:text-path-scale::("path" | "shape"))? (draw:text-path-same-letter-heights::boolean)? (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:type::"simple" xlink:href::anyIRI) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? (draw:start-intensity::zeroToHundredPercent)? (draw:end-intensity::zeroToHundredPercent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? (style:filter-name::string)? (draw:opacity::zeroToHundredPercent)? ;
db-key-attlist ::= (db:name::string)? db:type::("primary" | "unique" | "foreign") (db:referenced-table-name::string)? (db:update-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? (db:delete-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? (style:lines::positiveInteger)? (style:distance::length)? (style:style-name::styleNameRef)? ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
office-chart-attlist ::= ε ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
office-meta ::= (office:meta::office-meta-content-strict)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? (style:use-optimal-row-height::boolean)? common-background-color-attlist common-break-attlist (fo:keep-together::("auto" | "always"))? ;
db-table-definitions ::= db:table-definitions::(db-table-definitions-attlist db-table-definition*) ;
chart-regression-curve ::= chart:regression-curve::(chart-regression-curve-attlist chart-equation?) ;
db-component ::= db:component::(db-component-attlist common-db-object-name common-db-object-title common-db-object-description (office-document | math-math)?) ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
db-component-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")?)? (db:as-template::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence shape*) ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type common-linked-cell list-linkage-type common-source-cell-range (form:multiple::boolean)? (form:xforms-list-source::string)? ;
chart-data-label-attlist ::= common-draw-position-attlist (chart:style-name::styleNameRef)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? (text:main-entry::boolean)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? (draw:style-name::styleNameRef)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
table-database-range-attlist ::= (table:name::string)? (table:is-selection::boolean)? (table:on-update-keep-styles::boolean)? (table:on-update-keep-size::boolean)? (table:has-persistent-data::boolean)? (table:orientation::("column" | "row"))? (table:contains-header::boolean)? (table:display-filter-buttons::boolean)? table:target-range-address::cellRangeAddress (table:refresh-delay::boolean)? ;
common-spin-button ::= (form:spin-button::boolean)? ;
db-show-deleted ::= (db:show-deleted::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
db-key-column-attlist ::= (db:name::string)? (db:related-column-name::string)? ;
db-query-collection-attlist ::= ε ;
common-draw-data-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
db-table-definition ::= db:table-definition::(common-db-table-name-attlist db-table-definition-attlist db-column-definitions db-keys? db-indices?) ;
db-forms ::= db:forms::(db-forms-attlist (db-component | db-component-collection)*) ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger table:value::(string | double) table:operator::string (table:case-sensitive::string)? (table:data-type::("text" | "number"))? ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
db-table-include-filter ::= db:table-include-filter::(db-table-include-filter-attlist db-table-filter-pattern+) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? (form:current-value::date)? (form:min-value::date)? (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
presentation-play ::= presentation:play::presentation-play-attlist ;
states ::= "unchecked" | "checked" | "unknown" ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
db-connection-data ::= db:connection-data::(db-connection-data-attlist db-database-description | db-connection-resource db-login?) ;
table-table-cell-range-source-attlist ::= table:name::string table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::angle)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell ;
text-bookmark ::= text:bookmark::text-bookmark-attlist ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::(common-ref-format-values | "category-and-value" | "caption" | "value"))? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-bookmark-attlist ::= text:name::string xml-id? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean table:data-field::string table:member-count::nonNegativeInteger table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
text-id ::= text:id::string ;
common-db-object-description ::= (db:description::string)? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
style-page-layout-content ::= style-page-layout-properties? style-header-style? style-footer-style? ;
draw-object-ole-attlist ::= (draw:class-id::string)? xml-id? ;
db-index-attlist ::= db:name::string (db:catalog-name::string)? (db:is-unique::boolean)? (db:is-clustered::boolean)? ;
db-local-socket-name ::= (db:local-socket::string)? ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
text-bookmark-start ::= text:bookmark-start::text-bookmark-start-attlist ;
table-label-range ::= table:label-range::table-label-range-attlist ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist common-linked-cell ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
duration ::= string() ;
common-in-content-meta-attlist ::= xhtml:about::URIorSafeCURIE xhtml:property::CURIEs common-meta-literal-attlist ;
office-text-attlist ::= (text:global::boolean)? (text:use-soft-page-breaks::boolean)? ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound" | "last-visited-page") (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:start-scale::percent)? (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onRequest")?)? (presentation:verb::nonNegativeInteger)? ;
db-table-exclude-filter-attlist ::= ε ;
office-chart-content-epilogue ::= table-functions ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? (draw:corner-radius::nonNegativeLength)? (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? (xml-id (text:id::NCName)?)? ;
tab-cycles ::= "records" | "current" | "page" ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
draw-circle ::= draw:circle::((draw-circle-attlist common-draw-circle-ellipse-pos-attlist) | (common-draw-position-attlist common-draw-size-attlist) common-draw-circle-ellipse-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
coordinate ::= length ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
db-schema-definition ::= db:schema-definition::(db-schema-definition-attlist db-table-definitions) ;
text-outline-level-style-attlist ::= text:level::positiveInteger (text:style-name::styleNameRef)? common-num-format-attlist common-num-format-prefix-suffix-attlist (text:display-levels::positiveInteger)? (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? (anim:formula::string)? common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= table:name::string table:first-row-start-column::rowOrCol table:first-row-end-column::rowOrCol table:last-row-start-column::rowOrCol table:last-row-end-column::rowOrCol ;
db-delimiter-attlist ::= (db:field::string)? (db:string::string)? (db:decimal::string)? (db:thousand::string)? ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
presentation-settings-attlist ::= (presentation:start-page::string)? (presentation:show::string)? (presentation:full-screen::boolean)? (presentation:endless::boolean)? (presentation:pause::duration)? (presentation:show-logo::boolean)? (presentation:force-manual::boolean)? (presentation:mouse-visible::boolean)? (presentation:mouse-as-pen::boolean)? (presentation:start-with-navigator::boolean)? (presentation:animations::("enabled" | "disabled"))? (presentation:transition-on-click::("enabled" | "disabled"))? (presentation:stay-on-top::boolean)? (presentation:show-end-of-presentation-slide::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-object-index ::= text:object-index::(common-section-attlist text-object-index-source text-index-body) ;
office-document-common-attrs ::= office:version::"1.2" (grddl:transformation::(anyIRI*))? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
db-indices ::= db:indices::(db-indices-attlist db-index+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
db-login-attlist ::= ((db:user-name::string) | (db:use-system-user::boolean))? (db:is-password-required::boolean)? (db:login-timeout::positiveInteger)? ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? (table:condition-source::("self" | "cell-range"))? (table:condition-source-range-address::cellRangeAddress)? (table:display-duplicates::boolean)? ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
shape-instance ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types text:style-name::styleNameRef ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string)?) ;
style-map-attlist ::= style:condition::string style:apply-style-name::styleNameRef (style:base-cell-address::cellAddress)? ;
table-desc ::= table:desc::string() ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? (table:target-range-address::cellRangeAddress)? (table:case-sensitive::boolean)? (table:language::languageCode)? (table:country::countryCode)? (table:script::scriptCode)? (table:rfc-language-tag::language)? (table:algorithm::string)? (table:embedded-number-behavior::("alpha-numeric" | "integer" | "double"))? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? (table:protection-key-digest-algorithm::anyIRI)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
db-column-definitions-attlist ::= ε ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
table-filter-condition ::= table:filter-condition::(table-filter-condition-attlist table-filter-set-item*) ;
text-soft-page-break ::= text:soft-page-break::ε ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
form-form-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?)? (office:target-frame::targetFrameName)? (form:method::("get" | "post" | string))? (form:enctype::string)? (form:allow-deletes::boolean)? (form:allow-inserts::boolean)? (form:allow-updates::boolean)? (form:apply-filter::boolean)? (form:command-type::("table" | "query" | "command"))? (form:command::string)? (form:datasource::(anyIRI | string))? (form:master-fields::string)? (form:detail-fields::string)? (form:escape-processing::boolean)? (form:filter::string)? (form:ignore-result::boolean)? (form:navigation-mode::navigation)? (form:order::string)? (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger (text:restart-numbering::boolean)? (text:start-value::nonNegativeInteger)? (text:is-list-header::boolean)? ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) table:order::("ascending" | "descending") ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger svg:x::(distance | percent) svg:y::(distance | percent) (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyIRI)? (anim:audio-level::double)? ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? draw-layer-set? office-forms? shape* animation-element? presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? style:page-layout-name::styleNameRef (draw:style-name::styleNameRef)? ;
text-index-title ::= text:index-title::(common-section-attlist index-content-main*) ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? table:direction::("from-another-table" | "to-another-table" | "from-same-table") (table:contains-error::boolean)? ;
table-null-date ::= table:null-date::((table:value-type::"date")? (table:date-value::date)?) ;
style-master-page-attlist ::= style:name::styleName (style:display-name::string)? style:page-layout-name::styleNameRef (draw:style-name::styleNameRef)? (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(common-section-attlist text-user-index-source text-index-body) ;
db-application-connection-settings ::= db:application-connection-settings::(db-application-connection-settings-attlist db-table-filter? db-table-type-filter? db-data-source-settings?) ;
points ::= string() ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
table-database-source-table-attlist ::= table:database-name::string table:database-table-name::string ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
db-driver-settings ::= db:driver-settings::(db-driver-settings-attlist db-auto-increment? db-delimiter? db-character-set? db-table-settings?) ;
db-application-connection-settings-attlist ::= (db:is-table-name-length-limited::boolean)? (db:enable-sql92-check::boolean)? (db:append-table-alias-name::boolean)? (db:ignore-driver-privileges::boolean)? (db:boolean-comparison-mode::("equal-integer" | "is-boolean" | "equal-boolean" | "equal-use-only-zero"))? (db:use-catalog::boolean)? (db:max-row-count::integer)? (db:suppress-version-columns::boolean)? ;
db-keys-attlist ::= ε ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
paragraph-content-or-hyperlink ::= paragraph-content | text-a ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
for ::= (form:for::string)? ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
text-hidden-text-attlist ::= text:condition::string text:string-value::string (text:is-hidden::boolean)? ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
script-event-listener-attlist ::= script:event-name::string script:language::string (script:macro-name::string) | (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:delay::duration)? (presentation:start-scale::percent)? (presentation:path-id::string)? ;
style-columns-attlist ::= fo:column-count::positiveInteger (fo:column-gap::length)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
anim-iterate-attlist ::= common-anim-target-attlist (anim:iterate-type::string)? (anim:iterate-interval::duration)? ;
db-is-first-row-header-line ::= (db:is-first-row-header-line::boolean)? ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName (draw:display-name::string)? (svg:width::length)? (svg:height::length)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-header-decl-attlist ::= presentation:name::string ;
common-background-transparency-attlist ::= (style:background-transparency::zeroToHundredPercent)? ;
office-dde-source-attlist ::= (office:name::string)? (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-meta-data ::= (meta:generator::string) | (dc:title::string) | (dc:description::string) | (dc:subject::string) | (meta:keyword::string) | (meta:initial-creator::string) | dc-creator | (meta:printed-by::string) | (meta:creation-date::dateTime) | dc-date | (meta:print-date::dateTime) | (meta:template::(xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?)) | (meta:auto-reload::((xlink:type::"simple" xlink:href::anyIRI (xlink:show::"replace")? (xlink:actuate::"onLoad")?)? (meta:delay::duration)?)) | (meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)) | (dc:language::language) | (meta:editing-cycles::nonNegativeInteger) | (meta:editing-duration::duration) | (meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (meta:frame-count::nonNegativeInteger)? (meta:sentence-count::nonNegativeInteger)? (meta:syllable-count::nonNegativeInteger)? (meta:non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?)) | (meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string())) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
common-draw-points-attlist ::= draw:points::points ;
common-ref-format-values ::= "page" | "chapter" | "direction" | "text" ;
db-column-definition ::= db:column-definition::(db-column-definition-attlist common-db-default-value) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellRangeAddressList)? common-draw-position-attlist (chart:style-name::styleNameRef)? ;
db-database-description ::= db:database-description::(db-database-description-attlist db-file-based-database | db-server-database) ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell ;
text-illustration-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-caption::boolean)? (text:caption-sequence-name::string)? (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= (text:reference-format::common-ref-format-values)? text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
style-default-page-layout ::= style:default-page-layout::style-page-layout-content ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) table:step::double table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
text-list-style-attr ::= style:name::styleName (style:display-name::string)? (text:consecutive-numbering::boolean)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
target-location ::= (xlink:href::anyIRI)? ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
office-image-content-main ::= draw-frame ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
db-table-presentation ::= db:table-representation::(db-table-presentation-attlist common-db-table-name-attlist common-db-object-title common-db-object-description common-db-table-style-name db-order-statement? db-filter-statement? db-columns?) ;
office-binary-data ::= office:binary-data::base64Binary ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-time-manip-attlist ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
chart-equation ::= chart:equation::(chart-equation-attlist text-p?) ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type common-linked-cell common-source-cell-range (form:auto-complete::boolean)? ;
text-database-next-attlist ::= common-field-database-table (text:condition::string)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
table-filter-set-item ::= table:filter-set-item::(table:value::string) ;
db-data-source-settings-attlist ::= ε ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
db-component-collection-attlist ::= ε ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell common-repeat common-delay-for-repeat (form:max-value::integer)? (form:min-value::integer)? (form:step-size::positiveInteger)? (form:page-step-size::positiveInteger)? (form:orientation::("horizontal" | "vertical"))? ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF draw:color::color ;
percent ::= string() ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
dc-date ::= dc:date::dateTime ;
db-table-setting-attlist ::= db-is-first-row-header-line db-show-deleted ;
text-database-row-select-attlist ::= common-field-database-table (text:condition::string)? (text:row-number::nonNegativeInteger)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? (draw:display-name::string)? draw:style::gradient-style (draw:cx::percent)? (draw:cy::percent)? (draw:angle::angle)? (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? text:bullet-char::character common-num-format-prefix-suffix-attlist (text:bullet-relative-size::percent)? ;
boolean ::= "true" | "false" ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string (table:acceptance-state::("accepted" | "rejected" | "pending"))? (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::string)? ;
chart-chart-attlist ::= chart:class::namespacedToken common-draw-size-attlist (chart:column-mapping::string)? (chart:row-mapping::string)? (chart:style-name::styleNameRef)? (xlink:type::"simple" xlink:href::anyIRI)? xml-id? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
style-table-cell-properties-elements ::= style-background-image ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
draw-text ::= (text-p | text-list)* ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
db-forms-attlist ::= ε ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger text:style-name::styleNameRef ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
db-table-filter-pattern ::= db:table-filter-pattern::(db-table-filter-pattern-attlist string) ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)? (office:name::string)? (draw:nohref::"nohref")? ;
text-bibliography ::= text:bibliography::(common-section-attlist text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
style-page-layout-attlist ::= style:name::styleName (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
db-table-presentations-attlist ::= ε ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? (number:min-denominator-digits::integer)? (number:denominator-value::integer)? ;
distance ::= length ;
draw-applet-attlist ::= (draw:code::string)? (draw:object::string)? (draw:archive::string)? (draw:may-script::boolean)? xml-id? ;
common-section-attlist ::= (text:style-name::styleNameRef)? text:name::string (text:protected::boolean)? (text:protection-key::string)? (text:protection-key-digest-algorithm::anyIRI)? xml-id? ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string)? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:table::integer)? (table:multi-deletion-spanned::integer)? ;
office-drawing-content-prelude ::= text-decls table-decls ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? (table:table-background::boolean)? common-text-anchor-attlist ;
double ::= string() ;
style-graphic-properties-elements ::= text-list-style? style-background-image style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content-or-hyperlink*) ;
style-tab-stop-attlist ::= style:position::length ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) (style:leader-type::lineType)? (style:leader-style::lineStyle)? (style:leader-width::lineWidth)? (style:leader-color::("font-color" | color))? (style:leader-text::character)? (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content-or-hyperlink*) ;
text-bookmark-ref-content ::= (text:reference-format::(common-ref-format-values | "number-no-superior" | "number-all-superior" | "number"))? ;
draw-control-attlist ::= draw:control::IDREF ;
text-outline-style ::= text:outline-style::(text-outline-style-attr text-outline-level-style+) ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? (draw:handle-mirror-horizontal::boolean)? (draw:handle-switched::boolean)? draw:handle-position::string (draw:handle-range-x-minimum::string)? (draw:handle-range-x-maximum::string)? (draw:handle-range-y-minimum::string)? (draw:handle-range-y-maximum::string)? (draw:handle-polar::string)? (draw:handle-radius-range-minimum::string)? (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string presentation:pages::string ;
text-a ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? (table:case-sensitive::boolean)? (table:page-breaks-on-group-change::boolean)? ;
style-list-level-properties-elements ::= style-list-level-label-alignment ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? (form:tab-stop::boolean)? ;
common-form-control-content ::= form-properties? office-event-listeners? ;
db-key-columns ::= db:key-columns::(db-key-columns-attlist db-key-column+) ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
text-outline-style-attr ::= style:name::styleName ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyIRI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
number-hours ::= number:hours::number-hours-attlist ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
draw-image-attlist ::= (draw:filter-name::string)? xml-id? ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist (form:multi-line::boolean)? ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
db-reports ::= db:reports::(db-reports-attlist (db-component | db-component-collection)*) ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddressList)?) ;
db-schema-definition-attlist ::= ε ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) table:source-cell-range-addresses::cellRangeAddressList table:target-cell-address::cellAddress (table:use-labels::("none" | "row" | "column" | "both"))? (table:link-to-source-data::boolean)? ;
db-component-collection ::= db:component-collection::(db-component-collection-attlist common-db-object-name common-db-object-title common-db-object-description (db-component | db-component-collection)*) ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? dr3d:direction::vector3D (dr3d:enabled::boolean)? (dr3d:specular::boolean)? ;
language ::= string() ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
db-data-source-setting ::= db:data-source-setting::(db-data-source-setting-attlist db-data-source-setting-value+) ;
presentation-date-time-decl-attlist ::= presentation:name::string presentation:source::("fixed" | "current-date") (style:data-style-name::styleNameRef)? ;
db-table-type-filter-attlist ::= ε ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist common-repeat common-delay-for-repeat (form:default-button::boolean)? (form:toggle::boolean)? (form:focus-on-click::boolean)? (form:xforms-submission::string)? ;
chart-wall-attlist ::= (svg:width::length)? (chart:style-name::styleNameRef)? ;
db-indices-attlist ::= ε ;
meta-date-string ::= meta:date-string::string ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve* chart-error-indicator* chart-data-point* chart-data-label?) ;
db-table-filter ::= db:table-filter::(db-table-filter-attlist db-table-include-filter? db-table-exclude-filter?) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
style-header-footer-properties-elements ::= style-background-image ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
common-field-description-attlist ::= (text:description::string)? ;
db-table-filter-attlist ::= ε ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddressList)? (chart:label-cell-address::cellRangeAddressList)? (chart:class::namespacedToken)? (chart:attached-axis::string)? (chart:style-name::styleNameRef)? xml-id? ;
text-section-attlist ::= common-section-attlist (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
db-data-source-setting-value ::= db:data-source-setting-value::(db-data-source-setting-value-attlist string) ;
db-key-column ::= db:key-column::db-key-column-attlist ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
character ::= string() ;
db-data-source-setting-value-attlist ::= ε ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string table:sql-statement::string (table:parse-sql-statement::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content-strict ;
text-alphabetical-index ::= text:alphabetical-index::(common-section-attlist text-alphabetical-index-source text-index-body) ;
paragraph-content ::= string() | (text:s::((text:c::nonNegativeInteger)?)) | (text:tab::text-tab-attr) | (text:line-break::ε) | text-soft-page-break | (text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content-or-hyperlink*)) | (text:meta::(text-meta-attlist paragraph-content-or-hyperlink*)) | text-bookmark | text-bookmark-start | text-bookmark-end | (text:reference-mark::(text:name::string)) | (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) | (text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*))) | (text:ruby::((text:style-name::styleNameRef)? text:ruby-base::(paragraph-content-or-hyperlink*) text:ruby-text::((text:style-name::styleNameRef)? string()))) | office-annotation | office-annotation-end | change-marks | shape | (text:date::(text-date-attlist string())) | (text:time::(text-time-attlist string())) | (text:page-number::(text-page-number-attlist string())) | (text:page-continuation::(text-page-continuation-attlist string())) | (text:sender-firstname::(common-field-fixed-attlist string())) | (text:sender-lastname::(common-field-fixed-attlist string())) | (text:sender-initials::(common-field-fixed-attlist string())) | (text:sender-title::(common-field-fixed-attlist string())) | (text:sender-position::(common-field-fixed-attlist string())) | (text:sender-email::(common-field-fixed-attlist string())) | (text:sender-phone-private::(common-field-fixed-attlist string())) | (text:sender-fax::(common-field-fixed-attlist string())) | (text:sender-company::(common-field-fixed-attlist string())) | (text:sender-phone-work::(common-field-fixed-attlist string())) | (text:sender-street::(common-field-fixed-attlist string())) | (text:sender-city::(common-field-fixed-attlist string())) | (text:sender-postal-code::(common-field-fixed-attlist string())) | (text:sender-country::(common-field-fixed-attlist string())) | (text:sender-state-or-province::(common-field-fixed-attlist string())) | (text:author-name::(common-field-fixed-attlist string())) | (text:author-initials::(common-field-fixed-attlist string())) | (text:chapter::(text-chapter-attlist string())) | (text:file-name::(text-file-name-attlist string())) | (text:template-name::(text-template-name-attlist string())) | (text:sheet-name::string()) | (text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string())) | (text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string())) | (text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:text-input::(common-field-description-attlist string())) | (text:initial-creator::(common-field-fixed-attlist string())) | (text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string())) | (text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string())) | (text:description::(common-field-fixed-attlist string())) | (text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string())) | (text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:printed-by::(common-field-fixed-attlist string())) | (text:title::(common-field-fixed-attlist string())) | (text:subject::(common-field-fixed-attlist string())) | (text:keywords::(common-field-fixed-attlist string())) | (text:editing-cycles::(common-field-fixed-attlist string())) | (text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string())) | (text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:creator::(common-field-fixed-attlist string())) | (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) | (text:database-display::(text-database-display-attlist string())) | (text:database-next::text-database-next-attlist) | (text:database-row-select::text-database-row-select-attlist) | (text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string())) | (text:database-name::(common-field-database-table string())) | (text:page-variable-set::(text-set-page-variable-attlist string())) | (text:page-variable-get::(text-get-page-variable-attlist string())) | (text:placeholder::(text-placeholder-attlist string())) | (text:conditional-text::(text-conditional-text-attlist string())) | (text:hidden-text::(text-hidden-text-attlist string())) | (text:reference-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:note-ref::(text-common-ref-content text-note-ref-content)) | (text:sequence-ref::(text-common-ref-content text-sequence-ref-content)) | (text:script::((xlink:type::"simple" xlink:href::anyIRI) | string() (script:language::string)?)) | (text:execute-macro::((text:name::string)? office-event-listeners? string())) | (text:hidden-paragraph::(text-hidden-paragraph-attlist string())) | (text:dde-connection::(text:connection-name::string string())) | (text:measure::(text:kind::("value" | "unit" | "gap") string())) | (text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:meta-field::(text-meta-field-attlist paragraph-content-or-hyperlink*)) | (text:toc-mark-start::text-toc-mark-start-attrs) | (text:toc-mark-end::text-id) | (text:toc-mark::(text:string-value::string text-outline-level)) | (text:user-index-mark-start::(text-id text-outline-level text-index-name)) | (text:user-index-mark-end::text-id) | (text:user-index-mark::(text:string-value::string text-outline-level text-index-name)) | (text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs)) | (text:alphabetical-index-mark-end::text-id) | (text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs)) | (text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string())) | (presentation:header::ε) | (presentation:footer::ε) | (presentation:date-time::ε) ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
db-table-definition-attlist ::= (db:type::string)? ;
common-db-table-style-name ::= (db:style-name::styleNameRef)? (db:default-row-style-name::styleNameRef)? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? (chart:three-dimensional::boolean)? (chart:deep::boolean)? (chart:right-angled-axes::boolean)? (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyIRI)) | ε (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? (chart:sort-by-x-values::boolean)? (chart:vertical::boolean)? (chart:connect-bars::boolean)? (chart:gap-width::integer)? (chart:overlap::integer)? (chart:group-bars-per-axis::boolean)? (chart:japanese-candle-stick::boolean)? (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? (chart:pie-offset::nonNegativeInteger)? (chart:angle-offset::angle)? (chart:hole-size::percent)? (chart:lines::boolean)? (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? (chart:stacked::boolean)? (chart:percentage::boolean)? (chart:treat-empty-cells::("use-zero" | "leave-gap" | "ignore"))? (chart:link-data-style-to-source::boolean)? (chart:logarithmic::boolean)? (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? (chart:reverse-direction::boolean)? (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? common-style-direction-attlist common-rotation-angle-attlist (chart:data-label-number::("none" | "value" | "percentage" | "value-and-percentage"))? (chart:data-label-text::boolean)? (chart:data-label-symbol::boolean)? (chart:label-separator::text-p)? (chart:label-position::labelPositions)? (chart:label-position-negative::labelPositions)? (chart:visible::boolean)? (chart:auto-position::boolean)? (chart:auto-size::boolean)? (chart:mean-value::boolean)? (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant" | "standard-error" | "cell-range"))? (chart:error-percentage::double)? (chart:error-margin::double)? (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? (chart:error-lower-range::cellRangeAddressList)? (chart:error-upper-range::cellRangeAddressList)? (chart:series-source::("columns" | "rows"))? (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? (chart:axis-position::("start" | "end" | double))? (chart:axis-label-position::("near-axis" | "near-axis-other-side" | "outside-start" | "outside-end"))? (chart:tick-mark-position::("at-labels" | "at-axis" | "at-labels-and-axis"))? (chart:include-hidden-cells::boolean)? ;
style-page-layout-properties-elements ::= style-background-image style-columns style-footnote-sep ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? (text:copy-outline-levels::boolean)? text:index-name::string ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? common-num-format-attlist? (text:style-name::styleNameRef)? (text:increment::nonNegativeInteger)? (text:number-position::("left" | "right" | "inner" | "outer"))? (text:offset::nonNegativeLength)? (text:count-empty-lines::boolean)? (text:count-in-text-boxes::boolean)? (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
office-image-attlist ::= ε ;
db-file-based-database ::= db:file-based-database::db-file-based-database-attlist ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string)? (svg:units-per-em::integer)? (svg:panose-1::string)? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string)? (svg:bbox::string)? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? style:name::string (style:font-adornments::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-pitch::fontPitch)? (style:font-charset::textEncoding)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
office-script-attlist ::= script:language::string ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content-strict ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
length ::= string() ;
style-column-attlist ::= style:rel-width::relativeLength (fo:start-indent::length)? (fo:end-indent::length)? (fo:space-before::length)? (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? (anim:sub-item::string)? ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
db-index-columns ::= db:index-columns::(db-index-column+) ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε common-draw-position-attlist (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε (chart:style-name::styleNameRef)? ;
time ::= string() ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
db-index ::= db:index::(db-index-attlist db-index-columns+) ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist (chart:style-name::styleNameRef)? (table:cell-range-address::cellRangeAddressList)? (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? dr3d-scene-attlist common-dr3d-transform-attlist xml-id? ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell common-spin-button common-repeat common-delay-for-repeat (form:max-value::string)? (form:min-value::string)? (form:validation::boolean)? ;
db-update-table ::= db:update-table::common-db-table-name-attlist ;
db-query ::= db:query::(db-query-attlist common-db-object-name common-db-object-title common-db-object-description common-db-table-style-name db-order-statement? db-filter-statement? db-columns? db-update-table?) ;
style-section-properties ::= style:section-properties::style-section-properties-content-strict ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-current-value-attlist ::= (form:current-value::string)? ;
draw-equation-attlist ::= (draw:name::string)? (draw:formula::string)? ;
common-draw-circle-ellipse-pos-attlist ::= svg:cx::coordinate svg:cy::coordinate ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? (text:style-override::styleNameRef)? xml-id? ;
office-spreadsheet-content-epilogue ::= table-functions ;
selected ::= (form:selected::boolean)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
xml-id ::= xml:id::ID ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? xml-id? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
db-table-type ::= db:table-type::(db-table-type-attlist string) ;
text-sequence-decl-attlist ::= common-field-name-attlist text:display-outline-level::nonNegativeInteger (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string)?) ;
bound-column ::= (form:bound-column::string)? ;
text-table-of-content ::= text:table-of-content::(common-section-attlist text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
form-item ::= form:item::(form-item-attlist string()) ;
common-meta-literal-attlist ::= (xhtml:datatype::CURIE)? (xhtml:content::string)? ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
draw-circle-attlist ::= svg:r::length ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
db-table-definitions-attlist ::= ε ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
db-order-statement ::= db:order-statement::(db-command db-apply-command) ;
db-table-type-filter ::= db:table-type-filter::(db-table-type-filter-attlist db-table-type*) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist ;
number-minutes ::= number:minutes::number-minutes-attlist ;
db-table-presentation-attlist ::= ε ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
style-paragraph-properties-elements ::= style-tab-stops style-drop-cap style-background-image ;
text-bookmark-end-attlist ::= text:name::string ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? (style:text-align-source::("fix" | "value-type"))? common-style-direction-attlist (style:glyph-orientation-vertical::("auto" | "0" | "0deg" | "0rad" | "0grad"))? common-writing-mode-attlist common-shadow-attlist common-background-color-attlist common-border-attlist (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? common-border-line-width-attlist common-padding-attlist (fo:wrap-option::("no-wrap" | "wrap"))? common-rotation-angle-attlist (style:rotation-align::("none" | "bottom" | "top" | "center"))? (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? (style:print-content::boolean)? (style:decimal-places::nonNegativeInteger)? (style:repeat-content::boolean)? (style:shrink-to-fit::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? (chart:style-name::styleNameRef)? ;
db-connection-resource ::= db:connection-resource::db-connection-resource-attlist ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
any-number ::= number-number | number-scientific-number | number-fraction ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
text-section ::= text:section::(text-section-attlist text-section-source | text-section-source-dde | ε text-content*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? common-num-format-attlist common-num-format-prefix-suffix-attlist (text:display-levels::positiveInteger)? (text:start-value::positiveInteger)? ;
db-connection-resource-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")? ;
db-data-source-setting-types ::= "boolean" | "short" | "int" | "long" | "double" | "string" ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-spreadsheet-objects::boolean)? (text:use-math-objects::boolean)? (text:use-draw-objects::boolean)? (text:use-chart-objects::boolean)? (text:use-other-objects::boolean)? ;
chart-dimension ::= "x" | "y" | "z" ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? (table:matrix-covered::boolean)? (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
style-region-center ::= style:region-center::region-content ;
db-query-collection ::= db:query-collection::(db-query-collection-attlist common-db-object-name common-db-object-title common-db-object-description (db-query | db-query-collection)*) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
db-host-and-port ::= db:hostname::string (db:port::positiveInteger)? ;
form-time-attlist ::= (form:value::time)? (form:current-value::time)? (form:min-value::time)? (form:max-value::time)? ;
table-operation ::= table:operation::table-operation-attlist ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
chart-axis-attlist ::= chart:dimension::chart-dimension (chart:name::string)? (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
draw-a ::= draw:a::(draw-a-attlist shape-instance) ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
navigation ::= "none" | "current" | "parent" ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
list-linkage-type ::= (form:list-linkage-type::("selection" | "selection-indices"))? ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= (text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?)) | (text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?)) | (text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?)) ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:default-cell-style-name::styleNameRef)? (table:visibility::table-visibility-value)? xml-id? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-content) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content-strict ;
common-value-attlist ::= (form:value::string)? ;
db-auto-increment ::= db:auto-increment::db-auto-increment-attlist ;
text-list-header ::= text:list-header::(text-list-header-attr text-list-item-content) ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? style:width::length (style:height::zeroToHundredPercent)? (style:vertical-align::("top" | "middle" | "bottom"))? (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
db-file-based-database-attlist ::= xlink:type::"simple" xlink:href::anyIRI db:media-type::string (db:extension::string)? ;
common-form-control-attlist ::= (form:name::string)? (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? ;
db-keys ::= db:keys::(db-keys-attlist db-key+) ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
db-connection-data-attlist ::= ε ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::(cellRangeAddressList | string))? xml-id? ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? (form:apply-design-mode::boolean)? ;
draw-plugin-attlist ::= (draw:mime-type::string)? xml-id? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
db-driver-settings-attlist ::= db-show-deleted (db:system-driver-settings::string)? (db:base-dn::string)? db-is-first-row-header-line (db:parameter-name-substitution::boolean)? ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string (table:condition::string)? (table:base-cell-address::cellAddress)? (table:allow-empty-cell::boolean)? (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string)? ;
draw-rect-attlist ::= ((draw:corner-radius::nonNegativeLength)?) | ((svg:rx::nonNegativeLength)? (svg:ry::nonNegativeLength)?) ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? (text:use-outline-level::boolean)? (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:index-scope::("document" | "chapter"))? (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content-strict ;
draw-equation ::= draw:equation::draw-equation-attlist ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= (anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist)) | (anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist)) | (anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist)) | (anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist)) | (anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist)) | (anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist)) | (anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*)) | (anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*)) | (anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*)) | (anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist)) | (anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string anim:value::string))*)) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
svg-title ::= svg:title::string() ;
common-db-object-name ::= db:name::string ;
style-section-properties-attlist ::= common-background-color-attlist common-horizontal-margin-attlist (style:protect::boolean)? common-editable-attlist (text:dont-balance-text-columns::boolean)? common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
number-boolean ::= number:boolean::ε ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList table:is-active::boolean (table:display-border::boolean)? (table:border-color::color)? (table:copy-back::boolean)? (table:copy-styles::boolean)? (table:copy-formulas::boolean)? (table:comment::string)? (table:protected::boolean)? ;
db-index-column ::= db:index-column::db-index-column-attlist ;
common-control-id-attlist ::= xml-id (form:id::NCName)? ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
office-text-content-epilogue ::= table-functions ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddressList)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
db-key-columns-attlist ::= ε ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
db-columns ::= db:columns::(db-columns-attlist db-column+) ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content-strict ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? common-field-fixed-attlist ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
db-database-description-attlist ::= ε ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? common-num-format-attlist? common-num-format-prefix-suffix-attlist (style:paper-tray-name::("default" | string))? (style:print-orientation::("portrait" | "landscape"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist (style:register-truth-ref-style-name::styleNameRef)? (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? (style:print-page-order::("ttb" | "ltr"))? (style:first-page-number::(positiveInteger | "continue"))? (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? (style:footnote-max-height::length)? common-writing-mode-attlist (style:layout-grid-mode::("none" | "line" | "both"))? (style:layout-grid-standard-mode::boolean)? (style:layout-grid-base-height::length)? (style:layout-grid-ruby-height::length)? (style:layout-grid-lines::positiveInteger)? (style:layout-grid-base-width::length)? (style:layout-grid-color::color)? (style:layout-grid-ruby-below::boolean)? (style:layout-grid-print::boolean)? (style:layout-grid-display::boolean)? (style:layout-grid-snap-to::boolean)? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content-strict ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
db-columns-attlist ::= ε ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? (style:line-height-at-least::nonNegativeLength)? (style:line-spacing::length)? (style:font-independent-line-spacing::boolean)? common-text-align (fo:text-align-last::("start" | "center" | "justify"))? (style:justify-single-word::boolean)? (fo:keep-together::("auto" | "always"))? (fo:widows::nonNegativeInteger)? (fo:orphans::nonNegativeInteger)? (style:tab-stop-distance::nonNegativeLength)? (fo:hyphenation-keep::("auto" | "page"))? (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? (style:register-true::boolean)? common-horizontal-margin-attlist (fo:text-indent::(length | percent))? (style:auto-text-indent::boolean)? common-vertical-margin-attlist common-margin-attlist common-break-attlist common-background-color-attlist common-border-attlist common-border-line-width-attlist (style:join-border::boolean)? common-padding-attlist common-shadow-attlist common-keep-with-next-attlist (text:number-lines::boolean)? (text:line-number::nonNegativeInteger)? (style:text-autospace::("none" | "ideograph-alpha"))? (style:punctuation-wrap::("simple" | "hanging"))? (style:line-break::("normal" | "strict"))? (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? common-writing-mode-attlist (style:writing-mode-automatic::boolean)? (style:snap-to-layout-grid::boolean)? common-page-number-attlist common-background-transparency-attlist ;
table-background-attlist ::= table:style-name::styleNameRef ;
office-presentation-attlist ::= ε ;
draw-layer-attlist ::= draw:name::string (draw:protected::boolean)? (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist svg-title? svg-desc? draw-layer-set? office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
db-server-database ::= db:server-database::db-server-database-attlist ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(common-section-attlist text-table-index-source text-index-body) ;
office-database ::= office:database::(db-data-source db-forms? db-reports? db-queries? db-table-presentations? db-schema-definition?) ;
draw-hatch-attlist ::= draw:name::styleName (draw:display-name::string)? draw:style::("single" | "double" | "triple") (draw:color::color)? (draw:distance::length)? (draw:rotation::angle)? ;
db-server-database-attlist ::= db:type::namespacedToken db-host-and-port | db-local-socket-name (db:database-name::string)? ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
db-reports-attlist ::= ε ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:count::positiveInteger)? (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? (text:numbered-entries::boolean)? (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (fo:script::scriptCode)? (style:rfc-language-tag::language)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
db-login ::= db:login::db-login-attlist ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:content-validation-name::string)? (table:formula::string)? common-value-and-type-attlist? (table:protect::boolean)? (table:protected::boolean)? xml-id? common-in-content-meta-attlist? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content-strict ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
common-delay-for-repeat ::= (form:delay-for-repeat::duration)? ;
draw-ellipse-attlist ::= svg:rx::length svg:ry::length ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
db-data-types ::= "bit" | "boolean" | "tinyint" | "smallint" | "integer" | "bigint" | "float" | "real" | "double" | "numeric" | "decimal" | "char" | "varchar" | "longvarchar" | "date" | "time" | "timestmp" | "binary" | "varbinary" | "longvarbinary" | "sqlnull" | "other" | "object" | "distinct" | "struct" | "array" | "blob" | "clob" | "ref" ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
style-style-content ::= (style:family::"text" style-text-properties?) | (style:family::"paragraph" style-paragraph-properties? style-text-properties?) | (style:family::"section" style-section-properties?) | (style:family::"ruby" style-ruby-properties?) | (style:family::"table" style-table-properties?) | (style:family::"table-column" style-table-column-properties?) | (style:family::"table-row" style-table-row-properties?) | (style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties?) | (style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties?) | (style:family::"drawing-page" style-drawing-page-properties?) | (style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties?) ;
integer ::= integer() ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
style-table-properties ::= style:table-properties::style-table-properties-content-strict ;
common-field-database-name ::= ((text:database-name::string)?) | form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
style-region-left ::= style:region-left::region-content ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? (table:align::("left" | "center" | "right" | "margins"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-page-number-attlist common-break-attlist common-background-color-attlist common-shadow-attlist common-keep-with-next-attlist (style:may-break-between-rows::boolean)? (table:border-model::("collapsing" | "separating"))? common-writing-mode-attlist (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:ignore-case::boolean)? (text:main-entry-style-name::styleNameRef)? (text:alphabetical-separators::boolean)? (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? (text:use-keys-as-entries::boolean)? (text:capitalize-entries::boolean)? (text:comma-separated::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (fo:script::scriptCode)? (style:rfc-language-tag::language)? (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? (text:continue-numbering::boolean)? (text:continue-list::IDREF)? xml-id? ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
db-queries ::= db:queries::(db-queries-attlist (db-query | db-query-collection)*) ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
common-time-manip-attlist ::= (smil:accelerate::zeroToOneDecimal)? (smil:decelerate::zeroToOneDecimal)? (smil:autoReverse::boolean)? ;
text-numbered-paragraph-attr ::= text:list-id::NCName (text:level::positiveInteger)? (text:style-name::styleNameRef text:continue-numbering::boolean text:start-value::nonNegativeInteger)? xml-id? ;
table-data-pilot-field-attlist ::= table:source-field-name::string (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) (table:is-data-layout-field::string)? (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* style-default-page-layout? text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout* table-table-template*))? ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
table-table ::= table:table::(table-table-attlist table-title? table-desc? table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups table-named-expressions?) ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
db-table-presentations ::= db:table-representations::(db-table-presentations-attlist db-table-presentation*) ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table common-field-data-style-name-attlist text:column-name::string ;
db-table-include-filter-attlist ::= ε ;
text-common-ref-content ::= string() (text:ref-name::string)? ;
db-command ::= db:command::string ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
db-table-filter-pattern-attlist ::= ε ;
table-insertion-cut-off-attlist ::= table:id::string table:position::integer ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? (svg:x1::coordinate svg:y1::coordinate)? (draw:start-shape::IDREF)? (draw:start-glue-point::nonNegativeInteger)? (svg:x2::coordinate svg:y2::coordinate)? (draw:end-shape::IDREF)? (draw:end-glue-point::nonNegativeInteger)? (draw:line-skew::(length (length length?)?))? (svg:d::pathData)? ;
button-type ::= (form:button-type::types)? ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
number-month-attlist ::= (number:textual::boolean)? (number:possessive-form::boolean)? (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::positiveInteger)? (chart:style-name::styleNameRef)? xml-id? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
common-data-style-attlist ::= style:name::styleName (style:display-name::string)? (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? (number:title::string)? (style:volatile::boolean)? (number:transliteration-format::string)? (number:transliteration-language::countryCode)? (number:transliteration-country::countryCode)? (number:transliteration-style::("short" | "medium" | "long"))? ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d* draw-glue-point*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
db-apply-command ::= (db:apply-command::boolean)? ;
image-data ::= (form:image-data::anyIRI)? ;
chart-legend ::= chart:legend::(chart-legend-attlist text-p?) ;
text-section-source-attr ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")?)? (text:section-name::string)? (text:filter-name::string)? ;
angle ::= string() ;
office-annotation-attlist ::= (office:display::boolean)? common-office-annotation-name-attlist? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string)? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? (dr3d:projection::("parallel" | "perspective"))? (dr3d:distance::length)? (dr3d:focal-length::length)? (dr3d:shadow-slant::angle)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (dr3d:ambient-color::color)? (dr3d:lighting-mode::boolean)? ;
db-data-source ::= db:data-source::(db-data-source-attlist db-connection-data db-driver-settings? db-application-connection-settings?) ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? (draw:stroke-dash::styleNameRef)? (draw:stroke-dash-names::styleNameRefs)? (svg:stroke-width::length)? (svg:stroke-color::color)? (draw:marker-start::styleNameRef)? (draw:marker-end::styleNameRef)? (draw:marker-start-width::length)? (draw:marker-end-width::length)? (draw:marker-start-center::boolean)? (draw:marker-end-center::boolean)? (svg:stroke-opacity::(string() | zeroToHundredPercent))? (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none"))? (svg:stroke-linecap::("butt" | "square" | "round"))? (draw:symbol-color::color)? (text:animation::("none" | "scroll" | "alternate" | "slide"))? (text:animation-direction::("left" | "right" | "up" | "down"))? (text:animation-start-inside::boolean)? (text:animation-stop-inside::boolean)? (text:animation-repeat::nonNegativeInteger)? (text:animation-delay::duration)? (text:animation-steps::length)? (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? (draw:fit-to-size::boolean)? (draw:fit-to-contour::boolean)? (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? (fo:wrap-option::("no-wrap" | "wrap"))? (style:shrink-to-fit::boolean)? (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? (draw:color-inversion::boolean)? (draw:luminance::zeroToHundredPercent)? (draw:contrast::percent)? (draw:gamma::percent)? (draw:red::signedZeroToHundredPercent)? (draw:green::signedZeroToHundredPercent)? (draw:blue::signedZeroToHundredPercent)? (draw:image-opacity::zeroToHundredPercent)? (draw:shadow::("visible" | "hidden"))? (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? (draw:shadow-color::color)? (draw:shadow-opacity::zeroToHundredPercent)? (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? (draw:line-distance::distance)? (draw:guide-overhang::length)? (draw:guide-distance::distance)? (draw:start-guide::length)? (draw:end-guide::length)? (draw:placing::("below" | "above"))? (draw:parallel::boolean)? (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? (draw:show-unit::boolean)? (draw:decimal-places::nonNegativeInteger)? (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? (draw:caption-angle-type::("fixed" | "free"))? (draw:caption-angle::angle)? (draw:caption-gap::distance)? (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? (draw:caption-escape::(length | percent))? (draw:caption-line-length::length)? (draw:caption-fit-line-length::boolean)? (dr3d:horizontal-segments::nonNegativeInteger)? (dr3d:vertical-segments::nonNegativeInteger)? (dr3d:edge-rounding::percent)? (dr3d:edge-rounding-mode::("correct" | "attractive"))? (dr3d:back-scale::percent)? (dr3d:depth::length)? (dr3d:backface-culling::("enabled" | "disabled"))? (dr3d:end-angle::angle)? (dr3d:close-front::boolean)? (dr3d:close-back::boolean)? (dr3d:lighting-mode::("standard" | "double-sided"))? (dr3d:normals-kind::("object" | "flat" | "sphere"))? (dr3d:normals-direction::("normal" | "inverse"))? (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? (dr3d:texture-kind::("luminance" | "intensity" | "color"))? (dr3d:texture-filter::("enabled" | "disabled"))? (dr3d:texture-mode::("replace" | "modulate" | "blend"))? (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? (dr3d:shininess::percent)? (dr3d:shadow::("visible" | "hidden"))? common-draw-rel-size-attlist (fo:min-width::(length | percent))? (fo:min-height::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist (style:print-content::boolean)? (style:protect::("none" | (("content" | "position" | "size")+)))? (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? common-vertical-pos-attlist common-vertical-rel-attlist common-text-anchor-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist common-background-transparency-attlist common-editable-attlist (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? (style:wrap-dynamic-threshold::nonNegativeLength)? (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? (style:wrap-contour::boolean)? (style:wrap-contour-mode::("full" | "outside"))? (style:run-through::("foreground" | "background"))? (style:flow-with-text::boolean)? (style:overflow-behavior::("clip" | "auto-create-new-frame"))? (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? (fo:clip::("auto" | clipShape))? (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? common-writing-mode-attlist (draw:frame-display-scrollbar::boolean)? (draw:frame-display-border::boolean)? (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? (draw:draw-aspect::("content" | "thumbnail" | "icon" | "print-view"))? (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
form-property ::= (form:property::(form-property-name form-property-value-and-type-attlist)) | (form:list-property::(form-property-name form-property-type-and-value-list)) ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
draw-param-attlist ::= (draw:name::string)? (draw:value::string)? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? (smil:end::string)? ;
text-a-attlist ::= (office:name::string)? (office:title::string)? xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
db-character-set ::= db:character-set::db-character-set-attlist ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? (draw:fill-color::color)? (draw:secondary-fill-color::color)? (draw:fill-gradient-name::styleNameRef)? (draw:gradient-step-count::nonNegativeInteger)? (draw:fill-hatch-name::styleNameRef)? (draw:fill-hatch-solid::boolean)? (draw:fill-image-name::styleNameRef)? (style:repeat::("no-repeat" | "repeat" | "stretch"))? (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? (draw:tile-repeat-offset::(zeroToHundredPercent "horizontal" | "vertical"))? (draw:opacity::zeroToHundredPercent)? (draw:opacity-name::styleNameRef)? (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? (fo:color::color)? (style:use-window-font-color::boolean)? (style:text-outline::boolean)? (style:text-line-through-type::lineType)? (style:text-line-through-style::lineStyle)? (style:text-line-through-width::lineWidth)? (style:text-line-through-color::("font-color" | color))? (style:text-line-through-text::string)? (style:text-line-through-text-style::styleNameRef)? (style:text-position::(percent | "super" | "sub" percent?))? (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? (style:script-type::("latin" | "asian" | "complex" | "ignore"))? (fo:letter-spacing::(length | "normal"))? (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? (fo:script::scriptCode)? (style:script-asian::scriptCode)? (style:script-complex::scriptCode)? (style:rfc-language-tag::language)? (style:rfc-language-tag-asian::language)? (style:rfc-language-tag-complex::language)? (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? (style:font-relief::("none" | "embossed" | "engraved"))? (fo:text-shadow::shadowType)? (style:text-underline-type::lineType)? (style:text-underline-style::lineStyle)? (style:text-underline-width::lineWidth)? (style:text-underline-color::("font-color" | color))? (style:text-overline-type::lineType)? (style:text-overline-style::lineStyle)? (style:text-overline-width::lineWidth)? (style:text-overline-color::("font-color" | color))? (style:text-overline-mode::lineMode)? (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? (style:text-underline-mode::lineMode)? (style:text-line-through-mode::lineMode)? (style:letter-kerning::boolean)? (style:text-blinking::boolean)? common-background-color-attlist (style:text-combine::("none" | "letters" | "lines"))? (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? (style:text-scale::percent)? (style:text-rotation-angle::angle)? (style:text-rotation-scale::("fixed" | "line-height"))? (fo:hyphenate::boolean)? (fo:hyphenation-remain-char-count::positiveInteger)? (fo:hyphenation-push-char-count::positiveInteger)? (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
text-section-source ::= text:section-source::text-section-source-attr ;
office-document-attrs ::= office:mimetype::string ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") text:outline-level::nonNegativeInteger ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist common-linked-cell (form:current-state::states)? (form:is-tristate::boolean)? (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::string (text:is-hidden::boolean)? ;
text-bookmark-start-attlist ::= text:name::string xml-id? common-in-content-meta-attlist? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
db-table-exclude-filter ::= db:table-exclude-filter::(db-table-exclude-filter-attlist db-table-filter-pattern+) ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
presentation-decls ::= presentation-decl* ;
xforms-model ::= xforms:model::anyAttListOrElements ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
db-key ::= db:key::(db-key-attlist db-key-columns+) ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
table-background ::= table:background::table-background-attlist ;
table-linked-source-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (table:filter-name::string)? (table:filter-options::string)? (table:refresh-delay::duration)? ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? (presentation:use-footer-name::string)? (presentation:use-date-time-name::string)? ;
style-ruby-properties-elements ::= ε ;
db-table-type-attlist ::= ε ;
types ::= "submit" | "reset" | "push" | "url" ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
db-column-attlist ::= (db:visible::boolean)? (db:style-name::styleNameRef)? (db:default-cell-style-name::styleNameRef)? ;
draw-opacity-attlist ::= (draw:start::zeroToHundredPercent)? (draw:end::zeroToHundredPercent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
db-table-settings ::= db:table-settings::(db-table-setting*) ;
current-selected ::= (form:current-selected::boolean)? ;
office-annotation-end ::= office:annotation-end::office-annotation-end-attlist ;
common-db-table-name-attlist ::= db:name::string (db:catalog-name::string)? (db:schema-name::string)? ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? (form:current-value::double)? (form:min-value::double)? (form:max-value::double)? ;
text-bookmark-end ::= text:bookmark-end::text-bookmark-end-attlist ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string office:dde-topic::string office:dde-item::string (office:automatic-update::boolean)? ;
office-annotation-end-attlist ::= common-office-annotation-name-attlist ;
chart-data-label ::= chart:data-label::(chart-data-label-attlist text-p?) ;
common-number-attlist ::= (number:min-integer-digits::integer)? (number:grouping::boolean)? ;
presentation-footer-decl-attlist ::= presentation:name::string ;
svg-desc ::= svg:desc::string() ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
draw-ellipse ::= draw:ellipse::((draw-ellipse-attlist common-draw-circle-ellipse-pos-attlist) | (common-draw-position-attlist common-draw-size-attlist) common-draw-circle-ellipse-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (xml-id (draw:id::NCName)?)? ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeDecimal | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
db-table-setting ::= db:table-setting::(db-table-setting-attlist db-delimiter? db-character-set?) ;
style-list-level-properties-attlist ::= common-text-align (text:space-before::length)? (text:min-label-width::nonNegativeLength)? (text:min-label-distance::nonNegativeLength)? (style:font-name::string)? (fo:width::positiveLength)? (fo:height::positiveLength)? common-vertical-rel-attlist common-vertical-pos-attlist (text:list-level-position-and-space-mode::("label-width-and-position" | "label-alignment"))? ;
table-body ::= table:body::common-table-template-attlist ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (smil:mode::("in" | "out"))? ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
text-set-page-variable-attlist ::= (text:active::boolean)? (text:page-adjust::integer)? ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") table:index::nonNegativeInteger ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
string ::= string() ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? draw:name::styleName (draw:display-name::string)? ;
draw-a-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (office:name::string)? (office:title::string)? (office:server-map::boolean)? xml-id? ;
db-queries-attlist ::= ε ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
common-draw-name-attlist ::= (draw:name::string)? ;
size ::= (form:size::nonNegativeInteger)? ;
table-table-attlist ::= (table:name::string)? (table:style-name::styleNameRef)? (table:template-name::string)? (table:use-first-row-styles::boolean)? (table:use-last-row-styles::boolean)? (table:use-first-column-styles::boolean)? (table:use-last-column-styles::boolean)? (table:use-banding-rows-styles::boolean)? (table:use-banding-columns-styles::boolean)? (table:protected::boolean)? (table:protection-key::string)? (table:protection-key-digest-algorithm::anyIRI)? (table:print::boolean)? (table:print-ranges::cellRangeAddressList)? xml-id? (table:is-sub-table::boolean)? ;
--------------------pascal::delphi.bgf--------------------
procedure_impl_decl ::= NL procedure_intf_decl nested_decl_block procedure_body_semi ;
pointer_type ::= "^" SPOFF qualified_id SPON ;
of_const ::= "of" "const" ;
colon_id ::= "," NL id ;
selection_stm ::= ("if" expr "then" nested_stm else_stm?) | ("case" expr "of" case_selector* case_else? end_struct) ;
default_spec ::= ("default" SP expr) | "nodefault" ;
set_type ::= "set" of_basetype ;
record_field_constant ::= id colon typed_const ;
expr ::= SP SPOFF expression SPON ;
of_basetype ::= "of" type_spec ;
boolean_type ::= "boolean" | "bytebool" | "wordbool" | "longbool" ;
try_finally_stm ::= "try" NL statement_list "finally" NL statement_list end_struct ;
implements_spec ::= "implements" {qualified_id ","}* ;
at_address ::= "at" expr ;
case_else ::= "else" statement_list ;
interface_body ::= visibility_default end_struct ;
postfix_opr ::= arguments | array_subscript | ("." id) | "^" ;
exports_section ::= "exports" {exports_entry ","}* ";" NL ;
nested_stm ::= sequence_stm | (NL IN statement? EX) ;
interface_keyword ::= "interface" | "dispinterface" ;
prop_specifier ::= index_spec | accessor_spec | stored_spec | default_spec | implements_spec | dispid_spec ;
defaultarray_spec ::= ";" "default" ;
in_filename ::= "in" filenamelit ;
type_section ::= "type" NL IN type_decl+ EX ;
interface_section ::= interface_kw uses_clause? intfdecl_block ;
heritage_list ::= ("(" {qualified_id ","}* ")") | ("helper" "for" id) ;
assign_stm ::= expr ":=" expr ;
external_directive ::= "external" expr? external_name? ;
impldecl_block ::= impldecl_section* ;
absolute_init ::= "absolute" expr ;
argm ::= expression argmfmt? argmfmt? ;
stored_spec ::= "stored" SP expr ;
package_file ::= package_decl requires_clause? contains_clause? end_struct file_end ;
property_decl ::= "property" id prop_indexes? colon_type? prop_specifier* defaultarray_spec? ";" NL ;
finalization_section ::= finalization_kw statement_list ;
record_constant ::= "(" record_field_constant_semi* record_field_constant? ")" ;
var_keyword ::= "var" | "threadvar" ;
semi_set_element ::= "," SP set_element ;
var_section ::= var_keyword NL IN var_decl+ EX ;
call_stm ::= expr | "inherited" ;
array_constant ::= "(" {typed_const ","}* ")" ;
infix_opr ::= ">" | "<" | "<=" | ">=" | "<>" | "=" | "in" | "is" | "as" | "+" | "-" | "or" | "xor" | "*" | "/" | "div" | "mod" | "and" | "shl" | "shr" | "^" ;
var_decl ::= identlist colon_type hint_directive? var_init? ";" NL ;
parm_qual ::= "var" | "const" | "out" ;
semi_directive ::= ";"? directive ;
sign ::= "+" | "-" ;
procedural_type ::= procedure_intf_decl of_object? semi_calling_spec* ;
end_struct ::= "end" ;
record_field_constant_semi ::= record_field_constant ";" NL ;
to_or_downto ::= "to" | "downto" ;
resource_section ::= "resourcestring" constant_decl+ ;
variant_type ::= "variant" | "olevariant" ;
accessor_spec ::= "readonly" | "writeonly" | (accessor_verb qualified_id) ;
sequence_stm ::= "begin" NL statement_list end_struct ;
parameter ::= {id ","}* parameter_type? ;
string_type ::= "string" | "shortstring" | "ansistring" | "widestring" | ("string" "[" expression "]") ;
simple_type ::= ordinal_type | real_type ;
of_object ::= "of" "object" ;
uses_item ::= qualified_id in_filename? ;
array_subscript ::= "[" expression? semi_expression* "]" ;
class_type ::= "packed"? class_keyword heritage_list? NL class_body? ;
type_spec ::= simple_type | string_type | struct_type | pointer_type | procedural_type | variant_type | class_reference_type | class_type | interface_type | qualified_id ;
guid_decl ::= "[" expr "]" ;
qualified_id ::= namespace* name SPON ;
exception_block ::= (exception_handler_list case_else?) | statement_list ;
set_constructor ::= "[" set_element? semi_set_element* "]" ;
jump_stm ::= goto_stm | raise_stm ;
integer_type ::= "shortint" | "smallint" | "longint" | "int64" | "word" | "byte" | "longword" | "integer" | "cardinal" ;
enumerated_type ::= "(" enum_spec+ ")" ;
expression ::= term infix_expr* ;
nested_decl_section ::= const_section | type_section | var_section | label_decl | procedure_impl_decl ;
file_end ::= "." ;
record_variant ::= expr+ colon "(" visibility_default ")" ";"? NL ;
hint_directive ::= "platform" | "deprecated" | "library" ;
delphi_file ::= program_file | package_file | unit_file ;
array_index_list ::= "[" {array_index ","}* "]" ;
type_decl ::= identlist equal "type"? type_spec hint_directive? ";" NL ;
contains_clause ::= "contains" {uses_item ","}* ";" NL ;
procedure_body ::= sequence_stm | "forward" ;
identlist ::= id colon_id* ;
name ::= builtinid | id ;
semi_calling_spec ::= ";"? calling_spec ;
program_file_list ::= "(" {id ","}* ")" ;
unit_decl ::= "unit" qualified_id hint_directive? ";" NL ;
program_decl ::= ("program" qualified_id program_file_list? ";" NL) | ("library" qualified_id ";" NL) ;
prefix_opr ::= ("not" SP) | ("inherited" SP) | "@" | sign ;
char_type ::= "char" | "ansichar" | "widechar" ;
param_init ::= equal expr ;
interface_type ::= interface_keyword heritage_list? guid_decl? interface_body? ;
procedure_body_semi ::= procedure_body ";" NL ;
external_name ::= ("name" expr) | ("index" expr) ;
builtinid ::= "string" | "file" | "set" ;
dispid_spec ::= "dispid" SP expr ;
procedure_keyword ::= "function" | "procedure" | "constructor" | "destructor" ;
constant_spec ::= (equal expr) | (colon_type const_init) ;
dotdot_expr ::= ".." expression ;
exports_entry ::= procedure_id formal_parameters? external_name? ;
impldecl_section ::= const_section | type_section | var_section | label_decl | procedure_impl_decl | procedure_external_decl | resource_section | exports_section ;
statement ::= labelid_colon? unlabeled_stm ;
statement_list ::= IN statement_semi* statement? EX ;
term ::= prefix_opr* atom_expr postfix_opr* ;
array_index ::= ordinal_type | qualified_id ;
const_init ::= equal typed_const ;
initialization_kw ::= "initialization" | "begin" ;
constant_decl ::= identlist constant_spec hint_directive? ";" NL ;
struct_type ::= set_type | array_type | file_type ;
exception_handler_list ::= exception_handler_semi* exception_handler? ;
array_type ::= ("array" of_const) | ("packed"? "array" array_index_list* of_basetype) ;
colon ::= SPOFF ":" SPON ;
namespace ::= id "." ;
exception_handler ::= "on" exception_var? type_spec "do" nested_stm ;
raise_stm ::= "raise" expr? at_address? ;
formal_parameter ::= parm_qual? parameter ;
implementation_section ::= implementation_kw uses_clause? impldecl_block ;
unit_file ::= unit_decl interface_section implementation_section initialization_section? finalization_section? end_struct file_end ;
program_file ::= program_decl uses_clause? impldecl_block procedure_body file_end ;
argmfmt ::= ":" anynumber ;
arguments ::= "(" argm? semi_argm* ")" ;
calling_spec ::= "pascal" | "safecall" | "stdcall" | "cdecl" | "register" | "local" ;
class_reference_type ::= "class" "of" qualified_id ;
prop_index_decl ::= prop_index_name+ colon_type ";"? ;
goto_stm ::= "goto" label_id ;
directive ::= "dynamic" | "virtual" | "abstract" | ("message" qualified_id?) | ("dispid" sign? anynumber) | "override" | "overload" | "reintroduce" | "static" | "assembler" | "far" | "export" | hint_directive | calling_spec ;
intfdecl_block ::= intfdecl_section* ;
typed_const ::= array_constant | record_constant | expr ;
procedure_signature ::= "class"? procedure_keyword procedure_id? formal_parameters? colon_type? ;
method_decl ::= (procedure_signature method_deleg) | (procedure_signature ";" dispid_spec ";") | procedure_intf_decl ;
ordinal_type ::= integer_type | char_type | enumerated_type | boolean_type | subrange_type ;
unlabeled_stm ::= sequence_stm | loop_stm | with_stm | try_finally_stm | try_except_stm | selection_stm | jump_stm | assign_stm | call_stm ;
initialization_section ::= initialization_kw NL statement_list ;
label_id ::= anynumber | id ;
uses_clause ::= "uses" NL IN {uses_item ","}* ";" EX NL ;
class_member ::= var_decl | method_decl | property_decl | variant_section ;
ctrlchar ::= "^'A" | "^'B" | "^'C" | "^'D" | "^'E" | "^'F" | "^'G" | "^'H" | "^'I" | "^'J" | "^'K" | "^'L" | "^'M" | "^'N" | "^'O" | "^'P" | "^'Q" | "^'R" | "^'S" | "^'T" | "^'U" | "^'V" | "^'W" | "^'X" | "^'Y" | "^'Z" ;
statement_semi ::= statement? ";" NL ;
subrange_type ::= expression SPOFF dotdot_expr SPON ;
id_colon ::= id colon ;
real_type ::= "real" | "real48" | "single" | "double" | "extended" | "comp" | "currency" ;
formal_parameters ::= "(" formal_parameter semi_formal_parameter* ")" ;
enum_spec ::= id param_init? ;
exception_var ::= id colon ;
anynumber ::= hexnumber | number ;
prop_index_name ::= prop_index_modifier? qualified_id ;
equal ::= "=" ;
exception_handler_semi ::= exception_handler ";" NL ;
with_stm ::= "with" expr+ "do" nested_stm ;
procedure_external_decl ::= procedure_intf_decl external_directive semi_calling_spec? ";"? NL ;
interface_kw ::= "interface" NL ;
filenamelit ::= charlit | stringlit | qualified_id ;
labelid_colon ::= label_id colon ;
variant_section ::= "case" id_colon? type_spec "of" record_variant+ ;
var_init ::= absolute_init | const_init ;
intfdecl_section ::= const_section | type_section | var_section | label_decl | procedure_intf_decl | procedure_external_decl | resource_section | exports_section ;
else_stm ::= NL "else" nested_stm ;
procedure_intf_decl ::= procedure_signature semi_directive* ";"? NL ;
case_label ::= expr dotdot_expr? ;
prop_indexes ::= "[" prop_index_decl+ "]" ;
atom_expr ::= charlit | anynumber | ctrlchar | "nil" | ("(" expression ")") | set_constructor | qualified_id ;
class_keyword ::= "class" | "record" | "object" ;
visibility_block ::= visibility NL IN class_member* EX ;
requires_clause ::= "requires" {qualified_id ","}* ";" NL ;
set_element ::= expression dotdot_expr? ;
file_type ::= "file" of_basetype? ;
finalization_kw ::= "finalization" ;
colon_type ::= colon type_spec ;
implementation_kw ::= "implementation" NL ;
accessor_verb ::= "read" | "write" ;
label_decl ::= "label" {label_id ","}* ";" NL ;
visibility_default ::= IN class_member* EX ;
visibility ::= "public" | "protected" | ("strict"? "private") | "published" | "automated" ;
loop_stm ::= ("repeat" statement_list "until" expr) | ("while" expr "do" nested_stm) | ("for" id ":=" expr to_or_downto expr "do" nested_stm) | ("for" id "in" id "do" nested_stm) ;
parameter_type ::= colon_type param_init? ;
method_deleg ::= equal qualified_id ";" NL ;
case_selector ::= {case_label ","}* colon nested_stm ";"? ;
try_except_stm ::= "try" NL statement_list "except" NL exception_block end_struct ;
semi_formal_parameter ::= ";" formal_parameter ;
semi_expression ::= "," SP expression ;
class_body ::= visibility_default visibility_block* end_struct ;
const_section ::= "const" NL IN constant_decl+ EX ;
semi_argm ::= "," SP argm ;
index_spec ::= "index" SP expr ;
procedure_id ::= namespace? id ;
infix_expr ::= SP infix_opr SP term ;
package_decl ::= "package" qualified_id ";" NL ;
prop_index_modifier ::= "const" | "var" ;
nested_decl_block ::= nested_decl_section* ;
--------------------pascal::delphipp.bgf--------------------
pp_boolexpr ::= booleanlit | (boolfunc space? "(" id ")") | ("NOT" space? pp_boolexpr) | id | (pp_boolexpr "pp_boolopr" pp_boolexpr) | (pp_litexpr "pp_compareopr" pp_litexpr) | ("(" pp_boolexpr ")") ;
pp_content ::= pp_stmt_or_water ;
pp_endif ::= ("{$" space? endif_alt bracketbody* "}") | ("(*$" space? endif_alt starbody* "*)") ;
pp_elseifblock ::= pp_elseifexpr pp_content* ;
anynumber ::= number | hexnumber ;
starbody ::= pp_any ;
pp_ifexpr ::= ("{$" space? if_alt bracketbody* "}") | ("(*$" space? if_alt starbody* "*)") ;
filenamelit ::= charlit | stringlit | nested_id ;
ident ::= id | (key) ;
booleanlit ::= "FALSE" | "TRUE" ;
boolfunc ::= "DEFINED" | "DECLARED" | "OPTION" ;
pp_any ::= (id codetoken*) | key | token ;
codetoken ::= "(" | ")" | "." | ";" | ":" | "," | "[" | "]" | "+" | "-" | "*" | "/" | "^" | "=" | "@" | ">" | "<" | "<>" | ">=" | "<=" | ":=" | "//" | id | anynumber | charlit | space ;
pp_elseifexpr ::= ("{$" space? else_alt space? bracketbody* "}") | ("(*$" space? else_alt space? starbody* "*)") ;
pp_stmt ::= pp_ifstmt | (pp_directivestmt) ;
else_alt ::= ("ELSEIF" space? pp_boolexpr) | ("ELSE" space?) ;
nested_id ::= SPOFF namespace* ident SPON ;
endif_alt ::= "ENDIF" | "IFEND" ;
pp_comment ::= cmbracketblock | cmstarblock | cmline ;
cmline ::= "//" cmlinebody* EOL ;
namespace ::= id "." ;
pp_directivestmt ::= ("{$" space? {pp_directive ","}* bracketbody* "}") | ("(*$" space? {pp_directive ","}* starbody* "*)") ;
pp_minenumsize ::= "Z1" | "Z2" | "Z4" ;
delphipp_file ::= pp_stmt_or_water* ;
pp_switch ::= id space? pp_switchopt ;
pp_stmt_or_water ::= (pp_stmt) | (pp_comment) | (pp_any) ;
pp_ifblock ::= pp_ifexpr pp_content* ;
cmstarblock ::= "(*" starbody* "*)" ;
pp_directive ::= ("DEFINE" space id) | ("UNDEF" space id) | ("INCLUDE" space? filenamelit) | ("I" space? filenamelit) | ("LINK" space? filenamelit) | ("L" space? filenamelit) | ("RESOURCE" space? filenamelit space? filenamelit?) | ("R" space? filenamelit space? filenamelit?) | ("HPPEMIT" space? charlit) | ("EXTERNALSYM" space id) | "NODEFINE" | "MINENUMSIZE" | "DENYPACKAGEUNIT" | "WEAKPACKAGEUNIT" | ("IMAGEBASE" space? anynumber) | ("C" space id) | ("MINENUMSIZE" space anynumber) | pp_minenumsize | ("ALIGN" space? anynumber) | pp_align | ("M" space? {anynumber ","}*) | ("MAXSTACKSIZE" space anynumber) | ("MINSTACKSIZE" space anynumber) | ("RESOURCERESERVE" space anynumber) | "NOINCLUDE" | "WARN" | "MESSAGE" | "APPTYPE" | ("LIBPREFIX" space? charlit) | ("LIBSUFIX" space? charlit) | ("LIBVERSION" space? charlit) | ("DESCRIPTION" space? charlit) | ("D" space? charlit) | ("EXTENSION" space id) | ("E" space id) | (pp_switch space?) ;
cmbracketblock ::= "{" bracketbody* "}" ;
pp_litexpr ::= id | charlit | anynumber ;
pp_compareopr ::= ">" | "<" | "=" | ">=" | "<=" | "<>" ;
bracketbody ::= pp_any ;
pp_boolopr ::= "AND" | "OR" | "XOR" ;
if_alt ::= ("IF" space? pp_boolexpr) | ("IFDEF" space? id) | ("IFNDEF" space? id) | ("IFOPT" space? pp_switch) ;
pp_align ::= "A1" | "A2" | "A4" | "A8" ;
pp_ifstmt ::= pp_ifblock pp_elseifblock* pp_endif ;
pp_switchopt ::= "+" | "-" | "ON" | "OFF" ;
cmlinebody ::= pp_any ;
--------------------pascal::object.bgf--------------------
object_heritage ::= "(" ref_name ")" ;
semi_case_selector ::= ";" NL case_selector ;
not_word ::= "not" | "Not" | "NOT" ;
conditional_statement ::= if_statement | case_statement ;
type_declaration ::= decl_name "=" type_or_restrictedType ;
class_method_list ::= class_visibility_method_list* ;
unit_definition ::= "unit" decl_name ";" NL interface_section NL implementation_section NL init_section "." ;
program_definition ::= "program" decl_name program_file_list? ";" NL program_block "." ;
package_definition ::= "package" decl_name ";" NL requires_clause? contains_clause? "end" "." ;
else_statement ::= "else" statement? ;
semicolon_record_field_constant ::= ";" decl_name ":" typed_constant ;
at_address ::= "at" ref_name ;
assign_expression ::= ":=" expression ;
class_heritage ::= "(" {ref_name ","}* ")" ;
var_assignment ::= absolute_assignment | constant_assignment ;
op ::= ">" | "<" | "<=" | ">=" | "<>" | "=" | "in" | "is" | "+" | "-" | "or" | "xor" | "*" | "/" | "div" | "mod" | "and" | "shl" | "shr" | "DIV" | "AND" ;
while_statement ::= "while" expression do statement ;
type_section ::= "type" IN NL type_declaration+ EX NL ;
interface_section ::= "interface" NL NL uses_clause? NL interface_declaration* ;
semi_statement ::= ";" NL statement ;
bool_value ::= "true" | "false" | "True" | "False" ;
raise_statement ::= "raise" ref_name? at_address? ;
compound_statement ::= begin IN NL statement_list EX NL "end" NL ;
typed_constant ::= expression | array_constant | record_constant ;
object_modifier ::= ("." id) | array_subscript | arguments | "^" | as_type ;
pond_number ::= "#" number ;
procedure ::= "procedure" | "Procedure" ;
record_constant ::= "(" typed_constant semicolon_record_field_constant* ")" ;
dot_id ::= "." id ;
comma_case_label ::= "," case_label ;
try_except_statement ::= "try" IN NL statement_list EX NL except ";"? IN NL exception_block EX NL "end" ;
if_statement ::= if expression "then" statement? else_statement? ;
var_section ::= var NL IN var_declaration_semicolon* NL EX ;
array_constant ::= "(" {typed_constant ","}* ")" ;
for ::= "for" | "For" ;
semi_exception_handler ::= ";" exception_handler ;
in_clause ::= "in" charlit ;
property_list ::= property_word decl_name property_interface? property_specifiers* ;
object_field_list ::= ident_list_colonType semi_ident_list_colonType* ;
field_list ::= field_declaration+ variant_section? ;
parm_qual ::= var | "const" | "out" ;
semi_directive ::= ";" directive ;
constructor_heading ::= "constructor" decl_name formal_parameters? ;
destructor_heading ::= "destructor" decl_name formal_parameters? ;
ref_name ::= object ;
init_section ::= ("intitialization" IN NL statement_list fin_statement_list? EX NL "end") | compound_statement | "end" ;
constructor_declaration ::= constructor_heading ";" IN NL block EX NL ";" NL ;
to_or_downto ::= "to" | "downto" ;
field_declaration ::= decl_name+ ":" type ";" NL ;
mul_op_factor ::= mul_op factor ;
begin ::= "begin" | "Begin" ;
parameter ::= {decl_name ","}* parameter_type? ;
of_object ::= "of" "object" ;
vis_spec_element_list ::= NL class_visibility class_element_list? ;
uses_item ::= ref_name in_clause? ;
array_subscript ::= "[" {expression ","}* "]" ;
method_heading ::= procedure_heading | function_heading | destructor_heading | constructor_heading ;
set_constructor ::= "[" {set_element ","}* "]" ;
exception_block ::= ε | statement_list | exception_else ;
function_heading ::= function_word decl_name formal_parameters? ":" type_or_string ;
expression ::= (factor op_factor*) | (op_factor+) ;
repeating_statement ::= "repeat" statement ";"? "until" expression ;
record_variant ::= expression+ ":" "(" field_list? ")" ;
procedure_heading ::= procedure decl_name formal_parameters? ;
absolute_assignment ::= "absolute" id_or_expression ;
loop_statement ::= repeating_statement | while_statement | for_statement ;
function_declaration ::= function_heading semi_directive? ";" IN NL block EX NL ";" NL ;
index_expession ::= "index" expression ;
contains_clause ::= contains_idList_semicolon* ;
block ::= declaration_section* compound_statement ;
do ::= "do" | "Do" | "DO" ;
program_file_list ::= "(" {id ","}* ")" ;
struct_statement ::= compound_statement | conditional_statement | loop_statement | with_statement | try_finally_statement | try_except_statement | raise_statement ;
program ::= program_definition | package_definition | library_definition | unit_definition ;
param_init ::= "=" expression ;
array_of ::= array_word set_constructor? "of" ;
semicolon_virtual ::= ";" "virtual" ;
write_id ::= "write" ref_name ;
proc_or_func_heading ::= procedure_heading | function_heading ;
for_statement ::= for ref_name ":=" expression to_or_downto expression do statement ;
procedure_section ::= procedure_declaration | function_declaration | constructor_declaration | destructor_declaration ;
interface_declaration ::= constant_section | type_section | var_section | (exported_heading directive?) ;
statement ::= (labelId_colon? unlabeled_statement) | ε ;
statement_list ::= statement semi_statement* ;
op_factor ::= op factor ;
term ::= factor mul_op_factor* ;
add_op_term ::= add_op term ;
class_element_list ::= class_element_semi+ ;
read_id ::= "read" ref_name ;
exception_handler_list ::= exception_handler semi_exception_handler* ";"? ;
var_declaration ::= decl_name+ ":" type var_assignment? ;
constant_declaration ::= (decl_name "=" expression ";" NL) | (decl_name ":" typeId "=" typed_constant ";" NL) ;
exception_handler ::= "on" exception_var? type do IN NL statement EX ;
formal_parameter ::= parm_qual? parameter ;
virtual_method_heading ::= method_heading semi_directive? semicolon_virtual? ;
implementation_section ::= "implementation" IN NL uses_clause? declaration_section* EX NL ;
library_definition ::= "library" decl_name ";" NL program_block "." ;
arguments ::= "(" {expression ","}* ")" ;
label_declaration_section ::= "label" decl_name ;
id_or_expression ::= ref_name | expression ;
directive ::= "cdecl" | "register" | "dynamic" | "virtual" | "export" | "external" | "far" | "forward" | ("message" ref_name?) | "override" | "overload" | "pascal" | "reintroduce" | "safecall" | "stdcall" | "Override" ;
factor ::= ref_name | charlit | (pond_number+) | ("@" "@"? ref_name) | "nil" | ("(" expression ")") | (not_word factor) | set_constructor | (predefinedType "(" expression ")") | bool_value | ("-"? number) ;
property_interface ::= property_parameter_list? ":" type ;
rel_op_simple_expression ::= rel_op simple_expression ;
unlabeled_statement ::= simple_statement | struct_statement ;
constant_section ::= "const" IN NL constant_declaration* EX NL ;
semi_virtual_method_heading ::= ";" NL virtual_method_heading ;
constant_assignment ::= "=" expression ;
rel_op ::= ">" | "<" | "<=" | ">=" | "<>" | "=" | "in" | "is" ;
simple_expression ::= term? add_op_term* ;
interface_heritage ::= "(" {ref_name ","}* ")" ;
class_visibility_property_list ::= class_visibility property_list ;
uses_clause ::= "uses" IN NL uses_item+ ";" EX NL ;
class_property_list ::= class_visibility_property_list* ;
object ::= (id object_modifier*) | ("(" ref_name ")" object_modifier*) ;
add_op ::= "+" | "-" | "or" | "xor" ;
mul_op ::= "*" | "/" | "div" | "mod" | "and" | "shl" | "shr" | "DIV" | "AND" ;
method_list ::= virtual_method_heading semi_virtual_method_heading* ;
id_colon ::= decl_name ":" ;
formal_parameters ::= "(" formal_parameter semi_formal_parameter* ")" ;
type ::= typeId | simpleType | structType | pointerType | stringType | procedureType | variantType | class_referenceType ;
class_visibility ::= "public" | "protected" | "Protected" | "private" | "published" ;
class_element_semi ::= NL class_element ";" ;
exception_var ::= decl_name ":" ;
ordinal_identifier ::= "shortint" | "smallint" | "integer" | "byte" | "longint" | "int64" | "word" | "boolean" | "char" | "widechar" | "longchar" | "pchar" ;
class_visibility_method_list ::= class_visibility method_list ;
with_statement ::= "with" ref_name+ do statement ;
class_element ::= virtual_method_heading | ident_list_colonType | property_list | ε ;
destructor_declaration ::= destructor_heading ";" IN NL block EX NL ";" NL ;
property_word ::= "property" | "Property" ;
as ::= "As" | "as" ;
array_word ::= "array" | "Array" ;
try_finally_statement ::= "try" IN NL statement_list EX NL "finally" IN NL statement_list EX NL "end" ;
variant_section ::= "case" id_colon? typeId "of" record_variant_semicolon+ ";"? ;
exception_else ::= exception_handler_list NL EX else_statement? ;
type_or_string ::= type | charlit ;
as_type ::= as type ;
var ::= "var" | "Var" ;
case_label ::= expression dotDot_expression? ;
simple_statement ::= (ref_name assign_expression?) | ("inherited" ref_name?) | ("goto" labelId) ;
fin_statement_list ::= "finalization" statement_list ;
case_statement ::= "case" expression "of" case_selector IN NL semi_case_selector* ";"? EX NL else_statement? ";"? NL "end" ;
declaration_section ::= label_declaration_section | constant_section | type_section | var_section | procedure_section ;
requires_clause ::= requires_idList_semicolon* ;
set_element ::= expression dotDot_expression? ;
property_specifiers ::= index_expession | read_id | write_id | stored_id_OR_stored_expression | default_expression_OR_nodefault | implementsTypeId ;
property_parameter_list ::= "[" idList_colonTypeId_semicolon* "]" ;
if ::= "if" | "If" ;
except ::= "except" | "Except" ;
exported_heading ::= (procedure_heading ";" NL) | (function_heading ";" NL) | (constructor_heading ";" NL) | (destructor_heading ";" NL) ;
var_declaration_semicolon ::= var_declaration ";" NL ;
program_block ::= uses_clause? block ;
function_word ::= "function" | "Function" ;
parameter_type ::= ":" array_of? type param_init? ;
case_selector ::= case_label comma_case_label* ":" statement ;
procedure_declaration ::= procedure_heading ";" IN NL block EX NL ";" NL ;
semi_formal_parameter ::= ";" NL formal_parameter ;
record_variant_semicolon ::= record_variant ";" NL ;
decl_name ::= id dot_id* ;
--------------------xml::zhang-cordy.bgf--------------------
children ::= children_body repetition? ;
element ::= (empty_elem_tag spaces) | (tag_content spaces) ;
mixed ::= pcdata_or_name | pcdata ;
content ::= spaces chardata* spaces sub1_content* spaces ;
pi ::= "<?" pitarget sub1_pi? "?>" ;
prolog ::= dtd_body ;
fixed ::= "#FIXED" spaces ;
choice_item ::= spaces "|" spaces cp ;
repetition ::= "?" | "*" | "+" ;
pedef ::= entityvalue | external_id ;
attvalue ::= stringlit | charlit | longstringlit | longcharlit ;
entityvalue ::= charlit | stringlit | longstringlit | longcharlit ;
cp ::= cp_body repetition? ;
misc ::= comment | pi | space | newline ;
defaultdecl ::= "#REQUIRED" | "#IMPLIED" | (fixed? attvalue) ;
longstringlit ::= """ not_dquote* """ ;
attlistdecl ::= "<!ATTLIST" spaces name attdef* spaces ">" spaces ;
sub2_pi ::= token "?>" token ;
children_body ::= choice | seq ;
seq ::= "(" spaces cp more_cps* spaces ")" ;
more_names ::= spaces "|" spaces name ;
atttype ::= stringtype | tokenizedtype | enumeratedtype ;
cdend ::= "]]>" ;
tag_content ::= stag IN content EX etag ;
markupdecl ::= elementdecl | attlistdecl | entitydecl | notationdecl | pi | comment ;
exid_pub ::= "PUBLIC" spaces literal spaces literal ;
declbody ::= "[" decl* "]" ;
reference ::= ("&" name ";") | charref ;
stringtype ::= "CDATA" ;
pitarget ::= name ;
enumeration ::= "(" spaces nmtoken more_nmtokens* spaces ")" ;
stag ::= "<" name spaces attribute* ">" ;
pcdata_or_name ::= "(" spaces "#PCDATA" more_names* spaces ")*" ;
attdef ::= spaces name spaces atttype spaces defaultdecl ;
more_nmtokens ::= spaces "|" spaces nmtoken ;
tokenizedtype ::= "ID" | "IDREF" | "IDREFS" | "ENTITY" | "ENTITIES" | "NMTOKEN" | "NMTOKENS" ;
ndatadecl ::= spaces "NDATA" spaces name ;
entitydef ::= entityvalue | (external_id ndatadecl?) ;
notationtype ::= "NOTATION" spaces "(" spaces name more_names* spaces ")" ;
more_cps ::= spaces "," spaces cp ;
enumeratedtype ::= notationtype | enumeration ;
cp_body ::= name | choice | seq ;
contentspec ::= "EMPTY" | "ANY" | mixed | children ;
literal ::= charlit | stringlit ;
spaces ::= space_or_newline* ;
sp_external_id ::= spaces external_id ;
dtd_body ::= misc* doctypedecl? ;
sub2_content ::= element | reference | cdsect | pi | comment | regexp ;
notationdecl ::= "<!NOTATION" spaces name spaces exid_or_pubid spaces ">" spaces ;
sub1_content ::= spaces sub2_content spaces chardata* spaces ;
decl ::= markupdecl | ("%" name ";") | spaces ;
elementdecl ::= "<!ELEMENT" spaces name spaces contentspec spaces ">" spaces ;
cdsect ::= "<![CDATA[" cdata* cdend ;
choice ::= "(" spaces cp choice_item choice_item* spaces ")" ;
pedecl ::= "<!ENTITY" spaces "%" spaces name spaces pedef spaces ">" spaces ;
pcdata ::= "(" spaces "#PCDATA" spaces ")" ;
attribute ::= spaces name "=" attvalue spaces ;
empty_elem_tag ::= "<" name spaces attribute* "/>" ;
doctypedecl ::= "<!DOCTYPE" spaces name spaces sp_external_id? spaces declbody? spaces ">" spaces ;
exid_sys ::= "SYSTEM" spaces literal ;
nmtoken ::= name | dname ;
etag ::= "</" name spaces ">" ;
space_or_newline ::= space | newline ;
not_quote ::= token ;
external_id ::= exid_sys | exid_pub ;
cdata ::= token | comment ;
exid_or_pubid ::= external_id | ("PUBLIC" spaces literal) ;
entitydecl ::= gedecl | pedecl ;
gedecl ::= "<!ENTITY" spaces name spaces entitydef spaces ">" spaces ;
sub1_pi ::= spaces token ;
longcharlit ::= "'" not_quote* "'" ;
not_dquote ::= token ;
program ::= prolog element ;
chardata ::= token ;
--------------------xslt::clark.bgf--------------------
attribute-set.element ::= attribute-set::(extension.atts name::qname.datatype (use-attribute-sets::qnames.datatype)? attribute.element*) ;
top-level-extension ::= any ;
copy-of.element ::= copy-of::(extension.atts select::expression.datatype) ;
char.datatype ::= string() ;
qname-but-not-ncname.datatype ::= string() ;
qnames.datatype ::= string()* ;
text.element ::= text::(extension.atts (disable-output-escaping::("yes" | "no"))? string()) ;
expression.datatype ::= string() ;
transform.element ::= transform::stylesheet.model ;
literal-result-element.atts ::= literal-result-element-no-version.atts (version::version)? ;
include.element ::= include::(extension.atts href::string()) ;
template.model ::= (instruction.category | literal-result-element | string())* ;
import.element ::= import::(extension.atts href::string()) ;
literal-result-element-no-version.atts ::= (avt.datatype | (extension-element-prefixes::prefixes.datatype) | (exclude-result-prefixes::prefixes.datatype) | (use-attribute-sets::qnames.datatype))* ;
fallback.element ::= fallback::(extension.atts template.model) ;
brace-avt.datatype ::= string() ;
key.element ::= key::(extension.atts name::qname.datatype match::pattern.datatype use::expression.datatype) ;
comment.element ::= comment::(extension.atts template.model) ;
sort.element ::= sort::(extension.atts (select::expression.datatype)? (lang::(string() | expr-avt.datatype))? (data-type::("text" | "number" | qname-but-not-ncname.datatype | expr-avt.datatype))? (order::("ascending" | "descending" | expr-avt.datatype))? (case-order::("upper-first" | "lower-first" | expr-avt.datatype))?) ;
namespace-alias.element ::= namespace-alias::(extension.atts stylesheet-prefix::prefix.datatype result-prefix::prefix.datatype) ;
any ::= (α | string() | any)* ;
expr-avt.datatype ::= string() ;
if.element ::= if::(extension.atts test::expression.datatype template.model) ;
attribute.element ::= attribute::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? template.model) ;
literal-result-element ::= literal-result-element.atts template.model ;
number.datatype ::= integer() ;
apply-templates.element ::= apply-templates::(extension.atts (select::expression.datatype)? (mode::qname.datatype)? (sort.element | with-param.element)*) ;
literal-result-element-as-stylesheet ::= version::version literal-result-element-no-version.atts template.model ;
choose.element ::= choose::(extension.atts when.element+ otherwise.element?) ;
processing-instruction.element ::= processing-instruction::(extension.atts name::(string() | expr-avt.datatype) template.model) ;
strip-space.element ::= strip-space::(extension.atts elements::wildcards.datatype) ;
instruction.category ::= apply-templates.element | apply-imports.element | call-template.element | element.element | attribute.element | text.element | processing-instruction.element | comment.element | copy.element | value-of.element | number.element | for-each.element | if.element | choose.element | variable.element | copy-of.element | message.element | fallback.element ;
apply-imports.element ::= apply-imports::extension.atts ;
stylesheet.element ::= stylesheet::stylesheet.model ;
param.element ::= param::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
wildcards.datatype ::= string()* ;
version ::= "1.0" ;
number.element ::= number::(extension.atts (level::("single" | "multiple" | "any"))? (count::pattern.datatype)? (from::pattern.datatype)? (value::expression.datatype)? (format::avt.datatype)? (lang::(string() | expr-avt.datatype))? (letter-value::("alphabetic" | "traditional" | expr-avt.datatype))? (grouping-separator::(char.datatype | expr-avt.datatype))? (grouping-size::(number.datatype | expr-avt.datatype))?) ;
call-template.element ::= call-template::(extension.atts name::qname.datatype with-param.element*) ;
qname.datatype ::= string() ;
message.element ::= message::(extension.atts (terminate::("yes" | "no"))? template.model) ;
with-param.element ::= with-param::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
avt.datatype ::= string() ;
for-each.element ::= for-each::(extension.atts select::expression.datatype sort.element* template.model) ;
preserve-space.element ::= preserve-space::(extension.atts elements::wildcards.datatype) ;
top-level-elements.model ::= (top-level-element.category | top-level-extension)* ;
prefixes.datatype ::= (string() | "#default")* ;
top-level-element.category ::= include.element | strip-space.element | preserve-space.element | template.element | namespace-alias.element | attribute-set.element | variable.element | param.element | key.element | decimal-format.element | output.element ;
output.element ::= output::(extension.atts (method::("xml" | "html" | "text" | qname-but-not-ncname.datatype))? (version::string())? (encoding::string())? (omit-xml-declaration::("yes" | "no"))? (standalone::("yes" | "no"))? (doctype-public::string())? (doctype-system::string())? (cdata-section-elements::qnames.datatype)? (indent::("yes" | "no"))? (media-type::string())?) ;
variable.element ::= variable::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
element.element ::= element::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? (use-attribute-sets::qnames.datatype)? template.model) ;
stylesheet.model ::= extension.atts (id::string())? (extension-element-prefixes::prefixes.datatype)? (exclude-result-prefixes::prefixes.datatype)? version::version import.element* top-level-elements.model ;
when.element ::= when::(extension.atts test::expression.datatype template.model) ;
template.element ::= template::(extension.atts (match::pattern.datatype)? (name::qname.datatype)? (priority::number.datatype)? (mode::qname.datatype)? param.element* template.model) ;
copy.element ::= copy::(extension.atts (use-attribute-sets::qnames.datatype)? template.model) ;
pattern.datatype ::= string() ;
otherwise.element ::= otherwise::(extension.atts template.model) ;
decimal-format.element ::= decimal-format::(extension.atts (name::qname.datatype)? (decimal-separator::char.datatype)? (grouping-separator::char.datatype)? (infinity::string())? (minus-sign::char.datatype)? (NaN::string())? (percent::char.datatype)? (per-mille::char.datatype)? (zero-digit::char.datatype)? (digit::char.datatype)? (pattern-separator::char.datatype)?) ;
value-of.element ::= value-of::(extension.atts select::expression.datatype (disable-output-escaping::("yes" | "no"))?) ;
extension.atts ::= α* ;
prefix.datatype ::= string() | "#default" ;
--------------------php::cordy.bgf--------------------
tag_token_or_key ::= tag | (";" NL) | token | key ;
popid ::= id ;
tag ::= ("<" SPOFF bigtag_id tag_attribute* ">" SPON IN NL) | (EX FL "<" SPOFF "/" bigtag_id ">" SPON FL) | ("<" SPOFF "!"? id_or_key tag_attribute* ">" SPON NL) | ("<" SPOFF "/" id_or_key ">" SPON NL) | ("<" SPOFF id_or_key tag_attribute* "/>" SPON NL) ;
token_or_key ::= token | key ;
id_or_key ::= (id "-"? id?) | key ;
xml_colon ::= "xml:" ;
tag_attribute ::= SP xml_colon? id_or_key "=" token ;
program ::= Document ;
exit_value ::= "(" Expr? ")" ;
bigtag_id ::= "html" | "body" | "head" | "form" | "table" | "tr" | "td" | "script" | "select" | "label" | "div" ;
--------------------python::indent-cordy.bgf--------------------
compoundtoken ::= linetoken | newline | comment ;
tab_space ::= tab | space ;
indent ::= SP "INDENT" ;
compoundtokensquare ::= linetoken | newline | comment ;
compound ::= ("{" compoundtoken* "}") | ("[" compoundtokensquare* "]") | ("(" compoundtokenround* ")") ;
dedent ::= "DEDENT" SP ;
endofline ::= tab_space* comment? newline ;
linetoken ::= tab_space | nonblank_token ;
line ::= tab_space* linetoken* indent? endofline+ dedent* ;
program ::= line* ;
nonblank_token ::= compound | token ;
compoundtokenround ::= linetoken | newline | comment ;
--------------------python::sorochan-cordy.bgf--------------------
lambdef ::= "lambda" varargslist? ":" test ;
fpdef ::= (id endofline?) | (SPOFF "(" SPON fplist endofline* ")" endofline?) ;
and_test ::= not_test andop_and_test? ;
testplist_gexp ::= (test+ endofline? ","?) | (test endofline? gen_for) ;
except_test ::= test as_or_comma_test? ;
suite ::= (indent endofline stmt_or_newline+ dedent) | (simple_stmt endofline) ;
comp_op_comparison ::= endofline* comp_op endofline* comparison ;
decorated ::= (decorators classdef) | (decorators funcdef) ;
expr ::= xor_expr orop_expr? ;
arglist ::= star_test? {argument ","}* comma_opt_star_test? ;
sliceop ::= ":" test? ;
unary_op ::= "+" | "-" | "~" ;
decorator_arglist ::= SPOFF "(" SPON IN arglist? endofline* ")" EX ;
plist_if ::= "if" old_test plist_iter? ;
is_expr ::= "=" endofline* assign_value ;
parameters ::= SPOFF "(" SPON varargslist? endofline* ")" ;
comma_opt_star_test ::= "," star_test? comma_opt_star_test? ;
endofline ::= comment? newline ;
import_name ::= "import" dotted_as_names ;
global_stmt ::= "global" id+ ;
stringprefix ::= "r" | "u" | "ur" | "R" | "U" | "UR" | "Ur" | "uR" | "b" ;
old_lambdef ::= "lambda" varargslist? ":" old_test ;
import_as_name ::= endofline* id as_name? ;
compound_stmt ::= if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated ;
xorop_expr ::= endofline* "^" endofline* xor_expr ;
floatliteral ::= (number imag?) | (pointfloat imag?) ;
expr_stmt ::= (testlist is_expr*) | (testlist augassign assign_value) ;
try_stmt ::= "try" ":" suite except_clause_suite* else_clause? finally_clause? ;
stmt ::= (simple_stmt endofline) | compound_stmt ;
andop_and_expr ::= endofline* "&" endofline* and_expr ;
funcdef ::= "def" id parameters ":" suite ;
shift_op ::= "<<" | ">>" ;
argument ::= endofline* test argument_value? endofline* ;
comma_test ::= endofline? "," test ;
exec_stmt ::= "exec" expr in_test? comma_test? ;
integerliteral ::= integer long? imag? ;
exp_factor ::= "**" factor ;
literal ::= (stringliteral more_stringliteral*) | integerliteral | floatliteral ;
indent ::= "INDENT" IN ;
fpdef_test_comma ::= fpdef_test "," ;
finally_clause ::= "finally" ":" suite ;
old_test ::= or_test | old_lambdef ;
if_stmt ::= "if" test ":" suite elif_clause* else_clause? ;
dict_entry ::= endofline* test ":" endofline* test ;
plist_iter ::= (endofline* plist_for) | (endofline* plist_if) ;
gen_iter ::= (endofline* gen_for) | (endofline* gen_if) ;
op_arith_expr ::= endofline* arith_op endofline* arith_expr ;
import_items ::= "*" | (endofline* SPOFF "(" SPON import_as_names endofline* ")") | (endofline* import_as_names) ;
with_stmt ::= "with" test with_var? ":" suite ;
decorators ::= decorator+ ;
term_op ::= "*" | "/" | "%" | "//" ;
shift_expr ::= arith_expr shiftop_shift_expr* ;
test ::= (endofline* or_test if_test? endofline?) | (endofline* lambdef endofline?) ;
except_clause_suite ::= except_clause ":" suite ;
classdef ::= ("class" id? ":" suite) | ("class" id? SPOFF "(" SPON testlist? endofline* ")" ":" suite) ;
dot_dotted_name ::= endofline* "." endofline* dotted_name ;
arith_expr ::= term op_arith_expr* ;
is_test ::= "=" endofline* test ;
program ::= file_input ;
dotted_name ::= id dot_dotted_name? ;
stringliteral ::= (stringprefix SPOFF string SPON) | string ;
not_test ::= "not"* endofline* comparison ;
for_stmt ::= "for" exprlist "in" testlist ":" suite else_clause? ;
long ::= (SPOFF "l" SPON) | (SPOFF "L" SPON) ;
del_stmt ::= "del" exprlist ;
as_name ::= "as" id ;
return_stmt ::= "return" testlist? ;
if_test ::= endofline* "if" or_test "else" test ;
dotted_as_names ::= dotted_as_name+ ;
argument_value ::= (endofline* gen_for?) | ("=" endofline* test) ;
shiftop_shift_expr ::= endofline? shift_op endofline? shift_expr ;
or_test ::= and_test orop_or_test? ;
gen_if ::= "if" old_test gen_iter? ;
term ::= factor op_term* ;
in_test ::= "in" test ;
fplist ::= fpdef+ ","? ;
yield_expr ::= "yield" testlist ;
listmaker ::= (endofline* test endofline* plist_for endofline*) | (endofline* {test ","}* ","? endofline*) ;
dotted_as_name ::= dotted_name as_id? ;
augassign ::= "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**=" | "//=" ;
andop_and_test ::= endofline* "and" endofline* and_test ;
continue_stmt ::= "continue" ;
star_test ::= (endofline* "*" test) | (endofline* "**" test) ;
and_expr ::= shift_expr andop_and_expr? ;
gen_for ::= "for" exprlist "in" or_test gen_iter? ;
xor_expr ::= and_expr xorop_expr? ;
fpdef_test ::= endofline* fpdef is_test? endofline? ;
except_clause ::= "except" except_test? ;
import_as_names ::= import_as_name+ ","? ;
atom ::= id | literal | ("(" IN endofline* yield_expr? endofline* ")" EX) | ("(" IN endofline* testplist_gexp endofline* ")" EX) | ("[" IN endofline* listmaker? "]" EX) | ("{" IN endofline* dictmaker? endofline* "}" EX) | ("`" testlist1 "`") ;
orop_expr ::= endofline* "|" endofline* expr ;
factor ::= unary_op* power ;
dictmaker ::= {dict_entry ","}* endofline* ","? endofline* ;
semicolon_small_stmt ::= ";" small_stmt ;
as_or_comma_test ::= ("as" test) | ("," test) ;
imag ::= (SPOFF "j" SPON) | (SPOFF "J" SPON) ;
as_id ::= "as" id ;
file_input ::= stmt_or_newline* ;
integer ::= integernumber | hexinteger | octinteger ;
raise_stmt ::= "raise" test_list? ;
decorator ::= "@" dotted_name decorator_arglist? endofline endofline* ;
yield_stmt ::= yield_expr ;
flow_stmt ::= break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt ;
pass_stmt ::= "pass" ;
else_clause ::= "else" ":" suite ;
simple_stmt ::= (small_stmt semicolon_small_stmt* ";"?) | comment ;
arith_op ::= "+" | "-" ;
trailer ::= (SPOFF "(" SPON IN arglist endofline* ")" EX) | ("[" IN subscriptlist "]" EX) | (endofline* "." endofline* id) ;
orop_or_test ::= endofline* "or" endofline* or_test ;
testlist ::= test+ endofline* ","? ;
testplist_safe ::= old_test+ ","? ;
with_var ::= "as" expr ;
test_list ::= test comma_test? comma_test? ;
subscriptlist ::= subscript+ "," endofline* ;
import_stmt ::= import_name | import_from ;
varargslist ::= (fpdef_test_comma* endofline* "*" id) | (fpdef_test_comma* endofline* "*" id endofline? "," endofline* "**" id) | (fpdef_test_comma* endofline* "**" id) | (fpdef_test+ ","?) ;
assert_stmt ::= "assert" test comma_test? ;
assign_value ::= yield_expr | testlist ;
print_stmt ::= "print" ">>"? {test ","}* ","? ;
plist_for ::= "for" endofline* exprlist "in" testplist_safe plist_iter? ;
encoding_decl ::= id ;
while_stmt ::= "while" test ":" suite else_clause? ;
more_stringliteral ::= endofline* stringliteral ;
exprlist ::= expr+ endofline* ","? ;
string ::= stringlit | charlit | longstringlit | longcharlit ;
comp_op ::= "<" | ">" | "==" | ">=" | "<=" | "<>" | "!=" | "in" | ("not" "in") | "is" | ("is" "not") ;
stmt_or_newline ::= stmt | endofline ;
subscript ::= (endofline* "." "." "." endofline?) | (endofline* test endofline?) | (endofline* test? ":" test? sliceop? endofline?) ;
elif_clause ::= "elif" test ":" suite ;
op_term ::= endofline* term_op endofline* term ;
comparison ::= expr comp_op_comparison? ;
dedent ::= "DEDENT" EX ;
break_stmt ::= "break" ;
power ::= atom trailer* exp_factor? ;
import_from ::= "from" "."* dotted_name? endofline* "import" import_items ;
testlist1 ::= {test ","}* ;
small_stmt ::= expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt ;
--------------------markup::docbook-walsh.bgf--------------------
sect1info ::= sect1info::(sect1info.attlist info.class+) ;
link ::= link::(link.attlist para.char.mix*) ;
productname ::= productname::(productname.attlist para.char.mix*) ;
personblurb.role.attrib ::= role.attrib ;
constant.role.attrib ::= role.attrib ;
lineannotation.role.attrib ::= role.attrib ;
qandaentry ::= qandaentry::(qandaentry.attlist blockinfo? revhistory? question answer*) ;
abbrev.role.attrib ::= role.attrib ;
local.pubsnumber.attrib ::= ε ;
partinfo.role.attrib ::= role.attrib ;
mediaobject.attlist ::= common.attrib mediaobject.role.attrib local.mediaobject.attrib ;
local.glosslist.attrib ::= ε ;
note ::= note::(note.attlist title? admon.mix+) ;
msgexplan.role.attrib ::= role.attrib ;
local.seeseealso.attrib ::= ε ;
itermset ::= itermset::(itermset.attlist indexterm+) ;
local.citebiblioid.attrib ::= ε ;
local.section.class ::= φ ;
screeninfo.attlist ::= common.attrib screeninfo.role.attrib local.screeninfo.attrib ;
local.legalnotice.attrib ::= ε ;
refmeta.attlist ::= common.attrib refmeta.role.attrib local.refmeta.attrib ;
mousebutton.attlist ::= moreinfo.attrib common.attrib mousebutton.role.attrib local.mousebutton.attrib ;
local.refentryinfo.attrib ::= ε ;
medialabel.role.attrib ::= role.attrib ;
local.synopsis.attrib ::= ε ;
pubsnumber ::= pubsnumber::(pubsnumber.attlist docinfo.char.mix*) ;
modespec ::= modespec::(modespec.attlist docinfo.char.mix*) ;
computeroutput ::= computeroutput::(computeroutput.attlist (cptr.char.mix | co)*) ;
revision ::= revision::(revision.attlist revnumber date authorinitials* (revremark | revdescription)?) ;
othercredit.attlist ::= common.attrib othercredit.role.attrib local.othercredit.attrib ;
local.glossdef.attrib ::= ε ;
equation.content ::= alt? (graphic+) | (mediaobject+) ;
spanspec.attlist ::= namest::string() nameend::string() spanname::string() (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
classname.attlist ::= common.attrib classname.role.attrib local.classname.attrib ;
street.attlist ::= common.attrib street.role.attrib local.street.attrib ;
local.bibliography.attrib ::= ε ;
local.constant.attrib ::= ε ;
mediaobjectco ::= mediaobjectco::(mediaobjectco.attlist objectinfo? imageobjectco (imageobjectco | textobject)*) ;
local.guibutton.attrib ::= ε ;
glossaryinfo ::= glossaryinfo::(glossaryinfo.attlist info.class+) ;
qandaentry.role.attrib ::= role.attrib ;
refentrytitle.attlist ::= common.attrib refentrytitle.role.attrib local.refentrytitle.attrib ;
local.co.attrib ::= ε ;
local.method.synop.class ::= φ ;
sgmltag ::= sgmltag::(sgmltag.attlist smallcptr.char.mix*) ;
local.blockquote.attrib ::= ε ;
lotentry ::= lotentry::(lotentry.attlist para.char.mix*) ;
refentryinfo.role.attrib ::= role.attrib ;
menuchoice ::= menuchoice::(menuchoice.attlist shortcut? (guibutton | guiicon | guilabel | guimenu | guimenuitem | guisubmenu | interface)+) ;
local.tocpart.attrib ::= ε ;
userlevel.attrib ::= (userlevel::string())? ;
answer ::= answer::(answer.attlist label? qandaset.mix* qandaentry*) ;
book.role.attrib ::= role.attrib ;
local.revision.attrib ::= ε ;
keyword.attlist ::= common.attrib keyword.role.attrib local.keyword.attrib ;
local.pagenums.attrib ::= ε ;
subjectset ::= subjectset::(subjectset.attlist subject+) ;
footnote.role.attrib ::= role.attrib ;
initializer.attlist ::= common.attrib initializer.role.attrib local.initializer.attrib ;
confdates.attlist ::= common.attrib confdates.role.attrib local.confdates.attrib ;
local.command.attrib ::= ε ;
confgroup.role.attrib ::= role.attrib ;
date ::= date::(date.attlist docinfo.char.mix*) ;
imageobject.role.attrib ::= role.attrib ;
manvolnum ::= manvolnum::(manvolnum.attlist word.char.mix*) ;
revision.attlist ::= common.attrib revision.role.attrib local.revision.attrib ;
local.authorblurb.attrib ::= ε ;
glosslist ::= glosslist::(glosslist.attlist glossentry+) ;
local.audioobject.attrib ::= ε ;
application.role.attrib ::= role.attrib ;
sect1.role.attrib ::= role.attrib ;
equation.role.attrib ::= role.attrib ;
local.primsecter.attrib ::= ε ;
xreflabel.attrib ::= (xreflabel::string())? ;
refsect2info.role.attrib ::= role.attrib ;
warning ::= warning::(warning.attlist title? admon.mix+) ;
toc.role.attrib ::= role.attrib ;
sgmltag.role.attrib ::= role.attrib ;
local.confdates.attrib ::= ε ;
appendix.attlist ::= label.attrib status.attrib common.attrib appendix.role.attrib local.appendix.attrib ;
refclass.role.attrib ::= role.attrib ;
copyright.attlist ::= common.attrib copyright.role.attrib local.copyright.attrib ;
interfacename.role.attrib ::= role.attrib ;
ooclass ::= ooclass::(ooclass.attlist modifier* classname) ;
acronym.role.attrib ::= role.attrib ;
country ::= country::(country.attlist docinfo.char.mix*) ;
refdescriptor.role.attrib ::= role.attrib ;
local.refsectioninfo.attrib ::= ε ;
local.coref.attrib ::= ε ;
bibliocomponent.mix ::= abbrev | abstract | address | artpagenums | author | authorgroup | authorinitials | bibliomisc | biblioset | collab | confgroup | contractnum | contractsponsor | copyright | corpauthor | corpname | date | edition | editor | invpartnumber | isbn | issn | issuenum | orgname | biblioid | citebiblioid | bibliosource | bibliorelation | bibliocoverage | othercredit | pagenums | printhistory | productname | productnumber | pubdate | publisher | publishername | pubsnumber | releaseinfo | revhistory | seriesvolnums | subtitle | title | titleabbrev | volumenum | citetitle | personname | person.ident.mix | ndxterm.class | local.bibliocomponent.mix ;
refentry.role.attrib ::= role.attrib ;
local.simplemsgentry.attrib ::= ε ;
refentry.attlist ::= status.attrib common.attrib refentry.role.attrib local.refentry.attrib ;
local.refclass.attrib ::= ε ;
msgaud ::= msgaud::(msgaud.attlist para.char.mix*) ;
pagenums.attlist ::= common.attrib pagenums.role.attrib local.pagenums.attrib ;
graphics.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? local.graphics.attrib ;
informalfigure.role.attrib ::= role.attrib ;
action.role.attrib ::= role.attrib ;
local.indexdivcomponent.mix ::= φ ;
areaset.role.attrib ::= role.attrib ;
corpauthor.attlist ::= common.attrib corpauthor.role.attrib local.corpauthor.attrib ;
msginfo.role.attrib ::= role.attrib ;
forms.hook ::= φ ;
msg ::= msg::(msg.attlist title? msgmain (msgsub | msgrel)*) ;
programlisting ::= programlisting::(programlisting.attlist (para.char.mix | co | coref | lineannotation | textobject)*) ;
msginfo.attlist ::= common.attrib msginfo.role.attrib local.msginfo.attrib ;
preface ::= preface::(preface.attlist beginpage? prefaceinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
tocentry.role.attrib ::= role.attrib ;
seriesvolnums.role.attrib ::= role.attrib ;
local.title.char.mix ::= φ ;
sect2info ::= sect2info::(sect2info.attlist info.class+) ;
linkendreq.attrib ::= linkend::string() ;
videoobject ::= videoobject::(videoobject.attlist objectinfo? videodata) ;
revdescription ::= revdescription::(revdescription.attlist revdescription.mix+) ;
abstract.role.attrib ::= role.attrib ;
glossary.role.attrib ::= role.attrib ;
firstterm.role.attrib ::= role.attrib ;
orgname ::= orgname::(orgname.attlist docinfo.char.mix*) ;
refsect1.role.attrib ::= role.attrib ;
primaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
guilabel.role.attrib ::= role.attrib ;
tocchap.attlist ::= label.attrib common.attrib tocchap.role.attrib local.tocchap.attrib ;
local.book.attrib ::= ε ;
seealso.attlist ::= common.attrib seeseealso.role.attrib local.seeseealso.attrib ;
caution ::= caution::(caution.attlist title? admon.mix+) ;
citerefentry.role.attrib ::= role.attrib ;
local.orgdiv.attrib ::= ε ;
local.itermset.attrib ::= ε ;
revhistory.role.attrib ::= role.attrib ;
arch.attrib ::= (arch::string())? ;
foreignphrase.role.attrib ::= role.attrib ;
citetitle ::= citetitle::(citetitle.attlist para.char.mix*) ;
destructorsynopsis.role.attrib ::= role.attrib ;
area.role.attrib ::= role.attrib ;
local.msgmain.attrib ::= ε ;
classsynopsis.role.attrib ::= role.attrib ;
refsynopsisdiv.role.attrib ::= role.attrib ;
local.index.class ::= φ ;
link.char.class ::= link | olink | ulink | local.link.char.class ;
local.chapter.class ::= φ ;
admon.class ::= caution | important | note | tip | warning | local.admon.class ;
indexinfo.attlist ::= common.attrib indexinfo.role.attrib local.indexinfo.attrib ;
varlistentry ::= varlistentry::(varlistentry.attlist term+ listitem) ;
local.cmdsynopsis.attrib ::= ε ;
productnumber.role.attrib ::= role.attrib ;
equation ::= equation::(equation.attlist blockinfo? formalobject.title.content? informalequation | equation.content) ;
local.glossdef.mix ::= φ ;
command ::= command::(command.attlist cptr.char.mix*) ;
local.setinfo.attrib ::= ε ;
reference ::= reference::(reference.attlist beginpage? referenceinfo? bookcomponent.title.content partintro? refentry.class+) ;
local.refsect3info.attrib ::= ε ;
conformance.attrib ::= (conformance::string())? ;
objectinfo.role.attrib ::= role.attrib ;
editor.attlist ::= common.attrib editor.role.attrib local.editor.attrib ;
inlinemediaobject.role.attrib ::= role.attrib ;
screen.attlist ::= width.attrib linespecific.attrib common.attrib screen.role.attrib local.screen.attrib ;
accel.role.attrib ::= role.attrib ;
caution.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
type ::= type::(type.attlist smallcptr.char.mix*) ;
citebiblioid.attlist ::= biblio.class.attrib common.attrib citebiblioid.role.attrib local.citebiblioid.attrib ;
local.pob.attrib ::= ε ;
figure.role.attrib ::= role.attrib ;
honorific.role.attrib ::= role.attrib ;
footnoteref ::= footnoteref::(footnoteref.attlist ε) ;
local.funcsynopsisinfo.attrib ::= ε ;
local.citation.attrib ::= ε ;
guimenuitem ::= guimenuitem::(guimenuitem.attlist (smallcptr.char.mix | accel)*) ;
partintro.role.attrib ::= role.attrib ;
paramdef.attlist ::= common.attrib paramdef.role.attrib local.paramdef.attrib ;
funcsynopsis.attlist ::= label.attrib common.attrib funcsynopsis.role.attrib local.funcsynopsis.attrib ;
local.equation.attrib ::= ε ;
seg.role.attrib ::= role.attrib ;
arg.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib arg.role.attrib local.arg.attrib ;
local.part.attrib ::= ε ;
idreq.common.attrib ::= idreq.attrib lang.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib local.common.attrib ;
partinfo ::= partinfo::(partinfo.attlist info.class+) ;
local.methodsynopsis.attrib ::= ε ;
step.role.attrib ::= role.attrib ;
local.publisher.attrib ::= ε ;
biblioset.role.attrib ::= role.attrib ;
sect1.attlist ::= (renderas::("sect2" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect1.role.attrib local.sect1.attrib ;
local.screenco.attrib ::= ε ;
firstterm ::= firstterm::(firstterm.attlist word.char.mix*) ;
command.attlist ::= moreinfo.attrib common.attrib command.role.attrib local.command.attrib ;
reference.attlist ::= label.attrib status.attrib common.attrib reference.role.attrib local.reference.attrib ;
local.variablelist.attrib ::= ε ;
local.honorific.attrib ::= ε ;
screeninfo ::= screeninfo::(screeninfo.attlist para.char.mix*) ;
simplemsgentry.role.attrib ::= role.attrib ;
imageobjectco.attlist ::= common.attrib imageobjectco.role.attrib local.imageobjectco.attrib ;
year.role.attrib ::= role.attrib ;
local.highlights.mix ::= φ ;
bibliographyinfo ::= bibliographyinfo::(bibliographyinfo.attlist info.class+) ;
local.keycode.attrib ::= ε ;
firstname.role.attrib ::= role.attrib ;
local.orgname.attrib ::= ε ;
classsynopsis ::= classsynopsis::(classsynopsis.attlist (ooclass | oointerface | ooexception)+ (classsynopsisinfo | fieldsynopsis | method.synop.class)*) ;
dedication.role.attrib ::= role.attrib ;
subscript ::= subscript::(subscript.attlist (string() | link.char.class | emphasis | replaceable | symbol | inlinegraphic | inlinemediaobject | base.char.class | other.char.class)*) ;
interface.attlist ::= moreinfo.attrib common.attrib interface.role.attrib local.interface.attrib ;
local.graphics.attrib ::= ε ;
local.refclass.char.mix ::= φ ;
releaseinfo.attlist ::= common.attrib releaseinfo.role.attrib local.releaseinfo.attrib ;
local.areaset.attrib ::= ε ;
trademark.role.attrib ::= role.attrib ;
guiicon.attlist ::= moreinfo.attrib common.attrib guiicon.role.attrib local.guiicon.attrib ;
footnoteref.attlist ::= linkendreq.attrib label.attrib common.attrib footnoteref.role.attrib local.footnoteref.attrib ;
varname.attlist ::= common.attrib varname.role.attrib local.varname.attrib ;
local.guimenu.attrib ::= ε ;
guibutton.role.attrib ::= role.attrib ;
local.firstname.attrib ::= ε ;
sect3info ::= sect3info::(sect3info.attlist info.class+) ;
refmiscinfo.attlist ::= (class::string())? common.attrib refmiscinfo.role.attrib local.refmiscinfo.attrib ;
bibliomisc.role.attrib ::= role.attrib ;
admon.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | sidebar | anchor | bridgehead | remark | ndxterm.class | beginpage | local.admon.mix ;
isbn ::= isbn::(isbn.attlist docinfo.char.mix*) ;
simplesect ::= simplesect::(simplesect.attlist sect.title.content divcomponent.mix+) ;
label ::= label::(label.attlist word.char.mix*) ;
msgsub.role.attrib ::= role.attrib ;
refname.role.attrib ::= role.attrib ;
msgsub.attlist ::= common.attrib msgsub.role.attrib local.msgsub.attrib ;
xref.role.attrib ::= role.attrib ;
local.docinfo.char.mix ::= φ ;
glossary.attlist ::= status.attrib common.attrib glossary.role.attrib local.glossary.attrib ;
msgexplan.attlist ::= common.attrib msgexplan.role.attrib local.msgexplan.attrib ;
local.affiliation.attrib ::= ε ;
local.refsynopsisdiv.attrib ::= ε ;
tabentry.mix ::= list.class | admon.class | linespecific.class | para.class | graphic | mediaobject | local.tabentry.mix ;
informalexample.role.attrib ::= role.attrib ;
local.common.attrib ::= ε ;
local.varname.attrib ::= ε ;
collabname.attlist ::= common.attrib collabname.role.attrib local.collabname.attrib ;
subtitle.attlist ::= common.attrib subtitle.role.attrib local.subtitle.attrib ;
bookinfo.attlist ::= (contents::string())? common.attrib bookinfo.role.attrib local.bookinfo.attrib ;
keycap.role.attrib ::= role.attrib ;
sectioninfo.role.attrib ::= role.attrib ;
section ::= section::(section.attlist sectioninfo? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (section.class*) | (simplesect*)) | (refentry.class+) | (section.class+) | (simplesect+) nav.class*) ;
local.beginpage.attrib ::= ε ;
initializer ::= initializer::(initializer.attlist smallcptr.char.mix*) ;
issuenum.role.attrib ::= role.attrib ;
collab.role.attrib ::= role.attrib ;
local.anchor.attrib ::= ε ;
funcprototype ::= funcprototype::(funcprototype.attlist funcdef void | varargs | (paramdef+)) ;
subscript.attlist ::= common.attrib ssscript.role.attrib local.ssscript.attrib ;
local.artpagenums.attrib ::= ε ;
local.jobtitle.attrib ::= ε ;
local.refsect2.attrib ::= ε ;
issn.attlist ::= common.attrib issn.role.attrib local.issn.attrib ;
local.section.attrib ::= ε ;
indexinfo.role.attrib ::= role.attrib ;
primary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
local.ackno.attrib ::= ε ;
local.link.char.class ::= φ ;
quote.role.attrib ::= role.attrib ;
local.pubdate.attrib ::= ε ;
token.role.attrib ::= role.attrib ;
sect1info.attlist ::= common.attrib sect1info.role.attrib local.sect1info.attrib ;
step ::= step::(step.attlist title? (component.mix+ (substeps component.mix*)?) | (substeps component.mix*)) ;
docinfo.char.mix ::= string() | link.char.class | emphasis | trademark | replaceable | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | local.docinfo.char.mix ;
toclevel4.role.attrib ::= role.attrib ;
synopfragmentref.attlist ::= linkendreq.attrib common.attrib synopfragmentref.role.attrib local.synopfragmentref.attrib ;
errorcode.role.attrib ::= role.attrib ;
local.ooclass.attrib ::= ε ;
itermset.role.attrib ::= role.attrib ;
refentryinfo.attlist ::= common.attrib refentryinfo.role.attrib local.refentryinfo.attrib ;
seeseealso.role.attrib ::= role.attrib ;
screenshot.role.attrib ::= role.attrib ;
bridgehead.attlist ::= (renderas::("other" | "sect1" | "sect2" | "sect3" | "sect4" | "sect5"))? common.attrib bridgehead.role.attrib local.bridgehead.attrib ;
phrase ::= phrase::(phrase.attlist para.char.mix*) ;
local.initializer.attrib ::= ε ;
formal.class ::= equation | example | figure | table | local.formal.class ;
beginpage ::= beginpage::(beginpage.attlist ε) ;
citation.attlist ::= common.attrib citation.role.attrib local.citation.attrib ;
local.qandaset.mix ::= φ ;
caption.attlist ::= common.attrib caption.role.attrib local.caption.attrib ;
linkend.attrib ::= (linkend::string())? ;
inlineequation.attlist ::= common.attrib inlineequation.role.attrib local.inlineequation.attrib ;
confdates.role.attrib ::= role.attrib ;
local.figure.mix ::= φ ;
local.publishername.attrib ::= ε ;
userinput.role.attrib ::= role.attrib ;
structname.attlist ::= common.attrib structname.role.attrib local.structname.attrib ;
para.attlist ::= common.attrib para.role.attrib local.para.attrib ;
userinput.attlist ::= moreinfo.attrib common.attrib userinput.role.attrib local.userinput.attrib ;
linespecific.class ::= literallayout | programlisting | programlistingco | screen | screenco | screenshot | local.linespecific.class ;
exceptionname.role.attrib ::= role.attrib ;
computeroutput.attlist ::= moreinfo.attrib common.attrib computeroutput.role.attrib local.computeroutput.attrib ;
keywordset.role.attrib ::= role.attrib ;
local.sect4.attrib ::= ε ;
function.attlist ::= moreinfo.attrib common.attrib function.role.attrib local.function.attrib ;
bookcomponent.title.content ::= title subtitle? titleabbrev? ;
modifier.attlist ::= common.attrib modifier.role.attrib local.modifier.attrib ;
local.guiicon.attrib ::= ε ;
cptr.char.mix ::= string() | link.char.class | tech.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.cptr.char.mix ;
personblurb ::= personblurb::(personblurb.attlist title? para.class+) ;
videodata ::= videodata::(videodata.attlist ε) ;
local.seealsoie.attrib ::= ε ;
articleinfo ::= articleinfo::(articleinfo.attlist info.class+) ;
bibliomixed ::= bibliomixed::(bibliomixed.attlist (string() | bibliocomponent.mix | bibliomset)*) ;
local.contrib.attrib ::= ε ;
local.classsynopsisinfo.attrib ::= ε ;
local.other.char.class ::= φ ;
local.othername.attrib ::= ε ;
refsectioninfo ::= refsectioninfo::(refsectioninfo.attlist info.class+) ;
bibliocoverage ::= bibliocoverage::(bibliocoverage.attlist docinfo.char.mix*) ;
local.indexterm.attrib ::= ε ;
local.symbol.attrib ::= ε ;
glossaryinfo.attlist ::= common.attrib glossaryinfo.role.attrib local.glossaryinfo.attrib ;
local.info.class ::= φ ;
local.sect5info.attrib ::= ε ;
seealso ::= seealso::(seealso.attlist ndxterm.char.mix*) ;
refsect1info.attlist ::= common.attrib refsect1info.role.attrib local.refsect1info.attrib ;
colophon.role.attrib ::= role.attrib ;
wordasword.attlist ::= common.attrib wordasword.role.attrib local.wordasword.attrib ;
audioobject ::= audioobject::(audioobject.attlist objectinfo? audiodata) ;
systemitem.attlist ::= (class::("constant" | "event" | "eventhandler" | "domainname" | "fqdomainname" | "ipaddress" | "netmask" | "etheraddress" | "groupname" | "library" | "macro" | "osname" | "filesystem" | "resource" | "systemname" | "username" | "newsgroup"))? moreinfo.attrib common.attrib systemitem.role.attrib local.systemitem.attrib ;
revhistory ::= revhistory::(revhistory.attlist revision+) ;
local.sidebarinfo.attrib ::= ε ;
keycombo ::= keycombo::(keycombo.attlist (keycap | keycombo | keysym | mousebutton)+) ;
jobtitle.role.attrib ::= role.attrib ;
local.classsynopsis.attrib ::= ε ;
postcode ::= postcode::(postcode.attlist docinfo.char.mix*) ;
local.ooexception.attrib ::= ε ;
classsynopsisinfo.attlist ::= linespecific.attrib common.attrib classsynopsisinfo.role.attrib local.classsynopsisinfo.attrib ;
local.list.class ::= φ ;
tgroup ::= tgroup::(tgroup.attlist tbl.tgroup.mdl) ;
seealsoie.role.attrib ::= role.attrib ;
refsynopsisdivinfo.attlist ::= common.attrib refsynopsisdivinfo.role.attrib local.refsynopsisdivinfo.attrib ;
refentry.class ::= refentry | local.refentry.class ;
local.collab.attrib ::= ε ;
publishername ::= publishername::(publishername.attlist docinfo.char.mix*) ;
local.keycombo.attrib ::= ε ;
local.toclevel1.attrib ::= ε ;
listitem.attlist ::= (override::string())? common.attrib listitem.role.attrib local.listitem.attrib ;
local.exceptionname.attrib ::= ε ;
volumenum.role.attrib ::= role.attrib ;
local.sidebar.attrib ::= ε ;
group ::= group::(group.attlist (arg | group | option | synopfragmentref | replaceable | sbr)+) ;
sect4info ::= sect4info::(sect4info.attlist info.class+) ;
other.char.class ::= remark | subscript | superscript | local.other.char.class ;
local.sect2info.attrib ::= ε ;
local.funcprototype.attrib ::= ε ;
alt.role.attrib ::= role.attrib ;
quote ::= quote::(quote.attlist para.char.mix*) ;
local.otheraddr.attrib ::= ε ;
referenceinfo ::= referenceinfo::(referenceinfo.attlist info.class+) ;
sect.title.content ::= title subtitle? titleabbrev? ;
local.footnote.mix ::= φ ;
local.para.mix ::= φ ;
ooexception ::= ooexception::(ooexception.attlist modifier* exceptionname) ;
refname.attlist ::= common.attrib refname.role.attrib local.refname.attrib ;
warning.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.ssscript.attrib ::= ε ;
contrib.attlist ::= common.attrib contrib.role.attrib local.contrib.attrib ;
literallayout.attlist ::= width.attrib linespecific.attrib (class::("monospaced" | "normal"))? common.attrib literallayout.role.attrib local.literallayout.attrib ;
subjectterm.attlist ::= common.attrib subjectterm.role.attrib local.subjectterm.attrib ;
local.procedure.attrib ::= ε ;
errorname.role.attrib ::= role.attrib ;
state.attlist ::= common.attrib state.role.attrib local.state.attrib ;
local.oointerface.attrib ::= ε ;
honorific ::= honorific::(honorific.attlist docinfo.char.mix*) ;
lineage.role.attrib ::= role.attrib ;
foreignphrase.attlist ::= common.attrib foreignphrase.role.attrib local.foreignphrase.attrib ;
destructorsynopsis.attlist ::= (language::string())? common.attrib destructorsynopsis.role.attrib local.destructorsynopsis.attrib ;
area.attlist ::= label.attrib linkends.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib area.role.attrib local.area.attrib ;
setindexinfo ::= setindexinfo::(setindexinfo.attlist info.class+) ;
local.phrase.attrib ::= ε ;
tgroup.attlist ::= cols::string() tbl.tgroup.att (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
publishername.role.attrib ::= role.attrib ;
funcsynopsisinfo.role.attrib ::= role.attrib ;
imagedata.role.attrib ::= role.attrib ;
guisubmenu.role.attrib ::= role.attrib ;
local.modespec.attrib ::= ε ;
textdata ::= textdata::(textdata.attlist ε) ;
indexdiv.role.attrib ::= role.attrib ;
remark.attlist ::= common.attrib remark.role.attrib local.remark.attrib ;
sect2info.role.attrib ::= role.attrib ;
tbl.table.att ::= (tabstyle::string())? (tocentry::yesorno)? (shortentry::yesorno)? (orient::("port" | "land"))? (pgwide::yesorno)? ;
indexdiv.attlist ::= common.attrib indexdiv.role.attrib local.indexdiv.attrib ;
bibliodiv.attlist ::= status.attrib common.attrib bibliodiv.role.attrib local.bibliodiv.attrib ;
yesorno ::= string() ;
article.role.attrib ::= role.attrib ;
option.attlist ::= common.attrib option.role.attrib local.option.attrib ;
toclevel1.attlist ::= common.attrib toclevel1.role.attrib local.toclevel1.attrib ;
objectinfo.attlist ::= common.attrib objectinfo.role.attrib local.objectinfo.attrib ;
gen.char.class ::= abbrev | acronym | citation | citerefentry | citetitle | emphasis | firstterm | foreignphrase | glossterm | footnote | phrase | quote | trademark | wordasword | personname | local.gen.char.class ;
local.acronym.attrib ::= ε ;
action ::= action::(action.attlist cptr.char.mix*) ;
initializer.role.attrib ::= role.attrib ;
structname.role.attrib ::= role.attrib ;
para.role.attrib ::= role.attrib ;
refnamediv ::= refnamediv::(refnamediv.attlist refdescriptor? refname+ refpurpose refclass* (remark | link.char.class)*) ;
book.class ::= book | local.book.class ;
varname ::= varname::(varname.attlist smallcptr.char.mix*) ;
trademark ::= trademark::(trademark.attlist (string() | link.char.class | tech.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | emphasis)*) ;
optional.attlist ::= common.attrib optional.role.attrib local.optional.attrib ;
personname.attlist ::= common.attrib personname.role.attrib local.personname.attrib ;
vendor.attrib ::= (vendor::string())? ;
local.keysym.attrib ::= ε ;
volumenum ::= volumenum::(volumenum.attlist docinfo.char.mix*) ;
textdata.role.attrib ::= role.attrib ;
local.step.attrib ::= ε ;
local.bibliomset.attrib ::= ε ;
markup ::= markup::(markup.attlist smallcptr.char.mix*) ;
word.char.mix ::= string() | acronym | emphasis | trademark | link.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.word.char.mix ;
qandadiv.attlist ::= common.attrib qandadiv.role.attrib local.qandadiv.attrib ;
local.listitem.attrib ::= ε ;
sect2.role.attrib ::= role.attrib ;
calloutlist.role.attrib ::= role.attrib ;
varlistentry.role.attrib ::= role.attrib ;
glossseealso.attlist ::= (otherterm::string())? common.attrib glossseealso.role.attrib local.glossseealso.attrib ;
sect2.attlist ::= (renderas::("sect1" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect2.role.attrib local.sect2.attrib ;
local.funcsynopsis.attrib ::= ε ;
equation.attlist ::= label.attrib common.attrib equation.role.attrib local.equation.attrib ;
local.citetitle.attrib ::= ε ;
citerefentry ::= citerefentry::(citerefentry.attlist refentrytitle manvolnum?) ;
local.imageobjectco.attrib ::= ε ;
os.attrib ::= (os::string())? ;
errortype.attlist ::= common.attrib errortype.role.attrib local.errortype.attrib ;
msgorig.attlist ::= common.attrib msgorig.role.attrib local.msgorig.attrib ;
highlights.role.attrib ::= role.attrib ;
mediaobject.mix ::= videoobject | audioobject | imageobject | textobject | local.mediaobject.mix ;
highlights.attlist ::= common.attrib highlights.role.attrib local.highlights.attrib ;
local.methodparam.attrib ::= ε ;
replaceable ::= replaceable::(replaceable.attlist (string() | link.char.class | optional | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | co)*) ;
year.attlist ::= common.attrib year.role.attrib local.year.attrib ;
local.replaceable.attrib ::= ε ;
local.inlinegraphic.attrib ::= ε ;
errortext.role.attrib ::= role.attrib ;
othercredit ::= othercredit::(othercredit.attlist personname | (person.ident.mix+) (personblurb | email | address)*) ;
conftitle.role.attrib ::= role.attrib ;
common.table.attribs ::= bodyatt secur ;
refnamediv.attlist ::= common.attrib refnamediv.role.attrib local.refnamediv.attrib ;
inlinegraphic.role.attrib ::= role.attrib ;
tocback.role.attrib ::= role.attrib ;
primary ::= primary::(primary.attlist ndxterm.char.mix*) ;
guimenuitem.role.attrib ::= role.attrib ;
revnumber.role.attrib ::= role.attrib ;
holder.role.attrib ::= role.attrib ;
inlinegraphic.attlist ::= graphics.attrib common.attrib inlinegraphic.role.attrib local.inlinegraphic.attrib ;
sect5info ::= sect5info::(sect5info.attlist info.class+) ;
tocback.attlist ::= label.attrib linkend.attrib pagenum.attrib common.attrib tocback.role.attrib local.tocback.attrib ;
local.firstterm.attrib ::= ε ;
pubdate.role.attrib ::= role.attrib ;
guibutton.attlist ::= moreinfo.attrib common.attrib guibutton.role.attrib local.guibutton.attrib ;
glosslist.role.attrib ::= role.attrib ;
local.type.attrib ::= ε ;
synopfragmentref ::= synopfragmentref::(synopfragmentref.attlist string()) ;
refentrytitle ::= refentrytitle::(refentrytitle.attlist para.char.mix*) ;
mediaobject.role.attrib ::= role.attrib ;
appendixinfo ::= appendixinfo::(appendixinfo.attlist info.class+) ;
local.structfield.attrib ::= ε ;
local.appendix.class ::= φ ;
keysysm.role.attrib ::= role.attrib ;
synop.class ::= synopsis | cmdsynopsis | funcsynopsis | classsynopsis | fieldsynopsis | method.synop.class | local.synop.class ;
local.admon.attrib ::= ε ;
tbl.table-titles.mdl ::= titles ;
refsect2.role.attrib ::= role.attrib ;
ulink ::= ulink::(ulink.attlist para.char.mix*) ;
member.role.attrib ::= role.attrib ;
firstterm.attlist ::= linkend.attrib common.attrib firstterm.role.attrib local.firstterm.attrib ;
ooclass.role.attrib ::= role.attrib ;
component.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.component.mix ;
variablelist.attlist ::= (termlength::string())? common.attrib variablelist.role.attrib local.variablelist.attrib ;
keyword ::= keyword::(keyword.attlist string()) ;
local.refinline.char.mix ::= φ ;
hardware ::= hardware::(hardware.attlist cptr.char.mix*) ;
void.role.attrib ::= role.attrib ;
docinfo.char.class ::= author | authorinitials | corpauthor | modespec | othercredit | productname | productnumber | revhistory | local.docinfo.char.class ;
local.bibliographyinfo.attrib ::= ε ;
revremark ::= revremark::(revremark.attlist docinfo.char.mix*) ;
blockquote.role.attrib ::= role.attrib ;
confdates ::= confdates::(confdates.attlist docinfo.char.mix*) ;
blockquote.attlist ::= common.attrib blockquote.role.attrib local.blockquote.attrib ;
local.qandadiv.attrib ::= ε ;
envar ::= envar::(envar.attlist smallcptr.char.mix*) ;
issuenum.attlist ::= common.attrib issuenum.role.attrib local.issuenum.attrib ;
collab.attlist ::= common.attrib collab.role.attrib local.collab.attrib ;
classsynopsis.attlist ::= (language::string())? (class::("class" | "interface"))? common.attrib classsynopsis.role.attrib local.classsynopsis.attrib ;
confgroup ::= confgroup::(confgroup.attlist (confdates | conftitle | confnum | address | confsponsor)*) ;
glosssee.attlist ::= (otherterm::string())? common.attrib glosssee.role.attrib local.glosssee.attrib ;
local.msgorig.attrib ::= ε ;
filename.attlist ::= (class::("headerfile" | "partition" | "devicefile" | "libraryfile" | "directory" | "extension" | "symlink"))? (path::string())? moreinfo.attrib common.attrib filename.role.attrib local.filename.attrib ;
classname.role.attrib ::= role.attrib ;
street.role.attrib ::= role.attrib ;
property ::= property::(property.attlist cptr.char.mix*) ;
remark.role.attrib ::= role.attrib ;
local.street.attrib ::= ε ;
emphasis.role.attrib ::= role.attrib ;
local.literal.attrib ::= ε ;
appendixinfo.role.attrib ::= role.attrib ;
local.revdescription.mix ::= φ ;
synopfragment.attlist ::= idreq.common.attrib synopfragment.role.attrib local.synopfragment.attrib ;
appendix ::= appendix::(appendix.attlist beginpage? appendixinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
label.attlist ::= common.attrib label.role.attrib local.label.attrib ;
systemitem ::= systemitem::(systemitem.attlist (cptr.char.mix | acronym | co)*) ;
affiliation.attlist ::= common.attrib affiliation.role.attrib local.affiliation.attrib ;
epigraph.attlist ::= common.attrib epigraph.role.attrib local.epigraph.attrib ;
bodyatt ::= label.attrib ;
tertiaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
edition ::= edition::(edition.attlist docinfo.char.mix*) ;
local.textdata.attrib ::= ε ;
itermset.attlist ::= common.attrib itermset.role.attrib local.itermset.attrib ;
olink.role.attrib ::= role.attrib ;
classsynopsisinfo ::= classsynopsisinfo::(classsynopsisinfo.attlist (cptr.char.mix | textobject | lineannotation)*) ;
graphic.attlist ::= graphics.attrib common.attrib graphic.role.attrib local.graphic.attrib ;
prompt.role.attrib ::= role.attrib ;
local.answer.attrib ::= ε ;
optional.role.attrib ::= role.attrib ;
revremark.attlist ::= common.attrib revremark.role.attrib local.revremark.attrib ;
personname.role.attrib ::= role.attrib ;
local.partinfo.attrib ::= ε ;
local.othercredit.attrib ::= ε ;
indexentry.attlist ::= common.attrib indexentry.role.attrib local.indexentry.attrib ;
local.inlineequation.attrib ::= ε ;
revnumber ::= revnumber::(revnumber.attlist docinfo.char.mix*) ;
holder ::= holder::(holder.attlist docinfo.char.mix*) ;
confgroup.attlist ::= common.attrib confgroup.role.attrib local.confgroup.attrib ;
primsecter.role.attrib ::= role.attrib ;
glossdef.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | formal.class | remark | ndxterm.class | beginpage | local.glossdef.mix ;
glossseealso.role.attrib ::= role.attrib ;
calloutlist.attlist ::= common.attrib calloutlist.role.attrib local.calloutlist.attrib ;
refsect3info.role.attrib ::= role.attrib ;
refsect3 ::= refsect3::(refsect3.attlist refsect3info? refsect.title.content refcomponent.mix+) ;
step.attlist ::= (performance::("optional" | "required"))? common.attrib step.role.attrib local.step.attrib ;
refsect2 ::= refsect2::(refsect2.attlist refsect2info? refsect.title.content (refcomponent.mix+ refsect3*) | (refsect3+)) ;
refsect1 ::= refsect1::(refsect1.attlist refsect1info? refsect.title.content (refcomponent.mix+ refsect2*) | (refsect2+)) ;
shortcut.role.attrib ::= role.attrib ;
shortaffil.attlist ::= common.attrib shortaffil.role.attrib local.shortaffil.attrib ;
symbol ::= symbol::(symbol.attlist smallcptr.char.mix*) ;
informalexample ::= informalexample::(informalexample.attlist blockinfo? example.mix+) ;
moreinfo.attrib ::= (moreinfo::("refentry" | "none"))? ;
synopsis ::= synopsis::(synopsis.attlist (para.char.mix | graphic | mediaobject | co | coref | textobject | lineannotation)*) ;
partcontent.mix ::= appendix.class | chapter.class | nav.class | article.class | preface | refentry.class | reference | local.partcontent.mix ;
medialabel ::= medialabel::(medialabel.attlist smallcptr.char.mix*) ;
glossdef.role.attrib ::= role.attrib ;
local.mediaobject.mix ::= φ ;
local.constructorsynopsis.attrib ::= ε ;
msgmain.attlist ::= common.attrib msgmain.role.attrib local.msgmain.attrib ;
anchor.role.attrib ::= role.attrib ;
contractnum.role.attrib ::= role.attrib ;
local.varlistentry.attrib ::= ε ;
local.authorgroup.attrib ::= ε ;
varname.role.attrib ::= role.attrib ;
local.formalpara.attrib ::= ε ;
listitem.role.attrib ::= role.attrib ;
segmentedlist.attlist ::= common.attrib segmentedlist.role.attrib local.segmentedlist.attrib ;
subject.role.attrib ::= role.attrib ;
manvolnum.attlist ::= common.attrib namvolnum.role.attrib local.manvolnum.attrib ;
emphasis ::= emphasis::(emphasis.attlist para.char.mix*) ;
parameter.attlist ::= (class::("command" | "function" | "option"))? moreinfo.attrib common.attrib parameter.role.attrib local.parameter.attrib ;
bibliodiv ::= bibliodiv::(bibliodiv.attlist sect.title.content? component.mix* (biblioentry | bibliomixed)+) ;
glossentry.attlist ::= (sortas::string())? common.attrib glossentry.role.attrib local.glossentry.attrib ;
local.sbr.attrib ::= ε ;
msgrel ::= msgrel::(msgrel.attlist title? msgtext) ;
methodsynopsis ::= methodsynopsis::(methodsynopsis.attlist modifier* (type | void)? methodname (methodparam+) | void exceptionname* modifier*) ;
articleinfo.attlist ::= common.attrib articleinfo.role.attrib local.articleinfo.attrib ;
bibliomixed.attlist ::= common.attrib bibliomixed.role.attrib local.bibliomixed.attrib ;
idreq.attrib ::= id::string() ;
tbl.row.mdl ::= (entry | entrytbl)+ ;
local.revnumber.attrib ::= ε ;
local.notation.class ::= φ ;
phone ::= phone::(phone.attlist docinfo.char.mix*) ;
local.msgtext.attrib ::= ε ;
refsect1.attlist ::= status.attrib common.attrib refsect1.role.attrib local.refsect1.attrib ;
citebiblioid ::= citebiblioid::(citebiblioid.attlist docinfo.char.mix*) ;
screenshot ::= screenshot::(screenshot.attlist screeninfo? graphic | graphicco | mediaobject | mediaobjectco) ;
state.role.attrib ::= role.attrib ;
local.simplelist.attrib ::= ε ;
postcode.role.attrib ::= role.attrib ;
footnote ::= footnote::(footnote.attlist footnote.mix+) ;
bibliomset.role.attrib ::= role.attrib ;
sidebarinfo.role.attrib ::= role.attrib ;
seglistitem.role.attrib ::= role.attrib ;
graphicco ::= graphicco::(graphicco.attlist areaspec graphic calloutlist*) ;
local.prompt.attrib ::= ε ;
application ::= application::(application.attlist para.char.mix*) ;
local.admon.class ::= φ ;
sect2info.attlist ::= common.attrib sect2info.role.attrib local.sect2info.attrib ;
quote.attlist ::= common.attrib quote.role.attrib local.quote.attrib ;
toclevel5.role.attrib ::= role.attrib ;
local.ulink.attrib ::= ε ;
biblioset ::= biblioset::(biblioset.attlist bibliocomponent.mix+) ;
local.trademark.attrib ::= ε ;
local.screen.attrib ::= ε ;
printhistory ::= printhistory::(printhistory.attlist para.class+) ;
toclevel2.attlist ::= common.attrib toclevel2.role.attrib local.toclevel2.attrib ;
colophon ::= colophon::(colophon.attlist sect.title.content? textobject.mix+) ;
affiliation.role.attrib ::= role.attrib ;
epigraph.role.attrib ::= role.attrib ;
local.msgentry.attrib ::= ε ;
bibliorelation.type.attrib ::= (type::("isversionof" | "hasversion" | "isreplacedby" | "replaces" | "isrequiredby" | "requires" | "ispartof" | "haspart" | "isreferencedby" | "references" | "isformatof" | "hasformat" | "othertype" | local.bibliorelation.types))? (othertype::string())? ;
local.primsecterie.attrib ::= ε ;
local.interface.attrib ::= ε ;
errortype ::= errortype::(errortype.attlist smallcptr.char.mix*) ;
msgorig ::= msgorig::(msgorig.attlist smallcptr.char.mix*) ;
local.article.class ::= φ ;
local.link.attrib ::= ε ;
firstname ::= firstname::(firstname.attlist docinfo.char.mix*) ;
question.role.attrib ::= role.attrib ;
interface ::= interface::(interface.attlist (smallcptr.char.mix | accel)*) ;
local.confnum.attrib ::= ε ;
security.attrib ::= (security::string())? ;
simpara ::= simpara::(simpara.attlist para.char.mix*) ;
seealsoie ::= seealsoie::(seealsoie.attlist ndxterm.char.mix*) ;
corpname ::= corpname::(corpname.attlist docinfo.char.mix*) ;
indexentry.role.attrib ::= role.attrib ;
set.attlist ::= (fpi::string())? status.attrib common.attrib set.role.attrib local.set.attrib ;
modespec.role.attrib ::= role.attrib ;
section.class ::= section | local.section.class ;
local.substeps.attrib ::= ε ;
local.objectdata.attrib ::= ε ;
subject ::= subject::(subject.attlist subjectterm+) ;
imageobject.attlist ::= common.attrib imageobject.role.attrib local.imageobject.attrib ;
oointerface.attlist ::= common.attrib oointerface.role.attrib local.oointerface.attrib ;
title.attlist ::= pagenum.attrib common.attrib title.role.attrib local.title.attrib ;
local.toclevel4.attrib ::= ε ;
lot.attlist ::= label.attrib common.attrib lot.role.attrib local.lot.attrib ;
sect3.attlist ::= (renderas::("sect1" | "sect2" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect3.role.attrib local.sect3.attrib ;
keycode.role.attrib ::= role.attrib ;
local.fax.attrib ::= ε ;
varlistentry.attlist ::= common.attrib varlistentry.role.attrib local.varlistentry.attrib ;
local.function.attrib ::= ε ;
local.divcomponent.mix ::= φ ;
biblioset.attlist ::= (relation::string())? common.attrib biblioset.role.attrib local.biblioset.attrib ;
xref ::= xref::(xref.attlist ε) ;
printhistory.role.attrib ::= role.attrib ;
refsect2info.attlist ::= common.attrib refsect2info.role.attrib local.refsect2info.attrib ;
variablelist ::= variablelist::(variablelist.attlist blockinfo? formalobject.title.content? listpreamble.mix* varlistentry+) ;
structfield.role.attrib ::= role.attrib ;
refmeta ::= refmeta::(refmeta.attlist ndxterm.class* refentrytitle manvolnum? refmiscinfo* ndxterm.class*) ;
systemitem.role.attrib ::= role.attrib ;
qandaset.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | local.qandaset.mix ;
local.olink.attrib ::= ε ;
answer.role.attrib ::= role.attrib ;
local.partcontent.mix ::= φ ;
inlineobj.char.class ::= inlinegraphic | inlinemediaobject | inlineequation | local.inlineobj.char.class ;
local.descobj.class ::= φ ;
beginpage.role.attrib ::= role.attrib ;
firstname.attlist ::= common.attrib firstname.role.attrib local.firstname.attrib ;
bibliomset ::= bibliomset::(bibliomset.attlist (string() | bibliocomponent.mix | bibliomset)*) ;
simpara.role.attrib ::= role.attrib ;
mark.attrib ::= (mark::string())? local.mark.attrib ;
effectivity.attrib ::= arch.attrib condition.attrib conformance.attrib os.attrib revision.attrib security.attrib userlevel.attrib vendor.attrib local.effectivity.attrib ;
footnoteref.role.attrib ::= role.attrib ;
funcsynopsisinfo ::= funcsynopsisinfo::(funcsynopsisinfo.attlist (cptr.char.mix | textobject | lineannotation)*) ;
local.country.attrib ::= ε ;
local.revhistory.attrib ::= ε ;
segmentedlist.role.attrib ::= role.attrib ;
date.role.attrib ::= role.attrib ;
local.synopfragment.attrib ::= ε ;
authorblurb.attlist ::= common.attrib authorblurb.role.attrib local.authorblurb.attrib ;
smallcptr.char.mix ::= string() | replaceable | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.smallcptr.char.mix ;
local.chapterinfo.attrib ::= ε ;
guimenuitem.attlist ::= moreinfo.attrib common.attrib guimenuitem.role.attrib local.guimenuitem.attrib ;
volumenum.attlist ::= common.attrib volumenum.role.attrib local.volumenum.attrib ;
tocentry.attlist ::= linkend.attrib pagenum.attrib common.attrib tocentry.role.attrib local.tocentry.attrib ;
divcomponent.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | forms.hook | local.divcomponent.mix ;
qandaset.attlist ::= (defaultlabel::("qanda" | "number" | "none"))? common.attrib qandaset.role.attrib local.qandaset.attrib ;
article ::= article::(article.attlist div.title.content? articleinfo? tocchap? lot* bookcomponent.content (nav.class | appendix.class | ackno)*) ;
local.biblioset.attrib ::= ε ;
local.shortcut.attrib ::= ε ;
local.volumenum.attrib ::= ε ;
biblioentry.role.attrib ::= role.attrib ;
local.shortaffil.attrib ::= ε ;
xref.attlist ::= (endterm::string())? linkendreq.attrib common.attrib xref.role.attrib local.xref.attrib ;
local.sect2.attrib ::= ε ;
bridgehead ::= bridgehead::(bridgehead.attlist title.char.mix*) ;
substeps ::= substeps::(substeps.attlist step+) ;
tbody.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
local.seg.attrib ::= ε ;
formalobject.title.content ::= title titleabbrev? ;
local.qandaentry.attrib ::= ε ;
local.subtitle.attrib ::= ε ;
refsynopsisdiv.attlist ::= common.attrib refsynopsisdiv.role.attrib local.refsynopsisdiv.attrib ;
superscript.attlist ::= common.attrib ssscript.role.attrib local.ssscript.attrib ;
otheraddr.attlist ::= common.attrib otheraddr.role.attrib local.otheraddr.attrib ;
revisionflag.attrib ::= (revisionflag::("changed" | "added" | "deleted" | "off"))? ;
local.para.char.mix ::= φ ;
footnote.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | local.footnote.mix ;
cmdsynopsis ::= cmdsynopsis::(cmdsynopsis.attlist (command | arg | group | sbr)+ synopfragment*) ;
keycode ::= keycode::(keycode.attlist smallcptr.char.mix*) ;
glossterm.role.attrib ::= role.attrib ;
confsponsor.role.attrib ::= role.attrib ;
sidebar.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | beginpage | local.sidebar.mix ;
refsect1info ::= refsect1info::(refsect1info.attlist info.class+) ;
local.postcode.attrib ::= ε ;
simplesect.attlist ::= common.attrib simplesect.role.attrib local.simplesect.attrib ;
refclass ::= refclass::(refclass.attlist refclass.char.mix*) ;
tbl.hdft.mdl ::= colspec* row+ ;
co.role.attrib ::= role.attrib ;
term.role.attrib ::= role.attrib ;
example.role.attrib ::= role.attrib ;
local.authorinitials.attrib ::= ε ;
jobtitle ::= jobtitle::(jobtitle.attlist docinfo.char.mix*) ;
inlinemediaobject.attlist ::= common.attrib inlinemediaobject.role.attrib local.inlinemediaobject.attrib ;
substeps.role.attrib ::= role.attrib ;
msgmain ::= msgmain::(msgmain.attlist title? msgtext) ;
book.attlist ::= (fpi::string())? label.attrib status.attrib common.attrib book.role.attrib local.book.attrib ;
section.attlist ::= label.attrib status.attrib common.attrib section.role.attrib local.section.attrib ;
areaset ::= areaset::(areaset.attlist area+) ;
local.systemitem.attrib ::= ε ;
local.example.attrib ::= ε ;
listitem ::= listitem::(listitem.attlist component.mix+) ;
modespec.attlist ::= (application::notation.class)? common.attrib modespec.role.attrib local.modespec.attrib ;
screenco.attlist ::= common.attrib screenco.role.attrib local.screenco.attrib ;
coref ::= coref::(coref.attlist ε) ;
local.label.attrib ::= ε ;
sect3.role.attrib ::= role.attrib ;
msglevel ::= msglevel::(msglevel.attlist smallcptr.char.mix*) ;
legalnotice.attlist ::= common.attrib legalnotice.role.attrib local.legalnotice.attrib ;
methodparam.role.attrib ::= role.attrib ;
funcparams.role.attrib ::= role.attrib ;
local.paramdef.attrib ::= ε ;
contrib ::= contrib::(contrib.attlist docinfo.char.mix*) ;
contractsponsor.attlist ::= common.attrib contractsponsor.role.attrib local.contractsponsor.attrib ;
literallayout ::= literallayout::(literallayout.attlist (para.char.mix | co | coref | textobject | lineannotation)*) ;
areaspec.attlist ::= (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? common.attrib areaspec.role.attrib local.areaspec.attrib ;
local.refdescriptor.attrib ::= ε ;
chapter.class ::= chapter | local.chapter.class ;
errortype.role.attrib ::= role.attrib ;
msgorig.role.attrib ::= role.attrib ;
local.indexdiv.attrib ::= ε ;
local.book.class ::= φ ;
local.optional.attrib ::= ε ;
funcdef.attlist ::= common.attrib funcdef.role.attrib local.funcdef.attrib ;
state ::= state::(state.attlist docinfo.char.mix*) ;
local.screenshot.attrib ::= ε ;
answer.attlist ::= common.attrib answer.role.attrib local.answer.attrib ;
blockinfo.role.attrib ::= role.attrib ;
fieldsynopsis ::= fieldsynopsis::(fieldsynopsis.attlist modifier* type? varname initializer?) ;
jobtitle.attlist ::= common.attrib jobtitle.role.attrib local.jobtitle.attrib ;
local.refsect1info.attrib ::= ε ;
lineage ::= lineage::(lineage.attlist docinfo.char.mix*) ;
local.tocentry.attrib ::= ε ;
corpauthor.role.attrib ::= role.attrib ;
local.textobject.attrib ::= ε ;
local.term.attrib ::= ε ;
guiicon.role.attrib ::= role.attrib ;
subjectset.attlist ::= (scheme::string())? common.attrib subjectset.role.attrib local.subjectset.attrib ;
varargs ::= varargs::(varargs.attlist ε) ;
authorblurb.role.attrib ::= role.attrib ;
literal.role.attrib ::= role.attrib ;
seeie.role.attrib ::= role.attrib ;
setindex.attlist ::= common.attrib indexes.role.attrib local.indexes.attrib ;
local.property.attrib ::= ε ;
literal.attlist ::= moreinfo.attrib common.attrib literal.role.attrib local.literal.attrib ;
indexinfo ::= indexinfo::(indexinfo.attlist info.class+) ;
seeie.attlist ::= linkend.attrib common.attrib seeie.role.attrib local.seeie.attrib ;
date.attlist ::= common.attrib date.role.attrib local.date.attrib ;
revnumber.attlist ::= common.attrib revnumber.role.attrib local.revnumber.attrib ;
holder.attlist ::= common.attrib holder.role.attrib local.holder.attrib ;
markup.role.attrib ::= role.attrib ;
coref.role.attrib ::= role.attrib ;
seriesvolnums.attlist ::= common.attrib seriesvolnums.role.attrib local.seriesvolnums.attrib ;
videodata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib videodata.role.attrib local.videodata.attrib ;
msglevel.attlist ::= common.attrib msglevel.role.attrib local.msglevel.attrib ;
refsect3.role.attrib ::= role.attrib ;
guimenu.role.attrib ::= role.attrib ;
local.chapter.attrib ::= ε ;
refsect2.attlist ::= status.attrib common.attrib refsect2.role.attrib local.refsect2.attrib ;
co ::= co::(co.attlist ε) ;
term ::= term::(term.attlist para.char.mix*) ;
local.mediaobjectco.attrib ::= ε ;
guilabel.attlist ::= moreinfo.attrib common.attrib guilabel.role.attrib local.guilabel.attrib ;
local.state.attrib ::= ε ;
country.attlist ::= common.attrib country.role.attrib local.country.attrib ;
audioobject.attlist ::= common.attrib audioobject.role.attrib local.audioobject.attrib ;
method.synop.class ::= constructorsynopsis | destructorsynopsis | methodsynopsis | local.method.synop.class ;
synopsis.attlist ::= label.attrib linespecific.attrib common.attrib synopsis.role.attrib local.synopsis.attrib ;
set ::= set::(set.attlist div.title.content? setinfo? toc? book.class+ setindex?) ;
secondaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
orderedlist.role.attrib ::= role.attrib ;
postcode.attlist ::= common.attrib postcode.role.attrib local.postcode.attrib ;
informal.class ::= address | blockquote | graphic | graphicco | mediaobject | mediaobjectco | informalequation | informalexample | informalfigure | informaltable | local.informal.class ;
lineage.attlist ::= common.attrib lineage.role.attrib local.lineage.attrib ;
local.refcomponent.mix ::= φ ;
imageobject ::= imageobject::(imageobject.attlist objectinfo? imagedata) ;
funcsynopsis ::= funcsynopsis::(funcsynopsis.attlist (funcsynopsisinfo | funcprototype)+) ;
paramdef ::= paramdef::(paramdef.attlist (string() | type | replaceable | parameter | funcparams)*) ;
seg ::= seg::(seg.attlist para.char.mix*) ;
thead ::= thead::(thead.attlist tbl.hdft.mdl) ;
see ::= see::(see.attlist ndxterm.char.mix*) ;
local.abbrev.attrib ::= ε ;
attribution.role.attrib ::= role.attrib ;
sect3info.role.attrib ::= role.attrib ;
attribution.attlist ::= common.attrib attribution.role.attrib local.attribution.attrib ;
formalpara ::= formalpara::(formalpara.attlist title ndxterm.class* para) ;
chapterinfo.role.attrib ::= role.attrib ;
titleabbrev.role.attrib ::= role.attrib ;
emphasis.attlist ::= common.attrib emphasis.role.attrib local.emphasis.attrib ;
revdescription.role.attrib ::= role.attrib ;
chapter ::= chapter::(chapter.attlist beginpage? chapterinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
methodparam ::= methodparam::(methodparam.attlist modifier* type? (parameter initializer?) | funcparams modifier*) ;
local.tocback.attrib ::= ε ;
refsect2info ::= refsect2info::(refsect2info.attlist info.class+) ;
local.methodname.attrib ::= ε ;
toclevel3.attlist ::= common.attrib toclevel3.role.attrib local.toclevel3.attrib ;
glossdiv ::= glossdiv::(glossdiv.attlist sect.title.content component.mix* glossentry+) ;
shortcut ::= shortcut::(shortcut.attlist (keycap | keycombo | keysym | mousebutton)+) ;
div.title.content ::= title subtitle? titleabbrev? ;
programlistingco.role.attrib ::= role.attrib ;
indexterm ::= indexterm::(indexterm.attlist primary? ((secondary ((tertiary (see | (seealso+))?) | see | (seealso+))?) | see | (seealso+))?) ;
hardware.role.attrib ::= role.attrib ;
local.set.attrib ::= ε ;
refcomponent.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.refcomponent.mix ;
bibliography.attlist ::= status.attrib common.attrib bibliography.role.attrib local.bibliography.attrib ;
funcprototype.role.attrib ::= role.attrib ;
local.wordasword.attrib ::= ε ;
msgtext ::= msgtext::(msgtext.attlist component.mix+) ;
prefaceinfo ::= prefaceinfo::(prefaceinfo.attlist info.class+) ;
common.attrib ::= id.attrib lang.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib local.common.attrib ;
pubdate ::= pubdate::(pubdate.attlist docinfo.char.mix*) ;
exceptionname.attlist ::= common.attrib exceptionname.role.attrib local.exceptionname.attrib ;
tocentry ::= tocentry::(tocentry.attlist para.char.mix*) ;
partintro.attlist ::= label.attrib common.attrib partintro.role.attrib local.partintro.attrib ;
local.contractnum.attrib ::= ε ;
graphicco.attlist ::= common.attrib graphicco.role.attrib local.graphicco.attrib ;
lot.role.attrib ::= role.attrib ;
see.attlist ::= common.attrib seeseealso.role.attrib local.seeseealso.attrib ;
sect4.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect5"))? label.attrib status.attrib common.attrib sect4.role.attrib local.sect4.attrib ;
local.partintro.attrib ::= ε ;
local.bibliorelation.types ::= φ ;
simplelist.attlist ::= (columns::string())? (type::("inline" | "vert" | "horiz"))? common.attrib simplelist.role.attrib local.simplelist.attrib ;
local.surname.attrib ::= ε ;
local.simplesect.attrib ::= ε ;
local.quote.attrib ::= ε ;
base.char.class ::= anchor | local.base.char.class ;
glossdiv.role.attrib ::= role.attrib ;
local.audiodata.attrib ::= ε ;
textobject.mix ::= list.class | admon.class | linespecific.class | para.class | blockquote | local.textobject.mix ;
toc.attlist ::= pagenum.attrib common.attrib toc.role.attrib local.toc.attrib ;
collabname ::= collabname::(collabname.attlist docinfo.char.mix*) ;
subtitle ::= subtitle::(subtitle.attlist title.char.mix*) ;
mousebutton ::= mousebutton::(mousebutton.attlist smallcptr.char.mix*) ;
local.glossary.attrib ::= ε ;
returnvalue.attlist ::= common.attrib returnvalue.role.attrib local.returnvalue.attrib ;
itemizedlist.attlist ::= (spacing::("normal" | "compact"))? mark.attrib common.attrib itemizedlist.role.attrib local.itemizedlist.attrib ;
local.guimenuitem.attrib ::= ε ;
local.filename.attrib ::= ε ;
local.markup.attrib ::= ε ;
refsynopsisdiv ::= refsynopsisdiv::(refsynopsisdiv.attlist refsynopsisdivinfo? refsect.title.content? (refcomponent.mix+ refsect2*) | (refsect2+)) ;
releaseinfo.role.attrib ::= role.attrib ;
tbl.entry.mdl ::= para.char.mix | tabentry.mix ;
informalfigure.attlist ::= (float::yesorno.attvals)? (pgwide::yesorno.attvals)? label.attrib common.attrib informalfigure.role.attrib local.informalfigure.attrib ;
glosssee ::= glosssee::(glosssee.attlist para.char.mix*) ;
refnamediv.role.attrib ::= role.attrib ;
seglistitem ::= seglistitem::(seglistitem.attlist seg+) ;
local.informalexample.attrib ::= ε ;
sbr ::= sbr::(sbr.attlist ε) ;
tbl.tgroup.mdl ::= colspec* spanspec* thead? tfoot? tbody ;
subject.attlist ::= (weight::string())? common.attrib subject.role.attrib local.subject.attrib ;
pubdate.attlist ::= common.attrib pubdate.role.attrib local.pubdate.attrib ;
synopfragment ::= synopfragment::(synopfragment.attlist (arg | group)+) ;
errorcode ::= errorcode::(errorcode.attlist smallcptr.char.mix*) ;
address ::= address::(address.attlist (string() | personname | person.ident.mix | street | pob | postcode | city | state | country | phone | fax | email | otheraddr)*) ;
artpagenums.role.attrib ::= role.attrib ;
part ::= part::(part.attlist beginpage? partinfo? bookcomponent.title.content partintro? partcontent.mix+) ;
width.attrib ::= (width::string())? ;
email.role.attrib ::= role.attrib ;
artpagenums.attlist ::= common.attrib artpagenums.role.attrib local.artpagenums.attrib ;
local.synop.class ::= φ ;
local.colophon.attrib ::= ε ;
local.prefaceinfo.attrib ::= ε ;
symbol.role.attrib ::= role.attrib ;
programlistingco ::= programlistingco::(programlistingco.attlist areaspec programlisting calloutlist*) ;
mousebutton.role.attrib ::= role.attrib ;
inlinemediaobject ::= inlinemediaobject::(inlinemediaobject.attlist objectinfo? mediaobject.mix+) ;
question ::= question::(question.attlist label? qandaset.mix+) ;
local.mousebutton.attrib ::= ε ;
biblioid.attlist ::= biblio.class.attrib common.attrib biblioid.role.attrib local.biblioid.attrib ;
structname ::= structname::(structname.attlist smallcptr.char.mix*) ;
para ::= para::(para.attlist (para.char.mix | para.mix)*) ;
bibliomset.attlist ::= (relation::string())? common.attrib bibliomset.role.attrib local.bibliomset.attrib ;
local.sect3info.attrib ::= ε ;
issn.role.attrib ::= role.attrib ;
function ::= function::(function.attlist cptr.char.mix*) ;
example.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | ndxterm.class | beginpage | local.example.mix ;
otheraddr.role.attrib ::= role.attrib ;
authorgroup ::= authorgroup::(authorgroup.attlist (author | editor | collab | corpauthor | othercredit)+) ;
sbr.attlist ::= common.attrib sbr.role.attrib local.sbr.attrib ;
local.figure.attrib ::= ε ;
sect3info.attlist ::= common.attrib sect3info.role.attrib local.sect3info.attrib ;
table ::= table::(table.attlist tbl.table.mdl) ;
msgrel.role.attrib ::= role.attrib ;
local.glosssee.attrib ::= ε ;
informaltable.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno.attvals)? (rowsep::yesorno.attvals)? common.table.attribs tbl.table.att local.informaltable.attrib ;
refsect3info ::= refsect3info::(refsect3info.attlist info.class+) ;
token.attlist ::= common.attrib token.role.attrib local.token.attrib ;
productnumber.attlist ::= common.attrib productnumber.role.attrib local.productnumber.attrib ;
qandaentry.attlist ::= common.attrib qandaentry.role.attrib local.qandaentry.attrib ;
isbn.attlist ::= common.attrib isbn.role.attrib local.isbn.attrib ;
copyright ::= copyright::(copyright.attlist year+ holder*) ;
local.errortext.attrib ::= ε ;
local.arg.attrib ::= ε ;
part.attlist ::= label.attrib status.attrib common.attrib part.role.attrib local.part.attrib ;
refsection.attlist ::= status.attrib common.attrib refsection.role.attrib local.refsection.attrib ;
refentry ::= refentry::(refentry.attlist beginpage? ndxterm.class* refentryinfo? refmeta? (remark | link.char.class)* refnamediv refsynopsisdiv? (refsect1+) | (refsection+)) ;
local.synopfragmentref.attrib ::= ε ;
glossdef ::= glossdef::(glossdef.attlist glossdef.mix+ glossseealso*) ;
accel.attlist ::= common.attrib accel.role.attrib local.accel.attrib ;
inlineequation.role.attrib ::= role.attrib ;
local.refsect3.attrib ::= ε ;
refsynopsisdivinfo ::= refsynopsisdivinfo::(refsynopsisdivinfo.attlist info.class+) ;
revremark.role.attrib ::= role.attrib ;
set.role.attrib ::= role.attrib ;
local.remark.attrib ::= ε ;
local.sgmltag.attrib ::= ε ;
pubsnumber.role.attrib ::= role.attrib ;
local.inlineobj.char.class ::= φ ;
tfoot.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
setindexinfo.role.attrib ::= role.attrib ;
tocfront.attlist ::= label.attrib linkend.attrib pagenum.attrib common.attrib tocfront.role.attrib local.tocfront.attrib ;
pubsnumber.attlist ::= common.attrib pubsnumber.role.attrib local.pubsnumber.attrib ;
sidebar.role.attrib ::= role.attrib ;
funcprototype.attlist ::= common.attrib funcprototype.role.attrib local.funcprototype.attrib ;
msginfo ::= msginfo::(msginfo.attlist (msglevel | msgorig | msgaud)*) ;
invpartnumber ::= invpartnumber::(invpartnumber.attlist docinfo.char.mix*) ;
local.bridgehead.attrib ::= ε ;
arg.role.attrib ::= role.attrib ;
keywordset.attlist ::= common.attrib keywordset.role.attrib local.keywordset.attrib ;
parameter ::= parameter::(parameter.attlist cptr.char.mix*) ;
local.objectinfo.attrib ::= ε ;
property.attlist ::= moreinfo.attrib common.attrib property.role.attrib local.property.attrib ;
legalnotice.role.attrib ::= role.attrib ;
local.confsponsor.attrib ::= ε ;
local.article.attrib ::= ε ;
constant ::= constant::(constant.attlist smallcptr.char.mix*) ;
simplelist.role.attrib ::= role.attrib ;
mediaobjectco.role.attrib ::= role.attrib ;
mediaobjectco.attlist ::= common.attrib mediaobjectco.role.attrib local.mediaobjectco.attrib ;
local.appendixinfo.attrib ::= ε ;
keycode.attlist ::= common.attrib keycode.role.attrib local.keycode.attrib ;
email ::= email::(email.attlist docinfo.char.mix*) ;
refsect3info.attlist ::= common.attrib refsect3info.role.attrib local.refsect3info.attrib ;
copyright.role.attrib ::= role.attrib ;
local.base.char.class ::= φ ;
imageobjectco.role.attrib ::= role.attrib ;
sgmltag.attlist ::= (class::("attribute" | "attvalue" | "element" | "endtag" | "emptytag" | "genentity" | "numcharref" | "paramentity" | "pi" | "xmlpi" | "starttag" | "sgmlcomment"))? common.attrib sgmltag.role.attrib local.sgmltag.attrib ;
local.year.attrib ::= ε ;
subjectterm ::= subjectterm::(subjectterm.attlist string()) ;
funcdef.role.attrib ::= role.attrib ;
local.contractsponsor.attrib ::= ε ;
xref.char.class ::= footnoteref | xref | local.xref.char.class ;
authorinitials.role.attrib ::= role.attrib ;
constructorsynopsis ::= constructorsynopsis::(constructorsynopsis.attlist modifier* methodname? (methodparam+) | void exceptionname*) ;
phrase.role.attrib ::= role.attrib ;
glossdef.attlist ::= (subject::string())? common.attrib glossdef.role.attrib local.glossdef.attrib ;
local.sect5.attrib ::= ε ;
dedication.attlist ::= status.attrib common.attrib dedication.role.attrib local.dedication.attrib ;
imagedata ::= imagedata::(imagedata.attlist ε) ;
remark ::= remark::(remark.attlist para.char.mix*) ;
alt.attlist ::= common.attrib alt.role.attrib local.alt.attrib ;
local.funcdef.attrib ::= ε ;
personblurb.attlist ::= common.attrib personblurb.role.attrib local.personblurb.attrib ;
glossterm ::= glossterm::(glossterm.attlist para.char.mix*) ;
confsponsor ::= confsponsor::(confsponsor.attlist docinfo.char.mix*) ;
compound.class ::= msgset | procedure | sidebar | qandaset | ebnf.block.hook | local.compound.class ;
local.segtitle.attrib ::= ε ;
informalequation.attlist ::= common.attrib informalequation.role.attrib local.informalequation.attrib ;
othername.role.attrib ::= role.attrib ;
refsect3.attlist ::= status.attrib common.attrib refsect3.role.attrib local.refsect3.attrib ;
refmeta.role.attrib ::= role.attrib ;
local.refentry.class ::= φ ;
member.attlist ::= common.attrib member.role.attrib local.member.attrib ;
local.sectioninfo.attrib ::= ε ;
local.toclevel2.attrib ::= ε ;
bibliosource.attlist ::= biblio.class.attrib common.attrib bibliosource.role.attrib local.bibliosource.attrib ;
msgaud.role.attrib ::= role.attrib ;
replaceable.role.attrib ::= role.attrib ;
msgentry.attlist ::= common.attrib msgentry.role.attrib local.msgentry.attrib ;
bibliography ::= bibliography::(bibliography.attlist bibliographyinfo? bookcomponent.title.content? component.mix* (bibliodiv+) | ((biblioentry | bibliomixed)+)) ;
optional ::= optional::(optional.attlist cptr.char.mix*) ;
personname ::= personname::(personname.attlist (honorific | firstname | surname | lineage | othername)+) ;
msgaud.attlist ::= common.attrib msgaud.role.attrib local.msgaud.attrib ;
author.role.attrib ::= role.attrib ;
ackno.role.attrib ::= role.attrib ;
sidebar ::= sidebar::(sidebar.attlist sidebarinfo? formalobject.title.content? sidebar.mix+) ;
local.member.attrib ::= ε ;
exceptionname ::= exceptionname::(exceptionname.attlist smallcptr.char.mix*) ;
oointerface ::= oointerface::(oointerface.attlist modifier* interfacename) ;
local.interfacename.attrib ::= ε ;
local.refentry.attrib ::= ε ;
varargs.attlist ::= common.attrib varargs.role.attrib local.varargs.attrib ;
indexes.role.attrib ::= role.attrib ;
local.keyword.attrib ::= ε ;
lot ::= lot::(lot.attlist beginpage? bookcomponent.title.content? lotentry*) ;
audiodata.attlist ::= objectdata.attrib common.attrib audiodata.role.attrib local.audiodata.attrib ;
glossseealso ::= glossseealso::(glossseealso.attlist para.char.mix*) ;
database.role.attrib ::= role.attrib ;
tbl.table-main.mdl ::= (tgroup+) | (graphic+) ;
link.role.attrib ::= role.attrib ;
productname.role.attrib ::= role.attrib ;
para.mix ::= list.class | admon.class | linespecific.class | informal.class | formal.class | local.para.mix ;
local.calloutlist.attrib ::= ε ;
referenceinfo.role.attrib ::= role.attrib ;
local.author.attrib ::= ε ;
option.role.attrib ::= role.attrib ;
toclevel4.attlist ::= common.attrib toclevel4.role.attrib local.toclevel4.attrib ;
toclevel1.role.attrib ::= role.attrib ;
local.issuenum.attrib ::= ε ;
label.role.attrib ::= role.attrib ;
methodsynopsis.attlist ::= (language::string())? common.attrib methodsynopsis.role.attrib local.methodsynopsis.attrib ;
primsecterie.role.attrib ::= role.attrib ;
interfacename ::= interfacename::(interfacename.attlist cptr.char.mix*) ;
orgname.role.attrib ::= role.attrib ;
role.attrib ::= (role::string())? ;
orgname.attlist ::= common.attrib (class::("corporation" | "nonprofit" | "consortium" | "informal" | "other"))? (otherclass::string())? orgname.role.attrib local.orgname.attrib ;
methodname.role.attrib ::= role.attrib ;
city.role.attrib ::= role.attrib ;
co.attlist ::= label.attrib linkends.attrib idreq.common.attrib co.role.attrib local.co.attrib ;
term.attlist ::= common.attrib term.role.attrib local.term.attrib ;
local.guilabel.attrib ::= ε ;
caption.role.attrib ::= role.attrib ;
local.classname.attrib ::= ε ;
tech.char.class ::= action | application | classname | methodname | interfacename | exceptionname | ooclass | oointerface | ooexception | command | computeroutput | database | email | envar | errorcode | errorname | errortype | errortext | filename | function | guibutton | guiicon | guilabel | guimenu | guimenuitem | guisubmenu | hardware | interface | keycap | keycode | keycombo | keysym | literal | constant | markup | medialabel | menuchoice | mousebutton | option | optional | parameter | prompt | property | replaceable | returnvalue | sgmltag | structfield | structname | symbol | systemitem | token | type | userinput | varname | ebnf.inline.hook | local.tech.char.class ;
local.msgsub.attrib ::= ε ;
errortext ::= errortext::(errortext.attlist smallcptr.char.mix*) ;
local.ndxterm.class ::= φ ;
envar.role.attrib ::= role.attrib ;
setindexinfo.attlist ::= common.attrib setindexinfo.role.attrib local.setindexinfo.attrib ;
orgdiv ::= orgdiv::(orgdiv.attlist docinfo.char.mix*) ;
local.callout.attrib ::= ε ;
sect4.role.attrib ::= role.attrib ;
thead.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
local.productnumber.attrib ::= ε ;
segtitle ::= segtitle::(segtitle.attlist title.char.mix*) ;
sect5.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect4"))? label.attrib status.attrib common.attrib sect5.role.attrib local.sect5.attrib ;
local.refnamediv.attrib ::= ε ;
local.gen.char.class ::= φ ;
local.videoobject.attrib ::= ε ;
chapter.role.attrib ::= role.attrib ;
msgsub ::= msgsub::(msgsub.attlist title? msgtext) ;
fax ::= fax::(fax.attlist docinfo.char.mix*) ;
methodparam.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib methodparam.role.attrib local.methodparam.attrib ;
biblioentry ::= biblioentry::(biblioentry.attlist (articleinfo | bibliocomponent.mix)+) ;
wordasword.role.attrib ::= role.attrib ;
bookinfo ::= bookinfo::(bookinfo.attlist info.class+) ;
returnvalue.role.attrib ::= role.attrib ;
itemizedlist.role.attrib ::= role.attrib ;
biblioid ::= biblioid::(biblioid.attlist docinfo.char.mix*) ;
edition.role.attrib ::= role.attrib ;
msgset.attlist ::= common.attrib msgset.role.attrib local.msgset.attrib ;
local.xref.char.class ::= φ ;
tocpart.role.attrib ::= role.attrib ;
local.mark.attrib ::= ε ;
action.attlist ::= moreinfo.attrib common.attrib action.role.attrib local.action.attrib ;
local.date.attrib ::= ε ;
local.errorcode.attrib ::= ε ;
corpname.attlist ::= common.attrib corpname.role.attrib local.corpname.attrib ;
local.epigraph.attrib ::= ε ;
label.attrib ::= (label::string())? ;
local.status.attrib ::= ε ;
tbl.entrytbl.mdl ::= colspec* spanspec* thead? tbody ;
local.refentrytitle.attrib ::= ε ;
otheraddr ::= otheraddr::(otheraddr.attlist docinfo.char.mix*) ;
callout.attlist ::= arearefs::string() common.attrib callout.role.attrib local.callout.attrib ;
textobject.role.attrib ::= role.attrib ;
local.email.attrib ::= ε ;
refpurpose.role.attrib ::= role.attrib ;
condition.attrib ::= (condition::string())? ;
id.attrib ::= (id::string())? ;
informaltable ::= informaltable::(informaltable.attlist blockinfo? textobject* (graphic+) | (mediaobject+) | (tgroup+)) ;
local.emphasis.attrib ::= ε ;
articleinfo.role.attrib ::= role.attrib ;
bibliomixed.role.attrib ::= role.attrib ;
local.copyright.attrib ::= ε ;
segtitle.attlist ::= common.attrib segtitle.role.attrib local.segtitle.attrib ;
informalequation.role.attrib ::= role.attrib ;
local.tocfront.attrib ::= ε ;
refsection ::= refsection::(refsection.attlist refsectioninfo? refsect.title.content (refcomponent.mix+ refsection*) | (refsection+)) ;
affiliation ::= affiliation::(affiliation.attlist shortaffil? jobtitle* orgname? orgdiv* address*) ;
epigraph ::= epigraph::(epigraph.attlist attribution? (para.class | literallayout)+) ;
local.orderedlist.attrib ::= ε ;
local.reference.attrib ::= ε ;
yesorno.attvals ::= string() ;
methodname ::= methodname::(methodname.attlist smallcptr.char.mix*) ;
biblioentry.attlist ::= common.attrib biblioentry.role.attrib local.biblioentry.attrib ;
bookinfo.role.attrib ::= role.attrib ;
book ::= book::(book.attlist div.title.content? bookinfo? (dedication | toc | lot | glossary | bibliography | preface | chapter.class | reference | part | article.class | appendix.class | index.class | colophon)*) ;
graphic ::= graphic::(graphic.attlist ε) ;
citerefentry.attlist ::= common.attrib citerefentry.role.attrib local.citerefentry.attrib ;
citation ::= citation::(citation.attlist para.char.mix*) ;
local.address.attrib ::= ε ;
figure ::= figure::(figure.attlist blockinfo? formalobject.title.content (figure.mix | link.char.class)+) ;
tfoot ::= tfoot::(tfoot.attlist tbl.hdft.mdl) ;
local.informaltable.attrib ::= ε ;
setinfo.attlist ::= (contents::string())? common.attrib setinfo.role.attrib local.setinfo.attrib ;
indexentry ::= indexentry::(indexentry.attlist primaryie (seeie | seealsoie)* (secondaryie (seeie | seealsoie | tertiaryie)*)*) ;
userinput ::= userinput::(userinput.attlist (cptr.char.mix | co)*) ;
replaceable.attlist ::= (class::("command" | "function" | "option" | "parameter"))? common.attrib replaceable.role.attrib local.replaceable.attrib ;
othercredit.role.attrib ::= role.attrib ;
sidebarinfo.attlist ::= common.attrib sidebarinfo.role.attrib local.sidebarinfo.attrib ;
keysym.attlist ::= common.attrib keysysm.role.attrib local.keysym.attrib ;
local.computeroutput.attrib ::= ε ;
modifier ::= modifier::(modifier.attlist smallcptr.char.mix*) ;
local.msgset.attrib ::= ε ;
audiodata.role.attrib ::= role.attrib ;
procedure ::= procedure::(procedure.attlist blockinfo? formalobject.title.content? component.mix* step+) ;
legalnotice ::= legalnotice::(legalnotice.attlist blockinfo? title? legalnotice.mix+) ;
local.invpartnumber.attrib ::= ε ;
videoobject.role.attrib ::= role.attrib ;
refentrytitle.role.attrib ::= role.attrib ;
local.fieldsynopsis.attrib ::= ε ;
refclass.char.mix ::= string() | application | local.refclass.char.mix ;
local.msginfo.attrib ::= ε ;
lang.attrib ::= (lang::string())? ;
shortaffil ::= shortaffil::(shortaffil.attlist docinfo.char.mix*) ;
local.sidebar.mix ::= φ ;
address.attlist ::= linespecific.attrib common.attrib address.role.attrib local.address.attrib ;
local.keycap.attrib ::= ε ;
phone.role.attrib ::= role.attrib ;
funcdef ::= funcdef::(funcdef.attlist (string() | type | replaceable | function)*) ;
local.isbn.attrib ::= ε ;
programlistingco.attlist ::= common.attrib programlistingco.role.attrib local.programlistingco.attrib ;
local.msgrel.attrib ::= ε ;
keyword.role.attrib ::= role.attrib ;
local.group.attrib ::= ε ;
citation.role.attrib ::= role.attrib ;
blockinfo ::= blockinfo::(blockinfo.attlist info.class+) ;
olink.attlist ::= (targetdocent::string())? (linkmode::string())? (localinfo::string())? (type::string())? (targetdoc::string())? (targetptr::string())? common.attrib olink.role.attrib local.olink.attrib ;
local.bibliocoverage.attrib ::= ε ;
bibliography.role.attrib ::= role.attrib ;
anchor ::= anchor::(anchor.attlist ε) ;
local.programlisting.attrib ::= ε ;
local.tech.char.class ::= φ ;
tocfront.role.attrib ::= role.attrib ;
bibliorelation ::= bibliorelation::(bibliorelation.attlist docinfo.char.mix*) ;
confnum.attlist ::= common.attrib confnum.role.attrib local.confnum.attrib ;
local.lineannotation.attrib ::= ε ;
segmentedlist ::= segmentedlist::(segmentedlist.attlist formalobject.title.content? segtitle+ seglistitem+) ;
envar.attlist ::= common.attrib envar.role.attrib local.envar.attrib ;
surname.role.attrib ::= role.attrib ;
local.subject.attrib ::= ε ;
secur ::= common.attrib tables.role.attrib ;
paramdef.role.attrib ::= role.attrib ;
funcsynopsis.role.attrib ::= role.attrib ;
textobject ::= textobject::(textobject.attlist objectinfo? phrase | textdata | (textobject.mix+)) ;
modifier.role.attrib ::= role.attrib ;
row.attlist ::= (rowsep::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
local.city.attrib ::= ε ;
qandadiv.role.attrib ::= role.attrib ;
seriesvolnums ::= seriesvolnums::(seriesvolnums.attlist docinfo.char.mix*) ;
glossentry ::= glossentry::(glossentry.attlist glossterm acronym? abbrev? ndxterm.class* revhistory? glosssee | (glossdef+)) ;
authorgroup.attlist ::= common.attrib authorgroup.role.attrib local.authorgroup.attrib ;
procedure.attlist ::= common.attrib procedure.role.attrib local.procedure.attrib ;
local.bibliosource.attrib ::= ε ;
local.productname.attrib ::= ε ;
local.citerefentry.attrib ::= ε ;
primaryie ::= primaryie::(primaryie.attlist ndxterm.char.mix*) ;
appendix.role.attrib ::= role.attrib ;
title.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlineobj.char.class | ndxterm.class | local.title.char.mix ;
member ::= member::(member.attlist para.char.mix*) ;
guilabel ::= guilabel::(guilabel.attlist (smallcptr.char.mix | accel)*) ;
refclass.attlist ::= common.attrib refclass.role.attrib local.refclass.attrib ;
local.para.attrib ::= ε ;
local.footnote.attrib ::= ε ;
bibliosource ::= bibliosource::(bibliosource.attlist docinfo.char.mix*) ;
menuchoice.attlist ::= moreinfo.attrib common.attrib menuchoice.role.attrib local.menuchoice.attrib ;
edition.attlist ::= common.attrib edition.role.attrib local.edition.attrib ;
type.role.attrib ::= role.attrib ;
blockinfo.attlist ::= common.attrib blockinfo.role.attrib local.blockinfo.attrib ;
local.seeie.attrib ::= ε ;
orderedlist ::= orderedlist::(orderedlist.attlist blockinfo? formalobject.title.content? listpreamble.mix* listitem+) ;
local.destructorsynopsis.attrib ::= ε ;
areaset.attlist ::= label.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib areaset.role.attrib local.areaset.attrib ;
refinline.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | ndxterm.class | beginpage | local.refinline.char.mix ;
bibliorelation.attlist ::= biblio.class.attrib bibliorelation.type.attrib common.attrib bibliorelation.role.attrib local.bibliorelation.attrib ;
callout.role.attrib ::= role.attrib ;
local.referenceinfo.attrib ::= ε ;
invpartnumber.role.attrib ::= role.attrib ;
article.class ::= article | local.article.class ;
indexdiv ::= indexdiv::(indexdiv.attlist sect.title.content? indexdivcomponent.mix* (indexentry+) | segmentedlist) ;
local.envar.attrib ::= ε ;
local.attribution.attrib ::= ε ;
chapterinfo ::= chapterinfo::(chapterinfo.attlist info.class+) ;
local.returnvalue.attrib ::= ε ;
glosslist.attlist ::= common.attrib glosslist.role.attrib local.glosslist.attrib ;
msglevel.role.attrib ::= role.attrib ;
constant.attlist ::= (class::"limit")? common.attrib constant.role.attrib local.constant.attrib ;
local.personblurb.attrib ::= ε ;
bibliocoverage.role.attrib ::= role.attrib ;
local.inlinemediaobject.attrib ::= ε ;
local.lineage.attrib ::= ε ;
bibliocoverage.attlist ::= (spatial::("dcmipoint" | "iso3166" | "dcmibox" | "tgn" | "otherspatial"))? (otherspatial::string())? (temporal::("dcmiperiod" | "w3c-dtf" | "othertemporal"))? (othertemporal::string())? common.attrib bibliocoverage.role.attrib local.bibliocoverage.attrib ;
screeninfo.role.attrib ::= role.attrib ;
email.attlist ::= common.attrib email.role.attrib local.email.attrib ;
collabname.role.attrib ::= role.attrib ;
subtitle.role.attrib ::= role.attrib ;
local.segmentedlist.attrib ::= ε ;
local.lot.attrib ::= ε ;
ooclass.attlist ::= common.attrib ooclass.role.attrib local.ooclass.attrib ;
informalexample.attlist ::= width.attrib common.attrib informalexample.role.attrib local.informalexample.attrib ;
revdescription.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | local.revdescription.mix ;
biblioid.role.attrib ::= role.attrib ;
msgentry.role.attrib ::= role.attrib ;
setinfo.role.attrib ::= role.attrib ;
keycombo.role.attrib ::= role.attrib ;
local.void.attrib ::= ε ;
keycombo.attlist ::= keyaction.attrib moreinfo.attrib common.attrib keycombo.role.attrib local.keycombo.attrib ;
local.confgroup.attrib ::= ε ;
ebnf.block.hook ::= φ ;
orderedlist.attlist ::= (numeration::("arabic" | "upperalpha" | "loweralpha" | "upperroman" | "lowerroman"))? (inheritnum::("inherit" | "ignore"))? (continuation::("continues" | "restarts"))? (spacing::("normal" | "compact"))? common.attrib orderedlist.role.attrib local.orderedlist.attrib ;
partintro ::= partintro::(partintro.attlist div.title.content? bookcomponent.content) ;
publishername.attlist ::= common.attrib publishername.role.attrib local.publishername.attrib ;
local.mediaobject.attrib ::= ε ;
title ::= title::(title.attlist title.char.mix*) ;
arg ::= arg::(arg.attlist (string() | arg | group | option | synopfragmentref | replaceable | sbr)*) ;
local.videodata.attrib ::= ε ;
local.informalequation.attrib ::= ε ;
group.role.attrib ::= role.attrib ;
sect4info.role.attrib ::= role.attrib ;
sect5 ::= sect5::(sect5.attlist sect5info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (simplesect*)) | (refentry.class+) | (simplesect+) nav.class*) ;
preface.attlist ::= status.attrib common.attrib preface.role.attrib local.preface.attrib ;
sect4 ::= sect4::(sect4.attlist sect4info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect5*) | (simplesect*)) | (refentry.class+) | (sect5+) | (simplesect+) nav.class*) ;
programlisting.attlist ::= width.attrib linespecific.attrib common.attrib programlisting.role.attrib local.programlisting.attrib ;
publisher.role.attrib ::= role.attrib ;
sect3 ::= sect3::(sect3.attlist sect3info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect4*) | (simplesect*)) | (refentry.class+) | (sect4+) | (simplesect+) nav.class*) ;
sect4info.attlist ::= common.attrib sect4info.role.attrib local.sect4info.attrib ;
group.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib group.role.attrib local.group.attrib ;
descobj.class ::= abstract | authorblurb | epigraph | local.descobj.class ;
sect2 ::= sect2::(sect2.attlist sect2info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect3*) | (simplesect*)) | (refentry.class+) | (sect3+) | (simplesect+) nav.class*) ;
local.printhistory.attrib ::= ε ;
sect1 ::= sect1::(sect1.attlist sect1info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect2*) | (simplesect*)) | (refentry.class+) | (sect2+) | (simplesect+) nav.class*) ;
chapterinfo.attlist ::= common.attrib chapterinfo.role.attrib local.chapterinfo.attrib ;
toclevel5.attlist ::= common.attrib toclevel5.role.attrib local.toclevel5.attrib ;
imageobjectco ::= imageobjectco::(imageobjectco.attlist areaspec imageobject calloutlist*) ;
refsection.role.attrib ::= role.attrib ;
linkends.attrib ::= (linkends::string())? ;
structfield ::= structfield::(structfield.attlist smallcptr.char.mix*) ;
pob ::= pob::(pob.attlist docinfo.char.mix*) ;
ooexception.role.attrib ::= role.attrib ;
namvolnum.role.attrib ::= role.attrib ;
returnvalue ::= returnvalue::(returnvalue.attlist smallcptr.char.mix*) ;
local.imageobject.attrib ::= ε ;
itemizedlist ::= itemizedlist::(itemizedlist.attlist blockinfo? formalobject.title.content? listpreamble.mix* listitem+) ;
ooexception.attlist ::= common.attrib ooexception.role.attrib local.ooexception.attrib ;
phone.attlist ::= common.attrib phone.role.attrib local.phone.attrib ;
highlights ::= highlights::(highlights.attlist highlights.mix+) ;
citebiblioid.role.attrib ::= role.attrib ;
example.attlist ::= label.attrib width.attrib common.attrib example.role.attrib local.example.attrib ;
screenshot.attlist ::= common.attrib screenshot.role.attrib local.screenshot.attrib ;
local.refname.char.mix ::= φ ;
local.bibliomisc.attrib ::= ε ;
local.guisubmenu.attrib ::= ε ;
authorblurb ::= authorblurb::(authorblurb.attlist title? para.class+) ;
inlinegraphic ::= inlinegraphic::(inlinegraphic.attlist ε) ;
tocback ::= tocback::(tocback.attlist para.char.mix*) ;
sidebar.attlist ::= common.attrib sidebar.role.attrib local.sidebar.attrib ;
highlights.mix ::= list.class | admon.class | para.class | ndxterm.class | local.highlights.mix ;
function.role.attrib ::= role.attrib ;
local.nav.class ::= φ ;
local.person.ident.mix ::= φ ;
textdata.attlist ::= (encoding::string())? objectdata.attrib common.attrib textdata.role.attrib local.textdata.attrib ;
seg.attlist ::= common.attrib seg.role.attrib local.seg.attrib ;
lineannotation ::= lineannotation::(lineannotation.attlist para.char.mix*) ;
cmdsynopsis.role.attrib ::= role.attrib ;
glossary ::= glossary::(glossary.attlist glossaryinfo? bookcomponent.title.content? component.mix* (glossdiv+) | (glossentry+) bibliography?) ;
chapter.attlist ::= label.attrib status.attrib common.attrib chapter.role.attrib local.chapter.attrib ;
funcparams.attlist ::= common.attrib funcparams.role.attrib local.funcparams.attrib ;
local.listpreamble.mix ::= φ ;
local.database.attrib ::= ε ;
colophon.attlist ::= status.attrib common.attrib colophon.role.attrib local.colophon.attrib ;
interfacename.attlist ::= common.attrib interfacename.role.attrib local.interfacename.attrib ;
msgset.role.attrib ::= role.attrib ;
menuchoice.role.attrib ::= role.attrib ;
pob.attlist ::= common.attrib pob.role.attrib local.pob.attrib ;
local.genobj.class ::= φ ;
refname.char.mix ::= string() | tech.char.class | local.refname.char.mix ;
local.linespecific.class ::= φ ;
para.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlineobj.char.class | synop.class | ndxterm.class | beginpage | forminlines.hook | local.para.char.mix ;
blockquote ::= blockquote::(blockquote.attlist title? attribution? component.mix+) ;
remap.attrib ::= (remap::string())? ;
local.refmiscinfo.attrib ::= ε ;
interface.role.attrib ::= role.attrib ;
entrytbl ::= entrytbl::(entrytbl.attlist tbl.entrytbl.mdl) ;
local.appendix.attrib ::= ε ;
refsynopsisdivinfo.role.attrib ::= role.attrib ;
sidebarinfo ::= sidebarinfo::(sidebarinfo.attlist info.class+) ;
filename ::= filename::(filename.attlist cptr.char.mix*) ;
seealsoie.attlist ::= linkends.attrib common.attrib seealsoie.role.attrib local.seealsoie.attrib ;
person.ident.mix ::= honorific | firstname | surname | lineage | othername | affiliation | authorblurb | contrib | local.person.ident.mix ;
spanspec ::= spanspec::(spanspec.attlist ε) ;
guisubmenu ::= guisubmenu::(guisubmenu.attlist (smallcptr.char.mix | accel)*) ;
local.token.attrib ::= ε ;
local.toclevel5.attrib ::= ε ;
orgdiv.role.attrib ::= role.attrib ;
pagenum.attrib ::= (pagenum::string())? ;
ebnf.inline.hook ::= φ ;
local.informalfigure.attrib ::= ε ;
local.refname.attrib ::= ε ;
publisher ::= publisher::(publisher.attlist publishername address*) ;
local.refsect1.attrib ::= ε ;
token ::= token::(token.attlist smallcptr.char.mix*) ;
listpreamble.mix ::= admon.class | linespecific.class | synop.class | para.class | informal.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.listpreamble.mix ;
lineannotation.attlist ::= common.attrib lineannotation.role.attrib local.lineannotation.attrib ;
local.msglevel.attrib ::= ε ;
fax.role.attrib ::= role.attrib ;
local.foreignphrase.attrib ::= ε ;
subjectterm.role.attrib ::= role.attrib ;
guimenu.attlist ::= moreinfo.attrib common.attrib guimenu.role.attrib local.guimenu.attrib ;
local.refsect2info.attrib ::= ε ;
para.class ::= formalpara | para | simpara | local.para.class ;
synopsis.role.attrib ::= role.attrib ;
bibliosource.role.attrib ::= role.attrib ;
caption ::= caption::(caption.attlist textobject.mix*) ;
confnum ::= confnum::(confnum.attlist docinfo.char.mix*) ;
fieldsynopsis.role.attrib ::= role.attrib ;
local.bibliodiv.attrib ::= ε ;
tocfront ::= tocfront::(tocfront.attlist para.char.mix*) ;
bibliographyinfo.attlist ::= common.attrib bibliographyinfo.role.attrib local.bibliographyinfo.attrib ;
local.edition.attrib ::= ε ;
filename.role.attrib ::= role.attrib ;
local.preface.attrib ::= ε ;
row ::= row::(row.attlist tbl.row.mdl) ;
keywordset ::= keywordset::(keywordset.attlist keyword+) ;
screenco ::= screenco::(screenco.attlist areaspec screen calloutlist*) ;
funcsynopsisinfo.attlist ::= linespecific.attrib common.attrib funcsynopsisinfo.role.attrib local.funcsynopsisinfo.attrib ;
sbr.role.attrib ::= role.attrib ;
local.example.mix ::= φ ;
local.indexentry.attrib ::= ε ;
programlisting.role.attrib ::= role.attrib ;
preface.role.attrib ::= role.attrib ;
local.issn.attrib ::= ε ;
local.glossdiv.attrib ::= ε ;
indexdivcomponent.mix ::= itemizedlist | orderedlist | variablelist | simplelist | linespecific.class | synop.class | para.class | informal.class | anchor | remark | link.char.class | beginpage | local.indexdivcomponent.mix ;
local.sect3.attrib ::= ε ;
titleabbrev.attlist ::= common.attrib titleabbrev.role.attrib local.titleabbrev.attrib ;
toclevel2.role.attrib ::= role.attrib ;
simplesect.role.attrib ::= role.attrib ;
contractsponsor ::= contractsponsor::(contractsponsor.attlist docinfo.char.mix*) ;
areaspec ::= areaspec::(areaspec.attlist (area | areaset)+) ;
appendixinfo.attlist ::= common.attrib appendixinfo.role.attrib local.appendixinfo.attrib ;
article.attlist ::= (class::("journalarticle" | "productsheet" | "whitepaper" | "techreport" | "specification" | "faq"))? (parentbook::string())? status.attrib common.attrib article.role.attrib local.article.attrib ;
part.role.attrib ::= role.attrib ;
wordasword ::= wordasword::(wordasword.attlist word.char.mix*) ;
errorcode.attlist ::= moreinfo.attrib common.attrib errorcode.role.attrib local.errorcode.attrib ;
ulink.role.attrib ::= role.attrib ;
acronym ::= acronym::(acronym.attlist word.char.mix*) ;
ulink.attlist ::= url::string() (type::string())? common.attrib ulink.role.attrib local.ulink.attrib ;
legalnotice.mix ::= list.class | admon.class | linespecific.class | para.class | blockquote | ndxterm.class | beginpage | local.legalnotice.mix ;
methodname.attlist ::= common.attrib methodname.role.attrib local.methodname.attrib ;
bridgehead.role.attrib ::= role.attrib ;
section.role.attrib ::= role.attrib ;
corpauthor ::= corpauthor::(corpauthor.attlist docinfo.char.mix*) ;
figure.attlist ::= (float::yesorno.attvals)? (pgwide::yesorno.attvals)? label.attrib common.attrib figure.role.attrib local.figure.attrib ;
conftitle ::= conftitle::(conftitle.attlist docinfo.char.mix*) ;
setindex ::= setindex::(setindex.attlist setindexinfo? bookcomponent.title.content? component.mix* (indexdiv*) | (indexentry*)) ;
revision.role.attrib ::= role.attrib ;
alt ::= alt::(alt.attlist string()) ;
graphicco.role.attrib ::= role.attrib ;
local.keyaction.attrib ::= ε ;
sect5.role.attrib ::= role.attrib ;
index.attlist ::= common.attrib indexes.role.attrib local.indexes.attrib ;
local.titleabbrev.attrib ::= ε ;
cmdsynopsis.attlist ::= label.attrib (sepchar::string())? (cmdlength::string())? common.attrib cmdsynopsis.role.attrib local.cmdsynopsis.attrib ;
refname ::= refname::(refname.attlist refname.char.mix*) ;
local.collabname.attrib ::= ε ;
refsect1info.role.attrib ::= role.attrib ;
othername ::= othername::(othername.attlist docinfo.char.mix*) ;
local.highlights.attrib ::= ε ;
acronym.attlist ::= common.attrib acronym.role.attrib local.acronym.attrib ;
void ::= void::(void.attlist ε) ;
local.abstract.attrib ::= ε ;
indexterm.role.attrib ::= role.attrib ;
lotentry.attlist ::= linkend.attrib pagenum.attrib (srccredit::string())? common.attrib lotentry.role.attrib local.lotentry.attrib ;
msgentry ::= msgentry::(msgentry.attlist msg+ msginfo? msgexplan*) ;
secondaryie ::= secondaryie::(secondaryie.attlist ndxterm.char.mix*) ;
author ::= author::(author.attlist personname | (person.ident.mix+) (personblurb | email | address)*) ;
beginpage.attlist ::= pagenum.attrib common.attrib beginpage.role.attrib local.beginpage.attrib ;
local.programlistingco.attrib ::= ε ;
keyaction.attrib ::= (action::("click" | "double-click" | "press" | "seq" | "simul" | "other"))? (otheraction::string())? local.keyaction.attrib ;
local.refsection.attrib ::= ε ;
msgtext.role.attrib ::= role.attrib ;
prefaceinfo.role.attrib ::= role.attrib ;
local.blockinfo.attrib ::= ε ;
invpartnumber.attlist ::= common.attrib invpartnumber.role.attrib local.invpartnumber.attrib ;
textobject.attlist ::= common.attrib textobject.role.attrib local.textobject.attrib ;
database ::= database::(database.attlist cptr.char.mix*) ;
videodata.role.attrib ::= role.attrib ;
local.imagedata.attrib ::= ε ;
secondary ::= secondary::(secondary.attlist ndxterm.char.mix*) ;
abbrev.attlist ::= common.attrib abbrev.role.attrib local.abbrev.attrib ;
local.graphic.attrib ::= ε ;
refsectioninfo.attlist ::= common.attrib refsectioninfo.role.attrib local.refsectioninfo.attrib ;
contrib.role.attrib ::= role.attrib ;
editor ::= editor::(editor.attlist personname | (person.ident.mix+) (personblurb | email | address)*) ;
literallayout.role.attrib ::= role.attrib ;
othername.attlist ::= common.attrib othername.role.attrib local.othername.attrib ;
city ::= city::(city.attlist docinfo.char.mix*) ;
example ::= example::(example.attlist blockinfo? formalobject.title.content example.mix+) ;
audioobject.role.attrib ::= role.attrib ;
tbl.table.mdl ::= blockinfo? formalobject.title.content ndxterm.class* textobject* (graphic+) | (mediaobject+) | (tgroup+) ;
prompt ::= prompt::(prompt.attlist (smallcptr.char.mix | co)*) ;
local.cptr.char.mix ::= φ ;
bibliographyinfo.role.attrib ::= role.attrib ;
local.corpauthor.attrib ::= ε ;
fieldsynopsis.attlist ::= (language::string())? common.attrib fieldsynopsis.role.attrib local.fieldsynopsis.attrib ;
author.attlist ::= common.attrib author.role.attrib local.author.attrib ;
index.class ::= index | setindex | local.index.class ;
local.revremark.attrib ::= ε ;
local.setindexinfo.attrib ::= ε ;
imagedata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib imagedata.role.attrib local.imagedata.attrib ;
qandadiv ::= qandadiv::(qandadiv.attlist blockinfo? formalobject.title.content? qandaset.mix* (qandadiv+) | (qandaentry+)) ;
local.personname.attrib ::= ε ;
msg.attlist ::= common.attrib msg.role.attrib local.msg.attrib ;
simplelist ::= simplelist::(simplelist.attlist member+) ;
local.question.attrib ::= ε ;
synopfragmentref.role.attrib ::= role.attrib ;
database.attlist ::= (class::("name" | "table" | "field" | "key1" | "key2" | "record"))? moreinfo.attrib common.attrib database.role.attrib local.database.attrib ;
local.docinfo.char.class ::= φ ;
revdescription.attlist ::= common.attrib revdescription.role.attrib local.revdescription.attrib ;
funcparams ::= funcparams::(funcparams.attlist cptr.char.mix*) ;
local.footnoteref.attrib ::= ε ;
local.area.attrib ::= ε ;
toc ::= toc::(toc.attlist beginpage? bookcomponent.title.content? tocfront* (tocpart | tocchap)* tocback*) ;
local.refmeta.attrib ::= ε ;
local.subjectterm.attrib ::= ε ;
simplemsgentry ::= simplemsgentry::(simplemsgentry.attlist msgtext msgexplan+) ;
entry.attlist ::= (colname::string())? (namest::string())? (nameend::string())? (spanname::string())? (morerows::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? (rotate::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
msgset ::= msgset::(msgset.attlist blockinfo? formalobject.title.content? (msgentry+) | (simplemsgentry+)) ;
local.informal.class ::= φ ;
local.tocchap.attrib ::= ε ;
local.modifier.attrib ::= ε ;
city.attlist ::= common.attrib city.role.attrib local.city.attrib ;
graphic.role.attrib ::= role.attrib ;
local.legalnotice.mix ::= φ ;
local.sect4info.attrib ::= ε ;
tocpart ::= tocpart::(tocpart.attlist tocentry+ tocchap*) ;
colspec ::= colspec::(colspec.attlist ε) ;
tables.role.attrib ::= role.attrib ;
informalfigure ::= informalfigure::(informalfigure.attlist blockinfo? (figure.mix | link.char.class)+) ;
confnum.role.attrib ::= role.attrib ;
releaseinfo ::= releaseinfo::(releaseinfo.attlist docinfo.char.mix*) ;
contractnum ::= contractnum::(contractnum.attlist docinfo.char.mix*) ;
citetitle.attlist ::= (pubwork::("article" | "book" | "chapter" | "part" | "refentry" | "section" | "journal" | "series" | "set" | "manuscript"))? common.attrib citetitle.role.attrib local.citetitle.attrib ;
local.areaspec.attrib ::= ε ;
refmiscinfo ::= refmiscinfo::(refmiscinfo.attlist docinfo.char.mix*) ;
refpurpose ::= refpurpose::(refpurpose.attlist refinline.char.mix*) ;
local.refpurpose.attrib ::= ε ;
local.editor.attrib ::= ε ;
qandaset ::= qandaset::(qandaset.attlist blockinfo? formalobject.title.content? qandaset.mix* (qandadiv+) | (qandaentry+)) ;
local.medialabel.attrib ::= ε ;
tertiary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
bibliomisc ::= bibliomisc::(bibliomisc.attlist para.char.mix*) ;
local.option.attrib ::= ε ;
local.corpname.attrib ::= ε ;
command.role.attrib ::= role.attrib ;
local.sect1info.attrib ::= ε ;
reference.role.attrib ::= role.attrib ;
msgexplan ::= msgexplan::(msgexplan.attlist title? component.mix+) ;
shortaffil.role.attrib ::= role.attrib ;
titles ::= title? ;
guimenu ::= guimenu::(guimenu.attlist (smallcptr.char.mix | accel)*) ;
local.errortype.attrib ::= ε ;
printhistory.attlist ::= common.attrib printhistory.role.attrib local.printhistory.attrib ;
shortcut.attlist ::= keyaction.attrib moreinfo.attrib common.attrib shortcut.role.attrib local.shortcut.attrib ;
local.seglistitem.attrib ::= ε ;
simplemsgentry.attlist ::= (audience::string())? (level::string())? (origin::string())? common.attrib simplemsgentry.role.attrib local.simplemsgentry.attrib ;
local.lotentry.attrib ::= ε ;
keycap ::= keycap::(keycap.attlist cptr.char.mix*) ;
refdescriptor.attlist ::= common.attrib refdescriptor.role.attrib local.refdescriptor.attrib ;
sectioninfo ::= sectioninfo::(sectioninfo.attlist info.class+) ;
appendix.class ::= appendix | local.appendix.class ;
local.alt.attrib ::= ε ;
pagenums.role.attrib ::= role.attrib ;
indexterm.attlist ::= pagenum.attrib (scope::("all" | "global" | "local"))? (significance::("preferred" | "normal"))? (class::("singular" | "startofrange" | "endofrange"))? (startref::string())? (zone::string())? common.attrib indexterm.role.attrib local.indexterm.attrib ;
classsynopsisinfo.role.attrib ::= role.attrib ;
local.hardware.attrib ::= ε ;
local.glossentry.attrib ::= ε ;
tocpart.attlist ::= common.attrib tocpart.role.attrib local.tocpart.attrib ;
colspec.attlist ::= (colnum::string())? (colname::string())? (colwidth::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
authorinitials.attlist ::= common.attrib authorinitials.role.attrib local.authorinitials.attrib ;
subjectset.role.attrib ::= role.attrib ;
simpara.attlist ::= common.attrib simpara.role.attrib local.simpara.attrib ;
errortext.attlist ::= common.attrib errortext.role.attrib local.errortext.attrib ;
local.releaseinfo.attrib ::= ε ;
issn ::= issn::(issn.attlist docinfo.char.mix*) ;
ssscript.role.attrib ::= role.attrib ;
msgtext.attlist ::= common.attrib msgtext.role.attrib local.msgtext.attrib ;
prefaceinfo.attlist ::= common.attrib prefaceinfo.role.attrib local.prefaceinfo.attrib ;
orgdiv.attlist ::= common.attrib orgdiv.role.attrib local.orgdiv.attrib ;
local.bookinfo.attrib ::= ε ;
local.textobject.mix ::= φ ;
local.refsynopsisdivinfo.attrib ::= ε ;
local.dedication.attrib ::= ε ;
glossentry.role.attrib ::= role.attrib ;
refpurpose.attlist ::= common.attrib refpurpose.role.attrib local.refpurpose.attrib ;
qandaset.role.attrib ::= role.attrib ;
local.xref.attrib ::= ε ;
titleabbrev ::= titleabbrev::(titleabbrev.attlist title.char.mix*) ;
markup.attlist ::= common.attrib markup.role.attrib local.markup.attrib ;
productnumber ::= productnumber::(productnumber.attlist docinfo.char.mix*) ;
segtitle.role.attrib ::= role.attrib ;
local.menuchoice.attrib ::= ε ;
bibliomisc.attlist ::= common.attrib bibliomisc.role.attrib local.bibliomisc.attrib ;
refsectioninfo.role.attrib ::= role.attrib ;
important.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
abstract.attlist ::= common.attrib abstract.role.attrib local.abstract.attrib ;
partinfo.attlist ::= common.attrib partinfo.role.attrib local.partinfo.attrib ;
tocchap.role.attrib ::= role.attrib ;
objectdata.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? local.objectdata.attrib ;
fax.attlist ::= common.attrib fax.role.attrib local.fax.attrib ;
local.qandaset.attrib ::= ε ;
tertiaryie ::= tertiaryie::(tertiaryie.attlist ndxterm.char.mix*) ;
tbl.tgroup.att ::= (tgroupstyle::string())? ;
local.phone.attrib ::= ε ;
refentryinfo ::= refentryinfo::(refentryinfo.attlist info.class+) ;
nav.class ::= toc | lot | index | glossary | bibliography | local.nav.class ;
country.role.attrib ::= role.attrib ;
olink ::= olink::(olink.attlist para.char.mix*) ;
accel ::= accel::(accel.attlist smallcptr.char.mix*) ;
local.ndxterm.char.mix ::= φ ;
inlineequation ::= inlineequation::(inlineequation.attlist inlineequation.content) ;
local.word.char.mix ::= φ ;
keycap.attlist ::= moreinfo.attrib common.attrib keycap.role.attrib local.keycap.attrib ;
sectioninfo.attlist ::= common.attrib sectioninfo.role.attrib local.sectioninfo.attrib ;
constructorsynopsis.role.attrib ::= role.attrib ;
local.msgexplan.attrib ::= ε ;
admon.role.attrib ::= role.attrib ;
glosssee.role.attrib ::= role.attrib ;
entrytbl.attlist ::= cols::string() tbl.tgroup.att (colname::string())? (spanname::string())? (namest::string())? (nameend::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
local.userinput.attrib ::= ε ;
surname ::= surname::(surname.attlist docinfo.char.mix*) ;
ackno.attlist ::= common.attrib ackno.role.attrib local.ackno.attrib ;
varargs.role.attrib ::= role.attrib ;
biblio.class.attrib ::= (class::("uri" | "doi" | "isbn" | "issn" | "libraryofcongress" | "pubnumber" | "other"))? (otherclass::string())? ;
seglistitem.attlist ::= common.attrib seglistitem.role.attrib local.seglistitem.attrib ;
local.structname.attrib ::= ε ;
guisubmenu.attlist ::= moreinfo.attrib common.attrib guisubmenu.role.attrib local.guisubmenu.attrib ;
local.parameter.attrib ::= ε ;
index ::= index::(index.attlist indexinfo? bookcomponent.title.content? component.mix* (indexdiv*) | (indexentry*)) ;
sect5info.attlist ::= common.attrib sect5info.role.attrib local.sect5info.attrib ;
calloutlist ::= calloutlist::(calloutlist.attlist formalobject.title.content? callout+) ;
bibliodiv.role.attrib ::= role.attrib ;
publisher.attlist ::= common.attrib publisher.role.attrib local.publisher.attrib ;
synopfragment.role.attrib ::= role.attrib ;
link.attlist ::= (endterm::string())? linkendreq.attrib (type::string())? common.attrib link.role.attrib local.link.attrib ;
productname.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib productname.role.attrib local.productname.attrib ;
local.graphicco.attrib ::= ε ;
local.msgaud.attrib ::= ε ;
ndxterm.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlinegraphic | inlinemediaobject | local.ndxterm.char.mix ;
note.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.title.attrib ::= ε ;
screen.role.attrib ::= role.attrib ;
bookcomponent.content ::= (divcomponent.mix+ (sect1*) | (refentry.class*) | (simplesect*) | (section.class*)) | (sect1+) | (refentry.class+) | (simplesect+) | (section.class+) ;
pagenums ::= pagenums::(pagenums.attlist docinfo.char.mix*) ;
local.keywordset.attrib ::= ε ;
hardware.attlist ::= moreinfo.attrib common.attrib hardware.role.attrib local.hardware.attrib ;
substeps.attlist ::= (performance::("optional" | "required"))? common.attrib substeps.role.attrib local.substeps.attrib ;
dedication ::= dedication::(dedication.attlist sect.title.content? legalnotice.mix+) ;
question.attlist ::= common.attrib question.role.attrib local.question.attrib ;
local.articleinfo.attrib ::= ε ;
local.bibliomixed.attrib ::= ε ;
local.caption.attrib ::= ε ;
literal ::= literal::(literal.attlist cptr.char.mix*) ;
seeie ::= seeie::(seeie.attlist ndxterm.char.mix*) ;
surname.attlist ::= common.attrib surname.role.attrib local.surname.attrib ;
title.role.attrib ::= role.attrib ;
property.role.attrib ::= role.attrib ;
local.errorname.attrib ::= ε ;
local.component.mix ::= φ ;
procedure.role.attrib ::= role.attrib ;
local.biblioid.attrib ::= ε ;
abbrev ::= abbrev::(abbrev.attlist word.char.mix*) ;
informalequation ::= informalequation::(informalequation.attlist blockinfo? equation.content) ;
table.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno)? (rowsep::yesorno)? tbl.table.att bodyatt secur ;
local.revdescription.attrib ::= ε ;
tocchap ::= tocchap::(tocchap.attlist tocentry+ toclevel1*) ;
tip ::= tip::(tip.attlist title? admon.mix+) ;
lotentry.role.attrib ::= role.attrib ;
errorname ::= errorname::(errorname.attlist smallcptr.char.mix*) ;
local.toc.attrib ::= ε ;
linespecific.attrib ::= (format::"linespecific")? (linenumbering::("numbered" | "unnumbered"))? ;
local.bibliocomponent.mix ::= φ ;
local.tabentry.mix ::= φ ;
foreignphrase ::= foreignphrase::(foreignphrase.attlist para.char.mix*) ;
destructorsynopsis ::= destructorsynopsis::(destructorsynopsis.attlist modifier* methodname? (methodparam+) | void exceptionname*) ;
area ::= area::(area.attlist ε) ;
notation.class ::= "BMP" | "CGM-CHAR" | "CGM-BINARY" | "CGM-CLEAR" | "DITROFF" | "DVI" | "EPS" | "EQN" | "FAX" | "GIF" | "GIF87a" | "GIF89a" | "JPG" | "JPEG" | "IGES" | "PCX" | "PIC" | "PNG" | "PS" | "SGML" | "TBL" | "TEX" | "TIFF" | "WMF" | "WPG" | "SVG" | "linespecific" | local.notation.class ;
local.application.attrib ::= ε ;
phrase.attlist ::= common.attrib phrase.role.attrib local.phrase.attrib ;
bibliorelation.role.attrib ::= role.attrib ;
anchor.attlist ::= idreq.attrib pagenum.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib anchor.role.attrib local.anchor.attrib ;
conftitle.attlist ::= common.attrib conftitle.role.attrib local.conftitle.attrib ;
audiodata ::= audiodata::(audiodata.attlist ε) ;
attribution ::= attribution::(attribution.attlist para.char.mix*) ;
parameter.role.attrib ::= role.attrib ;
toclevel5 ::= toclevel5::(toclevel5.attlist tocentry+) ;
coref.attlist ::= label.attrib linkendreq.attrib common.attrib coref.role.attrib local.coref.attrib ;
toclevel4 ::= toclevel4::(toclevel4.attlist tocentry+ toclevel5*) ;
ndxterm.class ::= indexterm | local.ndxterm.class ;
toclevel3 ::= toclevel3::(toclevel3.attlist tocentry+ toclevel4*) ;
toclevel2 ::= toclevel2::(toclevel2.attlist tocentry+ toclevel3*) ;
option ::= option::(option.attlist cptr.char.mix*) ;
toclevel1 ::= toclevel1::(toclevel1.attlist tocentry+ toclevel2*) ;
entry ::= entry::(entry.attlist tbl.entry.mdl*) ;
genobj.class ::= anchor | bridgehead | remark | highlights | local.genobj.class ;
inlineequation.content ::= alt? (graphic+) | (inlinemediaobject+) ;
variablelist.role.attrib ::= role.attrib ;
objectinfo ::= objectinfo::(objectinfo.attlist info.class+) ;
screen ::= screen::(screen.attlist (para.char.mix | co | coref | textobject | lineannotation)*) ;
tip.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.effectivity.attrib ::= ε ;
symbol.attlist ::= (class::"limit")? common.attrib symbol.role.attrib local.symbol.attrib ;
local.conftitle.attrib ::= ε ;
local.glossterm.attrib ::= ε ;
void.attlist ::= common.attrib void.role.attrib local.void.attrib ;
errorname.attlist ::= common.attrib errorname.role.attrib local.errorname.attrib ;
local.smallcptr.char.mix ::= φ ;
revhistory.attlist ::= common.attrib revhistory.role.attrib local.revhistory.attrib ;
local.literallayout.attrib ::= ε ;
medialabel.attlist ::= (class::("cartridge" | "cdrom" | "disk" | "tape"))? common.attrib medialabel.role.attrib local.medialabel.attrib ;
local.biblioentry.attrib ::= ε ;
constructorsynopsis.attlist ::= (language::string())? common.attrib constructorsynopsis.role.attrib local.constructorsynopsis.attrib ;
local.formal.class ::= φ ;
local.indexes.attrib ::= ε ;
forminlines.hook ::= φ ;
local.screeninfo.attrib ::= ε ;
local.compound.class ::= φ ;
local.varargs.attrib ::= ε ;
msg.role.attrib ::= role.attrib ;
sect5info.role.attrib ::= role.attrib ;
tertiary ::= tertiary::(tertiary.attlist ndxterm.char.mix*) ;
local.seriesvolnums.attrib ::= ε ;
figure.mix ::= linespecific.class | synop.class | informal.class | ndxterm.class | beginpage | local.figure.mix ;
sect1info.role.attrib ::= role.attrib ;
local.manvolnum.attrib ::= ε ;
local.para.class ::= φ ;
videoobject.attlist ::= common.attrib videoobject.role.attrib local.videoobject.attrib ;
refsect.title.content ::= title subtitle? titleabbrev? ;
toclevel3.role.attrib ::= role.attrib ;
isbn.role.attrib ::= role.attrib ;
referenceinfo.attlist ::= common.attrib referenceinfo.role.attrib local.referenceinfo.attrib ;
methodsynopsis.role.attrib ::= role.attrib ;
msgrel.attlist ::= common.attrib msgrel.role.attrib local.msgrel.attrib ;
address.role.attrib ::= role.attrib ;
glossterm.attlist ::= linkend.attrib (baseform::string())? common.attrib glossterm.role.attrib local.glossterm.attrib ;
confsponsor.attlist ::= common.attrib confsponsor.role.attrib local.confsponsor.attrib ;
status.attrib ::= (status::string())? local.status.attrib ;
secondary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
local.simpara.attrib ::= ε ;
local.toclevel3.attrib ::= ε ;
refdescriptor ::= refdescriptor::(refdescriptor.attlist refname.char.mix*) ;
editor.role.attrib ::= role.attrib ;
local.action.attrib ::= ε ;
local.subjectset.attrib ::= ε ;
year ::= year::(year.attlist docinfo.char.mix*) ;
revision.attrib ::= (revision::string())? ;
authorinitials ::= authorinitials::(authorinitials.attlist docinfo.char.mix*) ;
local.msg.attrib ::= ε ;
info.class ::= graphic | mediaobject | legalnotice | modespec | subjectset | keywordset | itermset | bibliocomponent.mix | local.info.class ;
citetitle.role.attrib ::= role.attrib ;
prompt.attlist ::= moreinfo.attrib common.attrib prompt.role.attrib local.prompt.attrib ;
guiicon ::= guiicon::(guiicon.attlist (smallcptr.char.mix | accel)*) ;
local.admon.mix ::= φ ;
local.accel.attrib ::= ε ;
honorific.attlist ::= common.attrib honorific.role.attrib local.honorific.attrib ;
footnote.attlist ::= label.attrib common.attrib footnote.role.attrib local.footnote.attrib ;
computeroutput.role.attrib ::= role.attrib ;
callout ::= callout::(callout.attlist component.mix+) ;
guibutton ::= guibutton::(guibutton.attlist (smallcptr.char.mix | accel)*) ;
oointerface.role.attrib ::= role.attrib ;
screenco.role.attrib ::= role.attrib ;
local.funcparams.attrib ::= ε ;
local.glossaryinfo.attrib ::= ε ;
authorgroup.role.attrib ::= role.attrib ;
list.class ::= calloutlist | glosslist | itemizedlist | orderedlist | segmentedlist | simplelist | variablelist | local.list.class ;
local.glossseealso.attrib ::= ε ;
mediaobject ::= mediaobject::(mediaobject.attlist objectinfo? mediaobject.mix+ caption?) ;
formalpara.role.attrib ::= role.attrib ;
local.bibliorelation.attrib ::= ε ;
abstract ::= abstract::(abstract.attlist title? para.class+) ;
important ::= important::(important.attlist title? admon.mix+) ;
application.attlist ::= (class::("hardware" | "software"))? moreinfo.attrib common.attrib application.role.attrib local.application.attrib ;
formalpara.attlist ::= common.attrib formalpara.role.attrib local.formalpara.attrib ;
glossaryinfo.role.attrib ::= role.attrib ;
artpagenums ::= artpagenums::(artpagenums.attlist docinfo.char.mix*) ;
contractsponsor.role.attrib ::= role.attrib ;
areaspec.role.attrib ::= role.attrib ;
local.indexinfo.attrib ::= ε ;
glossdiv.attlist ::= status.attrib common.attrib glossdiv.role.attrib local.glossdiv.attrib ;
pob.role.attrib ::= role.attrib ;
structfield.attlist ::= common.attrib structfield.role.attrib local.structfield.attrib ;
tbody ::= tbody::(tbody.attlist row+) ;
local.itemizedlist.attrib ::= ε ;
setinfo ::= setinfo::(setinfo.attlist info.class+) ;
msgmain.role.attrib ::= role.attrib ;
issuenum ::= issuenum::(issuenum.attlist docinfo.char.mix*) ;
collab ::= collab::(collab.attlist collabname affiliation*) ;
local.sect1.attrib ::= ε ;
type.attlist ::= common.attrib type.role.attrib local.type.attrib ;
ackno ::= ackno::(ackno.attlist docinfo.char.mix*) ;
corpname.role.attrib ::= role.attrib ;
local.holder.attrib ::= ε ;
keysym ::= keysym::(keysym.attlist smallcptr.char.mix*) ;
superscript ::= superscript::(superscript.attlist (string() | link.char.class | emphasis | replaceable | symbol | inlinegraphic | inlinemediaobject | base.char.class | other.char.class)*) ;
contractnum.attlist ::= common.attrib contractnum.role.attrib local.contractnum.attrib ;
classname ::= classname::(classname.attlist smallcptr.char.mix*) ;
street ::= street::(street.attlist docinfo.char.mix*) ;
trademark.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib trademark.role.attrib local.trademark.attrib ;
refmiscinfo.role.attrib ::= role.attrib ;
--------------------markup::mathml-furubayashi.bgf--------------------
mml.ctrigop ::= mml.sin.qname | mml.cos.qname | mml.tan.qname | mml.sec.qname | mml.csc.qname | mml.cot.qname | mml.sinh.qname | mml.cosh.qname | mml.tanh.qname | mml.sech.qname | mml.csch.qname | mml.coth.qname | mml.arcsin.qname | mml.arccos.qname | mml.arctan.qname | mml.arccosh.qname | mml.arccot.qname | mml.arccoth.qname | mml.arccsc.qname | mml.arccsch.qname | mml.arcsec.qname | mml.arcsech.qname | mml.arcsinh.qname | mml.arctanh.qname ;
mml.mrow.qname ::= mrow::(mml.PresExpression mml.Common.attrib) ;
mml.sec.qname ::= sec::(ε mml.operators.common.attrib) ;
mml.floor.qname ::= floor::(ε mml.operators.common.attrib) ;
mml.ccalcop ::= mml.log.qname | mml.int.qname | mml.diff.qname | mml.partialdiff.qname | mml.divergence.qname | mml.grad.qname | mml.curl.qname | mml.laplacian.qname ;
mml.att-depth ::= (depth::mml.length.datatype)? ;
mml.att-groupalign ::= (groupalign::mml.groupalign.datatype)? ;
mml.cot.qname ::= cot::(ε mml.operators.common.attrib) ;
mml.maligngroup.qname ::= maligngroup::(ε mml.Common.attrib mml.att-groupalign) ;
mml.vector.qname ::= vector::(mml.ContentExpression mml.Common.attrib) ;
mml.ln.qname ::= ln::(ε mml.operators.common.attrib) ;
mml.matrix.qname ::= matrix::(mml.ContentExpression mml.Common.attrib) ;
mml.cother ::= mml.condition.qname | mml.declare.qname | mml.sep.qname ;
mml.msubsup.qname ::= msubsup::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift mml.att-superscriptshift) ;
mml.columnspacing.datatype ::= (string() string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace")+ ;
mml.msub.qname ::= msub::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift) ;
mml.att-columnwidth ::= (columnwidth::mml.columnwidth.datatype)? ;
mml.annotation.qname ::= annotation::(mml.Annotation.datatype mml.Common.attrib mml.att-encoding) ;
mml.att-occurrence ::= (occurrence::("prefix" | "infix" | "function-model"))? ;
mml.att-mediummathspace ::= (mediummathspace::mml.length.datatype)? ;
mml.apply.qname ::= apply::(mml.ContentExpression mml.Common.attrib) ;
mml.cspecial ::= mml.apply.qname | mml.reln.qname | mml.lambda.qname ;
mml.att-accent ::= (accent::("true" | "false"))? ;
mml.mtr.qname ::= mtr::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign) ;
mml.ci.qname ::= ci::((mml.MathMLCharacters | mml.PresInCont)* mml.Common.attrib mml.att-type mml.att-definition mml.att-encoding) ;
mml.att-baseline ::= (baseline::string())? ;
mml.false.qname ::= false::(ε mml.operators.common.attrib) ;
mml.arcsinh.qname ::= arcsinh::(ε mml.operators.common.attrib) ;
mml.att-veryverythinmathspace ::= (veryverythinmathspace::mml.length.datatype)? ;
mml.intersect.qname ::= intersect::(ε mml.operators.common.attrib) ;
mml.att-superscriptshift ::= (superscriptshift::mml.length.datatype)? ;
mml.att-type ::= (type::("e-notation" | "integer" | "rational" | "real" | "float" | "complex-polar" | "complex-cartesian" | "constant"))? ;
mml.number.datatype ::= integer() ;
mml.columnwidth.datatype ::= ("auto" | string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") | "fit")+ ;
mml.primes.qname ::= primes::(ε mml.operators.common.attrib) ;
mml.carithop2ary ::= mml.quotient.qname | mml.divide.qname | mml.power.qname | mml.rem.qname ;
mml.lcm.qname ::= lcm::(ε mml.operators.common.attrib) ;
mml.reals.qname ::= reals::(ε mml.operators.common.attrib) ;
mml.logbase.qname ::= logbase::(mml.ContentExpression mml.Common.attrib) ;
mml.alignmentscope.datatype ::= ("true" | "false")+ ;
mml.arctan.qname ::= arctan::(ε mml.operators.common.attrib) ;
mml.att-sizeinfo ::= mml.att-width mml.att-height mml.att-depth ;
mml.att-linebreak ::= (linebreak::("auto" | "newline" | "indentingnewline" | "nobreak" | "goodbreak" | "badbreak"))? ;
mml.att-thinmathspace ::= (thinmathspace::mml.length.datatype)? ;
mml.cquantifier ::= mml.lowlimit.qname | mml.uplimit.qname | mml.bvar.qname | mml.degree.qname | mml.logbase.qname | mml.momentabout.qname | mml.domainofapplication.qname ;
mml.cstatopmoment ::= mml.moment.qname ;
mml.arcsin.qname ::= arcsin::(ε mml.operators.common.attrib) ;
mml.malignmark.qname ::= malignmark::(ε mml.att-edge) ;
mml.diff.qname ::= diff::(ε mml.operators.common.attrib) ;
mml.times.qname ::= times::(ε mml.operators.common.attrib) ;
mml.mtable.qname ::= mtable::(mml.PresExpression mml.Common.attrib mml.att-tableinfo) ;
mml.att-columnspan ::= (columnspan::mml.columnspan.datatype)? ;
mml.att-tableinfo ::= mml.att-align mml.att-rowalign mml.att-columnalign mml.att-columnwidth mml.att-groupalign mml.att-alignmentscope mml.att-rowspacing mml.att-columnspacing mml.att-rowlines mml.att-columnlines mml.att-frame mml.att-framespacing mml.att-equalrows mml.att-equalcolumns mml.att-displaystyle ;
mml.carithoproot ::= mml.root.qname ;
mml.operators.common.attrib ::= mml.Common.attrib mml.att-definition mml.att-encoding ;
mml.integers.qname ::= integers::(ε mml.operators.common.attrib) ;
mml.matrixrow.qname ::= matrixrow::(mml.ContentExpression mml.Common.attrib) ;
mml.notprsubset.qname ::= notprsubset::(ε mml.operators.common.attrib) ;
mml.att-stretchy ::= (stretchy::("true" | "false"))? ;
mml.copnary ::= mml.cfuncopnary | mml.carithopnary | mml.clogicopnary | mml.csetopnary | mml.cstatopnary | mml.clalgopnary ;
mml.eq.qname ::= eq::(ε mml.operators.common.attrib) ;
mml.semantics.qname ::= semantics::(mml.ContentExpression mml.Common.attrib mml.att-definition mml.att-encoding) ;
mml.cconstructor ::= mml.interval.qname | mml.list.qname | mml.matrix.qname | mml.matrixrow.qname | mml.set.qname | mml.vector.qname | mml.piecewise.qname ;
mml.att-fontweight ::= (fontweight::("normal" | "bold"))? ;
mml.setdiff.qname ::= setdiff::(ε mml.operators.common.attrib) ;
mml.or.qname ::= or::(ε mml.operators.common.attrib) ;
mml.subset.qname ::= subset::(ε mml.operators.common.attrib) ;
mml.att-overflow ::= (overflow::("scroll" | "elide" | "truncate" | "scale"))? ;
mml.list.qname ::= list::(mml.ContentExpression mml.Common.attrib mml.att-order) ;
mml.att-mathcolor ::= (mathcolor::mml.color.datatype)? ;
mml.approx.qname ::= approx::(ε mml.operators.common.attrib) ;
mml.plus.qname ::= plus::(ε mml.operators.common.attrib) ;
mml.rem.qname ::= rem::(ε mml.operators.common.attrib) ;
mml.att-scope ::= (scope::("local" | "global"))? ;
mml.domainofapplication.qname ::= domainofapplication::(mml.ContentExpression mml.Common.attrib) ;
mml.plschema ::= mml.pgenschema | mml.pscrschema | mml.ptabschema ;
mml.geq.qname ::= geq::(ε mml.operators.common.attrib) ;
mml.compose.qname ::= compose::(ε mml.operators.common.attrib) ;
mml.att-nargs ::= (nargs::("nary" | mml.number.datatype))? ;
mml.att-veryverythickmathspace ::= (veryverythickmathspace::mml.length.datatype)? ;
mml.c0ary ::= mml.integers.qname | mml.reals.qname | mml.rationals.qname | mml.naturalnumbers.qname | mml.complexes.qname | mml.primes.qname | mml.exponentiale.qname | mml.imaginaryi.qname | mml.notanumber.qname | mml.true.qname | mml.false.qname | mml.emptyset.qname | mml.eulergamma.qname | mml.infinity.qname ;
mml.lt.qname ::= lt::(ε mml.operators.common.attrib) ;
mml.lambda.qname ::= lambda::(mml.ContentExpression mml.Common.attrib) ;
mml.mean.qname ::= mean::(ε mml.operators.common.attrib) ;
mml.interval.qname ::= interval::(mml.ContentExpression mml.Common.attrib mml.att-closure) ;
mml.mlabeledtr.qname ::= mlabeledtr::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign) ;
mml.att-display ::= (display::string())? ;
mml.gcd.qname ::= gcd::(ε mml.operators.common.attrib) ;
mml.msup.qname ::= msup::(mml.PresExpression mml.Common.attrib mml.att-superscriptshift) ;
mml.color.datatype ::= string() | string() | "transparent" ;
mml.positiveinteger.datatype ::= integer() ;
mml.pactions ::= mml.maction.qname ;
mml.uplimit.qname ::= uplimit::(mml.ContentExpression mml.Common.attrib) ;
mml.att-symmetric ::= (symmetric::("true" | "false"))? ;
mml.ptabschema ::= mml.mtable.qname | mml.mtr.qname | mml.mlabeledtr.qname | mml.mtd.qname ;
mml.notanumber.qname ::= notanumber::(ε mml.operators.common.attrib) ;
mml.att-subscriptshift ::= (subscriptshift::mml.length.datatype)? ;
mml.columnalign.datatype ::= ("left" | "center" | "right")+ ;
mml.att-fence ::= (fence::("true" | "false"))? ;
mml.carithop1ary ::= mml.abs.qname | mml.conjugate.qname | mml.exp.qname | mml.factorial.qname | mml.arg.qname | mml.real.qname | mml.imaginary.qname | mml.floor.qname | mml.ceiling.qname ;
mml.att-definition ::= (definitionURL::mml.uri.datatype)? ;
mml.att-columnspacing ::= (columnspacing::mml.columnspacing.datatype)? ;
mml.att-alignmentscope ::= (alignmentscope::mml.alignmentscope.datatype)? ;
mml.cseqop ::= mml.sum.qname | mml.product.qname | mml.limit.qname ;
mml.att-base ::= (base::mml.number.datatype)? ;
mml.abs.qname ::= abs::(ε mml.operators.common.attrib) ;
mml.minus.qname ::= minus::(ε mml.operators.common.attrib) ;
mml.att-alt ::= (alt::string())? ;
mml.att-scriptminsize ::= (scriptminsize::mml.length.datatype)? ;
mml.piece.qname ::= piece::(mml.ContentExpression mml.Common.attrib) ;
mml.cop2ary ::= mml.carithop2ary | mml.clogicop2ary | mml.clalgop2ary | mml.csetop2ary ;
mml.cartesianproduct.qname ::= cartesianproduct::(ε mml.operators.common.attrib) ;
mml.factorof.qname ::= factorof::(ε mml.operators.common.attrib) ;
mml.declare.qname ::= declare::(mml.ContentExpression mml.Common.attrib mml.att-type mml.att-scope mml.att-nargs mml.att-occurrence mml.att-definition mml.att-encoding) ;
mml.lines.datatype ::= ("none" | "solid" | "dashed")+ ;
mml.in.qname ::= in::(ε mml.operators.common.attrib) ;
mml.mstyle.qname ::= mstyle::(mml.PresExpression mml.Common.attrib mml.att-fontinfo mml.att-opinfo mml.att-lquote mml.att-rquote mml.att-linethickness mml.att-scriptlevel mml.att-scriptsizemultiplier mml.att-scriptminsize mml.att-background mml.att-veryverythinmathspace mml.att-verythinmathspace mml.att-thinmathspace mml.att-mediummathspace mml.att-thickmathspace mml.att-verythickmathspace mml.att-veryverythickmathspace mml.att-open mml.att-close mml.att-separators mml.att-subscriptshift mml.att-superscriptshift mml.att-accentunder mml.att-tableinfo mml.att-rowspan mml.att-columnspan mml.att-edge mml.att-actiontype) ;
mml.att-form ::= (form::("prefix" | "infix" | "postfix"))? ;
mml.coth.qname ::= coth::(ε mml.operators.common.attrib) ;
mml.eulergamma.qname ::= eulergamma::(ε mml.operators.common.attrib) ;
mml.copmisc ::= mml.carithoproot | mml.carithop1or2ary | mml.ccalcop | mml.cseqop | mml.cstatopmoment | mml.clogicopquant ;
mml.set.qname ::= set::(mml.ContentExpression mml.Common.attrib mml.att-type) ;
mml.tan.qname ::= tan::(ε mml.operators.common.attrib) ;
mml.att-scriptlevel ::= (scriptlevel::mml.number.datatype)? ;
mml.att-mathbackground ::= (mathbackground::mml.color.datatype)? ;
mml.sin.qname ::= sin::(ε mml.operators.common.attrib) ;
mml.att-verythinmathspace ::= (verythinmathspace::mml.length.datatype)? ;
mml.att-equalrows ::= (equalrows::("true" | "false"))? ;
mml.grad.qname ::= grad::(ε mml.operators.common.attrib) ;
mml.min.qname ::= min::(ε mml.operators.common.attrib) ;
mml.att-background ::= (background::mml.color.datatype)? ;
mml.munder.qname ::= munder::(mml.PresExpression mml.Common.attrib mml.att-accentunder) ;
mml.att-movablelimits ::= (movablelimits::("true" | "false"))? ;
mml.att-rowspacing ::= (rowspacing::mml.rowspacing.datatype)? ;
mml.bvar.qname ::= bvar::(mml.ContentExpression mml.Common.attrib) ;
mml.id.datatype ::= string() ;
mml.att-macros ::= (macros::string())? ;
mml.att-linethickness ::= (linethickness::(mml.length.datatype | "thin" | "medium" | "thick"))? ;
mml.csetrelnary ::= mml.subset.qname | mml.prsubset.qname ;
mml.rationals.qname ::= rationals::(ε mml.operators.common.attrib) ;
mml.exponentiale.qname ::= exponentiale::(ε mml.operators.common.attrib) ;
mml.att-close ::= (close::string())? ;
mml.pi.qname ::= pi::(ε mml.operators.common.attrib) ;
mml.att-lspace ::= (lspace::mml.namedspace.datatype)? ;
mml.forall.qname ::= forall::(ε mml.operators.common.attrib) ;
mml.clogicopquant ::= mml.exists.qname | mml.forall.qname ;
mml.arccos.qname ::= arccos::(ε mml.operators.common.attrib) ;
mml.namedspace.datatype ::= string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace" ;
mml.att-columnalign ::= (columnalign::mml.columnalign.datatype)? ;
mml.arccoth.qname ::= arccoth::(ε mml.operators.common.attrib) ;
mml.att-opinfo ::= mml.att-form mml.att-fence mml.att-separator mml.att-lspace mml.att-rspace mml.att-stretchy mml.att-symmetric mml.att-maxsize mml.att-minsize mml.att-largeop mml.att-movablelimits mml.att-accent ;
mml.gt.qname ::= gt::(ε mml.operators.common.attrib) ;
mml.att-columnlines ::= (columnlines::mml.lines.datatype)? ;
mml.product.qname ::= product::(ε mml.operators.common.attrib) ;
mml.int.qname ::= int::(ε mml.operators.common.attrib) ;
mml.att-name ::= (name::string())? ;
mml.clogicopnary ::= mml.and.qname | mml.or.qname | mml.xor.qname ;
mml.att-separator ::= (separator::("true" | "false"))? ;
mml.tanh.qname ::= tanh::(ε mml.operators.common.attrib) ;
mml.ms.qname ::= ms::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo mml.att-lquote mml.att-rquote) ;
mml.nonnegativefloat.datatype ::= string() ;
mml.tendsto.qname ::= tendsto::(ε mml.operators.common.attrib mml.att-type) ;
mml.att-thickmathspace ::= (thickmathspace::mml.length.datatype)? ;
mml.selector.qname ::= selector::(ε mml.operators.common.attrib) ;
mml.laplacian.qname ::= laplacian::(ε mml.operators.common.attrib) ;
mml.att-largeop ::= (largeop::("true" | "false"))? ;
mml.ccalcop1ary ::= mml.ln.qname ;
mml.att-fontinfo ::= mml.att-fontsize mml.att-fontweight mml.att-fontstyle mml.att-fontfamily mml.att-color mml.att-mathvariant mml.att-mathsize mml.att-mathcolor mml.att-mathbackground ;
mml.att-alttext ::= (alttext::string())? ;
mml.and.qname ::= and::(ε mml.operators.common.attrib) ;
mml.determinant.qname ::= determinant::(ε mml.operators.common.attrib) ;
mml.not.qname ::= not::(ε mml.operators.common.attrib) ;
mml.piecewise.qname ::= piecewise::(mml.piece.qname* mml.otherwise.qname? mml.Common.attrib) ;
mml.framespacing.datatype ::= string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") ;
mml.att-rowalign ::= (rowalign::mml.rowalign.datatype)? ;
mml.cop1ary ::= mml.cfuncop1ary | mml.carithop1ary | mml.clogicop1ary | mml.ccalcop1ary | mml.ctrigop | mml.clalgop1ary | mml.csetop1ary ;
mml.att-width ::= (width::mml.namedspace.datatype)? ;
mml.att-fontstyle ::= (fontstyle::("normal" | "italic"))? ;
mml.att-rowlines ::= (rowlines::mml.lines.datatype)? ;
mml.partialdiff.qname ::= partialdiff::(ε mml.operators.common.attrib) ;
mml.moment.qname ::= moment::(ε mml.operators.common.attrib) ;
mml.csetrel2ary ::= mml.in.qname | mml.notin.qname | mml.notsubset.qname | mml.notprsubset.qname ;
mml.mover.qname ::= mover::(mml.PresExpression mml.Common.attrib mml.att-accent) ;
mml.att-closure ::= (closure::("open" | "closed" | "open-closed" | "closed-open"))? ;
mml.ptoken ::= mml.mi.qname | mml.mn.qname | mml.mo.qname | mml.mtext.qname | mml.ms.qname ;
mml.mpadded.qname ::= mpadded::(mml.PresExpression mml.Common.attrib mml.att-sizeinfo mml.att-lspace) ;
mml.mspace.qname ::= mspace::(ε mml.Common.attrib mml.att-sizeinfo mml.att-linebreak) ;
mml.rowspacing.datatype ::= string()+ ;
mml.csymbol.qname ::= csymbol::((mml.MathMLCharacters | mml.PresInCont)* mml.Common.attrib mml.att-type mml.att-definition mml.att-encoding) ;
mml.arctanh.qname ::= arctanh::(ε mml.operators.common.attrib) ;
mml.pgenschema ::= mml.mrow.qname | mml.mfrac.qname | mml.msqrt.qname | mml.mroot.qname | mml.menclose.qname | mml.mstyle.qname | mml.merror.qname | mml.mpadded.qname | mml.mphantom.qname | mml.mfenced.qname ;
mml.implies.qname ::= implies::(ε mml.operators.common.attrib) ;
mml.att-rspace ::= (rspace::mml.namedspace.datatype)? ;
mml.notsubset.qname ::= notsubset::(ε mml.operators.common.attrib) ;
mml.att-encoding ::= (encoding::string())? ;
mml.cfuncopnary ::= mml.fn.qname | mml.compose.qname ;
mml.att-bevelled ::= (bevelled::("true" | "false"))? ;
mml.idref.datatype ::= string() ;
mml.ident.qname ::= ident::(ε mml.operators.common.attrib) ;
mml.csetopnary ::= mml.union.qname | mml.intersect.qname | mml.cartesianproduct.qname ;
mml.equivalent.qname ::= equivalent::(ε mml.operators.common.attrib) ;
mml.att-open ::= (open::string())? ;
mml.ctoken ::= mml.csymbol.qname | mml.ci.qname | mml.cn.qname ;
mml.att-rowspan ::= (rowspan::("top" | "bottom" | "center" | "baseline" | "axis"))? ;
mml.clogicop2ary ::= mml.implies.qname ;
mml.mode.qname ::= mode::(ε mml.operators.common.attrib) ;
mml.menclose.qname ::= menclose::(mml.PresExpression mml.Common.attrib (notation::("longdiv" | "actuarial" | "radical"))?) ;
mml.root.qname ::= root::(ε mml.operators.common.attrib) ;
mml.mn.qname ::= mn::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.factorial.qname ::= factorial::(ε mml.operators.common.attrib) ;
mml.max.qname ::= max::(ε mml.operators.common.attrib) ;
mml.csemantics ::= mml.semantics.qname | mml.annotation.qname | mml.annotation-xml.qname ;
mml.clalgopnary ::= mml.selector.qname ;
mml.groupalign.datatype ::= string() ;
mml.length.datatype ::= string() ;
mml.complexes.qname ::= complexes::(ε mml.operators.common.attrib) ;
mml.exp.qname ::= exp::(ε mml.operators.common.attrib) ;
mml.condition.qname ::= condition::(mml.ContentExpression mml.Common.attrib) ;
mml.att-verythickmathspace ::= (verythickmathspace::mml.length.datatype)? ;
mml.att-framespacing ::= (framespacing::mml.framespacing.datatype)? ;
mml.att-displaystyle ::= (displaystyle::("true" | "false"))? ;
mml.degree.qname ::= degree::(mml.ContentExpression mml.Common.attrib) ;
mml.peschema ::= mml.maligngroup.qname | mml.malignmark.qname ;
mml.fn.qname ::= fn::(mml.ContentExpression mml.operators.common.attrib) ;
mml.att-equalcolumns ::= (equalcolumns::("true" | "false"))? ;
mml.domain.qname ::= domain::(ε mml.operators.common.attrib) ;
mml.cos.qname ::= cos::(ε mml.operators.common.attrib) ;
mml.sdev.qname ::= sdev::(ε mml.operators.common.attrib) ;
mml.log.qname ::= log::(ε mml.operators.common.attrib) ;
mml.annotation-xml.qname ::= annotation-xml::(mml.Annotation-xml.datatype mml.Common.attrib mml.att-encoding) ;
mml.divide.qname ::= divide::(ε mml.operators.common.attrib) ;
mml.none.qname ::= none::ε ;
mml.reln.qname ::= reln::(mml.ContentExpression mml.Common.attrib) ;
mml.emptyset.qname ::= emptyset::(ε mml.operators.common.attrib) ;
mml.codomain.qname ::= codomain::(ε mml.operators.common.attrib) ;
mml.otherwise.qname ::= otherwise::(mml.ContentExpression mml.Common.attrib) ;
mml.att-frame ::= (frame::("none" | "solid" | "dashed"))? ;
mml.att-lquote ::= (lquote::string())? ;
mml.curl.qname ::= curl::(ε mml.operators.common.attrib) ;
mml.inverse.qname ::= inverse::(ε mml.operators.common.attrib) ;
mml.att-scriptsizemultiplier ::= (scriptsizemultiplier::mml.nonnegativefloat.datatype)? ;
mml.quotient.qname ::= quotient::(ε mml.operators.common.attrib) ;
mml.infinity.qname ::= infinity::(ε mml.operators.common.attrib) ;
mml.csetop2ary ::= mml.setdiff.qname ;
mml.att-mathsize ::= (mathsize::("small" | "normal" | "big" | mml.length.datatype))? ;
mml.att-color ::= (color::mml.color.datatype)? ;
mml.arccsc.qname ::= arccsc::(ε mml.operators.common.attrib) ;
mml.munderover.qname ::= munderover::(mml.PresExpression mml.Common.attrib mml.att-accent mml.att-accentunder) ;
mml.mglyph.qname ::= mglyph::(ε mml.att-alt mml.att-fontfamily mml.att-index) ;
mml.real.qname ::= real::(ε mml.operators.common.attrib) ;
mml.mi.qname ::= mi::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.mmultiscripts.qname ::= mmultiscripts::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift mml.att-superscriptshift) ;
mml.att-altimg ::= (altimg::mml.uri.datatype)? ;
mml.clalgop2ary ::= mml.vectorproduct.qname | mml.scalarproduct.qname | mml.outerproduct.qname ;
mml.mfrac.qname ::= mfrac::(mml.PresExpression mml.Common.attrib mml.att-bevelled mml.att-linethickness) ;
mml.xor.qname ::= xor::(ε mml.operators.common.attrib) ;
mml.mtext.qname ::= mtext::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.neq.qname ::= neq::(ε mml.operators.common.attrib) ;
mml.csch.qname ::= csch::(ε mml.operators.common.attrib) ;
mml.leq.qname ::= leq::(ε mml.operators.common.attrib) ;
mml.cgenrelnary ::= mml.eq.qname | mml.leq.qname | mml.lt.qname | mml.geq.qname | mml.gt.qname | mml.equivalent.qname | mml.approx.qname ;
mml.outerproduct.qname ::= outerproduct::(ε mml.operators.common.attrib) ;
mml.conjugate.qname ::= conjugate::(ε mml.operators.common.attrib) ;
mml.att-fontfamily ::= (fontfamily::string())? ;
mml.card.qname ::= card::(ε mml.operators.common.attrib) ;
mml.att-order ::= (order::("lexicographic" | "numeric"))? ;
mml.att-actiontype ::= ((actiontype::"toggle" selection::mml.positiveinteger.datatype) | (actiontype::"statusline") | (actiontype::"tooltip") | (actiontype::"highlight" mml.color.datatype*) | (actiontype::"menu" selection::mml.positiveinteger.datatype))? ;
mml.true.qname ::= true::(ε mml.operators.common.attrib) ;
mml.carithop1or2ary ::= mml.minus.qname ;
mml.mroot.qname ::= mroot::(mml.PresExpression mml.Common.attrib) ;
mml.union.qname ::= union::(ε mml.operators.common.attrib) ;
mml.median.qname ::= median::(ε mml.operators.common.attrib) ;
mml.math.qname ::= math::(mml.MathExpression mml.att-topinfo mml.att-browif) ;
mml.sum.qname ::= sum::(ε mml.operators.common.attrib) ;
mml.clogicop1ary ::= mml.not.qname ;
mml.crelnary ::= mml.cgenrelnary | mml.csetrelnary ;
mml.cosh.qname ::= cosh::(ε mml.operators.common.attrib) ;
mml.mphantom.qname ::= mphantom::(mml.PresExpression mml.Common.attrib) ;
mml.cstatopnary ::= mml.mean.qname | mml.sdev.qname | mml.variance.qname | mml.median.qname | mml.mode.qname ;
mml.arcsec.qname ::= arcsec::(ε mml.operators.common.attrib) ;
mml.mfenced.qname ::= mfenced::(mml.PresExpression mml.Common.attrib mml.att-open mml.att-close mml.att-separators) ;
mml.merror.qname ::= merror::(mml.PresExpression mml.Common.attrib) ;
mml.ceiling.qname ::= ceiling::(ε mml.operators.common.attrib) ;
mml.limit.qname ::= limit::(ε mml.operators.common.attrib) ;
mml.sech.qname ::= sech::(ε mml.operators.common.attrib) ;
mml.arccot.qname ::= arccot::(ε mml.operators.common.attrib) ;
mml.rowalign.datatype ::= ("top" | "bottom" | "center" | "baseline" | "axis")+ ;
mml.transpose.qname ::= transpose::(ε mml.operators.common.attrib) ;
mml.divergence.qname ::= divergence::(ε mml.operators.common.attrib) ;
mml.att-browif ::= mml.att-type mml.att-name mml.att-height mml.att-width mml.att-baseline mml.att-overflow mml.att-altimg mml.att-alttext ;
mml.imaginaryi.qname ::= imaginaryi::(ε mml.operators.common.attrib) ;
mml.att-fontsize ::= (fontsize::mml.length.datatype)? ;
mml.att-rquote ::= (rquote::string())? ;
mml.arccsch.qname ::= arccsch::(ε mml.operators.common.attrib) ;
mml.cseqrel2ary ::= mml.tendsto.qname ;
mml.columnspan.datatype ::= mml.positiveinteger.datatype ;
mml.exists.qname ::= exists::(ε mml.operators.common.attrib) ;
mml.att-edge ::= (edge::("left" | "right"))? ;
mml.sep.qname ::= sep::ε ;
mml.mtd.qname ::= mtd::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign mml.att-rowspan mml.att-columnspan) ;
mml.imaginary.qname ::= imaginary::(ε mml.operators.common.attrib) ;
mml.arg.qname ::= arg::(ε mml.operators.common.attrib) ;
mml.cgenrel2ary ::= mml.neq.qname | mml.factorof.qname ;
mml.arccosh.qname ::= arccosh::(ε mml.operators.common.attrib) ;
mml.cfuncop1ary ::= mml.inverse.qname | mml.ident.qname | mml.domain.qname | mml.codomain.qname | mml.image.qname ;
mml.att-separators ::= (separators::string())? ;
mml.msqrt.qname ::= msqrt::(mml.PresExpression mml.Common.attrib) ;
mml.momentabout.qname ::= momentabout::(mml.ContentExpression mml.Common.attrib) ;
mml.csetop1ary ::= mml.card.qname ;
mml.vectorproduct.qname ::= vectorproduct::(ε mml.operators.common.attrib) ;
mml.att-align ::= (align::mml.align.datatype)? ;
mml.pscrschema ::= mml.msub.qname | mml.msup.qname | mml.msubsup.qname | mml.munder.qname | mml.mover.qname | mml.munderover.qname | mml.mmultiscripts.qname ;
mml.att-topinfo ::= mml.Common.attrib mml.att-macros mml.att-mode mml.att-display ;
mml.att-height ::= (height::mml.length.datatype)? ;
mml.arcsech.qname ::= arcsech::(ε mml.operators.common.attrib) ;
mml.pscreschema ::= mml.mprescripts.qname | mml.none.qname ;
mml.naturalnumbers.qname ::= naturalnumbers::(ε mml.operators.common.attrib) ;
mml.att-mode ::= (mode::string())? ;
mml.power.qname ::= power::(ε mml.operators.common.attrib) ;
mml.att-mathvariant ::= (mathvariant::("normal" | "bold" | "italic" | "bold-italic" | "double-struck" | "bold-fraktur" | "script" | "bold-script" | "fraktur" | "sans-serif" | "bold-sans-serif" | "sans-serif-italic" | "sans-serif-bold-italic" | "monospace"))? ;
mml.scalarproduct.qname ::= scalarproduct::(ε mml.operators.common.attrib) ;
mml.crel2ary ::= mml.cgenrel2ary | mml.csetrel2ary | mml.cseqrel2ary ;
mml.clalgop1ary ::= mml.determinant.qname | mml.transpose.qname ;
mml.notin.qname ::= notin::(ε mml.operators.common.attrib) ;
mml.variance.qname ::= variance::(ε mml.operators.common.attrib) ;
mml.csc.qname ::= csc::(ε mml.operators.common.attrib) ;
mml.mprescripts.qname ::= mprescripts::ε ;
mml.cn.qname ::= cn::((mml.MathMLCharacters | mml.PresInCont | mml.sep.qname)* mml.Common.attrib mml.att-type mml.att-base mml.att-definition mml.att-encoding) ;
mml.lowlimit.qname ::= lowlimit::(mml.ContentExpression mml.Common.attrib) ;
mml.att-maxsize ::= (maxsize::(mml.namedspace.datatype | "infinity"))? ;
mml.prsubset.qname ::= prsubset::(ε mml.operators.common.attrib) ;
mml.mo.qname ::= mo::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo mml.att-opinfo) ;
mml.align.datatype ::= "top" | "bottom" | "center" | "baseline" | "axis" integer()? ;
mml.maction.qname ::= maction::(mml.PresExpression mml.Common.attrib mml.att-actiontype) ;
mml.uri.datatype ::= string() ;
mml.image.qname ::= image::(ε mml.operators.common.attrib) ;
mml.carithopnary ::= mml.plus.qname | mml.times.qname | mml.max.qname | mml.min.qname | mml.gcd.qname | mml.lcm.qname ;
mml.att-minsize ::= (minsize::mml.namedspace.datatype)? ;
mml.att-index ::= (index::mml.number.datatype)? ;
mml.petoken ::= mml.mspace.qname ;
mml.att-accentunder ::= (accentunder::("true" | "false"))? ;
mml.sinh.qname ::= sinh::(ε mml.operators.common.attrib) ;
--------------------markup::pnml-conventions.bgf--------------------
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
--------------------markup::pnml-ext-inhibitor.bgf--------------------
page.labels ::= ε ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
net.labels ::= ε ;
pnml.element ::= pnml::(pnml.content+) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
reference ::= ref::string() ;
place.labels ::= PTMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-ext-reset.bgf--------------------
page.labels ::= ε ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
net.labels ::= ε ;
pnml.element ::= pnml::(pnml.content+) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
reference ::= ref::string() ;
place.labels ::= PTMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-ext-resetinhibitor.bgf--------------------
page.labels ::= ε ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
net.labels ::= ε ;
pnml.element ::= pnml::(pnml.content+) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
reference ::= ref::string() ;
place.labels ::= PTMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-ext-specialarcs.bgf--------------------
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
--------------------markup::pnml-highlevelnet.bgf--------------------
page.labels ::= HLDeclaration* ;
 page.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= Condition? ;
 transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
net.labels ::= HLDeclaration* ;
 net.labels ::= ε ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
pnml.element ::= pnml::(pnml.content+) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= HLAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/highlevelnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/symmetricnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
reference ::= ref::string() ;
place.labels ::= Type? HLMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-hlcorestructure.bgf--------------------
page.labels ::= HLDeclaration* ;
arc.labels ::= HLAnnotation? ;
transition.labels ::= Condition? ;
place.labels ::= Type? HLMarking? ;
net.labels ::= HLDeclaration* ;
--------------------markup::pnml-hlpng.bgf--------------------
page.labels ::= ε ;
 page.labels ::= HLDeclaration* ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= ε ;
 transition.labels ::= Condition? ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
net.labels ::= ε ;
 net.labels ::= HLDeclaration* ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
pnml.element ::= pnml::(pnml.content+) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ε ;
 arc.labels ::= HLAnnotation? ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pt-hlpng" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
reference ::= ref::string() ;
place.labels ::= ε ;
 place.labels ::= Type? HLMarking? ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-pnmlcoremodel.bgf--------------------
page.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
net.labels ::= ε ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
pnml.element ::= pnml::(pnml.content+) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
reference ::= ref::string() ;
place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-ptnet.bgf--------------------
page.labels ::= ε ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
net.labels ::= ε ;
pnml.element ::= pnml::(pnml.content+) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
reference ::= ref::string() ;
place.labels ::= PTMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-symmetricnet.bgf--------------------
page.labels ::= HLDeclaration* ;
 page.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= Condition? ;
 transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
net.labels ::= HLDeclaration* ;
 net.labels ::= ε ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
pnml.element ::= pnml::(pnml.content+) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= HLAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/symmetricnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
reference ::= ref::string() ;
place.labels ::= Type? HLMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::wiki-mediawiki-bnf.bgf--------------------
image-valign-text-bottom ::= "text-bottom" ;
table-first-row ::= (table-column-line newline) | table-column-multiline | table-row ;
bullet-item ::= "*" (list-item | item-body)? ;
nowiki-body ::= characters ;
html-unsafe-symbol ::= unescaped-ampersand | unescaped-less-than | unescaped-greater-than ;
sub-page ::= sub-page-separator page-char+ ;
hex-digit ::= decimal-digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
link ::= internal-link | external-link ;
isbn ::= "ISBN" spaces isbn-number ;
article ::= special-block-and-more | paragraph-and-more ;
line ::= plain-text+ (spaces plain-text+)* ;
title-character ::= <unicode-character bad-title-characters> ;
url-char ::= LEGAL_URL_ENTITY ;
interwiki-prefix ::= interwiki ":" ;
html-block ::= html-opening-tag whitespace? html-body whitespace? html-closing-tag? ;
harmless-character ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
caption ::= inline-text ;
digits ::= decimal-digit+ ;
space-tabs ::= space-tab+ ;
pre-block ::= pre-opening-tag whitespace? pre-body whitespace? pre-closing-tag? ;
list-item ::= indent-item | enumerated-item | bullet-item ;
image-align-right ::= "right" ;
image-valign-middle ::= "middle" ;
inline-text ::= inline-element inline-text? ;
internal-link-start ::= "[[" ;
pmid-number ::= "PMID" spaces digits ;
image-valign-parameter ::= image-valign-baseline | image-valign-sub | image-valign-super | image-valign-top | image-valign-text-top | image-valign-middle | image-valign-bottom | image-valign-text-bottom ;
redirect ::= redirect-tag characters internal-link-start article-link internal-link-end | pipe | EOL ;
behaviourswitch-nogallery ::= "__NOGALLERY__" ;
page-char ::= canonical-page-char | space ;
table ::= "{|" (space table-parameters)? newline table-first-row "|}" ;
ucase-letter ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
nowiki-opening-tag ::= "<nowiki" (whitespace characters?)? ">" ;
inline-element ::= category-link | link | magic-link | image-inline | gallery-block | media-inline | text-with-formatting ;
bad-title-characters ::= "[" | "]" | "{" | "}" | "<" | ">" | "_" | "|" | "#" ;
url-path ::= url-char url-path? ;
article-title ::= page sub-page* ;
 article-title ::= (title-legal-char | "%")* ;
dashes ::= "-"+ ;
extra-description ::= letter+ ;
image-name ::= page-name "." image-extension ;
external-link ::= (external-link-start url whitespace? link-description? external-link-end) | url ;
image-other-parameter ::= image-param-page | image-param-upright | image-param-border ;
underscore ::= "_" ;
image-align-none ::= "none" ;
unescaped-ampersand ::= "&" ;
nowiki-block ::= nowiki-opening-tag whitespace? nowiki-body whitespace? nowiki-closing-tag? ;
image-mode-parameter ::= image-mode-manual-thumb | image-mode-auto-thumb | image-mode-frame | image-mode-frameless ;
decimal-digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
defined-term ::= ";" text definition? ;
sort-key ::= any-text ;
image-valign-super ::= "super" | "sup" ;
pipe ::= "|" ;
behaviourswitch-toc ::= "__TOC__" ;
link-description ::= article-title ;
non-whitespace-char ::= letter | decimal-digit | symbol ;
nowiki-closing-tag ::= "</nowiki" whitespace? ">" ;
whitespace-char ::= space-tab | newline ;
media-inline ::= "[[" "Media:" page-name "." media-extension "]]" ;
unicode-wiki ::= <unicode-character wiki-markup-characters> ;
random-character ::= α ;
behaviourswitch-noeditsection ::= "__NOEDITSECTION__" ;
image-param-border ::= "border" ;
bold-toggle ::= "'''" ;
behaviourswitch-forcetoc ::= "__FORCETOC__" ;
protocol ::= "http://" | "https://" | "ftp://" | "ftps://" | "mailto:" ;
internal-link-end ::= "]]" ;
symbol ::= html-unsafe-symbol | underscore | "." | "," ;
media-extension ::= "ogg" | "wav" ;
lines-of-text ::= line-of-text lines-of-text? ;
indent-item ::= ":" (list-item | item-body)? ;
newline ::= (CR LF) | (LF CR) | CR | LF ;
noparse-block ::= nowiki-block | html-block | math-block | pre-block | html-comment ;
unescaped-less-than ::= "<" ;
image-valign-baseline ::= "baseline" ;
italic-toggle ::= "''" ;
image-size-parameter ::= digits "px" ;
page ::= page-first-char page-char* ;
image-mode-frameless ::= "frameless" ;
table-column-line ::= "|" inline-text ("|" table-column-line)? ;
pre-body ::= characters ;
interwiki ::= "Wikipedia" ;
wiki-page ::= (redirect article?) | (article?) ;
line-of-text ::= inline-text newline ;
image-valign-top ::= "top" ;
html-body ::= characters ;
html-opening-tag ::= "<html" (whitespace characters?)? ">" ;
image-param-page ::= "page=$1" | "page $1" ;
image-align-left ::= "left" ;
title-legal-char ::= space | "%" | "!" | """ | "$" | "&" | "'" | "(" | ")" | "*" | "," | "-" | "." | "/" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | ":" | ";" | "=" | "?" | "@" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "\" | "^" | "_" | "`" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "~" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | " " | "¡" | "¢" | "£" | "¤" | "¥" | "¦" | "§" | "¨" | "©" | "ª" | "«" | "¬" | "­" | "®" | "¯" | "°" | "±" | "²" | "³" | "´" | "µ" | "¶" | "·" | "¸" | "¹" | "º" | "»" | "¼" | "½" | "¾" | "¿" | "À" | "Á" | "Â" | "Ã" | "Ä" | "Å" | "Æ" | "Ç" | "È" | "É" | "Ê" | "Ë" | "Ì" | "Í" | "Î" | "Ï" | "Ð" | "Ñ" | "Ò" | "Ó" | "Ô" | "Õ" | "Ö" | "×" | "Ø" | "Ù" | "Ú" | "Û" | "Ü" | "Ý" | "Þ" | "ß" | "à" | "á" | "â" | "ã" | "ä" | "å" | "æ" | "ç" | "è" | "é" | "ê" | "ë" | "ì" | "í" | "î" | "ï" | "ð" | "ñ" | "ò" | "ó" | "ô" | "õ" | "ö" | "÷" | "ø" | "ù" | "ú" | "û" | "ü" | "ý" | "þ" | "ÿ" | "+" ;
whitespace ::= (whitespace-char whitespace?) | EOF ;
pre-opening-tag ::= "<pre" (whitespace characters?)? ">" ;
any-supported-unicode-character ::= α ;
special-block ::= horizontal-rule | heading | list-item | table | space-block ;
canonical-page-first-char ::= ucase-letter | decimal-digit | underscore ;
image-valign-bottom ::= "bottom" ;
lcase-letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
image-mode-frame ::= "framed" | "enframed" | "frame" ;
image-valign-sub ::= "sub" ;
article-link ::= (interwiki-prefix | ":")? namespace-prefix? article-title ;
 article-link ::= ((interwiki-prefix | ":")? namespace-prefix? article-title) | ("/" article-title) | ("../"* article-title?) ;
image-align-parameter ::= image-align-left | image-align-center | image-align-right | image-align-none ;
url ::= protocol url-path ;
paragraph ::= (newline lines-of-text?) | lines-of-text ;
any-text ::= unicode-character* ;
characters ::= character+ ;
category-link ::= internal-link-start category-namespace ":" article-title (pipe sort-key)? internal-link-end ;
formatting ::= bold-italic-toggle | bold-toggle | italic-toggle ;
level-6-heading ::= "======" inline-text "======" space-tabs newline ;
level-5-heading ::= "=====" inline-text "=====" space-tabs newline ;
level-4-heading ::= "====" inline-text "====" space-tabs newline ;
html-closing-tag ::= "</html" whitespace? ">" ;
level-3-heading ::= "===" inline-text "===" space-tabs newline ;
special-block-and-more ::= special-block EOF | (newline? special-block-and-more) | (newline? paragraph-and-more) ;
level-2-heading ::= "==" inline-text "==" space-tabs newline ;
level-1-heading ::= "=" inline-text "=" space-tabs newline ;
table-row ::= "|-" CSS? newline table-column table-row? ;
namespace ::= string() ;
pre-closing-tag ::= "</pre" whitespace? ">" ;
sub-page-separator ::= "/" ;
definition ::= ":" inline-text ;
wiki-markup-characters ::= "|" | "[" | "]" | "*" | "#" | ":" | ";" | "<" | ">" | "=" | "'" | "{" | "}" ;
gallery-block ::= "<gallery>" newline? gallery-image (newline? gallery-image)* newline? "</gallery>" ;
page-first-char ::= canonical-page-first-char | lcase-letter ;
plain-text ::= unicode-wiki | ("<nowiki>" ("|" | "[" | "]" | "<" | ">" | "{" | "}")* "</nowiki>") | (unicode-wiki space* "*" | "#" | ":" | ";") | (unicode-wiki space? "=" space? unicode-wiki) | (unicode-wiki "'") | ("'" unicode-wiki) ;
image-align-center ::= "center" | "centre" ;
space-tab ::= space | TAB ;
image-extension ::= "jpg" | "jpeg" | "png" | "svg" | "gif" | "bmp" ;
category-namespace ::= "Category" ;
behaviourswitch-notoc ::= "__NOTOC__" ;
image-inline ::= "[[" "Image:" page-name "." image-extension (pipe image-option)* "]]" ;
external-link-end ::= "]" ;
table-parameters ::= CSS | html-table-attributes ;
bold-italic-toggle ::= "'''''" ;
decimal-number ::= decimal-digit+ ;
html-entity ::= ("&" html-entity-name ";") | ("&#" decimal-number ";") | ("&#x" hex-number ";") ;
behaviour-switch ::= behaviourswitch-toc | behaviourswitch-forcetoc | behaviourswitch-notoc | behaviourswitch-noeditsection | behaviourswitch-nogallery ;
namespace-prefix ::= namespace? ":" ;
enumerated-item ::= "#" (list-item | item-body)? ;
html-comment ::= "<!--" characters? "-->" ;
canonical-page-char ::= letter | decimal-digit | underscore ;
hex-number ::= hex-digit+ ;
unicode-character ::= <any-supported-unicode-character Whitespaces> ;
unescaped-greater-than ::= ">" ;
table-cell-parameters ::= CSS | html-cell-attributes ;
table-column ::= table-column-line | table-column-multiline ;
image-mode-auto-thumb ::= "thumbnail" | "thumb" ;
image-param-upright ::= "upright" ("="? digits)? ;
text ::= line+ (newline+ line+)* ;
 text ::= harmless-character+ ;
spaces ::= space+ ;
text-with-formatting ::= formatting | inline-html | noparse-block | behaviour-switch | html-entity | html-unsafe-symbol | text | random-character ;
space-block-2 ::= space inline-text? newline ;
character ::= whitespace-char | non-whitespace-char | html-entity ;
redirect-tag ::= "#redirect" ;
image-option ::= image-mode-parameter | image-size-parameter | image-align-parameter | image-valign-parameter | caption | image-other-parameter ;
rfc-number ::= "RFC" spaces digits ;
letter ::= ucase-letter | lcase-letter ;
gallery-image ::= image-name ("|" caption)? ;
item-body ::= defined-term | (whitespace? inline-text) ;
magic-link ::= isbn | rfc-number | pmid-number ;
table-column-multiline ::= "|" (table-cell-parameters "|")? any-text newline table-column-multiline? ;
html-entity-name ::= wgHtmlEntities ;
external-link-start ::= "[" ;
paragraph-and-more ::= paragraph EOF | (newline? special-block-and-more) | (newline paragraph-and-more) ;
internal-link ::= internal-link-start article-link ("#" section-id)? (pipe link-description?)? internal-link-end extra-description? ;
page-name ::= title-character (space? title-character)* ;
image-mode-manual-thumb ::= ("thumbnail=" image-name) | ("thumb=" image-name) ;
space-block ::= space inline-text newline space-block-2* ;
space ::= " " ;
horizontal-rule ::= "----" dashes? inline-text? newline ;
section-id ::= (title-legal-char | "%" | "#")* ;
heading ::= level-6-heading | level-5-heading | level-4-heading | level-3-heading | level-2-heading | level-1-heading ;
image-valign-text-top ::= "text-top" ;
isbn-number ::= "97" "8" | "9" (space | "-")? decimal-digit (space | "-")? "9"* decimal-digit | "X" | "x" ;
--------------------markup::wiki-mediawiki-ebnf.bgf--------------------
internal_link ::= start_link full_pagename ("|" label)? end_link label_extension ;
template ::= "{{" title ("|" part)* "}}" ;
horizontal_rule ::= "----" "-"* ;
start_link ::= "[[" ;
current_date ::= "~~~~~" ;
table_body ::= table_header_cell | table_cell (table_row table_header_cell | table_cell)* ;
table_cell ::= (line_break "|" (style | whitespace)* text) | (table_cell "||" (style | whitespace)* text) ;
part ::= (name "=")? value ;
continue_definition_list ::= definition_list | continue_definition_list | ":" | "*" | "#" line_break definition_list ;
table_start ::= "{|" (style | whitespace)* line_break ;
value ::= balanced_text ;
nowiki ::= "<nowiki>" text "</nowiki>" ;
ordered_list ::= "#" text ;
external_link ::= URL | (start_link URL (whitespace label)? end_link label_extension) ;
text ::= Unicode_char* ;
digit ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0" ;
header_link ::= "/*" text "*/" ;
table_end ::= "|}" ;
table_row ::= line_break "|-" "-"* (style | whitespace)* line_break ;
header_end ::= whitespace? line_break ;
include ::= template | tplarg ;
bold_text ::= "'''" text "'''" ;
tplarg ::= "{{{" title ("|" part)* "}}}" ;
table_header_cell ::= (line_break "!" (style | whitespace)* text) | (table_cell "!!" | "||" (style | whitespace)* text) ;
bold_italic_text ::= "'''''" text "'''''" ;
continue_unordered_list ::= unordered_list | continue_unordered_list | ":" | "*" | "#" line_break unordered_list ;
comment ::= "<!--" Text? "-->" ;
table_header ::= "|+" text line_break ;
end_link ::= "]]" ;
redirect ::= "#REDIRECT" internal_link ;
italic_text ::= "''" text "''" ;
disable_section_edit ::= (whitespace | line_break)* "__NOEDITSECTION__" (whitespace | line_break)* ;
namespace ::= Unicode_char Unicode_char* ;
pagename ::= Unicode_char Unicode_char* ;
title ::= balanced_text ;
table ::= table_start table_header? table_row? table_body table_end ;
header ::= header1 | header2 | header3 | header4 | header5 | header6 ;
user_signature_with_date ::= "~~~~" ;
name ::= balanced_text ;
definition_list ::= text? ":" text ;
full_pagename ::= ((namespace ":") | ":")? pagename ;
header6 ::= line_break "======" whitespace? text whitespace? "======" header_end ;
unordered_list ::= "*" text ;
continue_ordered_list ::= ordered_list | continue_ordered_list | ":" | "*" | "#" line_break ordered_list ;
header5 ::= line_break "=====" whitespace? text whitespace? "=====" header_end ;
header4 ::= line_break "====" whitespace? text whitespace? "====" header_end ;
code_line ::= line_break " " text ;
header3 ::= line_break "===" whitespace? text whitespace? "===" header_end ;
header2 ::= line_break "==" whitespace? text whitespace? "==" header_end ;
balanced_text ::= text_without_consecutive_equal_braces (include text_without_consecutive_equal_braces)* ;
user_signature ::= "~~~" ;
header1 ::= line_break "=" whitespace? text whitespace? "=" header_end ;
--------------------fl::antlr.bgf--------------------
apply ::= i::ID (a::atom)+ ;
function ::= n::ID (a::ID)+ "=" e::expr NEWLINE+ ;
expr ::= (b::binary) | (a::apply) | (i::ifThenElse) ;
program ::= (f::function)+ ;
ops ::= "==" | "+" | "-" ;
atom ::= ID | INT | ("(" e::expr ")") ;
binary ::= l::atom (o::ops r::atom)* ;
--------------------fl::dcg.bgf--------------------
function ::= name name+ "=" expr newline+ ;
expr ::= [binary] atom (ops atom)* ;
 expr ::= [apply] name atom+ ;
 expr ::= [ifThenElse] "if" expr "then" expr "else" expr ;
program ::= function+ ;
ops ::= [equal] "==" ;
 ops ::= [plus] "+" ;
 ops ::= [minus] "-" ;
atom ::= [literal] int ;
 atom ::= [argument] name ;
 atom ::= "(" expr ")" ;
--------------------fl::jaxb.bgf--------------------
package-info ::= φ ;
--------------------fl::python.bgf--------------------
operators ::= "==" | "+" | "-" ;
literal ::= "-"? integer() ;
apply ::= name atom+ ;
name ::= string() ;
function ::= name name+ "=" expr ;
expr ::= binary | apply | ifThenElse ;
program ::= function+ StringEnd ;
binary ::= atom (operators atom)* ;
atom ::= name | literal | ("(" expr ")") ;
--------------------fl::txl.bgf--------------------
fun ::= id id+ "=" expression newline ;
expression ::= (expression op expression) | (id expression+) | ("if" expression "then" expression "else" expression) | ("(" expression ")") | id | number ;
program ::= fun+ ;
op ::= "+" | "-" | "==" ;
--------------------metasyntax::txl.bgf--------------------
literal ::= quotedLiteral | unquotedLiteral | (SP comment NEWoptNL?) ;
statement ::= includeStatement | keysStatement | compoundsStatement | commentsStatement | tokensStatement | defineStatement | redefineStatement | ruleStatement | functionStatement | externalStatement | (comment NL) ;
condition ::= (EX "where" "not"? "all"? NL IN commentNL* expression NL) | (EX "assert" "not"? "all"? NL IN commentNL* expression NL) ;
compound ::= literal SP ;
constructor ::= EX "construct" varid SP type NL IN replacement ;
type ::= formatCues | ("[" typeSpec "]") ;
deconstructor ::= EX skippingType? "deconstruct" "not"? "*"? type? varid NL IN pattern ;
keyword ::= (literal SP) | (key SP) ;
expression ::= varid ruleApplications? ;
ruleid ::= id | special | "#" | key ;
typeid ::= id | (SP literal) ;
program ::= statement* ;
varid ::= id ;
replacement ::= literalOrExpression* NL ;
importer ::= EX "import" varid type? NL IN pattern? ;
exporter ::= EX "export" varid type? NL IN replacement? ;
pattern ::= literalOrVariable* NL ;
--------------------metasyntax::ebnf-bgf.bgf--------------------
definition-separator-metasymbol ::= "\n" " " ;
end-group-metasymbol ::= ")" ;
end-terminal-metasymbol ::= """ ;
terminal ::= start-terminal-metasymbol string() end-terminal-metasymbol ;
optionality-metasymbol ::= "?" ;
repetition-metasymbol ::= "+" | "*" ;
marked-expression ::= "<" expression ">" ;
production ::= label? string() defining-metasymbol right-hand-side terminator-metasymbol ;
expression ::= empty | epsilon | any | value | selectable-expression | marked-expression | repetition-expression | optional-expression | terminal | nonterminal | group-expression ;
start-group-metasymbol ::= "(" ;
repetition-expression ::= expression repetition-metasymbol ;
label ::= "[" string() "]" ;
end-nonterminal-metasymbol ::= ε ;
definition ::= expression (" " expression)* ;
defining-metasymbol ::= ":" ;
value ::= "INT" | "STR" ;
selectable-expression ::= selector::string() "::" expression ;
empty ::= "EMPTY" ;
start-nonterminal-metasymbol ::= ε ;
any ::= "ANY" ;
epsilon ::= "EPSILON" ;
nonterminal ::= start-nonterminal-metasymbol string() end-nonterminal-metasymbol ;
grammar ::= production+ ;
group-expression ::= start-group-metasymbol expression end-group-metasymbol ;
optional-expression ::= expression optionality-metasymbol ;
right-hand-side ::= (definition-separator-metasymbol definition)+ ;
start-terminal-metasymbol ::= """ ;
terminator-metasymbol ::= "\n" ;
--------------------metasyntax::ebnf-iso-1.bgf--------------------
commentless_symbol ::= terminal_character | meta_identifier | integer | terminal_string | special_sequence ;
defining_symbol ::= "=" ;
decimal_digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
integer ::= decimal_digit+ ;
end_option_symbol ::= "]" | "/)" ;
except_symbol ::= "-" ;
definitions_list ::= single_definition (definition_separator_symbol single_definition)* ;
end_group_symbol ::= ")" ;
gap_separator ::= space_character | horizontal_tabulation_character | new_line | vertical_tabulation_character | form_feed ;
bracketed_textual_comment ::= start_comment_symbol comment_symbol* end_comment_symbol ;
other_character ::= " " | ":" | "+" | "_" | "%" | "@" | "&" | "#" | "$" | "<" | ">" | "\" | "^" | "‘" | "~" ;
form_feed ::= "\f" ;
comment_symbol ::= bracketed_textual_comment | other_character | commentless_symbol ;
start_comment_symbol ::= "(*" ;
terminal_string ::= (first_quote_symbol first_terminal_character+ first_quote_symbol) | (second_quote_symbol second_terminal_character+ second_quote_symbol) ;
empty_sequence ::= ε ;
new_line ::= "\r"* "\n" "\r"* ;
special_sequence_character ::= terminal_character ;
terminator_symbol ::= ";" | "." ;
space_character ::= " " ;
syntactic_factor ::= (integer repetition_symbol)? syntactic_primary ;
horizontal_tabulation_character ::= "\t" ;
single_definition ::= syntactic_term (concatenate_symbol syntactic_term)* ;
first_quote_symbol ::= "’" ;
repeated_sequence ::= start_repeat_symbol definitions_list end_repeat_symbol ;
terminal_character ::= letter | decimal_digit | concatenate_symbol | defining_symbol | definition_separator_symbol | end_comment_symbol | end_group_symbol | end_option_symbol | end_repeat_symbol | except_symbol | first_quote_symbol | repetition_symbol | second_quote_symbol | special_sequence_symbol | start_comment_symbol | start_group_symbol | start_option_symbol | start_repeat_symbol | terminator_symbol | other_character ;
second_quote_symbol ::= """ ;
repetition_symbol ::= "*" ;
letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
meta_identifier ::= letter meta_identifier_character* ;
syntax ::= gap_separator* (gap_free_symbol gap_separator*)+ ;
 syntax ::= bracketed_textual_comment* commentless_symbol bracketed_textual_comment* (commentless_symbol bracketed_textual_comment*)* ;
 syntax ::= syntax_rule+ ;
gap_free_symbol ::= terminal_character | terminal_string ;
concatenate_symbol ::= "," ;
start_repeat_symbol ::= "{" | "(:" ;
definition_separator_symbol ::= "|" | "/" | "!" ;
vertical_tabulation_character ::= "\v" ;
end_comment_symbol ::= "*)" ;
syntax_rule ::= meta_identifier defining_symbol definitions_list terminator_symbol ;
end_repeat_symbol ::= "}" | ":)" ;
start_group_symbol ::= "(" ;
first_terminal_character ::= terminal_character ;
second_terminal_character ::= terminal_character ;
syntactic_exception ::= syntactic-factor ;
special_sequence_symbol ::= "?" ;
meta_identifier_character ::= letter | decimal_digit ;
syntactic_term ::= syntactic_factor (except_symbol syntactic_exception)? ;
special_sequence ::= special_sequence_symbol special_sequence_character* special_sequence_symbol ;
start_option_symbol ::= "[" | "(/" ;
syntactic_primary ::= optional_sequence | repeated_sequence | grouped_sequence | meta_identifier | terminal_string | special_sequence | empty_sequence ;
grouped_sequence ::= start_group_symbol definitions_list end_group_symbol ;
optional_sequence ::= start_option_symbol definitions_list end_option_symbol ;
--------------------metasyntax::ebnf-iso-2.bgf--------------------
comment ::= "(*" comment_symbol* "*)" ;
integer ::= decimal_digit+ ;
definitions_list ::= single_definition ("|" single_definition)* ;
comment_symbol ::= comment | terminal_string | special_sequence | character ;
syntax_rule ::= meta_identifier "=" definitions_list ";" ;
terminal_string ::= ("’" character+ "’") | (""" character+ """) ;
factor ::= (integer "*")? primary ;
exception ::= factor ;
empty ::= ε ;
term ::= factor ("-" exception)? ;
single_definition ::= term ("," term)* ;
special_sequence ::= "?" character* "?" ;
repeated_sequence ::= "{" definitions_list "}" ;
meta_identifier ::= letter (letter | decimal_digit)* ;
syntax ::= syntax_rule+ ;
grouped_sequence ::= "(" definitions_list ")" ;
primary ::= optional_sequence | repeated_sequence | special_sequence | grouped_sequence | meta_identifier | terminal_string | empty ;
optional_sequence ::= "[" definitions_list "]" ;
--------------------metasyntax::relaxng.bgf--------------------
open-pattern ::= other pattern ;
any ::= (α | string() | any)* ;
except-name-class ::= other (except::open-name-classes)? ;
define-element ::= define::(name::string() combine-att common-atts open-patterns) ;
open-name-class ::= other name-class ;
open-name-classes ::= other name-class+ ;
name-class ::= (name::(common-atts string())) | (anyName::(common-atts except-name-class)) | (nsName::(common-atts except-name-class)) | (choice::(common-atts open-name-classes)) ;
open-patterns ::= other pattern+ ;
common-atts ::= (ns::string())? (datatypeLibrary::string())? α* ;
include-content ::= other (start-element | define-element | (div::(common-atts include-content)))* ;
combine-att ::= (combine::("choice" | "interleave"))? ;
grammar-content ::= other (start-element | define-element | (div::(common-atts grammar-content)) | (include::(href::string() common-atts include-content)))* ;
start-element ::= start::(combine-att common-atts open-pattern) ;
other ::= ((α | string() | any)*)* ;
pattern ::= (element::((name::string()) | open-name-class common-atts open-patterns)) | (attribute::(common-atts (name::string()) | open-name-class other pattern?)) | (group::(common-atts open-patterns)) | (interleave::(common-atts open-patterns)) | (choice::(common-atts open-patterns)) | (optional::(common-atts open-patterns)) | (zeroOrMore::(common-atts open-patterns)) | (oneOrMore::(common-atts open-patterns)) | (list::(common-atts open-patterns)) | (mixed::(common-atts open-patterns)) | (ref::(name::string() common-atts other)) | (parentRef::(name::string() common-atts other)) | (empty::(common-atts other)) | (text::(common-atts other)) | (value::((type::string())? common-atts string())) | (data::(type::string() common-atts other (param::(name::string() common-atts string()))* (except::(common-atts open-patterns))?)) | (notAllowed::(common-atts other)) | (externalRef::(href::string() common-atts other)) | (grammar::(common-atts grammar-content)) ;
--------------------metasyntax::lll-kort.bgf--------------------
group ::= "(" disjunction ")" ;
basis ::= ident | literal | "%epsilon" | alternation | group ;
alternation ::= "{" basis basis "}" repetition ;
term ::= basis repetition? ;
rule ::= ident ":" disjunction ";" ;
conjunction ::= term+ ;
specification ::= rule+ ;
disjunction ::= {conjunction "|"}+ ;
repetition ::= "+" | "*" | "?" ;
--------------------metasyntax::lll-ldta.bgf--------------------
basis ::= literal | sort ;
term ::= basis repetition? ;
rule ::= sort ":" alts ";" ;
alts ::= alt alts-tail* ;
alt ::= term* ;
grammar ::= rule+ ;
alts-tail ::= "|" alt ;
repetition ::= "*" | "+" | "?" ;
--------------------metasyntax::yacc-txl.bgf--------------------
literal ::= quotedLiteral | unquotedLiteral ;
yac_id ::= id dot_id* ;
yac_literal ::= yac_id | charlit ;
type ::= (SP "[" yac_id "]") | (SP "[" "opt" yac_idOrQuotedLiteral "]") | (SP "[" "repeat" yac_idOrQuotedLiteral plusOrStar? "]") | (SP "[" "list" yac_idOrQuotedLiteral plusOrStar? "]") ;
yac_tokdef ::= id | charlit ;
program ::= Yacc_Txl_Grammar ;
bar_yac_literals ::= "|" SP yac_literal* NL ;
dot_id ::= "." id ;
prec ::= yac_keyword yac_id ;
--------------------metasyntax::xsd-tennison.bgf--------------------
key ::= key::keybase ;
selector ::= selector::(annotated xpath::string()) ;
list ::= list::(annotated localSimpleType | (itemType::string())) ;
element ::= annotated fixedOrDefault ((nillable::("true" | "false")) | (block::blockSet))* ε | (type::string()) | localSimpleType | localComplexType identityConstraint* ;
documentation ::= documentation::(((source::string()) | (xml:lang::string()))* documentationContent) ;
field ::= field::(annotated xpath::string()) ;
wildcard ::= annotated ((namespace::("##any" | "##other" | ((string() | "##targetNamespace" | "##local")*))) | (processContents::("lax" | "skip" | "strict")))* ;
annotated ::= openAttrs (id::string())? annotation? ;
facet ::= annotated (fixed::("true" | "false"))? ;
keyref ::= keyref::(keybase refer::string()) ;
unique ::= unique::keybase ;
redefinable ::= topLevelSimpleType | topLevelComplexType | namedGroup | namedAttributeGroup ;
pattern ::= pattern::noFixedFacet ;
keybase ::= annotated name::string() selector field+ ;
union ::= union::(annotated (memberTypes::(string()+) localSimpleType*) | ((memberTypes::ε)? localSimpleType+)) ;
annotation ::= annotation::(openAttrs (id::string())? (documentation | appinfo)*) ;
appinfo ::= appinfo::((source::string())? appinfoContent) ;
redefine ::= redefine::(openAttrs (id::string())? schemaLocation::string() (annotation | redefinable)*) ;
any ::= any::(wildcard occurs) ;
include ::= include::(annotated schemaLocation::string()) ;
enumeration ::= enumeration::noFixedFacet ;
occurs ::= ((minOccurs::integer()) | (maxOccurs::allNNI))* ;
length ::= length::numFacet ;
import ::= annotated (schemaLocation::string())? ;
notation ::= notation::(annotated name::string() public::string() (system::string())?) ;
all ::= all::(allModel ((minOccurs::("0" | "1")) | (maxOccurs::"1"))*) ;
choice ::= choice::explicitGroup ;
sequence ::= sequence::explicitGroup ;
--------------------tescol::00000.bgf--------------------
constantid ::= CONSTID ;
constdec ::= CONST id1::CONSTID COLON t1::type ASSIGN a1::arithexp SEMI ;
addsubexp ::= multidivexp (ADD | SUB multidivexp)* ;
paralist ::= (parameter COMMA)* parameter ;
operatorsymbol ::= ADD | SUB | DIV | MULTI | EXPO ;
parexp ::= literal | (id2::CONSTID) | (id1::ID) | (LPAR arithexp RPAR) ;
syntaxsymbol ::= SEMI | COLON | COMMA | LPAR | RPAR | ASSIGN | QMARK | LBRACE | RBRACE ;
negateexp ::= (SUB negateexp) | parexp ;
vardec ::= VAR id1::ID COLON t1::type SEMI ;
type ::= INTWORD | DOUWORD ;
declaration ::= constdec | vardec | procdec ;
token ::= keyword | WS | identifier | symbol | COMMENT | literal | constantid ;
symbol ::= syntaxsymbol | operatorsymbol | comparisonsymbol ;
compoperator ::= CONJUNCT | DISJUNCT ;
connexp ::= c1::compexp (co1::compoperator c2::compexp)* ;
arithexp ::= connexp (QMARK connexp COLON connexp)? ;
literal ::= INT | DOUBLE ;
substatement ::= (SKIP SEMI) | assignment | cond | loop ;
statement ::= (LBRACE substatement* RBRACE SEMI) | substatement ;
compexp ::= addsubexp (comparisonsymbol addsubexp)* ;
assignment ::= id1::ID ASSIGN a1::arithexp SEMI ;
procdec ::= PROC id1::ID LPAR p1::paralist RPAR COLON t1::type ASSIGN s1::statement ;
expoexp ::= negateexp (EXPO negateexp)? ;
identifier ::= ID ;
keyword ::= DONE | TROLLEY | CONTAINS | CHECKOUT | SKIP | CONST | PROC | VAR | IF | THEN | ELSE | WHILE | DO | INTWORD | DOUWORD ;
parameter ::= id1::ID COLON type ;
multidivexp ::= expoexp (MULTI | DIV expoexp)* ;
loop ::= WHILE a1::arithexp DO s1::statement ;
program ::= TROLLEY n1::CONSTID CONTAINS d1::(declaration*) CHECKOUT s1::statement DONE SEMI ;
cond ::= IF a1::arithexp THEN s1::statement ELSE s2::statement ;
comparisonsymbol ::= EQUALS | NOTEQ | LT | LTE | GT | GTE ;
--------------------tescol::00001.bgf--------------------
comment ::= COMMENT ;
plusexpr ::= multExpr (PLUS | MINUS multExpr)* ;
loops ::= WHILE boolExpr DO statement ;
statement ::= assignment | conditional | loops | grstatement | SKIP ;
assignment ::= id ASSI expr ;
id ::= ID | CID ;
paramlist ::= (ID COLON types)? (COM ID COLON types)* ;
types ::= TYPEI | TYPED ;
declarations ::= constDec | varDec | procDec ;
conditional ::= IF boolExpr THEN statement ELSE statement ;
expr ::= boolExpr (MIXFIX expr COLON expr)? ;
arglist ::= OPAR (expr (COM expr)*)? CPAR ;
grstatement ::= OCB statement (SEMI statement)* CCB ;
statements ::= CHECKOUT statement SEMI ;
program ::= TROLLEY CID CONTAINS (declarations SEMI)* statements DONE SEMI ;
atom ::= INTG | DOUBLE | (ID arglist?) | (CID arglist?) | (OPAR expr CPAR) ;
--------------------tescol::00010.bgf--------------------
assign ::= VAR_ID DEFINED_AS arithmeticExpr SEMI ;
skip ::= SKIP SEMI ;
args ::= arithmeticExpr (COMMA arithmeticExpr)* ;
header ::= TROLLEY CONST_ID CONTAINS ;
type ::= INT_TYPE | DOUBLE_TYPE ;
decl ::= (constDecl | varDecl | procDecl)* ;
prog ::= header decl mainStat ;
parameter ::= i::VAR_ID COLON t::type (COMMA parameter)* ;
loop ::= WHILE LPAR b::booleanExpr RPAR DO s::stat ;
stat ::= skip | assign | cond | loop | (LCURLYPAR stat* RCURLYPAR SEMI) ;
cond ::= IF LPAR b::booleanExpr RPAR THEN ts::stat (ELSE es::stat)? ;
atom ::= INT | DOUBLE | CONST_ID | VAR_ID | (LPAR bracketedExpr RPAR) | procApply ;
--------------------tescol::00011.bgf--------------------
whilestatement ::= WHILE expression DO statement ;
type ::= INTTYPE | DOUBLETYPE ;
declarations ::= (constdeclaration | vardeclaration | procdeclaration)* ;
expression ::= atom (operator expression) | (MIXFIX l::expression COLON r::expression) | (OPARAN functionparamlist CPARAN) | ε ;
constdeclaration ::= CONST CONSTID COLON type ASSIGN expression SEMI ;
functionparamlist ::= expression (COMMA expression)* ;
vardeclaration ::= VAR identifier COLON type SEMI ;
ifstatement ::= IF expression THEN s1::statement (ELSE s2::statement) | ε ;
atom ::= literal | identifier | (OPARAN expression CPARAN) ;
literal ::= INT | DOUBLE ;
statement ::= (SKIP SEMI) | (assignmentstatement SEMI) | whilestatement | ifstatement | (OBRACE statement+ CBRACE) ;
arithmeticoperator ::= ADDITION | SUBTRACT | DIVISION | MULTIPLY | EXP ;
param ::= ID COLON type ;
booleanoperator ::= EQUAL | NONEQUAL | LESS | LESSEQUAL | MORE | MOREEQUAL | CONJUNCTION | DISJUNCTION ;
paramlist ::= param (COMMA param)* ;
identifier ::= ID | CONSTID ;
operator ::= arithmeticoperator | booleanoperator ;
procdeclaration ::= PROC ID OPARAN paramlist? CPARAN COLON type ASSIGN statement SEMI ;
program ::= TROLLEY CONSTID CONTAINS declarations CHECKOUT statement? SEMI? DONE SEMI ;
assignmentstatement ::= identifier ASSIGN expression ;
--------------------tescol::00100.bgf--------------------
skip ::= SKIP SEMI ;
sign ::= ("+" | negation)? atom ;
variable ::= VAR ID COLON type SEMI ;
type ::= INT | DOUBLE ;
declarations ::= (constant | variable | procedure)* ;
expression ::= condExpr ;
procedure ::= PROC ID LPAREN parameters RPAREN COLON type COLON_EQUALS statements ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | ID | CID | procedureApp | (LPAREN expression RPAREN) ;
statement ::= skip | assignment | ifStat | loop ;
assignment ::= ID COLON_EQUALS expression SEMI ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= (ID COLON type)* ;
relational ::= EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER_EQUAL | GREATER ;
negation ::= "-" ;
statements ::= statement | groupStatement ;
loop ::= WHILE expression DO statements ;
constant ::= CONST CID COLON type COLON_EQUALS expression SEMI ;
program ::= TROLLEY CID CONTAINS declarations CHECKOUT statements DONE SEMI EOF ;
--------------------tescol::00101.bgf--------------------
id ::= ID | CONSTID ;
types ::= INTEGER | DOUBLE ;
proc_dec ::= PROC id parameter_list COLON types DEFINEDAS statement SEMICOLON ;
expr ::= a::boolean_expr (MIXFIX b::expr COLON c::expr)? ;
stat ::= header CHECKOUT body done ;
parameter_list ::= OPENPAR parameter_list_inside? CLOSEPAR ;
arith_addsub ::= a::arith_muldiv (ADDITION | SUBTRACTION b::arith_muldiv)* ;
statement ::= statement_main | (OPENCURL statement_main (SEMICOLON statement_main)* CLOSECURL) ;
assignment ::= id DEFINEDAS expr ;
if_statement ::= IF expr THEN a::statement ELSE b::statement ;
header ::= TROLLEY CONSTID CONTAINS header_declaration* ;
relationals ::= EQUALITY | NON_EQUALITY | L_THAN | LE_THAN | G_THAN | GE_THAN ;
boolean_expr ::= boolean_OR ;
var_dec ::= VAR id COLON types SEMICOLON ;
number ::= INT_VAL | DOUBLE_VAL ;
logical ::= AND | OR ;
statement_main ::= SKIP | if_statement | while_statement | assignment ;
arith_expr ::= arith_addsub ;
header_declaration ::= const_dec | var_dec | proc_dec ;
proc_call ::= id OPENPAR (a::expr (COMMA b::expr)*)? CLOSEPAR ;
parameter_list_inside ::= parameter_element (COMMA parameter_element)* ;
parameter_element ::= ID COLON types ;
const_dec ::= CONST CONSTID COLON types DEFINEDAS expr SEMICOLON ;
arith_expo ::= a::arith_atom (EXPONENTIAL b::arith_atom)* ;
arith_atom ::= ((ADDITION | SUBTRACTION)? number) | id | (OPENPAR expr CLOSEPAR) | proc_call ;
program ::= stat ;
done ::= DONE SEMICOLON ;
body ::= statement SEMICOLON ;
while_statement ::= WHILE expr DO statement ;
arith_muldiv ::= a::arith_expo (MULTIPLICATION | DIVISION b::arith_expo)* ;
boolean_predicate ::= a::arith_expr (relationals b::arith_expr)? ;
--------------------tescol::00110.bgf--------------------
statement ::= assignmentStatement | whileStatement | ifStatement | skipStatement | (LEFT_BRACKET (assignmentStatement | whileStatement | ifStatement | skipStatement)+ RIGHT_BRACKET) ;
unary ::= (PLUS | MINUS)* term ;
term ::= (LEFT_PAREN expression RIGHT_PAREN) | procedureApplication | (v2::VAR_ID) | CONST_ID | INTEGER | DOUBLE ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= VAR_ID COLON TYPE ;
declarations ::= constantDeclaration | variableDeclaration | procedureDeclaration ;
expression ::= conjunction (DISJUNCT conjunction)* ;
relational ::= condExpr (EQUALITY | NOT_EQUAL | LESS_THAN | LESS_THAN_OR_EQUAL | GREATER_THAN | GREATER_THAN_OR_EQUAL condExpr)* ;
conjunction ::= relational (CONJ relational)* ;
program ::= TROLLEY CONST_ID CONTAINS declarations* CHECKOUT statement* SEMI DONE SEMI ;
add ::= mult (PLUS | MINUS mult)* ;
mult ::= unary (MULT | DIV | EXPON unary)* ;
--------------------tescol::00111.bgf--------------------
statement ::= SKIP | assignment | conditional | loop ;
unary ::= (ADDITION | SUBTRACTION)? atom ;
alternative ::= compoundStatement ;
assignment ::= identifier COLON_EQUALS conditionalExpr ;
type ::= INT | DOUBLE ;
declaration ::= constDeclaration | varDeclaration | procDeclaration SEMI ;
prog ::= TROLLEY CID CONTAINS declaration* CHECKOUT compoundStatement SEMI DONE SEMI ;
identifier ::= ID | CID ;
conditional ::= IF conditionalExpr THEN consequent ELSE alternative ;
expr ::= prodExpr (ADDITION | SUBTRACTION prodExpr)* ;
loop ::= WHILE booleanExpr DO compoundStatement ;
consequent ::= compoundStatement ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | identifier | (LPAREN conditionalExpr RPAREN) ;
--------------------tescol::01000.bgf--------------------
assign ::= id DEF arith ;
statement ::= SKIP | statements | (LCBRACK statement (SEMI statement)* RCBRACK) ;
constdec ::= CONST CONSTID COL type DEF arith SEMI ;
nums ::= VARID | CONSTID | INTNUM | DOUBNUM ;
param ::= (l::id COL ltype::type (COMMA r::id COL rtype::type)*)? ;
condstatement ::= IF orExpr THEN statement ELSE statement ;
arith ::= orExpr (QUES arith COL arith)? ;
procdec ::= PROC id LBRACK param RBRACK COL type DEF statement SEMI ;
id ::= CONSTID | VARID ;
procapp ::= id LBRACK arith (COMMA arith)* RBRACK ;
vardec ::= VAR id COL type SEMI ;
type ::= INT | DOUBLE ;
declarations ::= (constdec | vardec | procdec)+ ;
loop ::= WHILE orExpr DO statement ;
statements ::= assign | condstatement | loop ;
program ::= TROLLEY CONSTID CONTAINS declarations CHECKOUT statement SEMI DONE SEMI ;
atom ::= INTNUM | DOUBNUM | id | procapp | (LBRACK arith RBRACK) ;
--------------------tescol::01001.bgf--------------------
variable ::= VAR_ID ;
exp_exp ::= minus (EXP minus)? ;
type ::= INT_T | DOUBLE_T ;
declaration ::= const_dec | var_dec | proc_dec ;
var_id ::= VAR_ID ;
minus ::= atom | (MINUS minus) ;
statement ::= grouped | SKIP | assignment | conditional | loop ;
comp_exp ::= plus_min_exp (rel_operator plus_min_exp)? ;
proc_body ::= DEF statement SEMI ;
var_dec ::= VAR v_id COLON typename SEMI ;
arith_exp ::= bool_exp (QUEST arith_exp COLON arith_exp)? ;
const_dec ::= CONST CONST_ID COLON typename DEF arith_exp SEMI ;
loop ::= WHILE bool_exp DO statement ;
constant ::= CONST_ID ;
mult_div_exp ::= exp_exp (MULT | DIV exp_exp)* ;
con_exp ::= comp_exp (CONJ comp_exp)* ;
grouped ::= STST (statement SEMI)+ STED ;
proc_dec ::= proc_header proc_params proc_body ;
proc_header ::= PROC p_id ;
procedure ::= VAR_ID OPEN params_given CLOSE ;
atom ::= type | constant | variable | procedure | (OPEN arith_exp CLOSE) ;
param_list ::= (param_item (COMMA param_item)*)? ;
proc_params ::= OPEN param_list CLOSE COLON typename ;
assignment ::= variable DEF arith_exp ;
plus_min_exp ::= mult_div_exp (PLUS | MINUS mult_div_exp)* ;
p_id ::= idname::(VAR_ID | CONST_ID) ;
rel_operator ::= EQ | NEQ | LESS | LESSEQ | GRT | GRTEQ ;
bool_exp ::= con_exp (DISJ con_exp)* ;
conditional ::= IF bool_exp THEN statement ELSE statement ;
typename ::= INT | DOUBLE ;
param_item ::= var_id COLON typename ;
v_id ::= idname::(VAR_ID | CONST_ID) ;
params_given ::= (arith_exp (COMMA arith_exp)*)? ;
program ::= TROLLEY CONST_ID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI ;
--------------------tescol::01010.bgf--------------------
logicop ::= AND | OR ;
addsub ::= ADDITION | POSITIVE | SUBTRACTION | NEGATIVE ;
constdec ::= CONST CONSTID COLON type ASSIGN expr SEMI ;
mul_div_expr ::= expexpr (MUL | DIV expexpr)* ;
paramdecs ::= (paramdec (COMMA paramdec)* COMMA?)? ;
sign ::= POSITIVE | NEGATIVE ;
whiledo ::= WHILE cond DO statement ;
vardec ::= VAR id COLON type SEMI ;
argslist ::= LPARA (expr (COMMA expr)* COMMA?)? RPARA ;
type ::= INT | DOUBLE ;
declaration ::= procdec | constdec | vardec ;
positive ::= POSITIVE | ADDITION ;
andcond ::= pred (AND pred)* ;
expr ::= cond (QUEST expr COLON expr)? ;
negative ::= NEGATIVE | SUBTRACTION ;
comments ::= COMMENT* ;
ifthenelse ::= IF cond thenclause elseclause ;
sub_add_expr ::= mul_div_expr (addsub mul_div_expr)* ;
statement ::= SKIP | (LCURL statement (SEMI statement)* RCURL) | assignment | ifthenelse | whiledo ;
arithop ::= POSITIVE | NEGATIVE | ADDITION | SUBTRACTION | MUL | DIV | EXP ;
procdec ::= PROC procdescribe COLON type ASSIGN statement SEMI ;
elseclause ::= ELSE statement ;
cond ::= andcond (OR andcond)* ;
vartype ::= CONST | VAR | PROC ;
pred ::= sub_add_expr (comparator sub_add_expr)? ;
procdescribe ::= id LPARA paramdecs RPARA ;
bracketexpr ::= LPARA expr RPARA ;
id ::= ID | CONSTID ;
comparator ::= EQL | NEQL | GRT | GRTE | LST | LSTE ;
paramdec ::= id COLON type ;
expexpr ::= atom (EXP expexpr)? ;
atom ::= (negative unsignedatom) | unsignedatom ;
assignment ::= id ASSIGN expr ;
thenclause ::= THEN statement ;
number ::= INUM | NUM ;
unsignedatom ::= bracketexpr | (id argslist?) | (sign number) | number ;
program ::= TROLLEY CONSTID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI EOF ;
--------------------tescol::01011.bgf--------------------
skip ::= "skip" SEMI ;
proceduredecl ::= "proc" ID LBRACK parameter (COMMA parameter)* RBRACK COLON INT | DOUBLE ASSIGN statement ;
addition ::= mult (PLUS | MINUS mult)* ;
relation ::= addition (EQUALITY | LTHAN | MTHAN | NOTEQUAL | LEQUAL | MEQUAL addition)* ;
disj ::= conj (DISJ relation)* ;
variable ::= "var" ID COLON INT | DOUBLE SEMI ;
expression ::= disj ("\?" disj COLON disj)? ;
mult ::= unary (MULTI | DIVIS | EXPO unary)* ;
statement ::= (LBRACE statement+ RBRACE SEMI) | skip | assignment | conditional | loop | procedureapp | ret ;
unary ::= (PLUS | negation)* term ;
procedureapp ::= ID "(" (expression (COMMA expression)*)? ")" SEMI? ;
assignment ::= ID ASSIGN expression SEMI ;
term ::= procedureapp | ID | ("(" expression ")") | INUMB | DNUMB ;
parameter ::= ID COLON INT | DOUBLE ;
conj ::= relation (CONJ relation)* ;
conditional ::= IF expression THEN statement+ (ELSE statement+)? ;
negation ::= "-" ;
loop ::= WHILE expression DO statement+ ;
constant ::= "const" ID COLON INT | DOUBLE ASSIGN expression SEMI ;
program ::= TROLLEY ID CONTAINS (constant | variable | proceduredecl)+ CHECKOUT statement+ DONE SEMI EOF ;
ret ::= "currentProc" ASSIGN expression SEMI ;
--------------------tescol::01100.bgf--------------------
skip ::= SKIPTOKEN SEMICOLON ;
constdec ::= CONST constidentifier COLON type DEFINE expression SEMICOLON ;
addition ::= substract ((ADDITION substract)+) | ε ;
vardec ::= VAR identifier COLON type SEMICOLON ;
type ::= TYPEINT | TYPEDOUBLE ;
declaration ::= dec+ ;
divide ::= exponent ((DIVISION exponent)+) | ε ;
expression ::= condExp ;
multipli ::= divide ((MULTIPLICATION divide)+) | ε ;
stat ::= skip | assign | cond | loop ;
procedure ::= identifier LEFTPARENTHESIS ε | (expression (COMA expression)*) RIGHTPARENTHESIS ;
conjunct ::= comparison ((CONJUNCTION comparison)+) | ε ;
atom ::= number | procedure | identifier | (LEFTPARENTHESIS condExp RIGHTPARENTHESIS) | (SUBSTRACTION condExp) ;
exponent ::= atom (EXPONENT atom) | ε ;
assign ::= identifier DEFINE expression SEMICOLON ;
constidentifier ::= CONSTID ;
procdec ::= PROCEDURE id::identifier LEFTPARENTHESIS (RIGHTPARENTHESIS COLON type DEFINE statements) | (ids::identifier COLON type (COMA ids::identifier COLON type)* RIGHTPARENTHESIS COLON type DEFINE statements) ;
number ::= (ADDITION? INT) | (ADDITION? DOUBLE) | (SUBSTRACTION INT) | (SUBSTRACTION DOUBLE) ;
identifier ::= ID | constidentifier ;
comparison ::= (a2::addition booleanSymbols a1::addition) | addition ;
disjunct ::= conjunct ((DISJUNCTION conjunct)+) | ε ;
statements ::= stat | (LEFTCURLY stat+ RIGHTCURLY SEMICOLON) ;
loop ::= WHILE expression DO statements ;
program ::= (TROLLEY constidentifier CONTAINS declaration CHECKOUT statements DONE SEMICOLON) | (TROLLEY constidentifier CONTAINS CHECKOUT statements DONE SEMICOLON) ;
cond ::= IF expression THEN dothen::statements ELSE doelse::statements ;
dec ::= constdec | vardec | procdec ;
substract ::= multipli ((SUBSTRACTION multipli)+) | ε ;
--------------------tescol::01101.bgf--------------------
skip ::= SKIP SEMI ;
decleration ::= (const_dec | var_dec | proc_dec)* ;
do_statement ::= DO cond_statements ;
proc_dec ::= PROCEDURE proc_para COLON TYPE proc_becomes ;
mix_fix ::= bool_disjunction (MIX_FIX arithmetic_expression COLON atom)? ;
atom ::= procedure_call | CID | ID | (OPENPARENTHESIS mix_fix CLOSEDPARENTHESIS) | INT | DOUBLE ;
statement ::= conditional | loop | assignment | skip | procedure_call ;
assignment ::= varIDs BECOMES mix_fix SEMI ;
then_statement ::= THEN cond_statements ;
bool_disjunction ::= bool_conjunction (DISJUNCTION bool_conjunction)* ;
arithmetic_expression ::= multiplication_division (ADD | SUB multiplication_division)* ;
parameters ::= mix_fix (COMMA mix_fix)* ;
procedure_call ::= varIDs OPENPARENTHESIS parameters CLOSEDPARENTHESIS SEMI ;
var_dec ::= VAR varIDs COLON TYPE SEMI ;
else_statement ::= ELSE cond_statements ;
proc_para ::= varIDs OPENPARENTHESIS (parameter COMMA?)* CLOSEDPARENTHESIS ;
parameter ::= varIDs COLON TYPE ;
conditional ::= IF OPENPARENTHESIS bool_disjunction CLOSEDPARENTHESIS then_statement else_statement ;
bool_atom ::= arithmetic_expression (NONEQUALITY | EQUALITY | MOREOREQUAL | LESSOREQUAL | MORETHEN | LESSTHEN arithmetic_expression)* ;
multiplication_division ::= exponential (MUL | DIV exponential)* ;
const_dec ::= CONSTANT conIDs COLON TYPE BECOMES mix_fix SEMI ;
checkout ::= CHECKOUT OPENBRACKET statement* CLOSEDBRACKET SEMI DONE SEMI ;
exponential ::= negation (EXP negation)* ;
negation ::= (SUB atom) | atom ;
trolley ::= TROLLEY varIDs CONTAINS decleration ;
loop ::= WHILE bool_disjunction do_statement ;
program ::= trolley checkout ;
proc_becomes ::= BECOMES cond_statements ;
cond_statements ::= (OPENBRACKET statement* CLOSEDBRACKET) | statement ;
bool_conjunction ::= bool_atom (CONJUNCTION bool_atom)* ;
--------------------tescol::01110.bgf--------------------
unary ::= ("+" | negation)* atom ;
statement ::= assignment | ifStat | loopStat | skipStat | (LBRACE statement+ RBRACE SEMI) ;
assignment ::= CID | ID COLON_EQUALS mixFix SEMI ;
relation ::= addSubExpr (EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER_EQUAL | GREATER addSubExpr)* ;
type ::= (INT | DOUBLE)? ;
declaration ::= constDec | varDec | procDec ;
prog ::= TROLLEY CID CONTAINS declaration* checkoutStat ;
negation ::= "-" ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | ID | CID | procCall | (LPAREN mixFix RPAREN) ;
--------------------tescol::01111.bgf--------------------
comment ::= COMMENT ;
operations ::= EQUALITY | NONEQUALITY | LESSTHAN | LESSTHANOREQUAL | GREATERTHAN | GREATERTHANOREQUAL ;
number ::= INTKEYWORD | DOUBLEKEYWORD ;
declarations ::= (CONST constDec SEMI) | (VAR varDec SEMI) | (PROC procDec) ;
stat ::= conditionalStat | loopStat | (assignStat SEMI) | (SKIP SEMI) | (LPAR stat+ RPAR SEMI) ;
program ::= progTree+ ;
atom ::= CONSTID | VARANDPROCID | (("+" | "-")? INTVALUE) | (("+" | "-")? DOUBLEVALUE) | applyProc | (OPAR arithmeticExpression CPAR) ;
--------------------tescol::10000.bgf--------------------
assign ::= a::(CID | ID) COLON_EQUALS condExpr ;
decl ::= (VAR ID COLON INT | DOUBLE SEMI NEWLINE*) | (CONST CID COLON INT | DOUBLE COLON_EQUALS condExpr SEMI NEWLINE*) | (PROC a::ID LPAREN (decl (COMMA decl)*)? RPAREN COLON_EQUALS stat SEMI NEWLINE*) ;
prog ::= TROLLEY CID CONTAINS NEWLINE* decl* CHECKOUT NEWLINE* stat DONE SEMI ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
whileloop ::= WHILE LPAREN boolExpr RPAREN DO stat ;
stat ::= condExpr | SKIP | assign | multStat | ifthenelse | whileloop ;
ifthenelse ::= IF LPAREN boolExpr RPAREN THEN stat (SEMI ELSE stat)? ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | (a::(CID | ID) (LPAREN (expr (COMMA expr)*)? RPAREN)?) | (LPAREN condExpr RPAREN) ;
--------------------tescol::10001.bgf--------------------
cid ::= i::CIDENT ;
assignment ::= id COLON_EQUALS condExpr SEMI ;
id ::= i::IDENT ;
type ::= INT | DOUBLE ;
prog ::= stat+ ;
checkout ::= CHECKOUT stat SEMI? DONE SEMI ;
whilestat ::= WHILE e::condExpr DO s::stat ;
trolley ::= TROLLEY cid CONTAINS def* ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
def ::= (CONST n::cid COLON t::type COLON_EQUALS e::expr SEMI) | (VAR vartypedef SEMI) | (procedure SEMI) ;
proccall ::= i::id LPAREN (a::atom (COMMA a::atom)*)? RPAREN ;
vartypedef ::= id COLON INT | DOUBLE ;
stat ::= (expr SEMI) | trolley | checkout | assignment | ifstat | whilestat | (SKIP SEMI) | (LBRACE stat+ RBRACE) | SEMI ;
procedure ::= PROC i::id LPAREN (a::vartypedef (COMMA a::vartypedef)*)? RPAREN COLON_EQUALS s::stat ;
ifstat ::= IF e::condExpr THEN ts::stat ELSE es::stat ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | id | cid | (LPAREN condExpr RPAREN) | proccall ;
--------------------tescol::10010.bgf--------------------
statement ::= SKIP | assignment | conditional | loop | statementList ;
assignment ::= ID DEF arithmeticExpression ;
constdecl ::= CONST ID COLON type DEF arithmeticExpression ;
type ::= INTKEYWORD | DOUBLEKEYWORD ;
arithmetic ::= number (arithmeticOperator number)* ;
declaration ::= constdecl | vardecl | procdecl SEMI ;
number ::= INT | DOUBLE | ID | (LPAREN conditionalExpression RPAREN) ;
expression ::= number (arithmeticOperator number)* ;
conditional ::= IF booleanExpression THEN statement ELSE statement ;
operator ::= DEF | QUESTION | CONJUNC | DISJUNC | arithmeticOperator | relationalOperator ;
loop ::= WHILE booleanExpression DO statement ;
program ::= TROLLEY ID CONTAINS declaration+ CHECKOUT statement SEMI DONE SEMI ;
vardecl ::= VAR ID COLON type ;
procdecl ::= PROC ID LPAREN parameterList RPAREN COLON type DEF statement ;
--------------------tescol::10011.bgf--------------------
sign ::= (MINUS | PLUS)? atom ;
expon ::= sign (EXPON sign)* ;
vardec ::= VAR parameter SEMI ;
type ::= INTEGER | DOUBLE ;
declaration ::= consdec | vardec | procdec ;
cexpr ::= bexpr (QM cexpr COLON cexpr)? ;
bexpr ::= con (DISJUN con)* ;
aexpr ::= cexpr ;
expr ::= (multExpr (PLUS | MINUS multExpr)*) | procapp ;
aexprlist ::= aexpr (COMMA aexpr)* ;
rop ::= EQ | NEQ | LESS | MORE | LESSEQ | MOREEQ ;
atom ::= number | VARIABLE | CONSTANT | (LPAR cexpr RPAR) ;
consdec ::= CONST CONSTANT COLON type DEFAS aexpr SEMI ;
statement ::= SKIP | assignment | conditional | loop ;
assignment ::= VARIABLE DEFAS aexpr ;
statementlist ::= statement | (LCPAR statement (SEMI statement)* RCPAR) ;
procdec ::= PROC VARIABLE LPAR paramlist RPAR COLON type DEFAS statementlist SEMI ;
paramlist ::= parameter (COMMA parameter)* ;
procapp ::= VARIABLE LPAR aexprlist RPAR ;
parameter ::= VARIABLE COLON type ;
number ::= INT | DUB ;
ropexpr ::= expr (rop expr)? ;
conditional ::= IF bexpr THEN statementlist ELSE statementlist ;
loop ::= WHILE bexpr DO statementlist ;
program ::= TROLLEY CONSTANT CONTAINS declaration* CHECKOUT statementlist SEMI DONE SEMI ;
con ::= ropexpr (CONJUN ropexpr)* ;
--------------------tescol::10100.bgf--------------------
statement ::= statementList | condStatement | expression | assignment | loop | SKIP ;
assignment ::= ID COLON_EQUALS expression ;
paramlist ::= LPAREN (ID COLON type (COMMA ID COLON type)*)? RPAREN ;
type ::= INT | DOUBLE ;
prog ::= NEWLINE* TROLLEY NEWLINE* CID NEWLINE* CONTAINS NEWLINE* declarations NEWLINE* statement NEWLINE* SEMI NEWLINE* DONE NEWLINE* SEMI ;
declarations ::= (individual_declaration NEWLINE*)* CHECKOUT ;
expression ::= andExpression (QUESTION andExpression COLON andExpression)? ;
individual_declaration ::= (CONST CID COLON type COLON_EQUALS expression) | (VAR ID COLON type) | (PROC ID paramlist COLON type COLON_EQUALS statement) ;
loop ::= WHILE expression DO statement ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | ID | CID | (LPAREN expression RPAREN) ;
--------------------tescol::10101.bgf--------------------
statement ::= SKIP | (ID ASSIGN condExpr) | (IF boolExpr THEN statement ELSE statement) | (WHILE boolExpr DO statement) ;
proceduredec ::= PROCEDURE pid1::ID PARENOPEN (pid2::ID COLON type (COMMA pid3::ID COLON type)*)* PARENCLOSE COLON type ASSIGN mainstatement SEMI ;
constantdec ::= CONSTANT CONSTANTID COLON type ASSIGN condExpr SEMI ;
type ::= INT | FLOAT ;
declaration ::= variabledec | constantdec | proceduredec ;
mainstatement ::= ε | statement | (STATEMENTOPEN statement (SEMI statement)* STATEMENTCLOSE) ;
variabledec ::= VARIABLE ID COLON type SEMI ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
program ::= TROLLEY CONSTANTID CONTAINS declaration* CHECKOUT mainstatement SEMI DONE SEMI ;
atom ::= INTEGER | FLOATINGPOINT | CONSTANTID | ID | (PARENOPEN condExpr PARENCLOSE) | procedureList ;
unaryneg ::= SUBTRACTION* atom ;
--------------------tescol::10110.bgf--------------------
comment ::= COMMENT ;
expr2 ::= multExpr (ADD | SUBTRACT multExpr)* ;
whitespace ::= WS ;
type ::= "int" | "double" ;
proc ::= "proc" identifier "(" identifier COLON type (COMMA identifier COLON type)* ")" COLON type DEFINED_AS statement* SEMI ;
comparator ::= EQUALITY | NON_EQUALITY | LESS_THAN | GREATER_THAN | LESS_THAN_EQ | GREATER_THAN_EQ ;
expr ::= negation? expr2 ;
cond_expr ::= QUESTION boolExpr QUESTION expr COLON expr ;
atom ::= INT | DOUBLE | ID | CID | (LPAR condExpr RPAR) | procedure_expr ;
statement ::= SKIP | conditional | loop | assignment | cond_expr | (CURLY_L SKIP | conditional | loop | assignment | cond_expr (SEMI statement)* CURLY_R) ;
assignment ::= identifier DEFINED_AS expr ;
cidentifier ::= CID ;
identifier ::= ID | CID ;
var ::= "var" identifier COLON type SEMI ;
conditional ::= IF condExpr THEN statement ELSE statement ;
negation ::= "-" ;
loop ::= WHILE boolExpr DO statement ;
constant ::= "const" cidentifier COLON type DEFINED_AS expr SEMI ;
operator ::= ADD | SUBTRACT | MULTIPLY | DIVIDE | EXPONENTIATION | EQUAL ;
program ::= TROLLEY cidentifier CONTAINS dec* CHECKOUT CURLY_L (statement (SEMI statement)*)? CURLY_R SEMI DONE SEMI EOF ;
dec ::= constant | var | proc ;
procedure_expr ::= identifier LPAR expr (COMMA expr)* RPAR ;
--------------------tescol::10111.bgf--------------------
div_subterm ::= molecule (SYM_DIV molecule)* ;
varproc_id ::= ID_VARPROC | ID_GENERAL ;
type ::= KW_TYPE_INT | KW_TYPE_DOUBLE ;
prog ::= KW_TROLLEY ID_GENERAL KW_CONTAINS decl* KW_CHECKOUT statement KW_DONE SYM_SEMI ;
mixfix ::= predicate (SYM_QM mixfix SYM_COLON mixfix)? ;
predicate ::= pred_term (SYM_OR pred_term)* ;
comparator ::= SYM_EQ | SYM_INEQ | SYM_GT | SYM_NS_GT | SYM_LT | SYM_NS_LT ;
parenthesised ::= SYM_OPEN_PAREN mixfix SYM_CLOSE_PAREN ;
expr ::= subtraction_subexpr (SYM_ADD subtraction_subexpr)* ;
param_and_type ::= varproc_id SYM_COLON type ;
proc_decl ::= KW_PROC id::varproc_id param_decl_list SYM_COLON type SYM_ASS statement ;
immediate ::= integerNum | doubleNum ;
atom ::= immediate | (v::varproc_id) | proc_call | parenthesised ;
statement ::= (KW_SKIP SYM_SEMI) | (a::varproc_id SYM_ASS c::mixfix SYM_SEMI) | (SYM_OPEN_BRACE statement+ SYM_CLOSE_BRACE SYM_SEMI) | (KW_IF mixfix KW_THEN statement KW_ELSE statement) | (KW_WHILE mixfix KW_DO statement) ;
pred_base ::= expr (comparator expr)* ;
term ::= div_subterm (SYM_MULT div_subterm)* ;
pred_term ::= pred_base (SYM_AND pred_base)* ;
subtraction_subexpr ::= term (SYM_SUB term)* ;
decl ::= (const_decl | var_decl SYM_SEMI) | proc_decl ;
proc_call ::= id::varproc_id l::arg_list ;
arg_list ::= SYM_OPEN_PAREN (expr (SYM_COMMA expr)*)? SYM_CLOSE_PAREN ;
const_decl ::= KW_CONST id::ID_GENERAL SYM_COLON t::type SYM_ASS e::expr ;
molecule ::= atom (SYM_EXP molecule)? ;
var_decl ::= KW_VAR id::varproc_id SYM_COLON t::type (SYM_ASS expr)? ;
param_decl_list ::= SYM_OPEN_PAREN (param_and_type (SYM_COMMA param_and_type)*)? SYM_CLOSE_PAREN ;
--------------------tescol::11000.bgf--------------------
skip ::= SKIP ;
whilestatement ::= WHILE expression DO statements ;
addition ::= multiply (ADDITION multiply)* ;
variable ::= VARIABLE ID | CID COLON INTEGER | DOUBLE SEMI ;
relationships ::= EQUALITY | NONEQUALITY | GREATERTHAN | LESSTHAN | GREATEROREQUAL | LESSOREQUAL ;
divide ::= negation (DIVISION negation)? ;
declarations ::= constant | variable | procedure ;
expression ::= runproc ;
conjunction ::= booleanop (AND booleanop)* ;
subtraction ::= addition (SUBTRACTION addition)* ;
procedure ::= PROCEDURE ID | CID LEFTBRACKET parameters RIGHTBRACKET COLON numbervalues DEFINE statements ;
expo ::= atom (EXPONENTIATION atom)? ;
ifstatement ::= IF LEFTBRACKET expression RIGHTBRACKET THEN statements ELSE statements ;
atom ::= INT | DOU | ID | CID | (LEFTBRACKET expression RIGHTBRACKET) ;
statement ::= ifstatement | whilestatement | skip | assignment SEMI ;
assignment ::= ID | CID DEFINE expression ;
numbervalues ::= INTEGER | DOUBLE ;
parameters ::= (parameter (COMMA parameter)*)? ;
booleanop ::= subtraction (relationships subtraction)? ;
parameter ::= ID | CONSTANT COLON numbervalues ;
checkout ::= CHECKOUT statements ;
negation ::= (ADDITION | SUBTRACTION)? expo ;
trolley ::= TROLLEY CID CONTAINS declarations* ;
multiply ::= divide (MULTIPLICATION divide)* ;
statements ::= statement | (CURLYLEFT statement statement* CURLYRIGHT) SEMI ;
constant ::= CONSTANT CID COLON INTEGER | DOUBLE DEFINE expression SEMI ;
program ::= trolley checkout done ;
conditexpr ::= disjunction (QUESTION disjunction COLON disjunction)* ;
disjunction ::= conjunction (OR conjunction)* ;
done ::= DONE SEMI ;
runproc ::= conditexpr | (ID | CID LEFTBRACKET (expression (COMMA expression)*)? RIGHTBRACKET) ;
--------------------tescol::11001.bgf--------------------
contains ::= CONTAINS (procdeclaration | constdeclaration | vardeclaration SEMI)* ;
whilestatement ::= WHILE exp::expression DO statement ;
id ::= name::(CONSTID | VARID) ;
argumentlist ::= (exp::expression (COMMA args::argumentlist)?) | ε ;
exp_exp ::= l::atom_exp (EXP r::atom_exp)* ;
type ::= TINT | TDOUBLE ;
addition_exp ::= l::multiply_exp ((o::PLUS) | (o::MINUS) r::multiply_exp)* ;
mixfix ::= e::conjunction (QUESTION t::mixfix COLON f::mixfix)? ;
expression ::= e::mixfix ;
constdeclaration ::= CONST name::CONSTID COLON t::type DEFINEDAS exp::expression ;
conjunction ::= l::disjunction (AND r::disjunction)* ;
proccall ::= proc::varid LPAREN args::argumentlist RPAREN ;
vardeclaration ::= VAR name::varid COLON t::type ;
ifstatement ::= IF exp::expression THEN statement ELSE statement ;
atom_exp ::= (e::unary_exp) | (LPAREN exp::expression RPAREN) | (proc::proccall) ;
statement ::= SKIP | (LBRACE statement (SEMI statement)* SEMI? RBRACE) | assignment | ifstatement | whilestatement ;
unary_exp ::= MINUS? (num::number) | (var::id) ;
assignment ::= name::id DEFINEDAS exp::expression ;
number ::= (f::FLOAT) | (i::INT) | (u::UINT) ;
comparison ::= l::addition_exp (c::conditional r::addition_exp)? ;
parameterlist ::= (name::varid COLON t::type (COMMA params::parameterlist)?) | ε ;
conditional ::= (t::EQUALITY) | (t::INEQUALITY) | (t::LANGLE) | (t::RANGLE) | (t::LTEQUALS) | (t::GTEQUALS) ;
checkout ::= CHECKOUT statement SEMI ;
procdeclaration ::= PROC name::varid LPAREN params::parameterlist RPAREN COLON t::type DEFINEDAS content::statement ;
program ::= TROLLEY CONSTID contains checkout done ;
multiply_exp ::= l::exp_exp ((o::MUL) | (o::FSLASH) r::exp_exp)* ;
disjunction ::= l::comparison (OR r::comparison)* ;
varid ::= CONSTID | VARID ;
done ::= DONE SEMI ;
--------------------tescol::11010.bgf--------------------
type ::= INTEGER | FLOATDOUBLE ;
declarations ::= (CONST constDec SEMI) | (VAR varDec SEMI) | (PROC procDec SEMI) ;
stat ::= conditionalStat | loopStat | assignStat | (LEFTBRACE stat (SEMI stat)* RIGHTBRACE SEMI) | SKIP ;
program ::= progTree+ ;
atom ::= CONSTID | ID | INT | DOUBLE | (LEFTPAR condExpr RIGHTPAR) | applyProc ;
--------------------tescol::11011.bgf--------------------
dec_types ::= TYPE_INT | TYPE_DOUBLE ;
exp_exp ::= atom (ARITH_EXP atom)* ;
declarations ::= CONTAINS (dec_const | dec_var | dec_proc)* ;
ids ::= ID | CONST_ID ;
exp_multi ::= exp_exp (ARITH_MUL | ARITH_DIV exp_exp)* ;
exp_and ::= exp_comp (CONJ exp_comp)* ;
expr ::= exp_bools (QMARK expr COLON expr)? ;
dec_proc ::= PROC ID LPAR param_list COLON dec_types DEFAS statement SEMI ;
atom ::= INT | DOUBLE | (ids argument_list?) | (LPAR expr RPAR) ;
exp_comp ::= exp_addsub (COND_COMP_GREATE | COND_COMP_GREAT | COND_COMP_LESS | COND_COMP_LESSE | COND_EQUAL | COND_NONEQUAL exp_addsub)? ;
param_list ::= param_element? (COMMA param_element)* ;
assign ::= ids DEFAS expr ;
statement_group ::= LCB statement (SEMI statement)* RCB ;
statement ::= assign | SKIP | conditional | loop | statement_group ;
param_element ::= ID COLON dec_types ;
dec_var ::= VAR ids COLON dec_types SEMI ;
exp_bools ::= exp_and (DISJ exp_and)* ;
conditional ::= IF exp_bools THEN statement ELSE statement ;
dec_const ::= CONST CONST_ID COLON dec_types DEFAS expr SEMI ;
loop ::= WHILE exp_bools DO statement ;
statements ::= CHECKOUT statement SEMI ;
program ::= TROLLEY CONST_ID declarations statements DONE SEMI ;
exp_addsub ::= exp_multi (ARITH_ADD | ARITH_SUB exp_multi)* ;
argument_list ::= LPAR (expr (COMMA expr)*)? RPAR ;
--------------------tescol::11100.bgf--------------------
unary ::= (t::MINUS)* atom ;
statement ::= (SKIP SEMI) | (ID ASSIGNMENT expression SEMI) | (IF boolexp THEN statement ELSE statement) | (WHILE boolexp DO statement) | (LEFTBRACE statement+ RIGHTBRACE) ;
addition ::= t::mult (addop mult)* ;
type ::= INTTYPE | DOUBLETYPE ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= ID COLON type ;
expression ::= boolexp (QMARK t::mult COLON f::mult)? ;
predicate ::= t::addition (COMPARISON u::addition)? ;
arguments ::= expression (COMMA expression)* ;
program ::= TROLLEY CONSTID CONTAINS (definition SEMI?)* CHECKOUT statement SEMI? DONE SEMI ;
boolexp ::= t::predicate (BOOLOPERATOR u::predicate)* ;
definition ::= (CONST CONSTID COLON type ASSIGNMENT expression) | (VAR ID COLON type) | (PROC ID LEFTBRACKET parameters? RIGHTBRACKET COLON type ASSIGNMENT statement) ;
addop ::= PLUS | MINUS ;
value ::= INT | DOUBLE ;
procedurecall ::= ID LEFTBRACKET arguments? RIGHTBRACKET ;
atom ::= procedurecall | ID | CONSTID | (LEFTBRACKET expression RIGHTBRACKET) | value ;
mult ::= t::unary (MULTIPLIER unary)* ;
--------------------tescol::11101.bgf--------------------
procedureapplication ::= varprocidentifier PARENTHESISL arguments PARENTHESISR ;
type ::= INT | DBLE ;
declaration ::= constdeclaration | vardeclaration | procdeclaration ;
prog ::= TROLLEY constantidentifier CONTAINS declaration* CHECKOUT statement DONE SEMI ;
multdivexpression ::= a1::atom (EXPONENTIATION | DIVISION | MULTIPLICATION a2::atom)* ;
expression ::= (p1::procedureapplication) | (b1::booleanexpression (QUESTION expression COLON expression)?) ;
constdeclaration ::= CONST constantidentifier COLON type DEFINED expression SEMI ;
arguments ::= e1::expression (COMMA e2::expression)* ;
vardeclaration ::= VAR varprocidentifier COLON type SEMI ;
atom ::= constantidentifier | varprocidentifier | number | (PARENTHESISL expression PARENTHESISR) ;
groupedstatement ::= BRACKETL statement+ BRACKETR SEMI ;
andexpression ::= c1::compexpression (CONJUNCTION compexpression)* ;
statement ::= (SKIP SEMI) | assignment | conditional | loop | groupedstatement ;
constantidentifier ::= CONSTID ;
assignment ::= varprocidentifier DEFINED ae::expression SEMI ;
number ::= INTEGER | DOUBLE ;
parameter ::= varprocidentifier COLON type ;
parameterlist ::= PARENTHESISL (parameter (COMMA parameter)*)? PARENTHESISR ;
compexpression ::= ar1::arithexpression (ROP arithexpression)? ;
varprocidentifier ::= VARPROCID ;
conditional ::= IF booleanexpression THEN statement ELSE statement ;
arithexpression ::= m1::multdivexpression (ADDITION | SUBTRACTION m2::multdivexpression)* ;
loop ::= WHILE booleanexpression DO statement ;
procdeclaration ::= PROC varprocidentifier parameterlist COLON type DEFINED statement SEMI ;
booleanexpression ::= an1::andexpression (DISJUNCTION andexpression)* ;
--------------------tescol::11110.bgf--------------------
statement ::= (e::singleStatement) | (b::listofStatement) ;
type ::= INT | DOUBLE ;
prog ::= stat+ ;
declarations ::= (constDeclaration | varDeclaration | proDeclaration)+ ;
stat ::= compilationUnit ;
atom ::= INTEGER | FLOAT | CONSTID | ("(" conditionalExpr ")") | applyProcedure | ID ;
--------------------tescol::11111.bgf--------------------
constant_declaration ::= CONST CONSTID COLON type ASSIGN expression SEMI ;
expon ::= unary (EXPONENTIATION unary)* ;
id ::= CONSTID | VARID ;
type ::= INT | DOUBLE ;
declaration ::= constant_declaration | variable_declaration | procedure_declaration ;
relational_op ::= EQUAL | NONEQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;
single_statement ::= SKIP | assignment | conditional | loop ;
expression ::= disjunction (MIXFIX expression COLON expression)? ;
variable_declaration ::= VAR id COLON type SEMI ;
conjunction ::= relational (CONJUNCTION relational)* ;
proc ::= id LPAREN (term (COMMA term)*)? RPAREN ;
mult ::= expon (MULTIPLICATION | DIVISION expon)* ;
param_list ::= (id COLON type (COMMA id COLON type)*)? ;
statement ::= single_statement | multiple_statement ;
unary ::= negation* term ;
procedure_declaration ::= PROC id LPAREN param_list RPAREN COLON type ASSIGN statement SEMI ;
assignment ::= id ASSIGN expression ;
term ::= INT_NUMBER | DOUBLE_NUMBER | (LPAREN expression RPAREN) | id | proc ;
relational ::= add (relational_op add)* ;
conditional ::= IF expression THEN statement ELSE statement ;
negation ::= SUBTRACTION ;
loop ::= WHILE expression DO statement ;
program ::= TROLLEY CONSTID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI ;
disjunction ::= conjunction (DISJUNCTION conjunction)* ;
add ::= mult (ADDITION | SUBTRACTION mult)* ;
multiple_statement ::= LBRACE single_statement (SEMI single_statement)* RBRACE ;
--------------------tescol::reference.bgf--------------------
statement ::= stmtElem | stmtList ;
assign ::= (a::ID) | (a::CONSTID) DEFAS e::expression ;
unary ::= SUB* term ;
exp ::= a::unary (EXP unary)* ;
disj ::= a::equality (DISJUNC b::equality)* ;
relation ::= a::add (RELOP b::add)? ;
term ::= (LPAR expression RPAR) | (CONSTID p::procApp) | (ID p::procApp) ;
type ::= INT | DOUB ;
equality ::= a::relation (EQOP b::relation)? ;
declaration ::= constDecl | varDecl | procDecl ;
number ::= INTEGER | DOUBLE ;
expression ::= a::conj (TE b::expression COLON c::expression)? ;
conj ::= a::disj (CONJUNC b::disj)* ;
loop ::= WHILE e::expression DO statement ;
program ::= TROLLEY CONSTID CONTAINS (declaration SEMI)* CHECKOUT statement SEMI DONE SEMI ;
add ::= a::mult (ADD | SUB b::mult)* ;
mult ::= a::exp (MULTOP b::exp)* ;
--------------------metamodels::Marte.bgf--------------------
rtf ::= base_BehavioralFeature::BehavioralFeature base_Action::Action base_Message::Message base_Signal::Signal utility::MARTE_DataTypes/UtilityType occKind::BasicNFP_Types/ArrivalPattern tRef::MARTE_Foundations/Time/TimedInstantObservation relDl::BasicNFP_Types/NFP_Duration absDl::BasicNFP_Types/NFP_DateTime boundDl::BasicNFP_Types/NFP_BoundedDuration rdTime::BasicNFP_Types/NFP_Duration miss::BasicNFP_Types/NFP_Percentage priority::BasicNFP_Types/NFP_Integer ;
--------------------metamodels::MICRO.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
participant ::= submits_to_conference::Conference ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
session ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
institute ::= ε ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
review_form ::= is_created_in::activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
program ::= program_created_by::chair has_session::session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::OpenConf.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
participant ::= submits_to_conference::Conference ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::Activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
session ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
institute ::= ε ;
review_form ::= is_created_in::Activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
program ::= program_created_by::Chair has_session::session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::PCS.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::Activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
session ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
institute ::= ε ;
review_form ::= is_created_in::Activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
chair ::= was_a_committee_chair_of::Committee assigns_reviewers_to_article::Reviewer creates_program::program ;
program ::= program_created_by::chair has_session::session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::XUL-Interactorl.bgf--------------------
row ::= (xulInteractors::Interactor)+ ;
column ::= (xulInteractors::Interactor)+ ;
vbox ::= (xulInteractors::Interactor)+ ;
hbox ::= (xulInteractors::Interactor)+ ;
--------------------metamodels::confOf.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
start_date_of_camera-ready_submission ::= ε ;
submission_process ::= is_performed_by::human ;
start_date_of_full_paper_submission ::= ε ;
article ::= paper ;
 article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
topic ::= ε ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
conference ::= is_in_phase::phase_of_conference ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
review ::= gives_classification::classification is_created_in::activity ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
institute ::= ε ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
paper ::= Accepted_Paper ;
 paper ::= Rejected_Paper ;
 paper ::= Undecided_Paper ;
 paper ::= full_paper_size::Integer has_author::human ;
review_form ::= is_created_in::activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::confious.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
topic ::= ε ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
institute ::= ε ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
review_form ::= is_created_in::activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::crs_dr.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
start_date_of_camera-ready_submission ::= ε ;
submission_process ::= is_performed_by::human ;
start_date_of_full_paper_submission ::= ε ;
article ::= paper ;
 article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= review ;
 article ::= article_written_by::author has_reviewer::reviewer has_abstract::abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
participant ::= submits_to_conference::conference ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= has_startdate::dateTime has_enddate::dateTime ;
topic ::= ε ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract ::= part_of_article::article ;
abstract_of_paper ::= article_written_by::author has_reviewer::reviewer has_abstract::abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= article_written_by::author has_reviewer::reviewer has_abstract::abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
conference ::= has_program::program is_in_phase::phase_of_conference ;
document ::= article ;
 document ::= abstract ;
 document ::= review ;
 document ::= article | abstract ;
lower_tier_reviewing_process ::= ε ;
event ::= pc_meeting ;
 event ::= session ;
 event ::= conference ;
 event ::= has_startdate::dateTime has_enddate::dateTime ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
review ::= gives_classification::classification is_created_in::activity review_written_by::reviewer ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
session ::= has_startdate::dateTime has_enddate::dateTime ;
person ::= author ;
 person ::= chair ;
 person ::= participant ;
 person ::= reviewer ;
 person ::= author | chair | participant | reviewer ;
institute ::= ε ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
paper ::= Accepted_Paper ;
 paper ::= Rejected_Paper ;
 paper ::= Undecided_Paper ;
 paper ::= full_paper_size::Integer has_author::human ;
author ::= writes_article::article assigns_article_to_conference::article ;
review_form ::= is_created_in::activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
reviewer ::= writes_review::review ;
chair ::= assigns_reviewers_to_article::reviewer creates_program::program ;
program ::= program_created_by::chair has_session::session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::edas.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::abstract ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
participant ::= submits_to_conference::Conference ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
topic ::= ε ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract ::= part_of_article::article ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::abstract ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::abstract ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
session ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
institute ::= ε ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
review_form ::= is_created_in::activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
program ::= program_created_by::chair has_session::session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::ekaw.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
participant ::= submits_to_conference::conference ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
conference ::= Conference_volume ;
 conference ::= TwoLevelConference ;
 conference ::= SingleLevelConference ;
 conference ::= is_in_phase::phase_of_conference hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI has_program::program ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
session ::= (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
institute ::= ε ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
review_form ::= is_created_in::activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
program ::= program_created_by::chair has_session::session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::iasted.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
participant ::= submits_to_conference::Conference ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::Activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
session ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
institute ::= ε ;
review_form ::= is_created_in::Activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
program ::= program_created_by::chair has_session::session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::paperdyne.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
participant ::= submits_to_conference::Conference ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::Article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::Activity ;
notification ::= has_result::Article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
institute ::= ε ;
review_form ::= is_created_in::Activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
program ::= program_created_by::Chair has_session::Session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::sigkdd.owl.bgf--------------------
rejection_notification_email ::= ε ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
participant ::= submits_to_conference::conference ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
intensity ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
pc_meeting ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
end_date_of_abstract_submission ::= ε ;
date ::= camera-ready_submission_date ;
 date ::= date_of_notification ;
 date ::= abstract_submission_date ;
 date ::= date_of_conference ;
 date ::= full_paper_submission_date ;
 date ::= camera-ready_submission_date | date_of_notification | abstract_submission_date | date_of_conference | full_paper_submission_date ;
human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= Program_Committee_member ;
 human ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
summary_of_reviews ::= is_created_in::Activity ;
notification ::= has_result::article is_performed_by::human ;
bidding_of_reviewer ::= is_performed_by::human ;
classification ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
conference ::= is_in_phase::phase_of_conference ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
lower_tier_reviewing_process ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
session ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
institute ::= ε ;
review_form ::= is_created_in::Activity ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
program ::= program_created_by::chair has_session::session ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------slps::bgf-1.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression*)) | (choice::(expression*)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (name::string())? (root::nonterminal)* production* ;
label ::= string() ;
--------------------slps::bgf-2.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression*)) | (choice::(expression*)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-2.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::btf.bgf--------------------
selector ::= string() ;
tree ::= (epsilon::ε) | (any::α) | (terminal::terminal) | (nonterminal::(production tree)) | (selectable::(selector::selector tree)) | (value::((int::integer()) | (string::string()))) | (sequence::(tree*)) | (choice::(expression tree)) | (optional::(tree?)) | (plus::(tree+)) | (star::(tree*)) ;
terminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
nonterminal ::= string() ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
root ::= grammar tree ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-3.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::(expression*)) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-3.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::expression) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-4.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::expression) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-5.2-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
nonterminal ::= string() ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-v1.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression*)) | (choice::(expression*)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (name::string())? (root::nonterminal)* production* ;
label ::= string() ;
--------------------slps::bgf-v2.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression*)) | (choice::(expression*)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-v2.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-v3.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::(expression*)) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-v3.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::expression) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-v4.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::expression) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::bgf-v5.2-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
nonterminal ::= string() ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::cbgf-xsd.bgf--------------------
disappear-appear ::= production ;
horizontal-vertical ::= nonterminal::nonterminal ;
unchain-chain ::= production ;
terminal ::= string() ;
 terminal ::= string() ;
widen ::= expression expression (in::scope)? ;
unlabel ::= label::label ;
iterate ::= production ;
yaccify-deyaccify ::= production+ ;
folding-unfolding-transformation ::= unfold-fold | fold-unfold | inline-extract | extract-inline | abridge-detour | detour-abridge | unchain-chain | chain-unchain ;
 folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
decorative-transformation ::= designate-unlabel | unlabel-designate | deanonymize-anonymize | anonymize-deanonymize ;
 decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define-undefine | undefine-define | inject-project | project-inject | replace-replace ;
 abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
vertical ::= scope ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
label ::= string() ;
 label ::= string() ;
introduce-eliminate ::= production+ ;
deyaccify ::= nonterminal::nonterminal ;
abstractize ::= production ;
value ::= (int::ε) | (string::ε) ;
 value ::= (int::ε) | (string::ε) ;
split-unite ::= add::(production+) to::(production+) in::(scope+) ;
widen-narrow ::= expression expression (in::scope)? ;
increasing-decreasing-transformation ::= add-remove | remove-add | appear-disappear | disappear-appear | widen-narrow | narrow-widen | upgrade-downgrade | downgrade-upgrade | unite-split | split-unite ;
appear-disappear ::= production ;
bypass ::= ε ;
define-undefine ::= production+ ;
fold-unfold ::= nonterminal::nonterminal (in::scope)? ;
extract-inline ::= production (in::scope)? ;
rassoc ::= production ;
unite ::= add::nonterminal to::nonterminal ;
distribute ::= scope ;
selector ::= string() ;
 selector ::= string() ;
inject-project ::= production ;
abridge-detour ::= production ;
narrow ::= expression expression (in::scope)? ;
vertical-horizontal ::= nonterminal::nonterminal ;
concrete-revising-transformation ::= abstractize-concretize | concretize-abstractize | permute-permute ;
 concrete-revising-transformation ::= abstractize | concretize | permute ;
detour ::= production ;
remove-add ::= (vertical::production) | (horizontal::production) ;
scope ::= (label::label) | (nonterminal::nonterminal) ;
 scope ::= (label::label) | (nonterminal::nonterminal) ;
unfold-fold ::= nonterminal::nonterminal (in::scope)? ;
roots ::= (root::nonterminal)* ;
factor ::= expression expression (in::scope)? ;
reroot-reroot ::= from::roots to::roots ;
inline-extract ::= production (in::scope)? ;
nonterminal ::= string() ;
 nonterminal ::= string() ;
massage-massage ::= expression expression (in::scope)? ;
unchain ::= production ;
project-inject ::= production ;
downgrade-upgrade ::= production production ;
unlabel-designate ::= production ;
designate-unlabel ::= production ;
assoc-iterate ::= production production ;
chain ::= production ;
sequence ::= (transformation | atomic)* ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
chain-unchain ::= production ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
define ::= production+ tag::string() ;
anonymize-deanonymize ::= production ;
deanonymize-anonymize ::= production ;
deyaccify-yaccify ::= production+ ;
equate-clone ::= align::(production+) with::nonterminal in::(scope+) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
permute ::= production ;
detour-abridge ::= production ;
replace ::= expression expression (in::scope)? tag::string() ;
eliminate-introduce ::= production+ ;
add-remove ::= (vertical::production) | (horizontal::production) ;
abstractize-concretize ::= production ;
redefine ::= production+ tag::string() ;
unite-split ::= add::(production+) to::(production+) in::(scope+) ;
rename-rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
atomic ::= transformation+ ;
abridge ::= production ;
lassoc ::= production ;
equate ::= align::nonterminal with::nonterminal ;
import ::= production+ ;
horizontal ::= nonterminal::nonterminal ;
disappear ::= production ;
eliminate ::= nonterminal::nonterminal ;
add ::= (vertical::production) | (horizontal::production) ;
permute-permute ::= production production ;
introduce ::= production+ ;
upgrade ::= production production ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
split ::= nonterminal::nonterminal production+ scope* ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
project ::= production tag::string() ;
concretize-abstractize ::= production ;
inline ::= nonterminal ;
clone-equate ::= align::(production+) with::nonterminal in::(scope+) ;
strip ::= (label::label) | (allLabels::ε) | (selector::selector) | (allSelectors::ε) | (terminal::terminal) | (allTerminals::ε) ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
 expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage-massage | factor-factor | deyaccify-yaccify | yaccify-deyaccify | eliminate-introduce | introduce-eliminate | vertical-horizontal | horizontal-vertical | assoc-iterate | iterate-assoc | equate-clone | clone-equate ;
 refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
reroot ::= (root::nonterminal)* ;
appear ::= production ;
designate ::= production ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
undefine-define ::= production+ ;
yaccify ::= production+ ;
deanonymize ::= production ;
inject ::= production tag::string() ;
factor-factor ::= expression expression (in::scope)? ;
massage ::= expression expression (in::scope)? ;
narrow-widen ::= expression expression (in::scope)? ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename-rename | reroot-reroot ;
 transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
remove ::= (vertical::production) | (horizontal::production) ;
upgrade-downgrade ::= production production ;
iterate-assoc ::= production production ;
fold ::= nonterminal::nonterminal (in::scope)? ;
extract ::= production (in::scope)? ;
--------------------slps::edd.bgf--------------------
config ::= ((start-grammar-symbol::string()) | (end-grammar-symbol::string()) | (line-continuation-symbol::string()) | (tabulation-symbol::string()) | (start-label-symbol::string()) | (end-label-symbol::string()) | (defining-symbol::string()) | (multiple-defining-symbol::string()) | (terminator-symbol::string()) | (definition-separator-symbol::string()) | (concatenate-symbol::string()) | (start-comment-symbol::string()) | (end-comment-symbol::string()) | (start-group-symbol::string()) | (end-group-symbol::string()) | (start-option-symbol::string()) | (end-option-symbol::string()) | (start-terminal-symbol::string()) | (end-terminal-symbol::string()) | (start-nonterminal-symbol::string()) | (end-nonterminal-symbol::string()) | (start-seplist-star-symbol::string()) | (end-seplist-star-symbol::string()) | (start-seplist-plus-symbol::string()) | (end-seplist-plus-symbol::string()) | (start-repetition-star-symbol::string()) | (end-repetition-star-symbol::string()) | (start-repetition-plus-symbol::string()) | (end-repetition-plus-symbol::string()) | (postfix-option-symbol::string()) | (postfix-repetition-star-symbol::string()) | (postfix-repetition-plus-symbol::string()) | (nonterminals-may-start-with::string()) | (nonterminals-may-contain::string()) | (nonterminal-if-contains::string()) | (terminal-if-undefined::((except::string())*)) | (nonterminal-if-defined::((except::string())*)) | (decompose-symbols::((except::string())*)) | (terminal-if-uppercase::α) | (terminal-if-lowercase::α) | (terminal-if-mixedcase::α) | (terminal-if-camelcase::α) | (nonterminal-if-uppercase::α) | (nonterminal-if-lowercase::α) | (nonterminal-if-mixedcase::α) | (nonterminal-if-camelcase::α) | (glue-nonalphanumeric-terminals::α) | (break-tokens-at-whitespace::α) | (disregard-labels::α) | (consider-indentation::α) | (ignore::(((newline::α) | (space::α) | (same-indentation::α) | (lines-containing::string()))+)) | (mask::(token::string() (terminal::string()) | (epsilon::α))))* ;
--------------------slps::ldf-Readable.bgf--------------------
selector ::= string() ;
subsection-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε) ;
list ::= (item::mixed)+ ;
section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε) ;
terminal ::= string() ;
mixed ::= (α | string())* ;
document ::= document-metadata part+ ;
type ::= (normative::ε) | (informative::ε) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
subsection-metadata ::= (id::ID)? subsection-role type? (title::string())? (author::person)* ;
section-metadata ::= (id::ID)? section-role type? (title::string())? (author::person)* ;
person ::= name::string() (affiliation::string())? (email::string())? ;
label ::= string() ;
part ::= part-metadata section+ ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
value ::= (int::ε) | (string::ε) ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
named-link ::= title::string() version-or-edition? (uri::anyURI)? ;
section-structure ::= (content::(content-content+)) | (placeholder::α) | (subsection+) ;
nonterminal ::= string() ;
part-metadata ::= (id::ID)? part-role (title::string())? (author::person)* ;
version-or-edition ::= (version::string()) | (edition::string()) ;
subsection ::= subsection-metadata section-structure ;
section ::= section-metadata section-structure ;
content-content ::= (para::mixed) | (list::list) | production ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε) ;
document-metadata ::= body? (number::string())? (author::person)* topic::string() status version-or-edition (previous::named-link)* date::timestamp ;
--------------------slps::ldf-v1.0-xsd.bgf--------------------
reference ::= string() ;
document ::= title::string() author::string() abstract::string() content::contentType ;
tail ::= mixedType ;
--------------------slps::ldf-v10.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(LexicalSection+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v11.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(LexicalSection+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v11.1-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
runnable ::= runnableType ;
informative ::= (note::simpleSection) | (example::simpleSection) | (informative::simpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (purpose::simpleSection) | (description::simpleSection) | (location::simpleSection) | (considerations::simpleSection) | (defaults::simpleSection) | (normative::simpleSection) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v11.2-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
runnable ::= runnableType ;
informative ::= (note::simpleSection) | (example::simpleSection) | (informative::simpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (purpose::simpleSection) | (description::simpleSection) | (location::simpleSection) | (considerations::simpleSection) | (defaults::simpleSection) | (normative::simpleSection) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v12.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
runnable ::= runnableType ;
informative ::= (note::simpleSection) | (example::simpleSection) | (informative::simpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (purpose::simpleSection) | (description::simpleSection) | (location::simpleSection) | (considerations::simpleSection) | (defaults::simpleSection) | (normative::simpleSection) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v13.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
runnable ::= runnableType ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::(production+)) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v13.1-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
runnable ::= runnableType ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::simpleSection) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v14.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
code ::= string() ;
runnable ::= runnableType ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
reference ::= string() ;
link ::= (text::string())? reference::string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::simpleSection) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v15.0-xsd.bgf--------------------
runnable ::= runnableType ;
mi ::= anyMath ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
mtext ::= anyMath ;
msub ::= anyMath ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
tail ::= mixedType ;
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
mrow ::= anyMath ;
code ::= string() ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::simpleSection) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v15.1-xsd.bgf--------------------
runnable ::= runnableType ;
mi ::= anyMath ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
mtext ::= anyMath ;
msub ::= anyMath ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
tail ::= mixedType ;
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
mrow ::= anyMath ;
code ::= string() ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::simpleSection) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v16.0-xsd.bgf--------------------
runnable ::= runnableType ;
mi ::= anyMath ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
mtext ::= anyMath ;
msub ::= anyMath ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
tail ::= mixedType ;
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
mrow ::= anyMath ;
code ::= string() ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::simpleSection) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v17.0-xsd.bgf--------------------
runnable ::= runnableType ;
mi ::= anyMath ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
mtext ::= anyMath ;
msub ::= anyMath ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
tail ::= mixedType ;
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
mrow ::= anyMath ;
code ::= string() ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::simpleSection) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v18.0-xsd.bgf--------------------
mi ::= anyMath ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
mtext ::= anyMath ;
link ::= (text::string())? reference::string() ;
msub ::= anyMath ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
mrow ::= anyMath ;
code ::= string() ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::simpleSection) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v18.1-xsd.bgf--------------------
mi ::= anyMath ;
informative ::= (rationale::simpleSection) | (example::simpleSection) | (update::simpleSection) ;
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
mtext ::= anyMath ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
msub ::= anyMath ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
mrow ::= anyMath ;
code ::= string() ;
keyword ::= string() ;
normative ::= (synopsis::simpleSection) | (description::simpleSection) | (syntax::simpleSection) | (constraints::simpleSection) | (relationship::simpleSection) | (semantics::simpleSection) | (default::simpleSection) ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v19.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
figure-metainfo ::= (short-caption::string())? caption::string() (id::string())? ;
lexical-section ::= lexical-section-metainfo::lexical-section-metainfo lexical-section-content::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
previous ::= title::string() (version::string()) | (edition::string()) (uri::string())? ;
list-section ::= list-section-metainfo::list-section-metainfo list-section-content::((term::term)+) ;
msub ::= anyMath ;
placeholder ::= (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) ;
part ::= part-metainfo::part-metainfo section+ ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
code ::= string() ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
term ::= name::string() definition::textual-content ;
list-section-metainfo ::= list-section-role::list-section-role (title::string())? (author::string())* (id::string())? ;
keyword ::= string() ;
structured-section ::= structured-section-metainfo::structured-section-metainfo structured-section-content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
element-role ::= (normative::normative-role) | (informative::informative-role) | (specific-section::simple-section) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
formula ::= α+ ;
section ::= (placeholder::placeholder) | (simple-section::simple-section) | (lexical-section::lexical-section) | (structured-section::structured-section) | (composite-section::composite-section) | (list-section::list-section) ;
document-metainfo ::= (body::body number::string()) | ((author::string())+) topic::string() status::status (version::string()) | (edition::string()) (previous::previous)* date::string() ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= figure-metainfo::figure-metainfo (figure-source::figure-source)+ ;
lexical-section-metainfo ::= lexical-section-role::lexical-section-role (title::string())? (author::string())* (id::string())? ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε) ;
composite-section ::= section+ ;
list ::= (item::mixed-type)+ ;
mi ::= anyMath ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | (figure::figure) | (table::table) | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
table-row ::= (table-cell::textual-content)+ ;
document ::= document-metainfo::document-metainfo (part::part)+ ;
mtext ::= anyMath ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | (placeholder::placeholder) | (value::(key::string() data::string())) | (element-role simple-section::simple-section) ;
structured-section-metainfo ::= title::string() (author::string())* (id::string())? ;
simple-section-metainfo ::= simple-section-role::simple-section-role (title::string())? (author::string())* (id::string())? ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
table ::= (header::table-row)* (row::table-row)+ ;
mrow ::= anyMath ;
part-metainfo ::= part-role::part-role (title::string())? (author::string())* (id::string())? ;
mixed-type ::= (α | string())* ;
simple-section ::= simple-section-metainfo::simple-section-metainfo simple-section-content::textual-content ;
math ::= anyMath ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v2.0-xsd.bgf--------------------
runnable ::= runnableType ;
document ::= title::string() author::string() abstract::string() content::contentType ;
reference ::= string() ;
sample ::= sampleType ;
tail ::= mixedType ;
--------------------slps::ldf-v2.1-xsd.bgf--------------------
runnable ::= runnableType ;
document ::= title::string() author::string() abstract::string() content::contentType ;
reference ::= string() ;
sample ::= sampleType ;
tail ::= mixedType ;
--------------------slps::ldf-v20.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
previous ::= title::string() (version::string()) | (edition::string()) (uri::string())? ;
list-section ::= role::list-section-role metainfo content::(term+) ;
msub ::= anyMath ;
placeholder ::= (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
part ::= role::part-role metainfo content::(section+) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
code ::= string() ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
term ::= name::string() definition::textual-content ;
keyword ::= string() ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε) ;
composite-section ::= section+ ;
list ::= (item::mixed-type)+ ;
mi ::= anyMath ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
table-row ::= (table-cell::textual-content)+ ;
document ::= title-page content::(part+) ;
mtext ::= anyMath ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
table ::= (header::table-row)* (row::table-row)+ ;
mrow ::= anyMath ;
mixed-type ::= (α | string())* ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
math ::= anyMath ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v20.1-xsd.bgf--------------------
textual-content ::= text-element+ ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
list-section ::= role::list-section-role metainfo content::(term+) ;
msub ::= anyMath ;
placeholder ::= (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
part ::= role::part-role metainfo content::(section+) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
code ::= string() ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
term ::= name::string() definition::textual-content ;
keyword ::= string() ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε) ;
composite-section ::= section+ ;
list ::= (item::mixed-type)+ ;
mi ::= anyMath ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
table-row ::= (table-cell::textual-content)+ ;
document ::= title-page content::(part+) ;
mtext ::= anyMath ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
table ::= (header::table-row)* (row::table-row)+ ;
mrow ::= anyMath ;
mixed-type ::= (α | string())* ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
math ::= anyMath ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v21.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anchor ::= id::string() ;
msub ::= anyMath ;
placeholder ::= (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
part ::= role::part-role metainfo content::(section+) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
code ::= string() ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
term ::= name::string() definition::textual-content ;
keyword ::= string() ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε) ;
composite-section ::= section+ ;
list ::= (item::mixed-type)+ ;
mi ::= anyMath ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
table-row ::= (table-cell::textual-content)+ ;
document ::= title-page content::(part+) ;
mtext ::= anyMath ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
table ::= (header::table-row)* (row::table-row)+ ;
mrow ::= anyMath ;
mixed-type ::= (α | string())* ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
math ::= anyMath ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v21.1-xsd.bgf--------------------
textual-content ::= text-element+ ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anchor ::= id::string() ;
msub ::= anyMath ;
placeholder ::= (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
part ::= role::part-role metainfo content::(section+) ;
status ::= (unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε) ;
code ::= string() ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
term ::= name::string() definition::textual-content ;
keyword ::= string() ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
varepsilon ::= ε ;
mo ::= anyMath ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε) ;
composite-section ::= section+ ;
list ::= (item::mixed-type)+ ;
mi ::= anyMath ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
table-row ::= (table-cell::textual-content)+ ;
document ::= title-page content::(part+) ;
mtext ::= anyMath ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
table ::= (header::table-row)* (row::table-row)+ ;
mrow ::= anyMath ;
mixed-type ::= (α | string())* ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
math ::= anyMath ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v22.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
link ::= (text::string())? (nonterminal::string()) | (reference::string()) | (external::string()) ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anchor ::= id::string() ;
msub ::= anyMath ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
placeholder ::= (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) ;
code ::= string() ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
term ::= name::string() definition::textual-content ;
keyword ::= string() ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
formula ::= α+ ;
content-content ::= (para::mixed-type) | (list::list-type) | production ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
varepsilon ::= ε ;
title-ve-uri ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
mo ::= anyMath ;
subsection-type ::= metadata::((id::string())? role::((synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε) | (description::ε) | (syntax::ε) | (example::ε) | (subsection::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
composite-section ::= section+ ;
mi ::= anyMath ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list-type) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
table-row ::= (table-cell::textual-content)+ ;
document ::= metadata::((body::((ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε)))? (number::string())? (author::person)* topic::string() status::((unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε)) (version::string()) | (edition::string()) (previous::title-ve-uri)* date::string()) (part::part-type)+ ;
mtext ::= anyMath ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
person ::= name::string() (affiliation::string())? (email::string())? ;
part-type ::= metadata::((id::string())? role::((front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε)) (title::string())? (author::person)*) (section::section-type)+ ;
table ::= (header::table-row)* (row::table-row)+ ;
mrow ::= anyMath ;
mixed-type ::= (α | string())* ;
simple-section ::= metainfo content::textual-content ;
list-type ::= (item::mixed-type)+ ;
math ::= anyMath ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v23.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
link ::= (text::string())? (nonterminal::string()) | (reference::string()) | (external::string()) ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anchor ::= id::string() ;
msub ::= anyMath ;
placeholder ::= (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
code ::= string() ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
term ::= name::string() definition::textual-content ;
keyword ::= string() ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
formula ::= α+ ;
content-content ::= (para::mixed-type) | (list::list-type) | production ;
figure ::= metainfo (source::figure-source)+ ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
varepsilon ::= ε ;
mo ::= anyMath ;
subsection-type ::= metadata::((id::string())? role::((synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
composite-section ::= any-section+ ;
mi ::= anyMath ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list-type) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
table-row ::= (table-cell::textual-content)+ ;
document ::= metadata::((body::((ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε)))? (number::string())? (author::person)* topic::string() status::((unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε)) (version::string()) | (edition::string()) (previous::named-link)* date::string()) (part::part-type)+ ;
mtext ::= anyMath ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
person ::= name::string() (affiliation::string())? (email::string())? ;
part-type ::= metadata::((id::string())? role::((front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε)) (title::string())? (author::person)*) (section::section-type)+ ;
table ::= (header::table-row)* (row::table-row)+ ;
named-link ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
mrow ::= anyMath ;
mixed-type ::= (α | string())* ;
simple-section ::= metainfo content::textual-content ;
list-type ::= (item::mixed-type)+ ;
math ::= anyMath ;
any-section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v3.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
top-section ::= (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) | (core::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= title::title (placeholder::generated)* frontMatter::frontMatter (languageOverview::ListOfTerms)? (lexicalSection::LexicalSection)+ top-section+ (annex::TopSection)* ;
reference ::= string() ;
sample ::= sampleType ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
lexical ::= (lineContinuations::ε) | (whitespace::ε) | (tokens::ε) | (preprocessor::ε) | (literals::ε) | (other::ε) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v4.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
top-section ::= (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= title::title (placeholder::generated)* frontMatter::frontMatter (languageOverview::ListOfTerms)? lexical+ (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
lexical ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v5.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
lexicals ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= title::title (placeholder::generated)* frontMatter::frontMatter lists::frontLists lexicalPart::lexical (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
lexical ::= lexicals+ ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v6.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= title::titlePage (placeholder::generated)* frontMatter::frontMatter lists::frontLists lexicalPart::lexical (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
lexical ::= lexicalGroup+ ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v7.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::frontMatter (lists::frontLists)? (lexicalPart::lexical)? (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
lexical ::= lexicalGroup+ ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::slps-btf.bgf--------------------
selector ::= string() ;
tree ::= (epsilon::ε) | (any::α) | (terminal::terminal) | (nonterminal::(production tree)) | (selectable::(selector::selector tree)) | (value::((int::integer()) | (string::string()))) | (sequence::(tree*)) | (choice::(expression tree)) | (optional::(tree?)) | (plus::(tree+)) | (star::(tree*)) ;
terminal ::= string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
nonterminal ::= string() ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
label ::= string() ;
root ::= grammar tree ;
value ::= (int::ε) | (string::ε) ;
--------------------slps::ldf-v7.1-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-sections+) (lists::frontLists)? (lexicalPart::lexical)? (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
front-simple-sections ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
lexical ::= lexicalGroup+ ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v8.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
lexical ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v8.1-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
lexical ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v9.0-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
lexical ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::ldf-v9.1-xsd.bgf--------------------
generated ::= (index::ε) | (fullgrammar::ε) | (listoftables::ε) | (listofauthors::ε) | (listofcontents::ε) | (listofreferences::ε) ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
runnable ::= runnableType ;
informative ::= (note::SimpleSection) | (example::SimpleSection) | (informative::SimpleSection) ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
normative ::= (purpose::SimpleSection) | (description::SimpleSection) | (location::SimpleSection) | (considerations::SimpleSection) | (defaults::SimpleSection) | (normative::SimpleSection) ;
lexical ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
body ::= (ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (ietf::ε) | (iec::ε) | (oasis::ε) | (wsa::ε) | (w3c::ε) ;
status ::= (unknown::ε) | (draft::ε) | (committee draft::ε) | (recommendation::ε) | (international standard::ε) ;
tail ::= mixedType ;
--------------------slps::slps-cbgf-xsd.bgf--------------------
disappear-appear ::= production ;
horizontal-vertical ::= nonterminal::nonterminal ;
unchain-chain ::= production ;
terminal ::= string() ;
 terminal ::= string() ;
widen ::= expression expression (in::scope)? ;
unlabel ::= label::label ;
iterate ::= production ;
yaccify-deyaccify ::= production+ ;
folding-unfolding-transformation ::= unfold-fold | fold-unfold | inline-extract | extract-inline | abridge-detour | detour-abridge | unchain-chain | chain-unchain ;
 folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
decorative-transformation ::= designate-unlabel | unlabel-designate | deanonymize-anonymize | anonymize-deanonymize ;
 decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define-undefine | undefine-define | inject-project | project-inject | replace-replace ;
 abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
vertical ::= scope ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
label ::= string() ;
 label ::= string() ;
introduce-eliminate ::= production+ ;
deyaccify ::= nonterminal::nonterminal ;
abstractize ::= production ;
value ::= (int::ε) | (string::ε) ;
 value ::= (int::ε) | (string::ε) ;
split-unite ::= add::(production+) to::(production+) in::(scope+) ;
widen-narrow ::= expression expression (in::scope)? ;
increasing-decreasing-transformation ::= add-remove | remove-add | appear-disappear | disappear-appear | widen-narrow | narrow-widen | upgrade-downgrade | downgrade-upgrade | unite-split | split-unite ;
appear-disappear ::= production ;
bypass ::= ε ;
define-undefine ::= production+ ;
fold-unfold ::= nonterminal::nonterminal (in::scope)? ;
extract-inline ::= production (in::scope)? ;
rassoc ::= production ;
unite ::= add::nonterminal to::nonterminal ;
distribute ::= scope ;
selector ::= string() ;
 selector ::= string() ;
inject-project ::= production ;
abridge-detour ::= production ;
narrow ::= expression expression (in::scope)? ;
vertical-horizontal ::= nonterminal::nonterminal ;
concrete-revising-transformation ::= abstractize-concretize | concretize-abstractize | permute-permute ;
 concrete-revising-transformation ::= abstractize | concretize | permute ;
detour ::= production ;
remove-add ::= (vertical::production) | (horizontal::production) ;
scope ::= (label::label) | (nonterminal::nonterminal) ;
 scope ::= (label::label) | (nonterminal::nonterminal) ;
unfold-fold ::= nonterminal::nonterminal (in::scope)? ;
roots ::= (root::nonterminal)* ;
factor ::= expression expression (in::scope)? ;
reroot-reroot ::= from::roots to::roots ;
inline-extract ::= production (in::scope)? ;
nonterminal ::= string() ;
 nonterminal ::= string() ;
massage-massage ::= expression expression (in::scope)? ;
unchain ::= production ;
project-inject ::= production ;
downgrade-upgrade ::= production production ;
unlabel-designate ::= production ;
designate-unlabel ::= production ;
assoc-iterate ::= production production ;
chain ::= production ;
sequence ::= (transformation | atomic)* ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
chain-unchain ::= production ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
define ::= production+ tag::string() ;
anonymize-deanonymize ::= production ;
deanonymize-anonymize ::= production ;
deyaccify-yaccify ::= production+ ;
equate-clone ::= align::(production+) with::nonterminal in::(scope+) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
permute ::= production ;
detour-abridge ::= production ;
replace ::= expression expression (in::scope)? tag::string() ;
eliminate-introduce ::= production+ ;
add-remove ::= (vertical::production) | (horizontal::production) ;
abstractize-concretize ::= production ;
redefine ::= production+ tag::string() ;
unite-split ::= add::(production+) to::(production+) in::(scope+) ;
rename-rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
atomic ::= transformation+ ;
abridge ::= production ;
lassoc ::= production ;
equate ::= align::nonterminal with::nonterminal ;
import ::= production+ ;
horizontal ::= nonterminal::nonterminal ;
disappear ::= production ;
eliminate ::= nonterminal::nonterminal ;
add ::= (vertical::production) | (horizontal::production) ;
permute-permute ::= production production ;
introduce ::= production+ ;
upgrade ::= production production ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
split ::= nonterminal::nonterminal production+ scope* ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
project ::= production tag::string() ;
concretize-abstractize ::= production ;
inline ::= nonterminal ;
clone-equate ::= align::(production+) with::nonterminal in::(scope+) ;
strip ::= (label::label) | (allLabels::ε) | (selector::selector) | (allSelectors::ε) | (terminal::terminal) | (allTerminals::ε) ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
 expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage-massage | factor-factor | deyaccify-yaccify | yaccify-deyaccify | eliminate-introduce | introduce-eliminate | vertical-horizontal | horizontal-vertical | assoc-iterate | iterate-assoc | equate-clone | clone-equate ;
 refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
reroot ::= (root::nonterminal)* ;
appear ::= production ;
designate ::= production ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
undefine-define ::= production+ ;
yaccify ::= production+ ;
deanonymize ::= production ;
inject ::= production tag::string() ;
factor-factor ::= expression expression (in::scope)? ;
massage ::= expression expression (in::scope)? ;
narrow-widen ::= expression expression (in::scope)? ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename-rename | reroot-reroot ;
 transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
remove ::= (vertical::production) | (horizontal::production) ;
upgrade-downgrade ::= production production ;
iterate-assoc ::= production production ;
fold ::= nonterminal::nonterminal (in::scope)? ;
extract ::= production (in::scope)? ;
--------------------slps::slps-edd.bgf--------------------
config ::= ((start-grammar-symbol::string()) | (end-grammar-symbol::string()) | (line-continuation-symbol::string()) | (tabulation-symbol::string()) | (start-label-symbol::string()) | (end-label-symbol::string()) | (defining-symbol::string()) | (multiple-defining-symbol::string()) | (terminator-symbol::string()) | (definition-separator-symbol::string()) | (concatenate-symbol::string()) | (start-comment-symbol::string()) | (end-comment-symbol::string()) | (start-group-symbol::string()) | (end-group-symbol::string()) | (start-option-symbol::string()) | (end-option-symbol::string()) | (start-terminal-symbol::string()) | (end-terminal-symbol::string()) | (start-nonterminal-symbol::string()) | (end-nonterminal-symbol::string()) | (start-seplist-star-symbol::string()) | (end-seplist-star-symbol::string()) | (start-seplist-plus-symbol::string()) | (end-seplist-plus-symbol::string()) | (start-repetition-star-symbol::string()) | (end-repetition-star-symbol::string()) | (start-repetition-plus-symbol::string()) | (end-repetition-plus-symbol::string()) | (postfix-option-symbol::string()) | (postfix-repetition-star-symbol::string()) | (postfix-repetition-plus-symbol::string()) | (nonterminals-may-start-with::string()) | (nonterminals-may-contain::string()) | (nonterminal-if-contains::string()) | (terminal-if-undefined::((except::string())*)) | (nonterminal-if-defined::((except::string())*)) | (decompose-symbols::((except::string())*)) | (terminal-if-uppercase::α) | (terminal-if-lowercase::α) | (terminal-if-mixedcase::α) | (terminal-if-camelcase::α) | (nonterminal-if-uppercase::α) | (nonterminal-if-lowercase::α) | (nonterminal-if-mixedcase::α) | (nonterminal-if-camelcase::α) | (glue-nonalphanumeric-terminals::α) | (break-tokens-at-whitespace::α) | (disregard-labels::α) | (consider-indentation::α) | (ignore::(((newline::α) | (space::α) | (same-indentation::α) | (lines-containing::string()))+)) | (mask::(token::string() (terminal::string()) | (epsilon::α))))* ;
--------------------slps::slps-exbgf.bgf--------------------
sequence ::= (atomic | shielded | shieldedD | shieldedU | tempunfold | atomicI | atomicC | atomicH | atomicV | yaccifyH | deyaccifyH | deyaccifyC | regroupLR | regroupRL | massage1S2P | massageS12P | massageC2S | massage12C | massageO2C | massageC2O | massage-double | massageOP2S | promoteP2S | promoteY2S | double-inline | inlineYO | inlineYF | unite-many | eliminate-many | distributeV | distributeH | inlineY | inlineYH | inlineV | inlineU | chainV | chainX | introduceH | defineH | reyaccify | reextract | reextractY | extract-twice | redefine | redefineH | metachangeT2N | renameN | addV | addH | addX | removeV | removeH | extractV | extractC | narrowS21 | narrowP21 | narrowO21 | widen12O | widen12S | widen12P | widenP2S | unfoldV | unfold | unfoldY | foldY | factor-out | pull-out)* ;
--------------------slps::slps-lcf.bgf--------------------
derived ::= from::string() using::string() ;
phase ::= (step::((perform-transformation::string()) | automated-transformation))+ ;
source ::= name::string() derived? source-grammar source-tree? test-set::(xstring*) ;
tools ::= transformer::tool comparator::tool (validator::tool)? generator* ;
xstring ::= ((expand::string()) | string())* ;
tool ::= grammar::xstring (tree::xstring)? ;
automated-transformation ::= method::string() result::string() ;
shortcut ::= name::string() expansion::xstring ;
source-grammar ::= extraction::xstring (parsing::xstring)? (evaluation::xstring)? ;
generator ::= name::string() command::xstring ;
branch ::= input::string() (preparation::phase)? (nominal-matching::phase)? (normalizing::phase)? (structural-matching::phase)? ((extension::phase) | (correction::phase) | (relaxation::phase))* ;
target ::= name::string() branch+ ;
source-tree ::= extraction::xstring (evaluation::xstring)? ;
testset ::= name::string() command::xstring ;
scenario ::= shortcut* tools source+ target+ testset* ;
--------------------slps::slps-xbgf-xsd.bgf--------------------
terminal ::= string() ;
unlabel ::= label::label ;
widen ::= expression expression (in::scope)? ;
iterate ::= production ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
vertical ::= scope ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
label ::= string() ;
deyaccify ::= nonterminal::nonterminal ;
abstractize ::= production ;
value ::= (int::ε) | (string::ε) ;
bypass ::= ε ;
rassoc ::= production ;
unite ::= add::nonterminal to::nonterminal ;
distribute ::= scope ;
selector ::= string() ;
narrow ::= expression expression (in::scope)? ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
detour ::= production ;
scope ::= (label::label) | (nonterminal::nonterminal) ;
factor ::= expression expression (in::scope)? ;
nonterminal ::= string() ;
unchain ::= production ;
chain ::= production ;
sequence ::= (transformation | atomic)* ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
define ::= production+ tag::string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
permute ::= production ;
replace ::= expression expression (in::scope)? tag::string() ;
redefine ::= production+ tag::string() ;
atomic ::= transformation+ ;
abridge ::= production ;
equate ::= align::nonterminal with::nonterminal ;
lassoc ::= production ;
import ::= production+ ;
horizontal ::= nonterminal::nonterminal ;
disappear ::= production ;
eliminate ::= nonterminal::nonterminal ;
add ::= (vertical::production) | (horizontal::production) ;
introduce ::= production+ ;
upgrade ::= production production ;
split ::= nonterminal::nonterminal production+ scope* ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
inline ::= nonterminal ;
project ::= production tag::string() ;
strip ::= (label::label) | (allLabels::ε) | (selector::selector) | (allSelectors::ε) | (terminal::terminal) | (allTerminals::ε) ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
reroot ::= (root::nonterminal)* ;
appear ::= production ;
yaccify ::= production+ ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
designate ::= production ;
deanonymize ::= production ;
inject ::= production tag::string() ;
massage ::= expression expression (in::scope)? ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
remove ::= (vertical::production) | (horizontal::production) ;
fold ::= nonterminal::nonterminal (in::scope)? ;
extract ::= production (in::scope)? ;
--------------------slps::slps-xedd.bgf--------------------
introduce ::= metasymbol::confixMetasymbols start::string() end::string() ;
rename ::= metasymbol::metasymbols from::string() to::string() ;
step ::= rename | introduce | eliminate ;
evolution ::= step* ;
metasymbols ::= (terminator::ε) | (defining::ε) | (definition-separator::ε) | (group::ε) | (seplist-plus::ε) | (seplist-star::ε) ;
eliminate ::= metasymbol::metasymbols ;
--------------------slps::slps-xldf.bgf--------------------
terminal ::= string() ;
 terminal ::= string() ;
unlabel ::= label::label ;
widen ::= expression expression (in::scope)? ;
iterate ::= production ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
vertical ::= scope ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
label ::= string() ;
 label ::= string() ;
deyaccify ::= nonterminal::nonterminal ;
abstractize ::= production ;
value ::= (int::ε) | (string::ε) ;
 value ::= (int::ε) | (string::ε) ;
drop ::= section::string() ;
bypass ::= ε ;
rassoc ::= production ;
unite ::= add::nonterminal to::nonterminal ;
distribute ::= scope ;
selector ::= string() ;
 selector ::= string() ;
narrow ::= expression expression (in::scope)? ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
detour ::= production ;
hyperlinkify ::= goal::string() uri::string() ;
scope ::= (label::label) | (nonterminal::nonterminal) ;
factor ::= expression expression (in::scope)? ;
relative ::= (before::((id::string()) | simpleTextElement)) | (after::((id::string()) | simpleTextElement)) | (to::string()) ;
nonterminal ::= string() ;
 nonterminal ::= string() ;
unchain ::= production ;
chain ::= production ;
combine ::= section::string() with::string() ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
define ::= production+ tag::string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
insert ::= relative content::simpleText ;
permute ::= production ;
replace ::= expression expression (in::scope)? tag::string() ;
redefine ::= production+ tag::string() ;
abridge ::= production ;
lassoc ::= production ;
equate ::= align::nonterminal with::nonterminal ;
import ::= production+ ;
horizontal ::= nonterminal::nonterminal ;
disappear ::= production ;
eliminate ::= nonterminal::nonterminal ;
add ::= (vertical::production) | (horizontal::production) ;
introduce ::= production+ ;
upgrade ::= production production ;
split ::= nonterminal::nonterminal production+ scope* ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
append ::= where::string() content::simpleText ;
inline ::= nonterminal ;
project ::= production tag::string() ;
strip ::= (label::label) | (allLabels::ε) | (selector::selector) | (allSelectors::ε) | (terminal::terminal) | (allTerminals::ε) ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
 expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
reroot ::= (root::nonterminal)* ;
appear ::= production ;
designate ::= production ;
yaccify ::= production+ ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
deanonymize ::= production ;
inject ::= production tag::string() ;
massage ::= expression expression (in::scope)? ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
place ::= section::string() inside::string() ;
retitle ::= from::((id::string()) | (title::string())) to::string() ;
remove ::= (vertical::production) | (horizontal::production) ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------slps::xbgf-xsd.bgf--------------------
terminal ::= string() ;
unlabel ::= label::label ;
widen ::= expression expression (in::scope)? ;
iterate ::= production ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
vertical ::= scope ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
label ::= string() ;
deyaccify ::= nonterminal::nonterminal ;
abstractize ::= production ;
value ::= (int::ε) | (string::ε) ;
bypass ::= ε ;
rassoc ::= production ;
unite ::= add::nonterminal to::nonterminal ;
distribute ::= scope ;
selector ::= string() ;
narrow ::= expression expression (in::scope)? ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
detour ::= production ;
scope ::= (label::label) | (nonterminal::nonterminal) ;
factor ::= expression expression (in::scope)? ;
nonterminal ::= string() ;
unchain ::= production ;
chain ::= production ;
sequence ::= (transformation | atomic)* ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
define ::= production+ tag::string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
permute ::= production ;
replace ::= expression expression (in::scope)? tag::string() ;
redefine ::= production+ tag::string() ;
atomic ::= transformation+ ;
abridge ::= production ;
equate ::= align::nonterminal with::nonterminal ;
lassoc ::= production ;
import ::= production+ ;
horizontal ::= nonterminal::nonterminal ;
disappear ::= production ;
eliminate ::= nonterminal::nonterminal ;
add ::= (vertical::production) | (horizontal::production) ;
introduce ::= production+ ;
upgrade ::= production production ;
split ::= nonterminal::nonterminal production+ scope* ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
inline ::= nonterminal ;
project ::= production tag::string() ;
strip ::= (label::label) | (allLabels::ε) | (selector::selector) | (allSelectors::ε) | (terminal::terminal) | (allTerminals::ε) ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
reroot ::= (root::nonterminal)* ;
appear ::= production ;
yaccify ::= production+ ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
designate ::= production ;
deanonymize ::= production ;
inject ::= production tag::string() ;
massage ::= expression expression (in::scope)? ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
remove ::= (vertical::production) | (horizontal::production) ;
fold ::= nonterminal::nonterminal (in::scope)? ;
extract ::= production (in::scope)? ;
