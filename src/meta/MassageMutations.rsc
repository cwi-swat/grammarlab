@contributor{Vadim Zaytsev - vadim@grammarware.net - UvA}
module meta::MassageMutations

import IO;
import String;
import grammarlab::lib::Sizes;

void main()
{
	int cx = 0;
	str buf = "@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI; UvA}
	'@contributor{Generated by meta::MassageMutations, do not edit manually!}
	'@doc{Contains $$CX$$ mutations intentionally generalised from massage-equivalence.}
	'module grammarlab::transform::SLEIR_Massage
	'
	'import grammarlab::language::Grammar;
	'import grammarlab::language::SLEIR;
	'";
	for(
		str line <- readFileLines(|project://grammarlab/src/grammarlab/transform/XBGF.rsc|),
		/bool massage_eq\(\{<zet:[^}]+>\}\) = true; \/\/@<left:[^-]+>-<right:.*>$/ := line
	)
	{
		pair = split(", ",zet);
		if (isEmpty(right))
		{
			f = ""; t = "";
			if (contains(pair[0],"_") && !contains(pair[1],"_")) {f = pair[0]; t = pair[1];}
			elseif (!contains(pair[0],"_") && contains(pair[1],"_")) {f = pair[1]; t = pair[0];}
			else {buf += "//ERROR: <pair[0]> =\> <pair[1]>";continue;}
			buf += function("Massage<left>",f,t);
			cx += 1;
		} 
		else
		{
			buf += function("Massage<left>2<right>",pair[0],pair[1]);
			buf += function("Massage<right>2<left>",pair[1],pair[0]);
			cx += 2;
		}
	}
	writeFile(|project://grammarlab/src/grammarlab/transform/SLEIR_Massage.rsc|,replaceAll(buf,"$$CX$$","<cx>"));
}

str function(str name, str from, str to) =
	"
	'// SLEIR:<name>
	'@doc{massage ‚ä¢ <name>, Type III, page 9}
	'public GGrammar mutate(<name>(), GGrammar g)
	'{
	'	g.P = visit(g.P){case <from> =\> <to>};
	'	return g;
	'}";
