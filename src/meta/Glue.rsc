@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI}
module meta::Glue

import grammarlab::extract::EBNF2Rascal;
import grammarlab::language::EBNF;
import grammarlab::language::Grammar;
import List;
import Set;
import Map;
import IO;

import grammarlab::extract::RascalADT2BGF;

public EBNF GlueEBNF = (
	epsilon_metasymbol(): "ε",
	empty_metasymbol(): "φ",
	universal_metasymbol(): "α",
	start_label_symbol(): "[",
	end_label_symbol(): "]::",
	start_mark_symbol(): "\<",
	end_mark_symbol(): "\>:",
	defining_symbol(): " ::= ",		// or '='?
	terminator_symbol(): " ;",
	definition_separator_symbol(): " | ",
	disjunction_symbol(): " | ",
	concatenate_symbol(): " ",
	start_comment_symbol(): "//",
	end_comment_symbol(): "\n",
	start_group_symbol(): "(",
	end_group_symbol(): ")",
	start_terminal_symbol(): "\"",
	end_terminal_symbol(): "\"",
	//start_nonterminal_symbol(): "",
	//end_nonterminal_symbol(): "",
	start_seplist_star_symbol(): "{",
	end_seplist_star_symbol(): "}*",
	start_seplist_plus_symbol(): "{",
	end_seplist_plus_symbol(): "}+",
	postfix_option_symbol(): "?",
	postfix_repetition_star_symbol(): "*",
	postfix_repetition_plus_symbol(): "+",
	conjunction_symbol(): " & ",
	exception_symbol(): " &! ",
	prefix_negation_symbol(): "¬"
);

void main()
{
	// Generate grammarlab::language::glue::Productions
	writeFile(|project://grammarlab/src/grammarlab/language/glue/Productions.rsc|,
		"@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI}
		'@contributor{Generated by meta::Glue, do not edit manually!}"
		+EDD2Rascal(GlueEBNF,"Glue","grammarlab::language::glue::Productions"));
	// Generate grammarlab::language::glue::Keywords
	G = grammarlab::extract::RascalADT2BGF::extractG(|project://grammarlab/src/grammarlab/language/X.rsc|);
	cs = (s:e | production("XCommand",choice(L)) <- G.P, label(s,e) <- L);
	csd = sort(domain(cs));
	writeFile(|project://grammarlab/src/grammarlab/language/glue/Keywords.rsc|,
		("@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI}
		 '@contributor{Generated by meta::Glue, do not edit manually!}
		 'module grammarlab::language::glue::Keywords\n"
		| "<it>\nlexical GlueK<s> = @category=\"MetaVariable\" \"<s>\";" | s <- csd)
		+ "\n\nkeyword GlueKw = GlueK"
		+ intercalate(" | GlueK", csd)
		+ ";\n");
	// Generate grammarlab::language::glue::Commands
	writeFile(|project://grammarlab/src/grammarlab/language/glue/Commands.rsc|,
	"@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI}
	'@contributor{Generated by meta::Glue, do not edit manually!}
	'module grammarlab::language::glue::Commands\n
	'extend grammarlab::language::glue::Keywords;
	'import grammarlab::language::Grammar;
	'import grammarlab::language::XScope;\n
	'syntax GlueCommand
	'	= "
	+intercalate("\n\t| ",["GlueK<c> <g(cs[c])> \".\"" | c <- csd])
	+"\n\t;"	);
}

str g(GExpr e) = intercalate(" ",[convertGType(s) | sequence(L) := e, mark(_,s) <- L]);

str convertGType(val(string())) = "GlueString";
str convertGType(val(integer())) = "GlueInteger";
str convertGType(val(boolean())) = "GlueBoolean";
str convertGType(nonterminal("GProd")) = "GlueProduction";
str convertGType(nonterminal("GProdList")) = "GlueProduction+";
str convertGType(nonterminal("GExpr")) = "GlueSymbol";
str convertGType(nonterminal("XScope")) = "GlueScope";
str convertGType(star(GExpr e)) = convertGType(e)+"+";
default str convertGType(GExpr e) = "value";
