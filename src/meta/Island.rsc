module meta::Island

import grammarlab::io::GLUE;
import grammarlab::language::glue::abstract::Top;
import grammarlab::language::GLUE;

import grammarlab::language::Grammar;
import grammarlab::language::XScope;
import grammarlab::language::X;

XSequence afterMutations = [
	// adapt using
	inline("using-alias-directive"),
	inline("using-namespace-directive"),
	factor(
		choice([
			sequence([
				terminal("using"),
				nonterminal("identifier"),
				terminal("="),
				nonterminal("namespace-or-type-name"),
				terminal(";")
			]),
			sequence([
				terminal("using"),
				nonterminal("namespace-name"),
				terminal(";")
			])
		]),
		sequence([
			terminal("using"),
			choice([
				nonterminal("namespace-name"),
				sequence([
					nonterminal("identifier"),
					terminal("="),
					nonterminal("namespace-or-type-name")
				])
			]),
			terminal(";")
		]),
		innt("using-directive")),
	extract(
		production(
		"using-directive-insides",
		choice([
				nonterminal("namespace-name"),
				sequence([
					nonterminal("identifier"),
					terminal("="),
					nonterminal("namespace-or-type-name")
				])
			])),
		globally()),
	inline("using-directive"),
	// adapt global attribute
	splitT(",]",[",","]"],innt("global-attribute-section")),
	factor(
		choice([
			sequence([
				terminal("["),
				nonterminal("global-attribute-target-specifier"),
				nonterminal("attribute-list"),
				terminal("]")
			]),
			sequence([
				terminal("["),
				nonterminal("global-attribute-target-specifier"),
				nonterminal("attribute-list"),
				terminal(","),
				terminal("]")
			])
		]),
		sequence([
			terminal("["),
			nonterminal("global-attribute-target-specifier"),
			choice([
				nonterminal("attribute-list"),
				sequence([
					nonterminal("attribute-list"),
					terminal(",")
				])
			]),
			terminal("]")
		]),
		innt("global-attribute-section")),
	inline("global-attribute-target-specifier"),
	inline("global-attribute-target"),
	extract(
		production(
		"global-attribute-section-insides",
		choice([
			nonterminal("attribute-list"),
			sequence([
				nonterminal("attribute-list"),
				terminal(",")
				])
			])),
		globally()),
	// adapt namespace
	bypass()
	];
	
XSequence m3 = [
	splitT(",]",[",","]"],innt("attribute-section")),
	factor(
		choice([
			sequence([
				terminal("["),
				optional(nonterminal("attribute-target-specifier")),
				nonterminal("attribute-list"),
				terminal("]")
				]),
			sequence([
				terminal("["),
				optional(nonterminal("attribute-target-specifier")),
				nonterminal("attribute-list"),
				terminal(","),
				terminal("]")
				])
		]),
		sequence([
			terminal("["),
			choice([
			sequence([
				optional(nonterminal("attribute-target-specifier")),
				nonterminal("attribute-list")
				]),
			sequence([
				optional(nonterminal("attribute-target-specifier")),
				nonterminal("attribute-list"),
				terminal(",")
				])
			]),
			terminal("]")
		]),
		innt("attribute-section")
	),
	extract(
		production("attribute-section-insides",choice([
			sequence([
				optional(nonterminal("attribute-target-specifier")),
				nonterminal("attribute-list")
				]),
			sequence([
				optional(nonterminal("attribute-target-specifier")),
				nonterminal("attribute-list"),
				terminal(",")
				])
		])),
		globally()
	),
	vertical(innt("namespace-member-declaration")),
	appear(production("namespace-member-declaration",sequence([
  		mark("",star(nonterminal("attribute-section"))),
      	mark("",star(nonterminal("modifier"))),
      	nonterminal("namespace-declaration")
    ]))),
	inline("type-declaration"),
	horizontal(innt("namespace-member-declaration")),
	factor(
		choice([
	      sequence([
	          star(nonterminal("attribute-section")),
	          star(nonterminal("modifier")),
	          nonterminal("namespace-declaration")
	        ]),
	      sequence([
	          star(nonterminal("attribute-section")),
	          star(nonterminal("modifier")),
	          nonterminal("type-declaration-insides")
	        ])
	    ]),
	    sequence([
	        star(nonterminal("attribute-section")),
            star(nonterminal("modifier")),
		    choice([
		          nonterminal("namespace-declaration"),
		          nonterminal("type-declaration-insides")
		    ])
		]),
	    innt("namespace-member-declaration")
	),
	extract(production("namespace-member-declaration-insides",choice([
		          nonterminal("namespace-declaration"),
		          nonterminal("type-declaration-insides")
		    ])),globally()),
	//inline("namespace-declaration"),
	//extract(production("","namespace-body-insides",
	//	sequence([
	//		star(sequence([
	//			terminal("using"),
	//			nonterminal("using-directive-insides"),
	//			terminal(";")
	//		])),
	//		star(nonterminal("namespace-member-declaration"))
	//	])),
	//	globally()),
	//inline("namespace-body"),
	bypass()
];

XSequence m2 = [
	inline("class-declaration"),
	inline("struct-declaration"),
	inline("interface-declaration"),
	inline("enum-declaration"),
	inline("delegate-declaration"),
	renameN("class-modifier","modifier"),
	unite("struct-modifier","modifier"),
	unite("interface-modifier","modifier"),
	unite("enum-modifier","modifier"),
	unite("delegate-modifier","modifier"),
	factor(
		choice([
			sequence([
				star(nonterminal("attribute-section")),
				star(nonterminal("modifier")),
				terminal("class"),
				nonterminal("identifier"),
				optional(nonterminal("class-base")),
				nonterminal("class-body"),
				optional(terminal(";"))
				]),
			sequence([
				star(nonterminal("attribute-section")),
				star(nonterminal("modifier")),
				terminal("struct"),
				nonterminal("identifier"),
				optional(nonterminal("struct-interfaces")),
				nonterminal("struct-body"),
				optional(terminal(";"))
				]),
			sequence([
				star(nonterminal("attribute-section")),
				star(nonterminal("modifier")),
				terminal("interface"),
				nonterminal("identifier"),
				optional(nonterminal("interface-base")),
				nonterminal("interface-body"),
				optional(terminal(";"))
				]),
			sequence([
				star(nonterminal("attribute-section")),
				star(nonterminal("modifier")),
				terminal("enum"),
				nonterminal("identifier"),
				optional(nonterminal("enum-base")),
				nonterminal("enum-body"),
				optional(terminal(";"))
				]),
			sequence([
				star(nonterminal("attribute-section")),
				star(nonterminal("modifier")),
				terminal("delegate"),
				nonterminal("type"),
				nonterminal("identifier"),
				terminal("("),
				optional(nonterminal("formal-parameter-list")),
				terminal(")"),
				terminal(";")
				])
		]),
		sequence([
			star(nonterminal("attribute-section")),
			star(nonterminal("modifier")),
			choice([
				sequence([
					terminal("class"),
					nonterminal("identifier"),
					optional(nonterminal("class-base")),
					nonterminal("class-body"),
					optional(terminal(";"))
					]),
				sequence([
					terminal("struct"),
					nonterminal("identifier"),
					optional(nonterminal("struct-interfaces")),
					nonterminal("struct-body"),
					optional(terminal(";"))
					]),
				sequence([
					terminal("interface"),
					nonterminal("identifier"),
					optional(nonterminal("interface-base")),
					nonterminal("interface-body"),
					optional(terminal(";"))
					]),
				sequence([
					terminal("enum"),
					nonterminal("identifier"),
					optional(nonterminal("enum-base")),
					nonterminal("enum-body"),
					optional(terminal(";"))
					]),
				sequence([
					terminal("delegate"),
					nonterminal("type"),
					nonterminal("identifier"),
					terminal("("),
					optional(nonterminal("formal-parameter-list")),
					terminal(")"),
					terminal(";")
					])
			])
		]),
		innt("type-declaration")),
	extract(
		production("type-declaration-insides",choice([
		sequence([
			terminal("class"),
			nonterminal("identifier"),
			optional(nonterminal("class-base")),
			nonterminal("class-body"),
			optional(terminal(";"))
			]),
		sequence([
			terminal("struct"),
			nonterminal("identifier"),
			optional(nonterminal("struct-interfaces")),
			nonterminal("struct-body"),
			optional(terminal(";"))
			]),
		sequence([
			terminal("interface"),
			nonterminal("identifier"),
			optional(nonterminal("interface-base")),
			nonterminal("interface-body"),
			optional(terminal(";"))
			]),
		sequence([
			terminal("enum"),
			nonterminal("identifier"),
			optional(nonterminal("enum-base")),
			nonterminal("enum-body"),
			optional(terminal(";"))
			]),
		sequence([
			terminal("delegate"),
			nonterminal("type"),
			nonterminal("identifier"),
			terminal("("),
			optional(nonterminal("formal-parameter-list")),
			terminal(")"),
			terminal(";")
			])
		])),
		globally()),
	// TODO: maybe just make unite more advanced?
	vertical(innt("modifier")),
	horizontal(innt("modifier")),
	bypass()
];

void go()
{
	//xbgf = afterMutations+m2+m3;
	GLUE gs = [xbgf(x) | x <- afterMutations+m2+m3, bypass() != x];
	writeGlue(gs,|project://grammarlab/src/demo/AdaptCSharp.glue|);
}