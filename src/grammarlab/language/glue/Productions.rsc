@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI}
@contributor{Generated by meta::Glue, do not edit manually!}module grammarlab::language::glue::Productions
// import util::IDE; // needed only for advanced IDE support
import String; import IO;
import grammarlab::language::Grammar;
import grammarlab::io::Grammar;
import grammarlab::lib::Sizes;
start syntax GlueGrammar = GlueProduction*;
syntax GlueProduction = GlueNonterminal "::=" {GlueDefinition "|"}+ ";";
syntax GlueDefinition = GlueSymbol+;
syntax GlueSymbol
 = nonterminal: GlueNonterminal
 | terminal: GlueTerminal
 | labelled: "[" GlueLabel "]::" GlueSymbol
 | marked: "\<" GlueMark "\>:" GlueSymbol
 | group: "(" {GlueDefinition "|"}+ ")"
 | optional: GlueSymbol "?"
 | star: GlueSymbol "*"
 | plus: GlueSymbol "+"
 | sepliststar: "{" GlueSymbol GlueSymbol "}*"
 | seplistplus: "{" GlueSymbol GlueSymbol "}+";
lexical GlueTerminal = @category="Constant" "\"" GlueTerminalSymbols name "\"";
lexical GlueTerminalSymbols = ![\"]* !>> ![\"];
lexical GlueNonterminal = @category="Identifier"  GlueNonterminalSymbols name ;
lexical GlueLabel = @category="NonterminalLabel" ![\]]+ >> [\]];
lexical GlueMark = @category="NonterminalLabel" ![\>]* >> [\>];
lexical GlueNonterminalSymbols = [A-Za-z_01-9]+ !>> [A-Za-z_01-9];
layout GlueLayoutList = GlueLayout* !>> [\t-\n \r \  ] !>> "//";
lexical GlueLayout = [\t-\n \r \  ] | GlueComment ;
lexical GlueComment = @category="Comment" "//" ![\n]* [\n];

//Tree getGlue(str s,loc z) = parse(#GlueGrammar,z);
//public void registerGlue() = registerLanguage("Glue","glue",getGlue);

Tree parseGlue(loc z) = parse(#GlueGrammar, trim(readFile(z)));
GGrammar mapG((GlueGrammar)`<GlueProduction* ps>`)
{
	GProdList ps2 = []; list[str] nts = [];
	for(p <- ps){p2 = mapP(p); if(p.lhs notin nts)nts+=p.lhs; ps2+=p2;}
	return grammar(nts, [], ps2);
}
GProd mapP((GlueProduction)`<GlueNonterminal lhs>::=<{GlueDefinition "|"}+ rhds>;`) = production("<lhs>",mapDs(rhds));
GExpr mapDs({GlueDefinition "|"}+ ds)
{
	GExprList es = [mapE(d) | GlueDefinition d <- ds];
	return (len(es)==1) ? es[0] : choice(es);
}
GExpr mapE((GlueDefinition)`<GlueSymbol s>`) = mapS(s);
default GExpr mapE((GlueDefinition)`<GlueSymbol+ ss>`) = sequence([mapS(s) | GlueSymbol s <- ss]);
GExpr mapS((GlueSymbol)`<GlueNonterminal n>`) = nonterminal("<n.name >");
GExpr mapS((GlueSymbol)`<GlueTerminal t>`) = terminal("<t.name>");
GExpr mapS((GlueSymbol)`(<{GlueDefinition "|"}+ ds>)`) = mapIDs(ds);
GExpr mapIDs({GlueDefinition "|"}+ ds)
{
	GExprList es = [mapE(d) | GlueDefinition d <- ds];
	return (len(es)==1) ? es[0] : choice(es);
}
public void main(list[str] args)
	= (len(args)==2)
	? writeBGF(mapG(parse(#GlueGrammar, trim(readFile(|cwd:///|+args[0])))), |cwd:///|+args[1])
	: println("Please provide two arguments: input and output.");
