@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI}
@contributor{Generated by meta::Glue, do not edit manually!}
module grammarlab::language::glue::MapXBGF2A

import grammarlab::language::glue::Abstract;
import grammarlab::language::glue::Transformations;
import grammarlab::language::glue::Productions;
import grammarlab::language::glue::Scope;
import grammarlab::language::Grammar;
import grammarlab::language::XScope;
import grammarlab::language::X;
import util::Math;
import Boolean;

GLUEA glimplode((GlueCommand)`<GlueKabridge _> <GlueProduction p> .`) = xbgf(abridge(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKabstractize _> <GlueProduction p> .`) = xbgf(abstractize(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKaddC _> <GlueProduction p> .`) = xbgf(addC(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKaddH _> <GlueProduction p> .`) = xbgf(addH(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKaddV _> <GlueProduction p> .`) = xbgf(addV(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKanonymize _> <GlueProduction p> .`) = xbgf(anonymize(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKappear _> <GlueProduction p> .`) = xbgf(appear(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKbypass _> .`) = xbgf(bypass());
GLUEA glimplode((GlueCommand)`<GlueKchain _> <GlueProduction p> .`) = xbgf(chain(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKclone _> <GlueNonterminal x> <GlueKwTo _> <GlueNonterminal y> <GlueScope w> .`) = xbgf(clone("<x>","<y>",mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKconcatT _> <GlueTerminal+ xs> <GlueKwInto _> <GlueTerminal y> <GlueScope w> .`) = xbgf(concatT(["<each>" | each <- xs],"<y>",mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKconcretize _> <GlueProduction p> .`) = xbgf(concretize(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKdeanonymize _> <GlueProduction p> .`) = xbgf(deanonymize(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKdefine _> <GlueProduction+ ps> .`) = xbgf(define(mapPs(ps)));
GLUEA glimplode((GlueCommand)`<GlueKdesignate _> <GlueProduction p> .`) = xbgf(designate(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKdetour _> <GlueProduction p> .`) = xbgf(detour(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKdeyaccify _> <GlueNonterminal x> .`) = xbgf(deyaccify("<x>"));
GLUEA glimplode((GlueCommand)`<GlueKdisappear _> <GlueProduction p> .`) = xbgf(disappear(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKdistribute _> <GlueScope w> .`) = xbgf(distribute(mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKdowngrade _> <GlueProduction p1> <GlueKwTo _> <GlueProduction p2> .`) = xbgf(downgrade(mapP(p1),mapP(p2)));
GLUEA glimplode((GlueCommand)`<GlueKeliminate _> <GlueNonterminal x> .`) = xbgf(eliminate("<x>"));
GLUEA glimplode((GlueCommand)`<GlueKequate _> <GlueNonterminal x> <GlueKwWith _> <GlueNonterminal y> .`) = xbgf(equate("<x>","<y>"));
GLUEA glimplode((GlueCommand)`<GlueKextract _> <GlueProduction p> <GlueScope w> .`) = xbgf(extract(mapP(p),mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKfactor _> <GlueSymbol e1> <GlueKwTo _> <GlueSymbol e2> <GlueScope w> .`) = xbgf(factor(mapS(e1),mapS(e2),mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKfold _> <GlueNonterminal x> <GlueScope w> .`) = xbgf(fold("<x>",mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKhorizontal _> <GlueScope w> .`) = xbgf(horizontal(mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKimportG _> <GlueProduction+ ps> .`) = xbgf(importG(mapPs(ps)));
GLUEA glimplode((GlueCommand)`<GlueKinject _> <GlueProduction p> .`) = xbgf(inject(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKinline _> <GlueNonterminal x> .`) = xbgf(inline("<x>"));
GLUEA glimplode((GlueCommand)`<GlueKintroduce _> <GlueProduction+ ps> .`) = xbgf(introduce(mapPs(ps)));
GLUEA glimplode((GlueCommand)`<GlueKiterate _> <GlueProduction p> .`) = xbgf(iterate(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKlassoc _> <GlueProduction p> .`) = xbgf(lassoc(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKmassage _> <GlueSymbol e1> <GlueKwTo _> <GlueSymbol e2> <GlueScope w> .`) = xbgf(massage(mapS(e1),mapS(e2),mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKnarrow _> <GlueSymbol e1> <GlueKwTo _> <GlueSymbol e2> <GlueScope w> .`) = xbgf(narrow(mapS(e1),mapS(e2),mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKpermute _> <GlueProduction p> .`) = xbgf(permute(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKproject _> <GlueProduction p> .`) = xbgf(project(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKrassoc _> <GlueProduction p> .`) = xbgf(rassoc(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKredefine _> <GlueProduction+ ps> .`) = xbgf(redefine(mapPs(ps)));
GLUEA glimplode((GlueCommand)`<GlueKremoveH _> <GlueProduction p> .`) = xbgf(removeH(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKremoveV _> <GlueProduction p> .`) = xbgf(removeV(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKrenameL _> <GlueLabel x> <GlueKwTo _> <GlueLabel y> .`) = xbgf(renameL("<x>","<y>"));
GLUEA glimplode((GlueCommand)`<GlueKrenameN _> <GlueNonterminal x> <GlueKwTo _> <GlueNonterminal y> .`) = xbgf(renameN("<x>","<y>"));
GLUEA glimplode((GlueCommand)`<GlueKrenameS _> <GlueMark x> <GlueMark y> <GlueScope w> .`) = xbgf(renameS("<x>","<y>",mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKrenameT _> <GlueTerminal x> <GlueKwTo _> <GlueTerminal y> .`) = xbgf(renameT("<x>","<y>"));
GLUEA glimplode((GlueCommand)`<GlueKreplace _> <GlueSymbol e1> <GlueKwWith _> <GlueSymbol e2> <GlueScope w> .`) = xbgf(replace(mapS(e1),mapS(e2),mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKreroot _> <GlueKwTo _> <GlueNonterminal+ xs> .`) = xbgf(reroot(["<each>" | each <- xs]));
GLUEA glimplode((GlueCommand)`<GlueKsplitN _> <GlueNonterminal x> <GlueKwInto _> <GlueProduction+ ps> <GlueScope w> .`) = xbgf(splitN("<x>",mapPs(ps),mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKsplitT _> <GlueTerminal x> <GlueKwInto _> <GlueTerminal+ ys> <GlueScope w> .`) = xbgf(splitT("<x>",["<each>" | each <- ys],mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKunchain _> <GlueProduction p> .`) = xbgf(unchain(mapP(p)));
GLUEA glimplode((GlueCommand)`<GlueKundefine _> <GlueNonterminal+ xs> .`) = xbgf(undefine(["<each>" | each <- xs]));
GLUEA glimplode((GlueCommand)`<GlueKundefineNew _> <GlueNonterminal x> .`) = xbgf(undefineNew("<x>"));
GLUEA glimplode((GlueCommand)`<GlueKunfold _> <GlueNonterminal x> <GlueScope w> .`) = xbgf(unfold("<x>",mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKunite _> <GlueNonterminal x> <GlueKwWith _> <GlueNonterminal y> .`) = xbgf(unite("<x>","<y>"));
GLUEA glimplode((GlueCommand)`<GlueKunlabel _> [ <GlueLabel x> ] .`) = xbgf(unlabel("<x>"));
GLUEA glimplode((GlueCommand)`<GlueKupgrade _> <GlueProduction p1> <GlueKwTo _> <GlueProduction p2> .`) = xbgf(upgrade(mapP(p1),mapP(p2)));
GLUEA glimplode((GlueCommand)`<GlueKvertical _> <GlueScope w> .`) = xbgf(vertical(mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKwiden _> <GlueSymbol e1> <GlueKwTo _> <GlueSymbol e2> <GlueScope w> .`) = xbgf(widen(mapS(e1),mapS(e2),mapScope(w)));
GLUEA glimplode((GlueCommand)`<GlueKyaccify _> <GlueProduction+ ps> .`) = xbgf(yaccify(mapPs(ps)));