@contributor{Vadim Zaytsev - vadim@grammarware.net - SWAT, CWI}
module grammarlab::language::Micro

alias MicroGrammar = map[str,MicroClassify];
alias MicroClassify = set[Micropattern];
data Micropattern
	// Metasyntax
	= containsStar()
	| containsPlus()
	| containsOptional()
	| containsEpsilon()
	| containsFailure()
	| containsUniversal()
	| containsInteger()
	| containsString()
	| containsBoolean()
	| containsSelector()
	| containsLabel()
	| containsMark()
	| containsSequence()
	| containsDisjunction()
	| containsConjunction()
	| containsNegation()
	| containsSLStar()
	| containsSLPlus()
	| containsTerminal() // not abstractSyntax
	| containsNonterminal() // not leaf
	| abstractSyntax()
	// Global
	| top()
	| bottom()
	| leaf()
	| root()
	| multiroot()
	// Structure
	| disallowed()
	| singleton()
	| horizontal()
	| vertical()
	| zigzag()
	// Sugar
	| fakeSL()
	| fakeSLStar()
	| fakeSLPlus()
	| exprMidLayer()
	| exprLowLayer()
	| yaccPlusLeft()
	| yaccPlusRight()
	| yaccStarLeft()
	| yaccStarRight()
	// Naming
	| camelCase()
	| mixedCase()
	| lowerCase()
	| upperCase()
	| miltiword()
	| camelCaseLax()
	| mixedCaseLax()
	| lowerCaseLax()
	| upperCaseLax()
	| miltiwordLax()
	// Concrete
	| preterminal()
	| keyword()
	| keywords()
	| operator()
	| operators()
	| operatorsMixed()
	| words()
	| tokens()
	| modifiers()
	| range()
	| literalNumeric()
	| literalSimple()
	| literalFirstRest()
	| emptyStatement()
	// Normal
	| chomskyNormalForm()
	| greibachNormalForm()
	| abstractNormalForm()
	// Folding
	| justEmpty()
	| justFailure() // disallowed or bottom?
	| justOptional()
	| justPlus()
	| justStar()
	| justSLPlus()
	| justSLStar()
	| justChains()
	| justOneChain()
	| reflexiveChain()
	| chainOrTerminal()
	| chainsAndTerminals()
	// Template
	| constructor()
	| bracket()
	| bracketSelf()
	| bracketFakeSLStar()
	| bracketFakeSLPlus()
	| bracketOptional()
	| bracketPlus()
	| bracketStar()
	| bracketSLStar()
	| bracketSLPlus()
	| delimited()
	| distinguished()
	| elementAccess()
	| pureSequence()
;
